{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/common/avatar-1.png","path":"images/common/avatar-1.png","modified":0,"renderable":0},{"_id":"source/images/common/favicon-142.png","path":"images/common/favicon-142.png","modified":0,"renderable":0},{"_id":"source/images/common/favicon-20.png","path":"images/common/favicon-20.png","modified":0,"renderable":0},{"_id":"source/images/common/favicon-50.png","path":"images/common/favicon-50.png","modified":0,"renderable":0},{"_id":"source/images/posts/animateNumber_01.png","path":"images/posts/animateNumber_01.png","modified":0,"renderable":0},{"_id":"source/images/posts/desktop-notification1.png","path":"images/posts/desktop-notification1.png","modified":0,"renderable":0},{"_id":"source/images/posts/desktop-notification2.png","path":"images/posts/desktop-notification2.png","modified":0,"renderable":0},{"_id":"source/images/posts/notify-jianrong-mobile.png","path":"images/posts/notify-jianrong-mobile.png","modified":0,"renderable":0},{"_id":"source/images/posts/notify-jianrong-pc.png","path":"images/posts/notify-jianrong-pc.png","modified":0,"renderable":0},{"_id":"source/images/posts/windowLocation.png","path":"images/posts/windowLocation.png","modified":0,"renderable":0},{"_id":"source/images/reward/wechat-reward-image.png","path":"images/reward/wechat-reward-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatarxiaoyu.png","path":"uploads/avatarxiaoyu.png","modified":0,"renderable":1},{"_id":"source/images/posts/vue-datepicker2.gif","path":"images/posts/vue-datepicker2.gif","modified":0,"renderable":0},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1},{"_id":"source/images/posts/datepicker.gif","path":"images/posts/datepicker.gif","modified":0,"renderable":0},{"_id":"source/images/reward/alipay-reward-image.png","path":"images/reward/alipay-reward-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fastclick/LICENSE","path":"libs/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fastclick/README.md","path":"libs/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fastclick/bower.json","path":"libs/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/bower.json","path":"libs/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/HELP-US-OUT.txt","path":"libs/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery_lazyload/CONTRIBUTING.md","path":"libs/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery_lazyload/README.md","path":"libs/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery_lazyload/bower.json","path":"libs/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery_lazyload/jquery.lazyload.js","path":"libs/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery_lazyload/jquery.scrollstop.js","path":"libs/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/velocity/bower.json","path":"libs/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/libs/velocity/velocity.min.js","path":"libs/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/velocity/velocity.ui.js","path":"libs/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/velocity/velocity.ui.min.js","path":"libs/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/posts/post-user-bg.jpg","path":"images/posts/post-user-bg.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/jquery/index.js","path":"libs/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/blank.gif","path":"libs/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/fancybox_loading.gif","path":"libs/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/fancybox_loading@2x.gif","path":"libs/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/fancybox_overlay.png","path":"libs/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/fancybox_sprite.png","path":"libs/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/fancybox_sprite@2x.png","path":"libs/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.css","path":"libs/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.js","path":"libs/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.pack.js","path":"libs/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fastclick/lib/fastclick.js","path":"libs/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fastclick/lib/fastclick.min.js","path":"libs/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.css.map","path":"libs/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/libs/ua-parser-js/dist/ua-parser.min.js","path":"libs/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/ua-parser-js/dist/ua-parser.pack.js","path":"libs/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/images/common/avatar.png","path":"images/common/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/libs/velocity/velocity.js","path":"libs/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"libs/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/fancybox_buttons.png","path":"libs/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"libs/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-media.js","path":"libs/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"libs/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"libs/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/common/avatar-2.png","path":"images/common/avatar-2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/posts/navLocation.png","path":"images/posts/navLocation.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/love-min.js","path":"js/src/love-min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d1754c046b1f99eed7f118d814ba149a93225646","modified":1532915733657},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1532918470929},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1532918470931},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1532918470933},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1532918470943},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1532918470944},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1532918470946},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1532918470948},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1532918470950},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1532918470952},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1532918470953},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1532918470955},{"_id":"themes/next/README.md","hash":"631d68e9cbced2f11cd976bf883b7d8b08b9b365","modified":1532918470957},{"_id":"themes/next/_config.yml","hash":"5e46acc569cec4911c4c7fb37af213d170c0062a","modified":1541041566847},{"_id":"themes/next/bower.json","hash":"47471a8f13528dc4052b746db5b4be2375682173","modified":1532918470960},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1532918470962},{"_id":"themes/next/package.json","hash":"39370e2aadf1f9a7c105edff064c6e47682b3932","modified":1532918471162},{"_id":"source/favicon.ico","hash":"45fb5672c8e63be8f6e0180ece0e968aba806624","modified":1536996580879},{"_id":"source/_drafts/article-to-do-list.md","hash":"33ab7407fdf502974e6cd4483aabead04b65905a","modified":1532915733657},{"_id":"source/_drafts/earn-to-do-list.md","hash":"7167ecc0b6e54a6eff8cb36281457bfe150848fd","modified":1532915733658},{"_id":"source/_drafts/fascinated-method.md","hash":"a22100436451eb12df11a27d1ed298fd37b74929","modified":1532915733658},{"_id":"source/_drafts/hexo-tips.md","hash":"b95bec79106bb841c86eb1cc713d9c3113c66d17","modified":1532915733659},{"_id":"source/_drafts/html-decode.md","hash":"c8513d085bab1365bdb0c95615680cfe5779bf21","modified":1532915733660},{"_id":"source/_drafts/learn-vue.md","hash":"2d740ea06ae4d455e4f72d0b9356d23f7e06f3f2","modified":1532915733660},{"_id":"source/_drafts/learn-vueee.md","hash":"2fe99d38ea156e4aeb5124679b18756253e22cb6","modified":1532915733661},{"_id":"source/_drafts/npm.md","hash":"637df4a90408287de5568c66b4c45a0f5be3d801","modified":1532915733661},{"_id":"source/_drafts/porject-to-do-list.md","hash":"4f182a6427b4f2a203a447ebeee316cd7230de1a","modified":1532915733661},{"_id":"source/_drafts/post_to_do_list.md","hash":"f8ee96a6a23058fbf7681533bf7f8c5163ce6a36","modified":1532915733661},{"_id":"source/_drafts/string-escape-htmlDOM.md","hash":"8fb64b27259f22fd36b368f3fb07a697c8902861","modified":1532915733662},{"_id":"source/_drafts/switch-number-to-chinese.md","hash":"6b3592fa956b7be6358abe82622976efb2be9157","modified":1532915733662},{"_id":"source/_drafts/translate-list.md","hash":"389b62490d00d5d2803052668c75bf5692926f84","modified":1532915733662},{"_id":"source/_drafts/useful-tools-in-windows.md","hash":"275c8689bd39f6cb735df10f82542cba054d893a","modified":1532915733663},{"_id":"source/_drafts/vue-router-generate-menus.md","hash":"1ad9f40ec60444e7ac40087f7eeed902b97112f0","modified":1532915733663},{"_id":"source/_drafts/zhangzhishi.md","hash":"0af1e8fa71ee46a328a92cc4d030b57d7e8c14a6","modified":1532915733663},{"_id":"source/_posts/Mobile-terminal-adapter.md","hash":"385213dbfc3fae36722e68ff2bc83f3f0ee35f1c","modified":1532915733664},{"_id":"source/_posts/animateNumber.md","hash":"27ad2a439face672be90fff5995762a8e1c74e6d","modified":1532915733664},{"_id":"source/_posts/babun-casue-ssh-key-bad.md","hash":"3f98ff161512cfe9eeede0de3534aab8e7ed3b61","modified":1541055097896},{"_id":"source/_posts/babun.md","hash":"1cc7a223f1531fb82af8ac15f15b5133ad9f7801","modified":1541055066346},{"_id":"source/_posts/desktop-notification.md","hash":"6040b30ce70ffbc5a6c21dcf6cb0353dd3c4a826","modified":1532915733665},{"_id":"source/_posts/fed-test.md","hash":"3b2bd6a6bed7e8f0341ad2e1047190c4c540a81b","modified":1541057338716},{"_id":"source/_posts/for-in-and-for-of.md","hash":"414fec3c38265431f1142493f94eafcdef0e4aec","modified":1532915733666},{"_id":"source/_posts/get-url-values.md","hash":"87baef383e7490aaf7e9917c196e5c9c8d94fb40","modified":1532915733666},{"_id":"source/_posts/grammar-loop.md","hash":"00c24253742e27ead78934e3d3c616dabf271d99","modified":1532915733667},{"_id":"source/_posts/how-to-make-a-kalendar.md","hash":"56f704de51e5f2ea327f71aa39fda08d849f8397","modified":1532915733667},{"_id":"source/_posts/javascript-array-method.md","hash":"50324fcca8520699b820acea4f09c5b2f9e98f56","modified":1532915733667},{"_id":"source/_posts/javascript-sinpats.md","hash":"0735a0cb9eeac53d9bf5a032b33ca229a1f997f2","modified":1532915733668},{"_id":"source/_posts/javascript-type.md","hash":"2ec67eecf87127b5d11638c031ff49d30c930fb2","modified":1532915733668},{"_id":"source/_posts/learn-git-1.md","hash":"a7c4892d4a6bfaca40a574ca42faabd8d5ac0dc5","modified":1541055200275},{"_id":"source/_posts/learn-git-2.md","hash":"dd46bc6f02597a1dbf2497ac3c40515c77331c87","modified":1541055204046},{"_id":"source/_posts/learn-git-3.md","hash":"a093dfcb03e6e6e2cd381575bbb3a1dea231e749","modified":1541055210957},{"_id":"source/_posts/learn-git-hexo-2.md","hash":"e81cfcc4c9d34c2da96aa85903e8ffeffc39c3bf","modified":1541062868260},{"_id":"source/_posts/learn-git-hexo-1.md","hash":"17224de6279abc48034e17fe7403fcdeca6cb678","modified":1541060499473},{"_id":"source/_posts/markdown-font.md","hash":"587a80bf971014c078f07a7b1af2b5494a411151","modified":1541055264748},{"_id":"source/_posts/mocha+chai.md","hash":"591ebdd3cbce25eb76939fedff6b7680e85a0c6e","modified":1541057399948},{"_id":"source/_posts/node-express-start.md","hash":"9e35434be7fec1bfcbd9b9986a150037a2f8c895","modified":1541043138946},{"_id":"source/_posts/nvm-node-version-manager.md","hash":"12e20795836f61df7e9a55fedaf3a72fc3f18180","modified":1541055013524},{"_id":"source/_posts/react-learn-intro-1.md","hash":"1b54945aee92cd8aca4ba3bbe6ca7c7d53241cac","modified":1541054858309},{"_id":"source/_posts/react-learn-intro-2.md","hash":"bf8b53abf85bafb7fe9bf525cc738289b60b2bde","modified":1541054967028},{"_id":"source/_posts/regex-to-something.md","hash":"be5d2771375c218f9d4f8fc78e2f1e8b151882d6","modified":1541055360569},{"_id":"source/_posts/regex.md","hash":"ecc71f7991aa1a093544e09780e8029c4f20f9cf","modified":1541055387192},{"_id":"source/_posts/use-gulp+webpack-to-bulid-resource.md","hash":"d74d36e269b5665feaff01481fc5d0ddc5795fef","modified":1541055167807},{"_id":"source/_posts/visibilitychange.md","hash":"895d6032825d9028fe54f581c9841cd62d78d038","modified":1532915733674},{"_id":"source/_posts/vscode-plug-in.md","hash":"6b9832e8c63c819a7bd460122248d8d817f66e9d","modified":1541042970175},{"_id":"source/_posts/vscode-shortcut-key.md","hash":"9afc76b55de31bee41002a9ba3ca379669dd7373","modified":1541051506889},{"_id":"source/_posts/vue-datapicker.md","hash":"9698d9a2b9586e7e26741e1a32acf9f81eb938a9","modified":1540976263768},{"_id":"source/_posts/vue-learn-1.md","hash":"f03d642c8d7f223854d3b4d75dbc73da4d392b12","modified":1532915733675},{"_id":"source/_posts/vue-learn-2.md","hash":"2dc1b25b3420085aa83b92aa72711c55c3f1f99c","modified":1537145792600},{"_id":"source/_posts/vue-style-scoped.md","hash":"c7f5009eec6ce2a56803bea16524234af7da1d70","modified":1541056887442},{"_id":"source/_posts/wxprogram-image.md","hash":"af33e840751a0b5916a2cfed3da304e3c2e924d5","modified":1541057412027},{"_id":"source/_posts/wxpromise-config.md","hash":"0f831d332680fab2be400b9dee619f98d1944ef9","modified":1541057454000},{"_id":"source/_posts/wxpromise-element-image.md","hash":"070ca9b118d2d1004f0eecfb778f05568e4b9e7c","modified":1541042300981},{"_id":"source/_posts/wxpromise-element.md","hash":"720bfaa91877168ba65fd8de6edfc033ccfb6770","modified":1541057420484},{"_id":"source/_posts/wxpromise-error.md","hash":"55252f2ca44e0e1b137156765c7ca8fb95b98214","modified":1541057464204},{"_id":"source/_posts/wxpromise-grammar.md","hash":"73c4bf810187997b3bf06bb28df8109e7bc9d118","modified":1541041938730},{"_id":"source/_posts/wxpromise-style.md","hash":"8b208682278a9eddf126cdb9998f96ef2f245cd5","modified":1541057467050},{"_id":"source/_posts/wxpromise-wxml.md","hash":"df55fdea1334e13baca192ae1d85fc5c1d46230e","modified":1541057488798},{"_id":"source/categories/index.md","hash":"c201a497a130a000c92bd5de64de2accb5de62f4","modified":1532915733678},{"_id":"source/tags/index.md","hash":"f25e48e743d2235e95f72d4c89a3838a6316d27f","modified":1532915733704},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1532918470936},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1532918470938},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1532918470939},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1532918470941},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1532918470965},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1532918470967},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1532918470969},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1532918470970},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1532918470972},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1532918470974},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1532918470976},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1532918470978},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1532918470980},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1532918470982},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1532918470983},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1532918470985},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1532918470986},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3d17edea05d0704c9d465a2b056ebd701eb5ae3f","modified":1541041253868},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1532918470989},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1532918470991},{"_id":"themes/next/layout/_layout.swig","hash":"470848d376f985f3b8ae19377844e8a8b4a91db0","modified":1541063551808},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1532918471152},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1532918471153},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1532918471154},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1532918471156},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1532918471157},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1532918471158},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1532918471160},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1532918471164},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1532918471166},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1532918472022},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1532918472026},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1532918472029},{"_id":"source/images/avatar.jpg","hash":"ad0811fa114c0a312f7d9352ff794b3a4bf8ae8c","modified":1532915733682},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532918471445},{"_id":"source/images/common/avatar-1.png","hash":"d3c77a5b7755342ceac8bf062d22ffdedbdabfe6","modified":1532915733683},{"_id":"source/images/common/favicon-142.png","hash":"ed8ba77f16319c6641de252c2665a9c0f352043d","modified":1532915733689},{"_id":"source/images/common/favicon-20.png","hash":"8d2287f1e18057e97c3ee9b02bfacd2e4ec07a24","modified":1532915733690},{"_id":"source/images/common/favicon-50.png","hash":"055daed7fbd22654c6b7bca26c173215a15d46e5","modified":1532915733690},{"_id":"source/images/posts/animateNumber_01.png","hash":"fcd395a0d3b725559b1035a916f456d046a52945","modified":1532915733690},{"_id":"source/images/posts/desktop-notification1.png","hash":"5744dc8ed8c67657a468d15f1d20e46afdb548f9","modified":1532915733692},{"_id":"source/images/posts/desktop-notification2.png","hash":"5e1361b7faf63a32dd8f7a42da52c9e2cc55c941","modified":1532915733693},{"_id":"source/images/posts/notify-jianrong-mobile.png","hash":"7387375822ebd2a0d78252e8b3ef26e0a28e85fa","modified":1532915733697},{"_id":"source/images/posts/notify-jianrong-pc.png","hash":"41c9dda3eb58d49c6dd71a7ef72a234115adda83","modified":1532915733697},{"_id":"source/images/posts/windowLocation.png","hash":"16e0755687ddde8b673f8f583dc7f1b5d4472441","modified":1532915733701},{"_id":"source/images/reward/wechat-reward-image.png","hash":"20bd65eba89be9a1e477477799b2ce34b4a154bc","modified":1532915733704},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532918470995},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532918470998},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"40dc9d97083271caa826e6562b7ceb8763f55b58","modified":1532918471003},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1532918471005},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"e03ee1235644e8013d15015d01756da23d1155f6","modified":1532918471007},{"_id":"themes/next/layout/_macro/post.swig","hash":"6acaf186b3319586cb64b47d9c3cea36fb04e639","modified":1540976345612},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1532918471012},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b9f9959225876fb56fb3fba96306d19396e704d4","modified":1532918471014},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1532918471016},{"_id":"themes/next/layout/_partials/comments.swig","hash":"de45e77e7d52cf317129b7d21415a3002b95b94e","modified":1532918471018},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c09d80dfff8a5fa20ed1449d8e53cb84709de645","modified":1540978411887},{"_id":"themes/next/layout/_partials/head.swig","hash":"444866d38a1ea2cf27ee1cfa3994ffcff6f58c41","modified":1541063087319},{"_id":"themes/next/layout/_partials/header.swig","hash":"36b0a208bae8d9b25b816eb07f4cf2c2fcde0e05","modified":1532918471028},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1532918471029},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1532918471031},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1532918471033},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1532918471053},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1532918471055},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1532918471071},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1532918471122},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1532918471124},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1532918471125},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1532918471127},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1532918471130},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1532918471134},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1532918471136},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1532918471169},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1532918471171},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1532918471172},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1532918471174},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1532918471177},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1532918471175},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1532918471179},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1532918471182},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1532918471180},{"_id":"themes/next/source/css/main.styl","hash":"bbd1b81904df24cd3c4866c5c611849a441a36a5","modified":1532918471443},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1532918471448},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532918471450},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532918471451},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1532918471454},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1532918471456},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1532918471457},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1532918471459},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1532918471452},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1532918471461},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1532918471462},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532918471464},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532918471466},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1532918471469},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532918471467},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532918471470},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1532918471472},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1532918471473},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532918471475},{"_id":"themes/next/source/uploads/avatarxiaoyu.png","hash":"e455a32689e469c0179ea4ca5c1802785197bbaa","modified":1532918472020},{"_id":"source/images/posts/vue-datepicker2.gif","hash":"1f7e20da1f520a51bba41249a99f9f7e853a620e","modified":1532915733700},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532918471063},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532918471066},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540972745914},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532918471436},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540972745922},{"_id":"themes/next/source/uploads/avatar.png","hash":"45fb5672c8e63be8f6e0180ece0e968aba806624","modified":1536996580879},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540972745915},{"_id":"source/images/posts/datepicker.gif","hash":"3e82f355c53f36027cd9cef916dc888bedf9ff7e","modified":1532915733692},{"_id":"source/images/reward/alipay-reward-image.png","hash":"15d01b0b00ebfdcff5a2ec5485daac750e01e85c","modified":1532915733703},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1532918471024},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1532918471026},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1532918471035},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1532918471037},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1532918471039},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1532918471043},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1532918471046},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1532918471048},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1532918471050},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1532918471058},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532918471062},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532918471069},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1532918471075},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1532918471078},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1532918471079},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1532918471081},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1532918471082},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1532918471084},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1532918471086},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1532918471087},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1532918471094},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1532918471096},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1532918471098},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1532918471099},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1532918471100},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1532918471104},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1532918471105},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1532918471107},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1532918471108},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1532918471110},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1532918471112},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1532918471117},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b492d528a7d48216d4548011000fced2f4a538d","modified":1532918471119},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1532918471121},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1532918471143},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1532918471146},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1532918471147},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1532918471150},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"bbfc0f3c5d7930585d15c3ae732a3a96ea812dec","modified":1532918471372},{"_id":"themes/next/source/css/_custom/variable.styl","hash":"543c6521eea2a44c37d445e4674dd58d1ef2eb05","modified":1532918471374},{"_id":"themes/next/source/css/_custom/variables.styl","hash":"fbe79bd373bbd05b9a9677e898ef1f8a738a3151","modified":1532918471375},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1540972745914},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1540972745920},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1540972745922},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1532918471434},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1532918471435},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1532918471438},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e23987344cf2c9de39e2c62d70a82739ddb40f34","modified":1532918471440},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"7a7caac709d182816bcaf85b685b5a60dde6a5e3","modified":1540973498164},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1532918471478},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1532918471481},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1532918471482},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1532918471485},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1532918471484},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1532918471487},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1532918471490},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1532918471489},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1532918471495},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1532918471496},{"_id":"themes/next/source/js/src/utils.js","hash":"b7ddc240208d57596a67c78a04a11b0f0bdecc97","modified":1532918471498},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1532918471520},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1532918471527},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1532918471530},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1532918471585},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1532918471591},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1532918471595},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1532918471597},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1532918471698},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532918471703},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532918471706},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1532918471711},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532918471714},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1532918471753},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1532918471758},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1532918471762},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1532918471764},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1532918471766},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1532918471768},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1532918471769},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1532918471772},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1532918471774},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1532918471777},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1532918471780},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1532918471782},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1532918471784},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1532918471786},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1532918471788},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1532918471789},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1532918471791},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1532918471796},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1532918471798},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1532918471800},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1532918471801},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1532918471803},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1532918471805},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1532918471806},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1532918471810},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1532918471812},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1532918471814},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1532918471832},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1532918471830},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532918471837},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532918471839},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532918471840},{"_id":"themes/next/source/libs/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1532918471844},{"_id":"themes/next/source/libs/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1532918471846},{"_id":"themes/next/source/libs/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1532918471928},{"_id":"themes/next/source/libs/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1532918471931},{"_id":"themes/next/source/libs/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1532918471935},{"_id":"themes/next/source/libs/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1532918471938},{"_id":"themes/next/source/libs/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1532918471950},{"_id":"themes/next/source/libs/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532918471951},{"_id":"themes/next/source/libs/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532918471952},{"_id":"themes/next/source/libs/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1532918471951},{"_id":"themes/next/source/libs/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1532918471978},{"_id":"themes/next/source/libs/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532918471950},{"_id":"themes/next/source/libs/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1532918471983},{"_id":"themes/next/source/libs/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1532918471985},{"_id":"themes/next/source/libs/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1532918471987},{"_id":"themes/next/source/libs/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1532918471988},{"_id":"themes/next/source/libs/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1532918471990},{"_id":"themes/next/source/libs/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1532918471999},{"_id":"themes/next/source/libs/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1532918472014},{"_id":"themes/next/source/libs/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1532918472014},{"_id":"themes/next/source/libs/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532918472017},{"_id":"themes/next/source/libs/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532918472017},{"_id":"themes/next/source/libs/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532918472018},{"_id":"source/images/posts/post-user-bg.jpg","hash":"1540bd81789d0f3d5522a09fdaa9da015cb378f9","modified":1532915733699},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532918471755},{"_id":"themes/next/source/libs/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532918471981},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1532918471140},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1532918471142},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1532918471359},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1532918471188},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1532918471190},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1532918471191},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1532918471193},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1532918471196},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"3ba17b20325983792e6ffa2fcdf7435eaa9f849d","modified":1532918471267},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1532918471320},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1b6a2f28eac3f63edaee31c8bfaea073ef73ae68","modified":1532918471361},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1532918471362},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1532918471364},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1532918471366},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1532918471368},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1532918471370},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1540972745926},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1540972745926},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1540972745927},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1540972745927},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1540972745928},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1540972745928},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1540972745929},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1540972745925},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1540972745931},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1540972745931},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1540972745934},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1540972745935},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1540972745936},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1540972745949},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1532918471421},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"37fadb96eacfa1e43e3589d023691cb2ba11e081","modified":1540972745950},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1540972745951},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1540972745953},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"757b18b311f3433c334abaa16fdd80666ea3ffae","modified":1540972745954},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1540972745956},{"_id":"themes/next/source/css/_stt/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1532918471388},{"_id":"themes/next/source/css/_stt/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1532918471390},{"_id":"themes/next/source/css/_stt/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1532918471392},{"_id":"themes/next/source/css/_stt/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1532918471393},{"_id":"themes/next/source/css/_stt/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1532918471395},{"_id":"themes/next/source/css/_stt/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1532918471397},{"_id":"themes/next/source/css/_stt/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532918471398},{"_id":"themes/next/source/css/_stt/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1532918471400},{"_id":"themes/next/source/css/_stt/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1532918471408},{"_id":"themes/next/source/css/_stt/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1532918471410},{"_id":"themes/next/source/css/_stt/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1532918471412},{"_id":"themes/next/source/css/_stt/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532918471413},{"_id":"themes/next/source/css/_stt/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1532918471415},{"_id":"themes/next/source/css/_stt/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1532918471420},{"_id":"themes/next/source/css/_stt/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1532918471421},{"_id":"themes/next/source/css/_stt/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1532918471423},{"_id":"themes/next/source/css/_stt/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1532918471425},{"_id":"themes/next/source/css/_stt/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1532918471426},{"_id":"themes/next/source/css/_stt/Pisces/_sidebar.styl","hash":"30561ed60fc64f3e4ce85143bdb55faa814743a6","modified":1532918471427},{"_id":"themes/next/source/css/_stt/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1532918471430},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1532918471492},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1532918471511},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1532918471516},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1532918471518},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1532918471601},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532918471605},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532918471533},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532918471535},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532918471536},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532918471538},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532918471540},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532918471541},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1532918471573},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1532918471578},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1532918471581},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1532918471718},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532918471723},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1532918471725},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1532918471823},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1532918471827},{"_id":"themes/next/source/libs/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532918471848},{"_id":"themes/next/source/libs/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532918471850},{"_id":"themes/next/source/libs/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532918471851},{"_id":"themes/next/source/libs/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532918471854},{"_id":"themes/next/source/libs/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532918471856},{"_id":"themes/next/source/libs/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532918471869},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1532918471919},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1532918471923},{"_id":"themes/next/source/libs/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1532918471926},{"_id":"themes/next/source/libs/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1532918471943},{"_id":"themes/next/source/libs/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532918471949},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1532918471953},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532918471954},{"_id":"themes/next/source/libs/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1532918471955},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1532918471975},{"_id":"themes/next/source/libs/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1532918472010},{"_id":"themes/next/source/libs/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1532918472013},{"_id":"source/images/common/avatar.png","hash":"6105fd792ecfdc16275523eb691709bb5f060707","modified":1532915733689},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1532918471514},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532918471747},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532918471750},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532918471835},{"_id":"themes/next/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1532918471961},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1532918471964},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1532918471973},{"_id":"themes/next/source/libs/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532918472016},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1532918471199},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1532918471201},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1532918471206},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1532918471209},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1532918471213},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1532918471224},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1532918471230},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e54bb2a3db6a4a6a953dd59118a8615e38d9c0ee","modified":1532918471245},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1532918471250},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1532918471253},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1532918471256},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1532918471259},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1532918471261},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1532918471263},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1532918471270},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1532918471272},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1532918471274},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"cd5101fdf026eda371a3cb3730c2a4b351cea927","modified":1532918471276},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1532918471281},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1532918471279},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7c726664065398c6c00855a80348f1b50b508913","modified":1532918471283},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1532918471285},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1532918471286},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1532918471288},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1532918471290},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1532918471293},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1532918471294},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1532918471296},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1532918471298},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1532918471300},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1532918471301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1532918471304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1532918471306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1532918471307},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1532918471309},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1532918471311},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1532918471312},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1532918471314},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1532918471316},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1532918471317},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1532918471319},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1532918471323},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1532918471325},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1532918471327},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1532918471328},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1532918471330},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1532918471332},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1532918471334},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1532918471335},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1532918471337},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1532918471340},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1532918471341},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1532918471343},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1532918471345},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1532918471347},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1532918471348},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1532918471350},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1532918471351},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1532918471353},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1532918471355},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1532918471356},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1540972745929},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1540972745930},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1540972745939},{"_id":"themes/next/source/css/_stt/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1532918471403},{"_id":"themes/next/source/css/_stt/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532918471405},{"_id":"themes/next/source/css/_stt/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532918471417},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1532918471503},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1532918471505},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1532918471507},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1532918471508},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1532918471510},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532918471545},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1532918471547},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1532918471555},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1532918471557},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1532918471559},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1532918471570},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532918471731},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532918471734},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532918471741},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1532918471874},{"_id":"themes/next/source/libs/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532918471872},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1532918471875},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1532918471877},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1532918471878},{"_id":"themes/next/source/libs/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1532918471915},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1532918471971},{"_id":"source/images/common/avatar-2.png","hash":"401bcdb16dd48ea95097aa04df3babf239424a07","modified":1532915733687},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1532918471525},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1532918471819},{"_id":"themes/next/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1532918471967},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1532918471737},{"_id":"source/images/posts/navLocation.png","hash":"82989a528628987ef58a300cbaa02ded68678117","modified":1532915733696},{"_id":"source/_posts/Hexo-Next主题优化.md","hash":"89b73348dbc40e5a0c6d94c4a66bfb84af07ebf7","modified":1541063562288},{"_id":"source/_posts/js-desktop-notification.md","hash":"aa8a77cb9c6257b600615cc91350782c9866acdf","modified":1541044448883},{"_id":"source/_posts/js-visibilitychange.md","hash":"6601f794b51f17873e41cb634d16b30f8d0d9f99","modified":1541044401000},{"_id":"source/_posts/wxpromise-grammar-for.md","hash":"61d3df6dfccb2f3dc3275af2e2ea5571628f4d61","modified":1541057465364},{"_id":"source/_posts/js-data-type.md","hash":"209786387321160542d0523802b29473aa04a565","modified":1541044572171},{"_id":"themes/next/source/js/src/love-min.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1541063650390},{"_id":"themes/next/source/js/src/love.js","hash":"a3900ffd56356d6281b39b3eb117ea129a4c2354","modified":1541063854860}],"Category":[{"name":"tools","_id":"cjny0swes00082kv7vcexzcme"},{"name":"javascript","_id":"cjny0swex000d2kv7i9rnz9kn"},{"name":"vue","_id":"cjny0swf6000j2kv791m30xcf"},{"name":"utils","_id":"cjny0swfe000t2kv7csj3ldqk"},{"name":"software","_id":"cjny0swfo000z2kv7fl452agn"},{"name":"H5","_id":"cjny0swg4001j2kv7yxuovy72"},{"name":"test","_id":"cjny0swg9001r2kv7s67upya1"},{"name":"tools-vscode","_id":"cjny0swgg001y2kv7mng1qdwx"},{"name":"Javascript","_id":"cjny0swgm00292kv74t7g5yg6"},{"name":"tools---git","_id":"cjny0swgr002g2kv7gpyq7hr3"},{"name":"tools---git-hexo","_id":"cjny0swh900302kv76f6epy7q"},{"name":"markdown","_id":"cjny0swhn003d2kv7kcyyhh9s"},{"name":"tools---node","_id":"cjny0swhs003j2kv7s0vwjbwo"},{"name":"react-base","_id":"cjny0swi1003t2kv7pc6bekc7"},{"name":"react-project","_id":"cjny0swi500412kv7xr9a9w7k"},{"name":"regex","_id":"cjny0swib00472kv7jgppzxs6"},{"name":"wx小程序","_id":"cjny0swif004d2kv7ofirepwg"},{"name":"项目发现bug","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swiz004w2kv7roafkhcz"},{"name":"图片","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj0004y2kv7ijhj61j3"},{"name":"for-if等语法","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj100502kv7rinajthg"},{"name":"样式","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj300572kv7nejv4o6c"},{"name":"页面配置","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj8005d2kv79ue5nnf2"},{"name":"模板和组件","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swjb005i2kv7f8lj8yg0"},{"name":"试图容器","parent":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swjd005n2kv782y3xg0r"},{"name":"工具","_id":"cjnydngff0002z8v7kpv23o6s"},{"name":"js","_id":"cjnydngfv0006z8v7qiey8xt0"},{"name":"hexo","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngfx0009z8v7i9d42842"},{"name":"特殊功能","parent":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngfx000az8v78rcuwbbq"},{"name":"web桌面通知","parent":"cjnydngfx000az8v78rcuwbbq","_id":"cjnydngfz000dz8v7zyr1v4uv"},{"name":"监测浏览器","parent":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngsw000kz8v7cvq31hlu"},{"name":"操作类","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngtc000nz8v74dw4n1er"},{"name":"测试工具","_id":"cjnydngtv000vz8v7lv6uhb7q"},{"name":"git","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngud0011z8v7a6e7l8n7"},{"name":"markdown","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngup0016z8v7eu4bgkxy"},{"name":"data","parent":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngv0001az8v7sr0j1l3l"},{"name":"nodejs","parent":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngw8001iz8v7x9dfhn5s"},{"name":"正则","_id":"cjnydngx3001nz8v74blhuigr"},{"name":"react","_id":"cjnydngxg001rz8v766ks4kg6"},{"name":"数据类型判断","parent":"cjnydngv0001az8v7sr0j1l3l","_id":"cjnydngxj001uz8v746gmle5y"},{"name":"构建工具","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh0o0025z8v7tdiejlyi"},{"name":"开发工具","parent":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh0r0028z8v71qtkw0n5"},{"name":"express","parent":"cjnydngw8001iz8v7x9dfhn5s","_id":"cjnydnh0s0029z8v7vfuq5poa"},{"name":"regex","parent":"cjnydngx3001nz8v74blhuigr","_id":"cjnydnh0u002az8v7ydqldcjy"},{"name":"vscode","parent":"cjnydnh0r0028z8v71qtkw0n5","_id":"cjnydnh15002fz8v7ma0o9oef"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 - 前端不是终点</title>\n    <style>\n        body {\n            font-family: 'Nova Flat', cursive;\n            background-color: #DFDFF7;\n            color: #666;\n        }\n\n        .pad-top {\n            padding-top: 60px;\n        }\n\n        .text-center {\n            text-align: center;\n        }\n\n        #error-link {\n            font-size: 150px;\n            padding: 10px;\n        }\n\n        .goback a {\n            display: inline-block;\n            padding: 5px;\n            color: #fff;\n            background: #8D8DE3;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"pad-top text-center\">\n            <div class=\"text-center\">\n                <h1> What have you done? </h1>\n                <h5> Now Go Back Using Below LInk</h5>\n                <span id=\"error-link\"></span>\n                <h2>! ERROR DECETED !</h2>\n            </div>\n        </div>\n        <div class=\"text-center goback\">\n            <a href=\"/\">GO TO HOME PAGE</a>\n        </div>\n    </div>\n    <!--Core JavaScript file  -->\n    <!-- <script src=\"js/jquery-1.10.2.js\"></script> -->\n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js\"></script>\n    <script>\n        function countUp(target, startVal, endVal, decimals, duration, options) {\n\n            // default options\n            this.options = options || {\n                useEasing: true, // toggle easing\n                useGrouping: true, // 1,000,000 vs 1000000\n                separator: ',', // character to use as a separator\n                decimal: '.' // character to use as a decimal\n            }\n            var lastTime = 0;\n            var vendors = ['webkit', 'moz', 'ms'];\n            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n                window.cancelAnimationFrame =\n                    window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n            }\n            if (!window.requestAnimationFrame) {\n                window.requestAnimationFrame = function (callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function () { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                }\n            }\n            if (!window.cancelAnimationFrame) {\n                window.cancelAnimationFrame = function (id) {\n                    clearTimeout(id);\n                }\n            }\n\n            var self = this;\n\n            this.d = (typeof target === 'string') ? document.getElementById(target) : target;\n            this.startVal = Number(startVal);\n            this.endVal = Number(endVal);\n            this.countDown = (this.startVal > this.endVal) ? true : false;\n            this.startTime = null;\n            this.timestamp = null;\n            this.remaining = null;\n            this.frameVal = this.startVal;\n            this.rAF = null;\n            this.decimals = Math.max(0, decimals || 0);\n            this.dec = Math.pow(10, this.decimals);\n            this.duration = duration * 1000 || 2000;\n\n            // Robert Penner's easeOutExpo\n            this.easeOutExpo = function (t, b, c, d) {\n                return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n            }\n            this.count = function (timestamp) {\n\n                if (self.startTime === null) self.startTime = timestamp;\n\n                self.timestamp = timestamp;\n\n                var progress = timestamp - self.startTime;\n                self.remaining = self.duration - progress;\n\n                // to ease or not to ease\n                if (self.options.useEasing) {\n                    if (self.countDown) {\n                        var i = self.easeOutExpo(progress, 0, self.startVal - self.endVal, self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.easeOutExpo(progress, self.startVal, self.endVal - self.startVal, self.duration);\n                    }\n                } else {\n                    if (self.countDown) {\n                        var i = (self.startVal - self.endVal) * (progress / self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);\n                    }\n                }\n\n                // decimal\n                self.frameVal = Math.round(self.frameVal * self.dec) / self.dec;\n\n                // don't go past endVal since progress can exceed duration in the last frame\n                if (self.countDown) {\n                    self.frameVal = (self.frameVal < self.endVal) ? self.endVal : self.frameVal;\n                } else {\n                    self.frameVal = (self.frameVal > self.endVal) ? self.endVal : self.frameVal;\n                }\n\n                // format and print value\n                self.d.innerHTML = self.formatNumber(self.frameVal.toFixed(self.decimals));\n\n                // whether to continue\n                if (progress < self.duration) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    if (self.callback != null) self.callback();\n                }\n            }\n            this.start = function (callback) {\n                self.callback = callback;\n                // make sure values are valid\n                if (!isNaN(self.endVal) && !isNaN(self.startVal)) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    console.log('countUp error: startVal or endVal is not a number');\n                    self.d.innerHTML = '--';\n                }\n                return false;\n            }\n            this.stop = function () {\n                cancelAnimationFrame(self.rAF);\n            }\n            this.reset = function () {\n                self.startTime = null;\n                cancelAnimationFrame(self.rAF);\n                self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n            }\n            this.resume = function () {\n                self.startTime = null;\n                self.duration = self.remaining;\n                self.startVal = self.frameVal;\n                requestAnimationFrame(self.count);\n            }\n            this.formatNumber = function (nStr) {\n                nStr += '';\n                var x, x1, x2, rgx;\n                x = nStr.split('.');\n                x1 = x[0];\n                x2 = x.length > 1 ? self.options.decimal + x[1] : '';\n                rgx = /(\\d+)(\\d{3})/;\n                if (self.options.useGrouping) {\n                    while (rgx.test(x1)) {\n                        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n                    }\n                }\n                return x1 + x2;\n            }\n            self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n        };\n        (function ($) {\n            \"use strict\";\n            var mainApp = {\n                main_fun: function () {\n                    var count = new countUp(\"error-link\", 10, 404, 0, 5); //CHANGE 404 TO THE ERROR VALUE AS YOU WANT\n                    window.onload = function () {\n                        count.start();\n                    }\n                },\n                initialization: function () {\n                    mainApp.main_fun();\n                }\n            }\n            $(document).ready(function () {\n                mainApp.main_fun();\n            });\n        }(jQuery));\n    </script>\n</body>\n\n</html>\n","source":"404.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 - 前端不是终点</title>\n    <style>\n        body {\n            font-family: 'Nova Flat', cursive;\n            background-color: #DFDFF7;\n            color: #666;\n        }\n\n        .pad-top {\n            padding-top: 60px;\n        }\n\n        .text-center {\n            text-align: center;\n        }\n\n        #error-link {\n            font-size: 150px;\n            padding: 10px;\n        }\n\n        .goback a {\n            display: inline-block;\n            padding: 5px;\n            color: #fff;\n            background: #8D8DE3;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"pad-top text-center\">\n            <div class=\"text-center\">\n                <h1> What have you done? </h1>\n                <h5> Now Go Back Using Below LInk</h5>\n                <span id=\"error-link\"></span>\n                <h2>! ERROR DECETED !</h2>\n            </div>\n        </div>\n        <div class=\"text-center goback\">\n            <a href=\"/\">GO TO HOME PAGE</a>\n        </div>\n    </div>\n    <!--Core JavaScript file  -->\n    <!-- <script src=\"js/jquery-1.10.2.js\"></script> -->\n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js\"></script>\n    <script>\n        function countUp(target, startVal, endVal, decimals, duration, options) {\n\n            // default options\n            this.options = options || {\n                useEasing: true, // toggle easing\n                useGrouping: true, // 1,000,000 vs 1000000\n                separator: ',', // character to use as a separator\n                decimal: '.' // character to use as a decimal\n            }\n            var lastTime = 0;\n            var vendors = ['webkit', 'moz', 'ms'];\n            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n                window.cancelAnimationFrame =\n                    window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n            }\n            if (!window.requestAnimationFrame) {\n                window.requestAnimationFrame = function (callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function () { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                }\n            }\n            if (!window.cancelAnimationFrame) {\n                window.cancelAnimationFrame = function (id) {\n                    clearTimeout(id);\n                }\n            }\n\n            var self = this;\n\n            this.d = (typeof target === 'string') ? document.getElementById(target) : target;\n            this.startVal = Number(startVal);\n            this.endVal = Number(endVal);\n            this.countDown = (this.startVal > this.endVal) ? true : false;\n            this.startTime = null;\n            this.timestamp = null;\n            this.remaining = null;\n            this.frameVal = this.startVal;\n            this.rAF = null;\n            this.decimals = Math.max(0, decimals || 0);\n            this.dec = Math.pow(10, this.decimals);\n            this.duration = duration * 1000 || 2000;\n\n            // Robert Penner's easeOutExpo\n            this.easeOutExpo = function (t, b, c, d) {\n                return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n            }\n            this.count = function (timestamp) {\n\n                if (self.startTime === null) self.startTime = timestamp;\n\n                self.timestamp = timestamp;\n\n                var progress = timestamp - self.startTime;\n                self.remaining = self.duration - progress;\n\n                // to ease or not to ease\n                if (self.options.useEasing) {\n                    if (self.countDown) {\n                        var i = self.easeOutExpo(progress, 0, self.startVal - self.endVal, self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.easeOutExpo(progress, self.startVal, self.endVal - self.startVal, self.duration);\n                    }\n                } else {\n                    if (self.countDown) {\n                        var i = (self.startVal - self.endVal) * (progress / self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);\n                    }\n                }\n\n                // decimal\n                self.frameVal = Math.round(self.frameVal * self.dec) / self.dec;\n\n                // don't go past endVal since progress can exceed duration in the last frame\n                if (self.countDown) {\n                    self.frameVal = (self.frameVal < self.endVal) ? self.endVal : self.frameVal;\n                } else {\n                    self.frameVal = (self.frameVal > self.endVal) ? self.endVal : self.frameVal;\n                }\n\n                // format and print value\n                self.d.innerHTML = self.formatNumber(self.frameVal.toFixed(self.decimals));\n\n                // whether to continue\n                if (progress < self.duration) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    if (self.callback != null) self.callback();\n                }\n            }\n            this.start = function (callback) {\n                self.callback = callback;\n                // make sure values are valid\n                if (!isNaN(self.endVal) && !isNaN(self.startVal)) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    console.log('countUp error: startVal or endVal is not a number');\n                    self.d.innerHTML = '--';\n                }\n                return false;\n            }\n            this.stop = function () {\n                cancelAnimationFrame(self.rAF);\n            }\n            this.reset = function () {\n                self.startTime = null;\n                cancelAnimationFrame(self.rAF);\n                self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n            }\n            this.resume = function () {\n                self.startTime = null;\n                self.duration = self.remaining;\n                self.startVal = self.frameVal;\n                requestAnimationFrame(self.count);\n            }\n            this.formatNumber = function (nStr) {\n                nStr += '';\n                var x, x1, x2, rgx;\n                x = nStr.split('.');\n                x1 = x[0];\n                x2 = x.length > 1 ? self.options.decimal + x[1] : '';\n                rgx = /(\\d+)(\\d{3})/;\n                if (self.options.useGrouping) {\n                    while (rgx.test(x1)) {\n                        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n                    }\n                }\n                return x1 + x2;\n            }\n            self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n        };\n        (function ($) {\n            \"use strict\";\n            var mainApp = {\n                main_fun: function () {\n                    var count = new countUp(\"error-link\", 10, 404, 0, 5); //CHANGE 404 TO THE ERROR VALUE AS YOU WANT\n                    window.onload = function () {\n                        count.start();\n                    }\n                },\n                initialization: function () {\n                    mainApp.main_fun();\n                }\n            }\n            $(document).ready(function () {\n                mainApp.main_fun();\n            });\n        }(jQuery));\n    </script>\n</body>\n\n</html>\n","date":"2018-07-30T01:55:33.657Z","updated":"2018-07-30T01:55:33.657Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjny0sw3n00002kv7whft6vpb","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 - 前端不是终点</title>\n    <style>\n        body {\n            font-family: 'Nova Flat', cursive;\n            background-color: #DFDFF7;\n            color: #666;\n        }\n\n        .pad-top {\n            padding-top: 60px;\n        }\n\n        .text-center {\n            text-align: center;\n        }\n\n        #error-link {\n            font-size: 150px;\n            padding: 10px;\n        }\n\n        .goback a {\n            display: inline-block;\n            padding: 5px;\n            color: #fff;\n            background: #8D8DE3;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"pad-top text-center\">\n            <div class=\"text-center\">\n                <h1> What have you done? </h1>\n                <h5> Now Go Back Using Below LInk</h5>\n                <span id=\"error-link\"></span>\n                <h2>! ERROR DECETED !</h2>\n            </div>\n        </div>\n        <div class=\"text-center goback\">\n            <a href=\"/\">GO TO HOME PAGE</a>\n        </div>\n    </div>\n    <!--Core JavaScript file  -->\n    <!-- <script src=\"js/jquery-1.10.2.js\"></script> -->\n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js\"></script>\n    <script>\n        function countUp(target, startVal, endVal, decimals, duration, options) {\n\n            // default options\n            this.options = options || {\n                useEasing: true, // toggle easing\n                useGrouping: true, // 1,000,000 vs 1000000\n                separator: ',', // character to use as a separator\n                decimal: '.' // character to use as a decimal\n            }\n            var lastTime = 0;\n            var vendors = ['webkit', 'moz', 'ms'];\n            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n                window.cancelAnimationFrame =\n                    window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n            }\n            if (!window.requestAnimationFrame) {\n                window.requestAnimationFrame = function (callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function () { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                }\n            }\n            if (!window.cancelAnimationFrame) {\n                window.cancelAnimationFrame = function (id) {\n                    clearTimeout(id);\n                }\n            }\n\n            var self = this;\n\n            this.d = (typeof target === 'string') ? document.getElementById(target) : target;\n            this.startVal = Number(startVal);\n            this.endVal = Number(endVal);\n            this.countDown = (this.startVal > this.endVal) ? true : false;\n            this.startTime = null;\n            this.timestamp = null;\n            this.remaining = null;\n            this.frameVal = this.startVal;\n            this.rAF = null;\n            this.decimals = Math.max(0, decimals || 0);\n            this.dec = Math.pow(10, this.decimals);\n            this.duration = duration * 1000 || 2000;\n\n            // Robert Penner's easeOutExpo\n            this.easeOutExpo = function (t, b, c, d) {\n                return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n            }\n            this.count = function (timestamp) {\n\n                if (self.startTime === null) self.startTime = timestamp;\n\n                self.timestamp = timestamp;\n\n                var progress = timestamp - self.startTime;\n                self.remaining = self.duration - progress;\n\n                // to ease or not to ease\n                if (self.options.useEasing) {\n                    if (self.countDown) {\n                        var i = self.easeOutExpo(progress, 0, self.startVal - self.endVal, self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.easeOutExpo(progress, self.startVal, self.endVal - self.startVal, self.duration);\n                    }\n                } else {\n                    if (self.countDown) {\n                        var i = (self.startVal - self.endVal) * (progress / self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);\n                    }\n                }\n\n                // decimal\n                self.frameVal = Math.round(self.frameVal * self.dec) / self.dec;\n\n                // don't go past endVal since progress can exceed duration in the last frame\n                if (self.countDown) {\n                    self.frameVal = (self.frameVal < self.endVal) ? self.endVal : self.frameVal;\n                } else {\n                    self.frameVal = (self.frameVal > self.endVal) ? self.endVal : self.frameVal;\n                }\n\n                // format and print value\n                self.d.innerHTML = self.formatNumber(self.frameVal.toFixed(self.decimals));\n\n                // whether to continue\n                if (progress < self.duration) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    if (self.callback != null) self.callback();\n                }\n            }\n            this.start = function (callback) {\n                self.callback = callback;\n                // make sure values are valid\n                if (!isNaN(self.endVal) && !isNaN(self.startVal)) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    console.log('countUp error: startVal or endVal is not a number');\n                    self.d.innerHTML = '--';\n                }\n                return false;\n            }\n            this.stop = function () {\n                cancelAnimationFrame(self.rAF);\n            }\n            this.reset = function () {\n                self.startTime = null;\n                cancelAnimationFrame(self.rAF);\n                self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n            }\n            this.resume = function () {\n                self.startTime = null;\n                self.duration = self.remaining;\n                self.startVal = self.frameVal;\n                requestAnimationFrame(self.count);\n            }\n            this.formatNumber = function (nStr) {\n                nStr += '';\n                var x, x1, x2, rgx;\n                x = nStr.split('.');\n                x1 = x[0];\n                x2 = x.length > 1 ? self.options.decimal + x[1] : '';\n                rgx = /(\\d+)(\\d{3})/;\n                if (self.options.useGrouping) {\n                    while (rgx.test(x1)) {\n                        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n                    }\n                }\n                return x1 + x2;\n            }\n            self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n        };\n        (function ($) {\n            \"use strict\";\n            var mainApp = {\n                main_fun: function () {\n                    var count = new countUp(\"error-link\", 10, 404, 0, 5); //CHANGE 404 TO THE ERROR VALUE AS YOU WANT\n                    window.onload = function () {\n                        count.start();\n                    }\n                },\n                initialization: function () {\n                    mainApp.main_fun();\n                }\n            }\n            $(document).ready(function () {\n                mainApp.main_fun();\n            });\n        }(jQuery));\n    </script>\n</body>\n\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 - 前端不是终点</title>\n    <style>\n        body {\n            font-family: 'Nova Flat', cursive;\n            background-color: #DFDFF7;\n            color: #666;\n        }\n\n        .pad-top {\n            padding-top: 60px;\n        }\n\n        .text-center {\n            text-align: center;\n        }\n\n        #error-link {\n            font-size: 150px;\n            padding: 10px;\n        }\n\n        .goback a {\n            display: inline-block;\n            padding: 5px;\n            color: #fff;\n            background: #8D8DE3;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"pad-top text-center\">\n            <div class=\"text-center\">\n                <h1> What have you done? </h1>\n                <h5> Now Go Back Using Below LInk</h5>\n                <span id=\"error-link\"></span>\n                <h2>! ERROR DECETED !</h2>\n            </div>\n        </div>\n        <div class=\"text-center goback\">\n            <a href=\"/\">GO TO HOME PAGE</a>\n        </div>\n    </div>\n    <!--Core JavaScript file  -->\n    <!-- <script src=\"js/jquery-1.10.2.js\"></script> -->\n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js\"></script>\n    <script>\n        function countUp(target, startVal, endVal, decimals, duration, options) {\n\n            // default options\n            this.options = options || {\n                useEasing: true, // toggle easing\n                useGrouping: true, // 1,000,000 vs 1000000\n                separator: ',', // character to use as a separator\n                decimal: '.' // character to use as a decimal\n            }\n            var lastTime = 0;\n            var vendors = ['webkit', 'moz', 'ms'];\n            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n                window.cancelAnimationFrame =\n                    window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n            }\n            if (!window.requestAnimationFrame) {\n                window.requestAnimationFrame = function (callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function () { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                }\n            }\n            if (!window.cancelAnimationFrame) {\n                window.cancelAnimationFrame = function (id) {\n                    clearTimeout(id);\n                }\n            }\n\n            var self = this;\n\n            this.d = (typeof target === 'string') ? document.getElementById(target) : target;\n            this.startVal = Number(startVal);\n            this.endVal = Number(endVal);\n            this.countDown = (this.startVal > this.endVal) ? true : false;\n            this.startTime = null;\n            this.timestamp = null;\n            this.remaining = null;\n            this.frameVal = this.startVal;\n            this.rAF = null;\n            this.decimals = Math.max(0, decimals || 0);\n            this.dec = Math.pow(10, this.decimals);\n            this.duration = duration * 1000 || 2000;\n\n            // Robert Penner's easeOutExpo\n            this.easeOutExpo = function (t, b, c, d) {\n                return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n            }\n            this.count = function (timestamp) {\n\n                if (self.startTime === null) self.startTime = timestamp;\n\n                self.timestamp = timestamp;\n\n                var progress = timestamp - self.startTime;\n                self.remaining = self.duration - progress;\n\n                // to ease or not to ease\n                if (self.options.useEasing) {\n                    if (self.countDown) {\n                        var i = self.easeOutExpo(progress, 0, self.startVal - self.endVal, self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.easeOutExpo(progress, self.startVal, self.endVal - self.startVal, self.duration);\n                    }\n                } else {\n                    if (self.countDown) {\n                        var i = (self.startVal - self.endVal) * (progress / self.duration);\n                        self.frameVal = self.startVal - i;\n                    } else {\n                        self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);\n                    }\n                }\n\n                // decimal\n                self.frameVal = Math.round(self.frameVal * self.dec) / self.dec;\n\n                // don't go past endVal since progress can exceed duration in the last frame\n                if (self.countDown) {\n                    self.frameVal = (self.frameVal < self.endVal) ? self.endVal : self.frameVal;\n                } else {\n                    self.frameVal = (self.frameVal > self.endVal) ? self.endVal : self.frameVal;\n                }\n\n                // format and print value\n                self.d.innerHTML = self.formatNumber(self.frameVal.toFixed(self.decimals));\n\n                // whether to continue\n                if (progress < self.duration) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    if (self.callback != null) self.callback();\n                }\n            }\n            this.start = function (callback) {\n                self.callback = callback;\n                // make sure values are valid\n                if (!isNaN(self.endVal) && !isNaN(self.startVal)) {\n                    self.rAF = requestAnimationFrame(self.count);\n                } else {\n                    console.log('countUp error: startVal or endVal is not a number');\n                    self.d.innerHTML = '--';\n                }\n                return false;\n            }\n            this.stop = function () {\n                cancelAnimationFrame(self.rAF);\n            }\n            this.reset = function () {\n                self.startTime = null;\n                cancelAnimationFrame(self.rAF);\n                self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n            }\n            this.resume = function () {\n                self.startTime = null;\n                self.duration = self.remaining;\n                self.startVal = self.frameVal;\n                requestAnimationFrame(self.count);\n            }\n            this.formatNumber = function (nStr) {\n                nStr += '';\n                var x, x1, x2, rgx;\n                x = nStr.split('.');\n                x1 = x[0];\n                x2 = x.length > 1 ? self.options.decimal + x[1] : '';\n                rgx = /(\\d+)(\\d{3})/;\n                if (self.options.useGrouping) {\n                    while (rgx.test(x1)) {\n                        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n                    }\n                }\n                return x1 + x2;\n            }\n            self.d.innerHTML = self.formatNumber(self.startVal.toFixed(self.decimals));\n        };\n        (function ($) {\n            \"use strict\";\n            var mainApp = {\n                main_fun: function () {\n                    var count = new countUp(\"error-link\", 10, 404, 0, 5); //CHANGE 404 TO THE ERROR VALUE AS YOU WANT\n                    window.onload = function () {\n                        count.start();\n                    }\n                },\n                initialization: function () {\n                    mainApp.main_fun();\n                }\n            }\n            $(document).ready(function () {\n                mainApp.main_fun();\n            });\n        }(jQuery));\n    </script>\n</body>\n\n</html>\n"},{"title":"categories","date":"2018-02-10T03:50:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-10 11:50:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-30T01:55:33.678Z","path":"categories/index.html","layout":"page","_id":"cjny0swef00022kv7xq3zydgi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-10T04:05:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-10 12:05:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-30T01:55:33.704Z","path":"tags/index.html","layout":"page","_id":"cjny0swek00042kv7oc29y6g0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"## 待写文章列表\n\n### vue\n\n- 插入html代码的三种方式\n  - v-html\n  - filter\n  - 通过虚拟DOM转换\n- vue-router\n  - 路由基本规则\n  - 重定向\n  - 子路由嵌套\n    - 重定向\n    - 父级根路由\n  - 动态路由\n  - 404匹配\n- 脚手架\n- 框架搭建\n\n## es6\n\n## ...运算符\n\n- https://segmentfault.com/a/1190000007022442\n\n\n\n\n1.获取属性，获取公用属性，通过标签分类\n2.组件初始化时computed无法拿到props的属性，无法拿到method的方法\n3.methods里面不能使用箭头函数: 会改变this的指向\n\ngit常用命令：\nhttps://segmentfault.com/q/1010000006864939?_ea=1159571\n\naxios\nhttp://www.cnblogs.com/libin-1/p/6607945.html\nhttp://www.jianshu.com/p/3ab216fa185c\n\n\n## H5\nHTML5事件——visibilitychange 标签可见性\n\n\n## 判断经纬度是否在GEOJSON范围\n\n``` javascript\nfunction isInPolygon(checkPoint, polygonPoints) {\n    var counter = 0;\n    var i;\n    var xinters;\n    var p1, p2;\n    var pointCount = polygonPoints.length;\n    p1 = polygonPoints[0];\n\n    for (i = 1; i <= pointCount; i++) {\n        p2 = polygonPoints[i % pointCount];\n        if (  checkPoint[0] > Math.min(p1[0], p2[0]) &&checkPoint[0] <= Math.max(p1[0], p2[0])) {\n            if (checkPoint[1] <= Math.max(p1[1], p2[1])) {\n                if (p1[0] != p2[0]) {\n                    xinters =(checkPoint[0] - p1[0]) * (p2[1] - p1[1]) /(p2[0] - p1[0]) + p1[1];\n                    if (p1[1] == p2[1] || checkPoint[1] <= xinters) {\n                        counter++;\n                    }\n                }\n            }\n        }\n        p1 = p2;\n    }\n    if (counter % 2 == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nisInPolygon(\n    [121.51702880859374, 31.168159735435708],\n\n    [\n        [121.53814315795897, 31.213021677784425],\n        [121.55908584594727, 31.213021677784425],\n        [121.55908584594727, 31.22337141316801],\n        [121.53814315795897, 31.22337141316801],\n        [121.53814315795897, 31.213021677784425]\n    ]\n);\n```\n\n截图粘贴上传图片\ndocument.onpaste=function(e){\n    var data = e.clipboardData;\n    for(var i=0; i<data.items.length; i++){\n        var item = data.items[i];\n        if(item.kind=='file' && item.type.match(/^image\\//i)){\n            var blob = item.getAsFile();\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload=function(event){\n                console.log(event.target.result)\n            }\n        }\n    }\n}\n\n兼容 IOS11 头尾部多出来的空间\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n\n浏览器知否支持WEBP格式\nfunction canUseWebP() {\n    var elem = document.createElement('canvas');\n    if (!!(elem.getContext && elem.getContext('2d'))) {\n        return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;\n    } else {\n        return false;\n    }\n}\nhttp://stackoverflow.com/questions/5573096/detecting-webp-support\n\n\nIOS10 SAFARI禁止缩放网页\ndocument.documentElement.addEventListener('touchstart', function (event) {\n    if (event.touches.length > 1)event.preventDefault();\n}, false);\nvar lastTouchEnd = 0;\ndocument.documentElement.addEventListener('touchend', function (event) {\n    var now = (new Date()).getTime();\n    if (now - lastTouchEnd <= 300)event.preventDefault();\n    lastTouchEnd = now;\n}, false);\n\n\n\nVUE中解决IOS在获取焦点后点空白无法关闭键\nsetFocus(e){\n    var autoClose = (event)=>{\n        if(event.target.tagName!=\"INPUT\"){\n            window.setTimeout(function(){\n                e.target.blur()\n                document.removeEventListener('touchend', autoClose,false)\n            },300)\n        }\n    }\n    document.addEventListener('touchend', autoClose,false)\n}\n\n滚动条返回顶部动画实现\nfunction toTop(){\n    let d = 500     //运行时间（毫秒）\n    let b =document.body.scrollTop //开始位置\n    let c = 0-b     //结束位置\n    let now = Date.now()\n    //减速曲线\n    let calc=(t, b, c, d)=>{\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    }\n    // 跑帧\n    let go=()=>{\n        let t = Date.now() - now\n        if (t >= d){\n            window.cancelAnimationFrame(go)\n            return\n        }\n        document.body.scrollTop = calc(t,b,c,d)\n        window.requestAnimationFrame(go)\n    }\n    // 初始化\n    window.requestAnimationFrame(go)\n}\n这是es6原生js写的动画用在vuejs里面合适\n\nH5获取经纬度\nif (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function(position) {\n        window.latitude = position.coords.latitude;//纬度\n        window.longitude = position.coords.longitude;//经度\n    });\n}\n\n关闭IOS键盘首字母自动大写\n<input type=\"text\" autocapitalize=\"off\">\n\n\nhttp://zee.kim/post/40/\n\n漂亮的CONSOLE.LOG\n\nvar args = [\n    '\\n %c %c %c JINZHE.NET 1.0 - ✰  %c ' + ' %c ' + ' http://jinzhe.net/  %c %c ♥%c♥%c♥ \\n\\n',\n    'background: #ff66a5; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'color: #ff66a5; background: #030307; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'background: #ffc3dc; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;'\n];\nconsole.log.apply(console, args);\n\n获取DOM计算后的样式\nwindow.getComputedStyle(document.body).overflow\n\n\n\n## npm发布流程\nhttps://www.cnblogs.com/zuojiayi/p/6893330.html\nhttps://www.cnblogs.com/zhoudaozhang/p/4730070.html\nhttp://blog.csdn.net/gamesdev/article/details/49018629\nhttps://segmentfault.com/a/1190000006250554\n","source":"_drafts/article-to-do-list.md","raw":"## 待写文章列表\n\n### vue\n\n- 插入html代码的三种方式\n  - v-html\n  - filter\n  - 通过虚拟DOM转换\n- vue-router\n  - 路由基本规则\n  - 重定向\n  - 子路由嵌套\n    - 重定向\n    - 父级根路由\n  - 动态路由\n  - 404匹配\n- 脚手架\n- 框架搭建\n\n## es6\n\n## ...运算符\n\n- https://segmentfault.com/a/1190000007022442\n\n\n\n\n1.获取属性，获取公用属性，通过标签分类\n2.组件初始化时computed无法拿到props的属性，无法拿到method的方法\n3.methods里面不能使用箭头函数: 会改变this的指向\n\ngit常用命令：\nhttps://segmentfault.com/q/1010000006864939?_ea=1159571\n\naxios\nhttp://www.cnblogs.com/libin-1/p/6607945.html\nhttp://www.jianshu.com/p/3ab216fa185c\n\n\n## H5\nHTML5事件——visibilitychange 标签可见性\n\n\n## 判断经纬度是否在GEOJSON范围\n\n``` javascript\nfunction isInPolygon(checkPoint, polygonPoints) {\n    var counter = 0;\n    var i;\n    var xinters;\n    var p1, p2;\n    var pointCount = polygonPoints.length;\n    p1 = polygonPoints[0];\n\n    for (i = 1; i <= pointCount; i++) {\n        p2 = polygonPoints[i % pointCount];\n        if (  checkPoint[0] > Math.min(p1[0], p2[0]) &&checkPoint[0] <= Math.max(p1[0], p2[0])) {\n            if (checkPoint[1] <= Math.max(p1[1], p2[1])) {\n                if (p1[0] != p2[0]) {\n                    xinters =(checkPoint[0] - p1[0]) * (p2[1] - p1[1]) /(p2[0] - p1[0]) + p1[1];\n                    if (p1[1] == p2[1] || checkPoint[1] <= xinters) {\n                        counter++;\n                    }\n                }\n            }\n        }\n        p1 = p2;\n    }\n    if (counter % 2 == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nisInPolygon(\n    [121.51702880859374, 31.168159735435708],\n\n    [\n        [121.53814315795897, 31.213021677784425],\n        [121.55908584594727, 31.213021677784425],\n        [121.55908584594727, 31.22337141316801],\n        [121.53814315795897, 31.22337141316801],\n        [121.53814315795897, 31.213021677784425]\n    ]\n);\n```\n\n截图粘贴上传图片\ndocument.onpaste=function(e){\n    var data = e.clipboardData;\n    for(var i=0; i<data.items.length; i++){\n        var item = data.items[i];\n        if(item.kind=='file' && item.type.match(/^image\\//i)){\n            var blob = item.getAsFile();\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload=function(event){\n                console.log(event.target.result)\n            }\n        }\n    }\n}\n\n兼容 IOS11 头尾部多出来的空间\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n\n浏览器知否支持WEBP格式\nfunction canUseWebP() {\n    var elem = document.createElement('canvas');\n    if (!!(elem.getContext && elem.getContext('2d'))) {\n        return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;\n    } else {\n        return false;\n    }\n}\nhttp://stackoverflow.com/questions/5573096/detecting-webp-support\n\n\nIOS10 SAFARI禁止缩放网页\ndocument.documentElement.addEventListener('touchstart', function (event) {\n    if (event.touches.length > 1)event.preventDefault();\n}, false);\nvar lastTouchEnd = 0;\ndocument.documentElement.addEventListener('touchend', function (event) {\n    var now = (new Date()).getTime();\n    if (now - lastTouchEnd <= 300)event.preventDefault();\n    lastTouchEnd = now;\n}, false);\n\n\n\nVUE中解决IOS在获取焦点后点空白无法关闭键\nsetFocus(e){\n    var autoClose = (event)=>{\n        if(event.target.tagName!=\"INPUT\"){\n            window.setTimeout(function(){\n                e.target.blur()\n                document.removeEventListener('touchend', autoClose,false)\n            },300)\n        }\n    }\n    document.addEventListener('touchend', autoClose,false)\n}\n\n滚动条返回顶部动画实现\nfunction toTop(){\n    let d = 500     //运行时间（毫秒）\n    let b =document.body.scrollTop //开始位置\n    let c = 0-b     //结束位置\n    let now = Date.now()\n    //减速曲线\n    let calc=(t, b, c, d)=>{\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    }\n    // 跑帧\n    let go=()=>{\n        let t = Date.now() - now\n        if (t >= d){\n            window.cancelAnimationFrame(go)\n            return\n        }\n        document.body.scrollTop = calc(t,b,c,d)\n        window.requestAnimationFrame(go)\n    }\n    // 初始化\n    window.requestAnimationFrame(go)\n}\n这是es6原生js写的动画用在vuejs里面合适\n\nH5获取经纬度\nif (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function(position) {\n        window.latitude = position.coords.latitude;//纬度\n        window.longitude = position.coords.longitude;//经度\n    });\n}\n\n关闭IOS键盘首字母自动大写\n<input type=\"text\" autocapitalize=\"off\">\n\n\nhttp://zee.kim/post/40/\n\n漂亮的CONSOLE.LOG\n\nvar args = [\n    '\\n %c %c %c JINZHE.NET 1.0 - ✰  %c ' + ' %c ' + ' http://jinzhe.net/  %c %c ♥%c♥%c♥ \\n\\n',\n    'background: #ff66a5; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'color: #ff66a5; background: #030307; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'background: #ffc3dc; padding:5px 0;',\n    'background: #ff66a5; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;',\n    'color: #ff2424; background: #fff; padding:5px 0;'\n];\nconsole.log.apply(console, args);\n\n获取DOM计算后的样式\nwindow.getComputedStyle(document.body).overflow\n\n\n\n## npm发布流程\nhttps://www.cnblogs.com/zuojiayi/p/6893330.html\nhttps://www.cnblogs.com/zhoudaozhang/p/4730070.html\nhttp://blog.csdn.net/gamesdev/article/details/49018629\nhttps://segmentfault.com/a/1190000006250554\n","slug":"article-to-do-list","published":0,"date":"2018-07-30T01:55:33.657Z","updated":"2018-07-30T01:55:33.657Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0sweb00012kv7sm5ywdx7","content":"<h2 id=\"待写文章列表\"><a href=\"#待写文章列表\" class=\"headerlink\" title=\"待写文章列表\"></a>待写文章列表</h2><h3 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h3><ul>\n<li>插入html代码的三种方式<ul>\n<li>v-html</li>\n<li>filter</li>\n<li>通过虚拟DOM转换</li>\n</ul>\n</li>\n<li>vue-router<ul>\n<li>路由基本规则</li>\n<li>重定向</li>\n<li>子路由嵌套<ul>\n<li>重定向</li>\n<li>父级根路由</li>\n</ul>\n</li>\n<li>动态路由</li>\n<li>404匹配</li>\n</ul>\n</li>\n<li>脚手架</li>\n<li>框架搭建</li>\n</ul>\n<h2 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h2><h2 id=\"…运算符\"><a href=\"#…运算符\" class=\"headerlink\" title=\"…运算符\"></a>…运算符</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000007022442\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000007022442</a></li>\n</ul>\n<p>1.获取属性，获取公用属性，通过标签分类<br>2.组件初始化时computed无法拿到props的属性，无法拿到method的方法<br>3.methods里面不能使用箭头函数: 会改变this的指向</p>\n<p>git常用命令：<br><a href=\"https://segmentfault.com/q/1010000006864939?_ea=1159571\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006864939?_ea=1159571</a></p>\n<p>axios<br><a href=\"http://www.cnblogs.com/libin-1/p/6607945.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/libin-1/p/6607945.html</a><br><a href=\"http://www.jianshu.com/p/3ab216fa185c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ab216fa185c</a></p>\n<h2 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h2><p>HTML5事件——visibilitychange 标签可见性</p>\n<h2 id=\"判断经纬度是否在GEOJSON范围\"><a href=\"#判断经纬度是否在GEOJSON范围\" class=\"headerlink\" title=\"判断经纬度是否在GEOJSON范围\"></a>判断经纬度是否在GEOJSON范围</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInPolygon</span>(<span class=\"params\">checkPoint, polygonPoints</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xinters;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1, p2;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pointCount = polygonPoints.length;</span><br><span class=\"line\">    p1 = polygonPoints[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= pointCount; i++) &#123;</span><br><span class=\"line\">        p2 = polygonPoints[i % pointCount];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (  checkPoint[<span class=\"number\">0</span>] &gt; <span class=\"built_in\">Math</span>.min(p1[<span class=\"number\">0</span>], p2[<span class=\"number\">0</span>]) &amp;&amp;checkPoint[<span class=\"number\">0</span>] &lt;= <span class=\"built_in\">Math</span>.max(p1[<span class=\"number\">0</span>], p2[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkPoint[<span class=\"number\">1</span>] &lt;= <span class=\"built_in\">Math</span>.max(p1[<span class=\"number\">1</span>], p2[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p1[<span class=\"number\">0</span>] != p2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                    xinters =(checkPoint[<span class=\"number\">0</span>] - p1[<span class=\"number\">0</span>]) * (p2[<span class=\"number\">1</span>] - p1[<span class=\"number\">1</span>]) /(p2[<span class=\"number\">0</span>] - p1[<span class=\"number\">0</span>]) + p1[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p1[<span class=\"number\">1</span>] == p2[<span class=\"number\">1</span>] || checkPoint[<span class=\"number\">1</span>] &lt;= xinters) &#123;</span><br><span class=\"line\">                        counter++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (counter % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isInPolygon(</span><br><span class=\"line\">    [<span class=\"number\">121.51702880859374</span>, <span class=\"number\">31.168159735435708</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.213021677784425</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.55908584594727</span>, <span class=\"number\">31.213021677784425</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.55908584594727</span>, <span class=\"number\">31.22337141316801</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.22337141316801</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.213021677784425</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>截图粘贴上传图片<br>document.onpaste=function(e){<br>    var data = e.clipboardData;<br>    for(var i=0; i&lt;data.items.length; i++){<br>        var item = data.items[i];<br>        if(item.kind==’file’ &amp;&amp; item.type.match(/^image\\//i)){<br>            var blob = item.getAsFile();<br>            var reader = new FileReader();<br>            reader.readAsDataURL(blob);<br>            reader.onload=function(event){<br>                console.log(event.target.result)<br>            }<br>        }<br>    }<br>}</p>\n<p>兼容 IOS11 头尾部多出来的空间</p>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n\n<p>浏览器知否支持WEBP格式<br>function canUseWebP() {<br>    var elem = document.createElement(‘canvas’);<br>    if (!!(elem.getContext &amp;&amp; elem.getContext(‘2d’))) {<br>        return elem.toDataURL(‘image/webp’).indexOf(‘data:image/webp’) == 0;<br>    } else {<br>        return false;<br>    }<br>}<br><a href=\"http://stackoverflow.com/questions/5573096/detecting-webp-support\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/5573096/detecting-webp-support</a></p>\n<p>IOS10 SAFARI禁止缩放网页<br>document.documentElement.addEventListener(‘touchstart’, function (event) {<br>    if (event.touches.length &gt; 1)event.preventDefault();<br>}, false);<br>var lastTouchEnd = 0;<br>document.documentElement.addEventListener(‘touchend’, function (event) {<br>    var now = (new Date()).getTime();<br>    if (now - lastTouchEnd &lt;= 300)event.preventDefault();<br>    lastTouchEnd = now;<br>}, false);</p>\n<p>VUE中解决IOS在获取焦点后点空白无法关闭键<br>setFocus(e){<br>    var autoClose = (event)=&gt;{<br>        if(event.target.tagName!=”INPUT”){<br>            window.setTimeout(function(){<br>                e.target.blur()<br>                document.removeEventListener(‘touchend’, autoClose,false)<br>            },300)<br>        }<br>    }<br>    document.addEventListener(‘touchend’, autoClose,false)<br>}</p>\n<p>滚动条返回顶部动画实现<br>function toTop(){<br>    let d = 500     //运行时间（毫秒）<br>    let b =document.body.scrollTop //开始位置<br>    let c = 0-b     //结束位置<br>    let now = Date.now()<br>    //减速曲线<br>    let calc=(t, b, c, d)=&gt;{<br>        return -c <em> ((t = t / d - 1) </em> t <em> t </em> t - 1) + b;<br>    }<br>    // 跑帧<br>    let go=()=&gt;{<br>        let t = Date.now() - now<br>        if (t &gt;= d){<br>            window.cancelAnimationFrame(go)<br>            return<br>        }<br>        document.body.scrollTop = calc(t,b,c,d)<br>        window.requestAnimationFrame(go)<br>    }<br>    // 初始化<br>    window.requestAnimationFrame(go)<br>}<br>这是es6原生js写的动画用在vuejs里面合适</p>\n<p>H5获取经纬度<br>if (navigator.geolocation) {<br>    navigator.geolocation.getCurrentPosition(function(position) {<br>        window.latitude = position.coords.latitude;//纬度<br>        window.longitude = position.coords.longitude;//经度<br>    });<br>}</p>\n<p>关闭IOS键盘首字母自动大写</p>\n<input type=\"text\" autocapitalize=\"off\">\n\n\n<p><a href=\"http://zee.kim/post/40/\" target=\"_blank\" rel=\"noopener\">http://zee.kim/post/40/</a></p>\n<p>漂亮的CONSOLE.LOG</p>\n<p>var args = [<br>    ‘\\n %c %c %c JINZHE.NET 1.0 - ✰  %c ‘ + ‘ %c ‘ + ‘ <a href=\"http://jinzhe.net/\" target=\"_blank\" rel=\"noopener\">http://jinzhe.net/</a>  %c %c ♥%c♥%c♥ \\n\\n’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘color: #ff66a5; background: #030307; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘background: #ffc3dc; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’<br>];<br>console.log.apply(console, args);</p>\n<p>获取DOM计算后的样式<br>window.getComputedStyle(document.body).overflow</p>\n<h2 id=\"npm发布流程\"><a href=\"#npm发布流程\" class=\"headerlink\" title=\"npm发布流程\"></a>npm发布流程</h2><p><a href=\"https://www.cnblogs.com/zuojiayi/p/6893330.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zuojiayi/p/6893330.html</a><br><a href=\"https://www.cnblogs.com/zhoudaozhang/p/4730070.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoudaozhang/p/4730070.html</a><br><a href=\"http://blog.csdn.net/gamesdev/article/details/49018629\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gamesdev/article/details/49018629</a><br><a href=\"https://segmentfault.com/a/1190000006250554\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006250554</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"待写文章列表\"><a href=\"#待写文章列表\" class=\"headerlink\" title=\"待写文章列表\"></a>待写文章列表</h2><h3 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h3><ul>\n<li>插入html代码的三种方式<ul>\n<li>v-html</li>\n<li>filter</li>\n<li>通过虚拟DOM转换</li>\n</ul>\n</li>\n<li>vue-router<ul>\n<li>路由基本规则</li>\n<li>重定向</li>\n<li>子路由嵌套<ul>\n<li>重定向</li>\n<li>父级根路由</li>\n</ul>\n</li>\n<li>动态路由</li>\n<li>404匹配</li>\n</ul>\n</li>\n<li>脚手架</li>\n<li>框架搭建</li>\n</ul>\n<h2 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h2><h2 id=\"…运算符\"><a href=\"#…运算符\" class=\"headerlink\" title=\"…运算符\"></a>…运算符</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000007022442\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000007022442</a></li>\n</ul>\n<p>1.获取属性，获取公用属性，通过标签分类<br>2.组件初始化时computed无法拿到props的属性，无法拿到method的方法<br>3.methods里面不能使用箭头函数: 会改变this的指向</p>\n<p>git常用命令：<br><a href=\"https://segmentfault.com/q/1010000006864939?_ea=1159571\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006864939?_ea=1159571</a></p>\n<p>axios<br><a href=\"http://www.cnblogs.com/libin-1/p/6607945.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/libin-1/p/6607945.html</a><br><a href=\"http://www.jianshu.com/p/3ab216fa185c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ab216fa185c</a></p>\n<h2 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h2><p>HTML5事件——visibilitychange 标签可见性</p>\n<h2 id=\"判断经纬度是否在GEOJSON范围\"><a href=\"#判断经纬度是否在GEOJSON范围\" class=\"headerlink\" title=\"判断经纬度是否在GEOJSON范围\"></a>判断经纬度是否在GEOJSON范围</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInPolygon</span>(<span class=\"params\">checkPoint, polygonPoints</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xinters;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1, p2;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pointCount = polygonPoints.length;</span><br><span class=\"line\">    p1 = polygonPoints[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= pointCount; i++) &#123;</span><br><span class=\"line\">        p2 = polygonPoints[i % pointCount];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (  checkPoint[<span class=\"number\">0</span>] &gt; <span class=\"built_in\">Math</span>.min(p1[<span class=\"number\">0</span>], p2[<span class=\"number\">0</span>]) &amp;&amp;checkPoint[<span class=\"number\">0</span>] &lt;= <span class=\"built_in\">Math</span>.max(p1[<span class=\"number\">0</span>], p2[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (checkPoint[<span class=\"number\">1</span>] &lt;= <span class=\"built_in\">Math</span>.max(p1[<span class=\"number\">1</span>], p2[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p1[<span class=\"number\">0</span>] != p2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                    xinters =(checkPoint[<span class=\"number\">0</span>] - p1[<span class=\"number\">0</span>]) * (p2[<span class=\"number\">1</span>] - p1[<span class=\"number\">1</span>]) /(p2[<span class=\"number\">0</span>] - p1[<span class=\"number\">0</span>]) + p1[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p1[<span class=\"number\">1</span>] == p2[<span class=\"number\">1</span>] || checkPoint[<span class=\"number\">1</span>] &lt;= xinters) &#123;</span><br><span class=\"line\">                        counter++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p1 = p2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (counter % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isInPolygon(</span><br><span class=\"line\">    [<span class=\"number\">121.51702880859374</span>, <span class=\"number\">31.168159735435708</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    [</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.213021677784425</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.55908584594727</span>, <span class=\"number\">31.213021677784425</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.55908584594727</span>, <span class=\"number\">31.22337141316801</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.22337141316801</span>],</span><br><span class=\"line\">        [<span class=\"number\">121.53814315795897</span>, <span class=\"number\">31.213021677784425</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>截图粘贴上传图片<br>document.onpaste=function(e){<br>    var data = e.clipboardData;<br>    for(var i=0; i&lt;data.items.length; i++){<br>        var item = data.items[i];<br>        if(item.kind==’file’ &amp;&amp; item.type.match(/^image\\//i)){<br>            var blob = item.getAsFile();<br>            var reader = new FileReader();<br>            reader.readAsDataURL(blob);<br>            reader.onload=function(event){<br>                console.log(event.target.result)<br>            }<br>        }<br>    }<br>}</p>\n<p>兼容 IOS11 头尾部多出来的空间</p>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n\n<p>浏览器知否支持WEBP格式<br>function canUseWebP() {<br>    var elem = document.createElement(‘canvas’);<br>    if (!!(elem.getContext &amp;&amp; elem.getContext(‘2d’))) {<br>        return elem.toDataURL(‘image/webp’).indexOf(‘data:image/webp’) == 0;<br>    } else {<br>        return false;<br>    }<br>}<br><a href=\"http://stackoverflow.com/questions/5573096/detecting-webp-support\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/5573096/detecting-webp-support</a></p>\n<p>IOS10 SAFARI禁止缩放网页<br>document.documentElement.addEventListener(‘touchstart’, function (event) {<br>    if (event.touches.length &gt; 1)event.preventDefault();<br>}, false);<br>var lastTouchEnd = 0;<br>document.documentElement.addEventListener(‘touchend’, function (event) {<br>    var now = (new Date()).getTime();<br>    if (now - lastTouchEnd &lt;= 300)event.preventDefault();<br>    lastTouchEnd = now;<br>}, false);</p>\n<p>VUE中解决IOS在获取焦点后点空白无法关闭键<br>setFocus(e){<br>    var autoClose = (event)=&gt;{<br>        if(event.target.tagName!=”INPUT”){<br>            window.setTimeout(function(){<br>                e.target.blur()<br>                document.removeEventListener(‘touchend’, autoClose,false)<br>            },300)<br>        }<br>    }<br>    document.addEventListener(‘touchend’, autoClose,false)<br>}</p>\n<p>滚动条返回顶部动画实现<br>function toTop(){<br>    let d = 500     //运行时间（毫秒）<br>    let b =document.body.scrollTop //开始位置<br>    let c = 0-b     //结束位置<br>    let now = Date.now()<br>    //减速曲线<br>    let calc=(t, b, c, d)=&gt;{<br>        return -c <em> ((t = t / d - 1) </em> t <em> t </em> t - 1) + b;<br>    }<br>    // 跑帧<br>    let go=()=&gt;{<br>        let t = Date.now() - now<br>        if (t &gt;= d){<br>            window.cancelAnimationFrame(go)<br>            return<br>        }<br>        document.body.scrollTop = calc(t,b,c,d)<br>        window.requestAnimationFrame(go)<br>    }<br>    // 初始化<br>    window.requestAnimationFrame(go)<br>}<br>这是es6原生js写的动画用在vuejs里面合适</p>\n<p>H5获取经纬度<br>if (navigator.geolocation) {<br>    navigator.geolocation.getCurrentPosition(function(position) {<br>        window.latitude = position.coords.latitude;//纬度<br>        window.longitude = position.coords.longitude;//经度<br>    });<br>}</p>\n<p>关闭IOS键盘首字母自动大写</p>\n<input type=\"text\" autocapitalize=\"off\">\n\n\n<p><a href=\"http://zee.kim/post/40/\" target=\"_blank\" rel=\"noopener\">http://zee.kim/post/40/</a></p>\n<p>漂亮的CONSOLE.LOG</p>\n<p>var args = [<br>    ‘\\n %c %c %c JINZHE.NET 1.0 - ✰  %c ‘ + ‘ %c ‘ + ‘ <a href=\"http://jinzhe.net/\" target=\"_blank\" rel=\"noopener\">http://jinzhe.net/</a>  %c %c ♥%c♥%c♥ \\n\\n’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘color: #ff66a5; background: #030307; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘background: #ffc3dc; padding:5px 0;’,<br>    ‘background: #ff66a5; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’,<br>    ‘color: #ff2424; background: #fff; padding:5px 0;’<br>];<br>console.log.apply(console, args);</p>\n<p>获取DOM计算后的样式<br>window.getComputedStyle(document.body).overflow</p>\n<h2 id=\"npm发布流程\"><a href=\"#npm发布流程\" class=\"headerlink\" title=\"npm发布流程\"></a>npm发布流程</h2><p><a href=\"https://www.cnblogs.com/zuojiayi/p/6893330.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zuojiayi/p/6893330.html</a><br><a href=\"https://www.cnblogs.com/zhoudaozhang/p/4730070.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoudaozhang/p/4730070.html</a><br><a href=\"http://blog.csdn.net/gamesdev/article/details/49018629\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gamesdev/article/details/49018629</a><br><a href=\"https://segmentfault.com/a/1190000006250554\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006250554</a></p>\n"},{"_content":"## 赚钱方法\n\n### 写文章\n\n- 掘金\n- 简书\n- 自己的博客\n- 从其他地方引流\n\n### 开源项目\n\n- 部分收费\n\n### 外包\n\n### 专利申请","source":"_drafts/earn-to-do-list.md","raw":"## 赚钱方法\n\n### 写文章\n\n- 掘金\n- 简书\n- 自己的博客\n- 从其他地方引流\n\n### 开源项目\n\n- 部分收费\n\n### 外包\n\n### 专利申请","slug":"earn-to-do-list","published":0,"date":"2018-07-30T01:55:33.658Z","updated":"2018-07-30T01:55:33.658Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0sweg00032kv7daj6ydxt","content":"<h2 id=\"赚钱方法\"><a href=\"#赚钱方法\" class=\"headerlink\" title=\"赚钱方法\"></a>赚钱方法</h2><h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><ul>\n<li>掘金</li>\n<li>简书</li>\n<li>自己的博客</li>\n<li>从其他地方引流</li>\n</ul>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li>部分收费</li>\n</ul>\n<h3 id=\"外包\"><a href=\"#外包\" class=\"headerlink\" title=\"外包\"></a>外包</h3><h3 id=\"专利申请\"><a href=\"#专利申请\" class=\"headerlink\" title=\"专利申请\"></a>专利申请</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"赚钱方法\"><a href=\"#赚钱方法\" class=\"headerlink\" title=\"赚钱方法\"></a>赚钱方法</h2><h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><ul>\n<li>掘金</li>\n<li>简书</li>\n<li>自己的博客</li>\n<li>从其他地方引流</li>\n</ul>\n<h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><ul>\n<li>部分收费</li>\n</ul>\n<h3 id=\"外包\"><a href=\"#外包\" class=\"headerlink\" title=\"外包\"></a>外包</h3><h3 id=\"专利申请\"><a href=\"#专利申请\" class=\"headerlink\" title=\"专利申请\"></a>专利申请</h3>"},{"_content":"## 连续回数生成\n\n回数就是正反念都一样的数，如24542,8074708\n连续回数就是还要满足他每个数字是连续或者倒序的，如123454321,5678765\n\n``` javascript\nfunction palindromeNum(n, m) {\n    var res = [];\n    function num(n, m) {\n        res.push(n);\n        if (n < m) {\n            num(n + 1, m);\n            res.push(n);\n        }\n    }\n    num(2, 5);\n    return res.join('');\n};\npalindromeNum(2,5); //2345432\n```\n\n## 替换数字末尾的连续0为9\n\n如：1348900 => 1348999; 40670000 => 40679999\n\n``` javascript\nfunction zeroToNine(num){\n    (num + '').replace(/0(?=(0+$)|\\b)/g,9)\n}\nzeroToNine(1348900); //1348999\nzeroToNine(40670000); //40679999\n```\n","source":"_drafts/fascinated-method.md","raw":"## 连续回数生成\n\n回数就是正反念都一样的数，如24542,8074708\n连续回数就是还要满足他每个数字是连续或者倒序的，如123454321,5678765\n\n``` javascript\nfunction palindromeNum(n, m) {\n    var res = [];\n    function num(n, m) {\n        res.push(n);\n        if (n < m) {\n            num(n + 1, m);\n            res.push(n);\n        }\n    }\n    num(2, 5);\n    return res.join('');\n};\npalindromeNum(2,5); //2345432\n```\n\n## 替换数字末尾的连续0为9\n\n如：1348900 => 1348999; 40670000 => 40679999\n\n``` javascript\nfunction zeroToNine(num){\n    (num + '').replace(/0(?=(0+$)|\\b)/g,9)\n}\nzeroToNine(1348900); //1348999\nzeroToNine(40670000); //40679999\n```\n","slug":"fascinated-method","published":0,"date":"2018-07-30T01:55:33.658Z","updated":"2018-07-30T01:55:33.658Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0sweo00052kv7jb1ry5ct","content":"<h2 id=\"连续回数生成\"><a href=\"#连续回数生成\" class=\"headerlink\" title=\"连续回数生成\"></a>连续回数生成</h2><p>回数就是正反念都一样的数，如24542,8074708<br>连续回数就是还要满足他每个数字是连续或者倒序的，如123454321,5678765</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindromeNum</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">        res.push(n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m) &#123;</span><br><span class=\"line\">            num(n + <span class=\"number\">1</span>, m);</span><br><span class=\"line\">            res.push(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num(<span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">palindromeNum(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">//2345432</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"替换数字末尾的连续0为9\"><a href=\"#替换数字末尾的连续0为9\" class=\"headerlink\" title=\"替换数字末尾的连续0为9\"></a>替换数字末尾的连续0为9</h2><p>如：1348900 =&gt; 1348999; 40670000 =&gt; 40679999</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zeroToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/0(?=(0+$)|\\b)/g</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">zeroToNine(<span class=\"number\">1348900</span>); <span class=\"comment\">//1348999</span></span><br><span class=\"line\">zeroToNine(<span class=\"number\">40670000</span>); <span class=\"comment\">//40679999</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"连续回数生成\"><a href=\"#连续回数生成\" class=\"headerlink\" title=\"连续回数生成\"></a>连续回数生成</h2><p>回数就是正反念都一样的数，如24542,8074708<br>连续回数就是还要满足他每个数字是连续或者倒序的，如123454321,5678765</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindromeNum</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">        res.push(n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m) &#123;</span><br><span class=\"line\">            num(n + <span class=\"number\">1</span>, m);</span><br><span class=\"line\">            res.push(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num(<span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">palindromeNum(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">//2345432</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"替换数字末尾的连续0为9\"><a href=\"#替换数字末尾的连续0为9\" class=\"headerlink\" title=\"替换数字末尾的连续0为9\"></a>替换数字末尾的连续0为9</h2><p>如：1348900 =&gt; 1348999; 40670000 =&gt; 40679999</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zeroToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/0(?=(0+$)|\\b)/g</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">zeroToNine(<span class=\"number\">1348900</span>); <span class=\"comment\">//1348999</span></span><br><span class=\"line\">zeroToNine(<span class=\"number\">40670000</span>); <span class=\"comment\">//40679999</span></span><br></pre></td></tr></table></figure>\n"},{"title":"hexo踩坑记","date":"2017-11-01T06:42:22.000Z","author":"J.2ue","_content":"\n> hexo是一个静态博客生成工具，其集成了大量的三方插件，来丰富博客功能。\n\n[TOC]\n\n## error deployer not found: git\n\n出现这种问题一般有两种情况，按照下面的两步来操作就OK了\n\n- 检查根目录下`_config.yml`文件的`deploy`的`type`值是否为`git`，如果不是请修改成`git`\n- 检查当前项目是否安装`hexo-deployer-git`，如未安装，请执行`npm install hexo-deployer-git --save`\n\n## end of the stream or a document separator is expected at line x, column y\n\n一般是书写markdown文档出现语法错误，缺少分隔符（一般都是因为缺少空格）\n","source":"_drafts/hexo-tips.md","raw":"---\ntitle: hexo踩坑记\ndate: 2017-11-1 14:42:22\nauthor: J.2ue\ntags:\n- hexo\ncategories:\n- tools\n---\n\n> hexo是一个静态博客生成工具，其集成了大量的三方插件，来丰富博客功能。\n\n[TOC]\n\n## error deployer not found: git\n\n出现这种问题一般有两种情况，按照下面的两步来操作就OK了\n\n- 检查根目录下`_config.yml`文件的`deploy`的`type`值是否为`git`，如果不是请修改成`git`\n- 检查当前项目是否安装`hexo-deployer-git`，如未安装，请执行`npm install hexo-deployer-git --save`\n\n## end of the stream or a document separator is expected at line x, column y\n\n一般是书写markdown文档出现语法错误，缺少分隔符（一般都是因为缺少空格）\n","slug":"hexo-tips","published":0,"updated":"2018-07-30T01:55:33.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0sweq00062kv7n5y8vmtm","content":"<blockquote>\n<p>hexo是一个静态博客生成工具，其集成了大量的三方插件，来丰富博客功能。</p>\n</blockquote>\n<p>[TOC]</p>\n<h2 id=\"error-deployer-not-found-git\"><a href=\"#error-deployer-not-found-git\" class=\"headerlink\" title=\"error deployer not found: git\"></a>error deployer not found: git</h2><p>出现这种问题一般有两种情况，按照下面的两步来操作就OK了</p>\n<ul>\n<li>检查根目录下<code>_config.yml</code>文件的<code>deploy</code>的<code>type</code>值是否为<code>git</code>，如果不是请修改成<code>git</code></li>\n<li>检查当前项目是否安装<code>hexo-deployer-git</code>，如未安装，请执行<code>npm install hexo-deployer-git --save</code></li>\n</ul>\n<h2 id=\"end-of-the-stream-or-a-document-separator-is-expected-at-line-x-column-y\"><a href=\"#end-of-the-stream-or-a-document-separator-is-expected-at-line-x-column-y\" class=\"headerlink\" title=\"end of the stream or a document separator is expected at line x, column y\"></a>end of the stream or a document separator is expected at line x, column y</h2><p>一般是书写markdown文档出现语法错误，缺少分隔符（一般都是因为缺少空格）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>hexo是一个静态博客生成工具，其集成了大量的三方插件，来丰富博客功能。</p>\n</blockquote>\n<p>[TOC]</p>\n<h2 id=\"error-deployer-not-found-git\"><a href=\"#error-deployer-not-found-git\" class=\"headerlink\" title=\"error deployer not found: git\"></a>error deployer not found: git</h2><p>出现这种问题一般有两种情况，按照下面的两步来操作就OK了</p>\n<ul>\n<li>检查根目录下<code>_config.yml</code>文件的<code>deploy</code>的<code>type</code>值是否为<code>git</code>，如果不是请修改成<code>git</code></li>\n<li>检查当前项目是否安装<code>hexo-deployer-git</code>，如未安装，请执行<code>npm install hexo-deployer-git --save</code></li>\n</ul>\n<h2 id=\"end-of-the-stream-or-a-document-separator-is-expected-at-line-x-column-y\"><a href=\"#end-of-the-stream-or-a-document-separator-is-expected-at-line-x-column-y\" class=\"headerlink\" title=\"end of the stream or a document separator is expected at line x, column y\"></a>end of the stream or a document separator is expected at line x, column y</h2><p>一般是书写markdown文档出现语法错误，缺少分隔符（一般都是因为缺少空格）</p>\n"},{"title":"深入了解字符串的转义反转义与转码和解码","date":"2017-11-24T01:04:49.000Z","author":"J.2ue","_content":"\n> 开发过程中，常常涉及到前后端数据交互，当前端向后端发送数据时，出于某些目的（下面具体说）我们常常会对数据中的某些字符串进行转义或转码；当前端从后端拿到数据后，对应被转义或转码的字符也要转义回来，已保证和用户的期望一致。\n\n## 目的\n\n通常而言，转义和转码的目的不同。\n转义通常是为了保持信息的完整度和存储一致性：\n* 像`<`和`>`这类符号已经用来表示`HTML`标签，因此就不能直接当作文本中的符号来使用。为了在`HTML`文档中使用这些符号，就需要定义它的转义字符串，当解释程序遇到这类字符串时就把它解释为真实的字符。\n* 有些字符在`ASCII`字符集中没有定义，因此需要使用转义字符串来表示\n转码通常是对于`javascript`代码，一般是为了安全\n* 为了防止注入攻击（`XSS`），需要转义\n\n## 转义字符串的组成\n\n转义字符串（`Escape Sequence`），即字符实体（`Character Entity`）分成三部分：第一部分是一个`&`符号，英文叫`ampersand`；第二部分是实体（`Entity`）名字或者是#加上实体（`Entity`）编号；第三部分是一个分号。比如，要显示小于号（`<`），就可以写 `&lt;`或者 `&#60;`。\n注意：\n\n- 实体名称（`Entity`）是区分大小写的\n- 同一个符号，可以用“实体名称”和“实体编号”两种方式引用，“实体名称”的优势在于便于记忆，但不能保证所有的浏览器都能顺利识别它，而“实体编号”则没有这种担忧，但它实在不方便记忆。\n- “实体编号”可以通过`javascript`的`fromCharCode`方法来转换成字符串，但是“实体名称”则不行。\n\n|    方法名     |   功能   | 原数组是否改变 |   返回    |\n| :--------: | :----: | :-----: | :-----: |\n| **length** | 获取数组长度 |   NO    | 被引用数组长度 |\n\n## 转义\n\n## 反转义\n\n总的来说，反转义有两种方法，一种利用正则的的方式匹配替换，另外一种则是利用浏览器内核自动转换\n\n### 利用正则\n\n``` javascript\n\nthis.HTML_DECODE = {\n    \"<\"  : \"<\",\n    \">\"  : \">\",\n    \"&\" : \"&\",\n    \" \": \" \",\n    \"\"\": \"\\\"\",\n    \"©\": \"©\"\n};\n(function getSTr(str){\n    str.replace(/&\\w+;|&#(\\d+);/g,function($0,$1) {\n        console.log('$0==>',$0)\n        console.log('$1==>',$1)\n    })\n})('&lt;&#890;&99&#00&0x99;')\n```\n\n## 利用浏览器自动转义\n\n当转义后的字符串直接插入到DOM中后，浏览器会自动进行反转义。众所周知，`e.innerHTML`可以取出DOM节点的内容，但是他取出的内容是转义后的内容，只有通过`e.childNodes[i].nodeValue`方法取出的内容才是反转义的内容。\n\n``` javascript\nfunction htmlDecode(_html) {\n    var e = document.createElement('div'), res = '';\n    e.innerHTML = _html;\n    for(var i = 0; i < e.childNodes.length; i++){\n        res += e.childNodes[i].nodeValue;\n    };\n    return res;\n};\n```\n\n注意：`e.childNodes`是一个数组，他将`_html`分段（每65536字符分一段）存储到`e.childNodes[i]`中，使用`e.childNodes`方法取得反转义后的字符串需要循环`e.childNodes`数组\n\nhttp://tool.oschina.net/commons?type=2\n\n常用HTML转义字符,html转义符,JavaScript转义符,html转义字符表,HTML语言特殊字符对照表(ISO Latin-1字符集) - 来源：嘻嘻网 114.xixik.com\nhttp://114.xixik.com/character/\n\n转义字符_百度百科\nhttps://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin\n\njs字符实体 转义字符串 - 孟宇 - 博客园\nhttp://www.cnblogs.com/mengyuxin/p/5970687.html\n\n用Javascript（js）进行HTML转义工具（处理特殊字符显示） - 程序猿开发日志【学习永无止境】 - CSDN博客\nhttp://blog.csdn.net/hj7jay/article/details/51280405\n\nJS对HTML字符的转义和反转义 - CSDN博客\nhttp://blog.csdn.net/u013026207/article/details/53994032\n\n文字编码简介 - CSDN博客\nhttp://blog.csdn.net/guolb57/article/details/6260215\n\nfunction toWeirdCase(string){\n  return string.replace(/([a-zA-z])(([a-zA-z]|\\s)|)/g,(a,b,c) => (b.toUpperCase() + c))\n}\n\nfunction htmlDecode(str) {\n    let e = document.createElement('div'), _html = '';\n    e.innerHTML = pxToRem(str);\n    for(let i = 0; i < e.childNodes.length; i++){\n        _html += e.childNodes[i].nodeValue;\n    };\n    return _html;\n};\n\n//获取Html转义字符\nfunction htmlEncode(html) {\n  return document.createElement('a').appendChild(document.createTextNode(html)).parentNode.innerHTML;\n};\n//获取Html\nfunction htmlDecode(html) {\n  var a = document.createElement('a');\n  a.innerHTML = html;\n  return a.textContent;\n};\n","source":"_drafts/html-decode.md","raw":"---\ntitle: 深入了解字符串的转义反转义与转码和解码\ndate: 2017-11-24 9:04:49\nauthor: J.2ue\ntags:\n- 转义\n- 反转义\n- 转码\n- 解码\ncategories:\n- javascript\n---\n\n> 开发过程中，常常涉及到前后端数据交互，当前端向后端发送数据时，出于某些目的（下面具体说）我们常常会对数据中的某些字符串进行转义或转码；当前端从后端拿到数据后，对应被转义或转码的字符也要转义回来，已保证和用户的期望一致。\n\n## 目的\n\n通常而言，转义和转码的目的不同。\n转义通常是为了保持信息的完整度和存储一致性：\n* 像`<`和`>`这类符号已经用来表示`HTML`标签，因此就不能直接当作文本中的符号来使用。为了在`HTML`文档中使用这些符号，就需要定义它的转义字符串，当解释程序遇到这类字符串时就把它解释为真实的字符。\n* 有些字符在`ASCII`字符集中没有定义，因此需要使用转义字符串来表示\n转码通常是对于`javascript`代码，一般是为了安全\n* 为了防止注入攻击（`XSS`），需要转义\n\n## 转义字符串的组成\n\n转义字符串（`Escape Sequence`），即字符实体（`Character Entity`）分成三部分：第一部分是一个`&`符号，英文叫`ampersand`；第二部分是实体（`Entity`）名字或者是#加上实体（`Entity`）编号；第三部分是一个分号。比如，要显示小于号（`<`），就可以写 `&lt;`或者 `&#60;`。\n注意：\n\n- 实体名称（`Entity`）是区分大小写的\n- 同一个符号，可以用“实体名称”和“实体编号”两种方式引用，“实体名称”的优势在于便于记忆，但不能保证所有的浏览器都能顺利识别它，而“实体编号”则没有这种担忧，但它实在不方便记忆。\n- “实体编号”可以通过`javascript`的`fromCharCode`方法来转换成字符串，但是“实体名称”则不行。\n\n|    方法名     |   功能   | 原数组是否改变 |   返回    |\n| :--------: | :----: | :-----: | :-----: |\n| **length** | 获取数组长度 |   NO    | 被引用数组长度 |\n\n## 转义\n\n## 反转义\n\n总的来说，反转义有两种方法，一种利用正则的的方式匹配替换，另外一种则是利用浏览器内核自动转换\n\n### 利用正则\n\n``` javascript\n\nthis.HTML_DECODE = {\n    \"<\"  : \"<\",\n    \">\"  : \">\",\n    \"&\" : \"&\",\n    \" \": \" \",\n    \"\"\": \"\\\"\",\n    \"©\": \"©\"\n};\n(function getSTr(str){\n    str.replace(/&\\w+;|&#(\\d+);/g,function($0,$1) {\n        console.log('$0==>',$0)\n        console.log('$1==>',$1)\n    })\n})('&lt;&#890;&99&#00&0x99;')\n```\n\n## 利用浏览器自动转义\n\n当转义后的字符串直接插入到DOM中后，浏览器会自动进行反转义。众所周知，`e.innerHTML`可以取出DOM节点的内容，但是他取出的内容是转义后的内容，只有通过`e.childNodes[i].nodeValue`方法取出的内容才是反转义的内容。\n\n``` javascript\nfunction htmlDecode(_html) {\n    var e = document.createElement('div'), res = '';\n    e.innerHTML = _html;\n    for(var i = 0; i < e.childNodes.length; i++){\n        res += e.childNodes[i].nodeValue;\n    };\n    return res;\n};\n```\n\n注意：`e.childNodes`是一个数组，他将`_html`分段（每65536字符分一段）存储到`e.childNodes[i]`中，使用`e.childNodes`方法取得反转义后的字符串需要循环`e.childNodes`数组\n\nhttp://tool.oschina.net/commons?type=2\n\n常用HTML转义字符,html转义符,JavaScript转义符,html转义字符表,HTML语言特殊字符对照表(ISO Latin-1字符集) - 来源：嘻嘻网 114.xixik.com\nhttp://114.xixik.com/character/\n\n转义字符_百度百科\nhttps://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin\n\njs字符实体 转义字符串 - 孟宇 - 博客园\nhttp://www.cnblogs.com/mengyuxin/p/5970687.html\n\n用Javascript（js）进行HTML转义工具（处理特殊字符显示） - 程序猿开发日志【学习永无止境】 - CSDN博客\nhttp://blog.csdn.net/hj7jay/article/details/51280405\n\nJS对HTML字符的转义和反转义 - CSDN博客\nhttp://blog.csdn.net/u013026207/article/details/53994032\n\n文字编码简介 - CSDN博客\nhttp://blog.csdn.net/guolb57/article/details/6260215\n\nfunction toWeirdCase(string){\n  return string.replace(/([a-zA-z])(([a-zA-z]|\\s)|)/g,(a,b,c) => (b.toUpperCase() + c))\n}\n\nfunction htmlDecode(str) {\n    let e = document.createElement('div'), _html = '';\n    e.innerHTML = pxToRem(str);\n    for(let i = 0; i < e.childNodes.length; i++){\n        _html += e.childNodes[i].nodeValue;\n    };\n    return _html;\n};\n\n//获取Html转义字符\nfunction htmlEncode(html) {\n  return document.createElement('a').appendChild(document.createTextNode(html)).parentNode.innerHTML;\n};\n//获取Html\nfunction htmlDecode(html) {\n  var a = document.createElement('a');\n  a.innerHTML = html;\n  return a.textContent;\n};\n","slug":"html-decode","published":0,"updated":"2018-07-30T01:55:33.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swer00072kv7jag4v3gk","content":"<blockquote>\n<p>开发过程中，常常涉及到前后端数据交互，当前端向后端发送数据时，出于某些目的（下面具体说）我们常常会对数据中的某些字符串进行转义或转码；当前端从后端拿到数据后，对应被转义或转码的字符也要转义回来，已保证和用户的期望一致。</p>\n</blockquote>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>通常而言，转义和转码的目的不同。<br>转义通常是为了保持信息的完整度和存储一致性：</p>\n<ul>\n<li>像<code>&lt;</code>和<code>&gt;</code>这类符号已经用来表示<code>HTML</code>标签，因此就不能直接当作文本中的符号来使用。为了在<code>HTML</code>文档中使用这些符号，就需要定义它的转义字符串，当解释程序遇到这类字符串时就把它解释为真实的字符。</li>\n<li>有些字符在<code>ASCII</code>字符集中没有定义，因此需要使用转义字符串来表示<br>转码通常是对于<code>javascript</code>代码，一般是为了安全</li>\n<li>为了防止注入攻击（<code>XSS</code>），需要转义</li>\n</ul>\n<h2 id=\"转义字符串的组成\"><a href=\"#转义字符串的组成\" class=\"headerlink\" title=\"转义字符串的组成\"></a>转义字符串的组成</h2><p>转义字符串（<code>Escape Sequence</code>），即字符实体（<code>Character Entity</code>）分成三部分：第一部分是一个<code>&amp;</code>符号，英文叫<code>ampersand</code>；第二部分是实体（<code>Entity</code>）名字或者是#加上实体（<code>Entity</code>）编号；第三部分是一个分号。比如，要显示小于号（<code>&lt;</code>），就可以写 <code>&amp;lt;</code>或者 <code>&amp;#60;</code>。<br>注意：</p>\n<ul>\n<li>实体名称（<code>Entity</code>）是区分大小写的</li>\n<li>同一个符号，可以用“实体名称”和“实体编号”两种方式引用，“实体名称”的优势在于便于记忆，但不能保证所有的浏览器都能顺利识别它，而“实体编号”则没有这种担忧，但它实在不方便记忆。</li>\n<li>“实体编号”可以通过<code>javascript</code>的<code>fromCharCode</code>方法来转换成字符串，但是“实体名称”则不行。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">原数组是否改变</th>\n<th style=\"text-align:center\">返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>length</strong></td>\n<td style=\"text-align:center\">获取数组长度</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">被引用数组长度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><h2 id=\"反转义\"><a href=\"#反转义\" class=\"headerlink\" title=\"反转义\"></a>反转义</h2><p>总的来说，反转义有两种方法，一种利用正则的的方式匹配替换，另外一种则是利用浏览器内核自动转换</p>\n<h3 id=\"利用正则\"><a href=\"#利用正则\" class=\"headerlink\" title=\"利用正则\"></a>利用正则</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.HTML_DECODE = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"&lt;\"</span>  : <span class=\"string\">\"&lt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&gt;\"</span>  : <span class=\"string\">\"&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&amp;\"</span> : <span class=\"string\">\"&amp;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\" \"</span>: <span class=\"string\">\" \"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\": \"</span>\\<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"©\"</span>: <span class=\"string\">\"©\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSTr</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    str.replace(<span class=\"regexp\">/&amp;\\w+;|&amp;#(\\d+);/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">0</span>,$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'$0==&gt;'</span>,$<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'$1==&gt;'</span>,$<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)(<span class=\"string\">'&amp;lt;&amp;#890;&amp;99&amp;#00&amp;0x99;'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用浏览器自动转义\"><a href=\"#利用浏览器自动转义\" class=\"headerlink\" title=\"利用浏览器自动转义\"></a>利用浏览器自动转义</h2><p>当转义后的字符串直接插入到DOM中后，浏览器会自动进行反转义。众所周知，<code>e.innerHTML</code>可以取出DOM节点的内容，但是他取出的内容是转义后的内容，只有通过<code>e.childNodes[i].nodeValue</code>方法取出的内容才是反转义的内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlDecode</span>(<span class=\"params\">_html</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>), res = <span class=\"string\">''</span>;</span><br><span class=\"line\">    e.innerHTML = _html;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; e.childNodes.length; i++)&#123;</span><br><span class=\"line\">        res += e.childNodes[i].nodeValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意：<code>e.childNodes</code>是一个数组，他将<code>_html</code>分段（每65536字符分一段）存储到<code>e.childNodes[i]</code>中，使用<code>e.childNodes</code>方法取得反转义后的字符串需要循环<code>e.childNodes</code>数组</p>\n<p><a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>常用HTML转义字符,html转义符,JavaScript转义符,html转义字符表,HTML语言特殊字符对照表(ISO Latin-1字符集) - 来源：嘻嘻网 114.xixik.com<br><a href=\"http://114.xixik.com/character/\" target=\"_blank\" rel=\"noopener\">http://114.xixik.com/character/</a></p>\n<p>转义字符_百度百科<br><a href=\"https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin</a></p>\n<p>js字符实体 转义字符串 - 孟宇 - 博客园<br><a href=\"http://www.cnblogs.com/mengyuxin/p/5970687.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mengyuxin/p/5970687.html</a></p>\n<p>用Javascript（js）进行HTML转义工具（处理特殊字符显示） - 程序猿开发日志【学习永无止境】 - CSDN博客<br><a href=\"http://blog.csdn.net/hj7jay/article/details/51280405\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hj7jay/article/details/51280405</a></p>\n<p>JS对HTML字符的转义和反转义 - CSDN博客<br><a href=\"http://blog.csdn.net/u013026207/article/details/53994032\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u013026207/article/details/53994032</a></p>\n<p>文字编码简介 - CSDN博客<br><a href=\"http://blog.csdn.net/guolb57/article/details/6260215\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/guolb57/article/details/6260215</a></p>\n<p>function toWeirdCase(string){<br>  return string.replace(/([a-zA-z])(([a-zA-z]|\\s)|)/g,(a,b,c) =&gt; (b.toUpperCase() + c))<br>}</p>\n<p>function htmlDecode(str) {<br>    let e = document.createElement(‘div’), _html = ‘’;<br>    e.innerHTML = pxToRem(str);<br>    for(let i = 0; i &lt; e.childNodes.length; i++){<br>        _html += e.childNodes[i].nodeValue;<br>    };<br>    return _html;<br>};</p>\n<p>//获取Html转义字符<br>function htmlEncode(html) {<br>  return document.createElement(‘a’).appendChild(document.createTextNode(html)).parentNode.innerHTML;<br>};<br>//获取Html<br>function htmlDecode(html) {<br>  var a = document.createElement(‘a’);<br>  a.innerHTML = html;<br>  return a.textContent;<br>};</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>开发过程中，常常涉及到前后端数据交互，当前端向后端发送数据时，出于某些目的（下面具体说）我们常常会对数据中的某些字符串进行转义或转码；当前端从后端拿到数据后，对应被转义或转码的字符也要转义回来，已保证和用户的期望一致。</p>\n</blockquote>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>通常而言，转义和转码的目的不同。<br>转义通常是为了保持信息的完整度和存储一致性：</p>\n<ul>\n<li>像<code>&lt;</code>和<code>&gt;</code>这类符号已经用来表示<code>HTML</code>标签，因此就不能直接当作文本中的符号来使用。为了在<code>HTML</code>文档中使用这些符号，就需要定义它的转义字符串，当解释程序遇到这类字符串时就把它解释为真实的字符。</li>\n<li>有些字符在<code>ASCII</code>字符集中没有定义，因此需要使用转义字符串来表示<br>转码通常是对于<code>javascript</code>代码，一般是为了安全</li>\n<li>为了防止注入攻击（<code>XSS</code>），需要转义</li>\n</ul>\n<h2 id=\"转义字符串的组成\"><a href=\"#转义字符串的组成\" class=\"headerlink\" title=\"转义字符串的组成\"></a>转义字符串的组成</h2><p>转义字符串（<code>Escape Sequence</code>），即字符实体（<code>Character Entity</code>）分成三部分：第一部分是一个<code>&amp;</code>符号，英文叫<code>ampersand</code>；第二部分是实体（<code>Entity</code>）名字或者是#加上实体（<code>Entity</code>）编号；第三部分是一个分号。比如，要显示小于号（<code>&lt;</code>），就可以写 <code>&amp;lt;</code>或者 <code>&amp;#60;</code>。<br>注意：</p>\n<ul>\n<li>实体名称（<code>Entity</code>）是区分大小写的</li>\n<li>同一个符号，可以用“实体名称”和“实体编号”两种方式引用，“实体名称”的优势在于便于记忆，但不能保证所有的浏览器都能顺利识别它，而“实体编号”则没有这种担忧，但它实在不方便记忆。</li>\n<li>“实体编号”可以通过<code>javascript</code>的<code>fromCharCode</code>方法来转换成字符串，但是“实体名称”则不行。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">原数组是否改变</th>\n<th style=\"text-align:center\">返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>length</strong></td>\n<td style=\"text-align:center\">获取数组长度</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">被引用数组长度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><h2 id=\"反转义\"><a href=\"#反转义\" class=\"headerlink\" title=\"反转义\"></a>反转义</h2><p>总的来说，反转义有两种方法，一种利用正则的的方式匹配替换，另外一种则是利用浏览器内核自动转换</p>\n<h3 id=\"利用正则\"><a href=\"#利用正则\" class=\"headerlink\" title=\"利用正则\"></a>利用正则</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.HTML_DECODE = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"&lt;\"</span>  : <span class=\"string\">\"&lt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&gt;\"</span>  : <span class=\"string\">\"&gt;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"&amp;\"</span> : <span class=\"string\">\"&amp;\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\" \"</span>: <span class=\"string\">\" \"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\": \"</span>\\<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"©\"</span>: <span class=\"string\">\"©\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSTr</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    str.replace(<span class=\"regexp\">/&amp;\\w+;|&amp;#(\\d+);/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">0</span>,$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'$0==&gt;'</span>,$<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'$1==&gt;'</span>,$<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)(<span class=\"string\">'&amp;lt;&amp;#890;&amp;99&amp;#00&amp;0x99;'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用浏览器自动转义\"><a href=\"#利用浏览器自动转义\" class=\"headerlink\" title=\"利用浏览器自动转义\"></a>利用浏览器自动转义</h2><p>当转义后的字符串直接插入到DOM中后，浏览器会自动进行反转义。众所周知，<code>e.innerHTML</code>可以取出DOM节点的内容，但是他取出的内容是转义后的内容，只有通过<code>e.childNodes[i].nodeValue</code>方法取出的内容才是反转义的内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlDecode</span>(<span class=\"params\">_html</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>), res = <span class=\"string\">''</span>;</span><br><span class=\"line\">    e.innerHTML = _html;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; e.childNodes.length; i++)&#123;</span><br><span class=\"line\">        res += e.childNodes[i].nodeValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意：<code>e.childNodes</code>是一个数组，他将<code>_html</code>分段（每65536字符分一段）存储到<code>e.childNodes[i]</code>中，使用<code>e.childNodes</code>方法取得反转义后的字符串需要循环<code>e.childNodes</code>数组</p>\n<p><a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<p>常用HTML转义字符,html转义符,JavaScript转义符,html转义字符表,HTML语言特殊字符对照表(ISO Latin-1字符集) - 来源：嘻嘻网 114.xixik.com<br><a href=\"http://114.xixik.com/character/\" target=\"_blank\" rel=\"noopener\">http://114.xixik.com/character/</a></p>\n<p>转义字符_百度百科<br><a href=\"https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397?fr=aladdin</a></p>\n<p>js字符实体 转义字符串 - 孟宇 - 博客园<br><a href=\"http://www.cnblogs.com/mengyuxin/p/5970687.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mengyuxin/p/5970687.html</a></p>\n<p>用Javascript（js）进行HTML转义工具（处理特殊字符显示） - 程序猿开发日志【学习永无止境】 - CSDN博客<br><a href=\"http://blog.csdn.net/hj7jay/article/details/51280405\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hj7jay/article/details/51280405</a></p>\n<p>JS对HTML字符的转义和反转义 - CSDN博客<br><a href=\"http://blog.csdn.net/u013026207/article/details/53994032\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u013026207/article/details/53994032</a></p>\n<p>文字编码简介 - CSDN博客<br><a href=\"http://blog.csdn.net/guolb57/article/details/6260215\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/guolb57/article/details/6260215</a></p>\n<p>function toWeirdCase(string){<br>  return string.replace(/([a-zA-z])(([a-zA-z]|\\s)|)/g,(a,b,c) =&gt; (b.toUpperCase() + c))<br>}</p>\n<p>function htmlDecode(str) {<br>    let e = document.createElement(‘div’), _html = ‘’;<br>    e.innerHTML = pxToRem(str);<br>    for(let i = 0; i &lt; e.childNodes.length; i++){<br>        _html += e.childNodes[i].nodeValue;<br>    };<br>    return _html;<br>};</p>\n<p>//获取Html转义字符<br>function htmlEncode(html) {<br>  return document.createElement(‘a’).appendChild(document.createTextNode(html)).parentNode.innerHTML;<br>};<br>//获取Html<br>function htmlDecode(html) {<br>  var a = document.createElement(‘a’);<br>  a.innerHTML = html;<br>  return a.textContent;<br>};</p>\n"},{"title":"vue踩坑记（一）","date":"2017-05-18T14:10:55.000Z","author":"J.2ue","_content":"\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n\n# 发端\n从使用vue以来，断断续续已有半年，期间写过几个简单的demo，还厚颜无耻的放到了我的github上。直到最近，在项目中运用了vue，才发现以前自己对他的运用和理解真的很浅薄（-_- 现在也很浅薄），我觉得有必要记录一些使用心得（其实就是坑）。\n\n# 遇到的坑\n- 计算属性VS监听属性VS深度监听\n- 关于vue中style的scoped属性\n- 关于编译第三方ui库自定义样式\n- 如何在vue实例上注册全局方法以及是否有必要在vue上注册方法\n- 父子组件数据互通\n    - 数据值互通\n    - 方法函数互通\n    - 使用vue-resource实现状态的全局管理\n- ajax的选择\n- slot插槽的运用\n- use方法的应用\n- 在全局引用css\n- minx混合属性\n- 操纵DOM节点\n    - 路由切换时操纵DOM节点可以通过监听$router变化来实现\n    - 建议使用原生js封装一些通用方法\n- 路由\n    - 路由切换不刷新页面产生的影响以及解决方案\n    - 前端如何实现重定向到404路由\n    - 路由嵌套及继承（在子路由中使用'/'会发生什么）\n    - ...\n\n- 额外的周边工具的使用\n    - webpack的配置\n\n# 坑\n- 获取属性，获取公用属性，通过标签分类\n- 组件初始化时computed无法拿到props的属性，无法拿到method的方法\n- methods里面不能使用箭头函数: 会改变this的指向\n- v-if,v-else,v-else-if\n# 解决方案\n","source":"_drafts/learn-vue.md","raw":"---\ntitle: vue踩坑记（一）\ndate: 2017-5-18 22:10:55\nauthor: J.2ue\ntags:\n- vue\ncategories:\n- vue\n---\n\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n\n# 发端\n从使用vue以来，断断续续已有半年，期间写过几个简单的demo，还厚颜无耻的放到了我的github上。直到最近，在项目中运用了vue，才发现以前自己对他的运用和理解真的很浅薄（-_- 现在也很浅薄），我觉得有必要记录一些使用心得（其实就是坑）。\n\n# 遇到的坑\n- 计算属性VS监听属性VS深度监听\n- 关于vue中style的scoped属性\n- 关于编译第三方ui库自定义样式\n- 如何在vue实例上注册全局方法以及是否有必要在vue上注册方法\n- 父子组件数据互通\n    - 数据值互通\n    - 方法函数互通\n    - 使用vue-resource实现状态的全局管理\n- ajax的选择\n- slot插槽的运用\n- use方法的应用\n- 在全局引用css\n- minx混合属性\n- 操纵DOM节点\n    - 路由切换时操纵DOM节点可以通过监听$router变化来实现\n    - 建议使用原生js封装一些通用方法\n- 路由\n    - 路由切换不刷新页面产生的影响以及解决方案\n    - 前端如何实现重定向到404路由\n    - 路由嵌套及继承（在子路由中使用'/'会发生什么）\n    - ...\n\n- 额外的周边工具的使用\n    - webpack的配置\n\n# 坑\n- 获取属性，获取公用属性，通过标签分类\n- 组件初始化时computed无法拿到props的属性，无法拿到method的方法\n- methods里面不能使用箭头函数: 会改变this的指向\n- v-if,v-else,v-else-if\n# 解决方案\n","slug":"learn-vue","published":0,"updated":"2018-07-30T01:55:33.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swet000a2kv7qhyy9nk8","content":"<blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n</blockquote>\n<h1 id=\"发端\"><a href=\"#发端\" class=\"headerlink\" title=\"发端\"></a>发端</h1><p>从使用vue以来，断断续续已有半年，期间写过几个简单的demo，还厚颜无耻的放到了我的github上。直到最近，在项目中运用了vue，才发现以前自己对他的运用和理解真的很浅薄（-_- 现在也很浅薄），我觉得有必要记录一些使用心得（其实就是坑）。</p>\n<h1 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h1><ul>\n<li>计算属性VS监听属性VS深度监听</li>\n<li>关于vue中style的scoped属性</li>\n<li>关于编译第三方ui库自定义样式</li>\n<li>如何在vue实例上注册全局方法以及是否有必要在vue上注册方法</li>\n<li>父子组件数据互通<ul>\n<li>数据值互通</li>\n<li>方法函数互通</li>\n<li>使用vue-resource实现状态的全局管理</li>\n</ul>\n</li>\n<li>ajax的选择</li>\n<li>slot插槽的运用</li>\n<li>use方法的应用</li>\n<li>在全局引用css</li>\n<li>minx混合属性</li>\n<li>操纵DOM节点<ul>\n<li>路由切换时操纵DOM节点可以通过监听$router变化来实现</li>\n<li>建议使用原生js封装一些通用方法</li>\n</ul>\n</li>\n<li><p>路由</p>\n<ul>\n<li>路由切换不刷新页面产生的影响以及解决方案</li>\n<li>前端如何实现重定向到404路由</li>\n<li>路由嵌套及继承（在子路由中使用’/‘会发生什么）</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>额外的周边工具的使用</p>\n<ul>\n<li>webpack的配置</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ul>\n<li>获取属性，获取公用属性，通过标签分类</li>\n<li>组件初始化时computed无法拿到props的属性，无法拿到method的方法</li>\n<li>methods里面不能使用箭头函数: 会改变this的指向</li>\n<li>v-if,v-else,v-else-if<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n</blockquote>\n<h1 id=\"发端\"><a href=\"#发端\" class=\"headerlink\" title=\"发端\"></a>发端</h1><p>从使用vue以来，断断续续已有半年，期间写过几个简单的demo，还厚颜无耻的放到了我的github上。直到最近，在项目中运用了vue，才发现以前自己对他的运用和理解真的很浅薄（-_- 现在也很浅薄），我觉得有必要记录一些使用心得（其实就是坑）。</p>\n<h1 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h1><ul>\n<li>计算属性VS监听属性VS深度监听</li>\n<li>关于vue中style的scoped属性</li>\n<li>关于编译第三方ui库自定义样式</li>\n<li>如何在vue实例上注册全局方法以及是否有必要在vue上注册方法</li>\n<li>父子组件数据互通<ul>\n<li>数据值互通</li>\n<li>方法函数互通</li>\n<li>使用vue-resource实现状态的全局管理</li>\n</ul>\n</li>\n<li>ajax的选择</li>\n<li>slot插槽的运用</li>\n<li>use方法的应用</li>\n<li>在全局引用css</li>\n<li>minx混合属性</li>\n<li>操纵DOM节点<ul>\n<li>路由切换时操纵DOM节点可以通过监听$router变化来实现</li>\n<li>建议使用原生js封装一些通用方法</li>\n</ul>\n</li>\n<li><p>路由</p>\n<ul>\n<li>路由切换不刷新页面产生的影响以及解决方案</li>\n<li>前端如何实现重定向到404路由</li>\n<li>路由嵌套及继承（在子路由中使用’/‘会发生什么）</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>额外的周边工具的使用</p>\n<ul>\n<li>webpack的配置</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ul>\n<li>获取属性，获取公用属性，通过标签分类</li>\n<li>组件初始化时computed无法拿到props的属性，无法拿到method的方法</li>\n<li>methods里面不能使用箭头函数: 会改变this的指向</li>\n<li>v-if,v-else,v-else-if<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1></li>\n</ul>\n"},{"title":"在项目中的vue实践与踩坑","date":"2017-05-18T14:10:55.000Z","author":"J.2ue","_content":"\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。\n\n## 谨慎箭头函数\n\n对于箭头函数，它会强行改变函数上下文，所以凡是在`vue`实例内部，需要用到`this`的地方，都不要在<b>最外层</b>使用箭头函数，否则拿不到期望的`this`实例。\n\n关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：\n- [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)\n- [computed](https://cn.vuejs.org/v2/api/#computed)\n- [watch](https://cn.vuejs.org/v2/api/#watch)\n- [methods](https://cn.vuejs.org/v2/api/#methods)\n\n## 谨慎style的scoped属性\n\nscoped属性在vue中被设计出来的目的：为了使得当前组件的样式不影响其他任何组件的样式。但同时也使得其他组件修改当前组件的样式变得困难（修改可能不会生肖），为什么会困难，我在一篇文章中分析了scoped是如何实现私有化样式的，可以去看看: [vue中慎用style的scoped属性](https://2ue.github.io/2017/11/15/vue-style-scoped/)。\n\n## vue-router配置404页面\n\n``` javascript\nlet routerList = [\n    { path: \"/\", component: Index },\n    { path: \"/login\", component: Login },\n    //404页面\n    { path: \"*\", component: NotFound}\n]\n```\n","source":"_drafts/learn-vueee.md","raw":"---\ntitle: 在项目中的vue实践与踩坑\ndate: 2017-5-18 22:10:55\nauthor: J.2ue\ntags:\n- vue\n- javascript\ncategories:\n- vue\n---\n\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>\n从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。\n\n## 谨慎箭头函数\n\n对于箭头函数，它会强行改变函数上下文，所以凡是在`vue`实例内部，需要用到`this`的地方，都不要在<b>最外层</b>使用箭头函数，否则拿不到期望的`this`实例。\n\n关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：\n- [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)\n- [computed](https://cn.vuejs.org/v2/api/#computed)\n- [watch](https://cn.vuejs.org/v2/api/#watch)\n- [methods](https://cn.vuejs.org/v2/api/#methods)\n\n## 谨慎style的scoped属性\n\nscoped属性在vue中被设计出来的目的：为了使得当前组件的样式不影响其他任何组件的样式。但同时也使得其他组件修改当前组件的样式变得困难（修改可能不会生肖），为什么会困难，我在一篇文章中分析了scoped是如何实现私有化样式的，可以去看看: [vue中慎用style的scoped属性](https://2ue.github.io/2017/11/15/vue-style-scoped/)。\n\n## vue-router配置404页面\n\n``` javascript\nlet routerList = [\n    { path: \"/\", component: Index },\n    { path: \"/login\", component: Login },\n    //404页面\n    { path: \"*\", component: NotFound}\n]\n```\n","slug":"learn-vueee","published":0,"updated":"2018-07-30T01:55:33.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swev000b2kv7o2yvpz3r","content":"<blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe><br>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。</p>\n</blockquote>\n<h2 id=\"谨慎箭头函数\"><a href=\"#谨慎箭头函数\" class=\"headerlink\" title=\"谨慎箭头函数\"></a>谨慎箭头函数</h2><p>对于箭头函数，它会强行改变函数上下文，所以凡是在<code>vue</code>实例内部，需要用到<code>this</code>的地方，都不要在<b>最外层</b>使用箭头函数，否则拿不到期望的<code>this</code>实例。</p>\n<p>关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#computed\" target=\"_blank\" rel=\"noopener\">computed</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">watch</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#methods\" target=\"_blank\" rel=\"noopener\">methods</a></li>\n</ul>\n<h2 id=\"谨慎style的scoped属性\"><a href=\"#谨慎style的scoped属性\" class=\"headerlink\" title=\"谨慎style的scoped属性\"></a>谨慎style的scoped属性</h2><p>scoped属性在vue中被设计出来的目的：为了使得当前组件的样式不影响其他任何组件的样式。但同时也使得其他组件修改当前组件的样式变得困难（修改可能不会生肖），为什么会困难，我在一篇文章中分析了scoped是如何实现私有化样式的，可以去看看: <a href=\"https://2ue.github.io/2017/11/15/vue-style-scoped/\" target=\"_blank\" rel=\"noopener\">vue中慎用style的scoped属性</a>。</p>\n<h2 id=\"vue-router配置404页面\"><a href=\"#vue-router配置404页面\" class=\"headerlink\" title=\"vue-router配置404页面\"></a>vue-router配置404页面</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routerList = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span>, <span class=\"attr\">component</span>: Index &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/login\"</span>, <span class=\"attr\">component</span>: Login &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//404页面</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"*\"</span>, <span class=\"attr\">component</span>: NotFound&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe><br>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。</p>\n</blockquote>\n<h2 id=\"谨慎箭头函数\"><a href=\"#谨慎箭头函数\" class=\"headerlink\" title=\"谨慎箭头函数\"></a>谨慎箭头函数</h2><p>对于箭头函数，它会强行改变函数上下文，所以凡是在<code>vue</code>实例内部，需要用到<code>this</code>的地方，都不要在<b>最外层</b>使用箭头函数，否则拿不到期望的<code>this</code>实例。</p>\n<p>关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#computed\" target=\"_blank\" rel=\"noopener\">computed</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">watch</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#methods\" target=\"_blank\" rel=\"noopener\">methods</a></li>\n</ul>\n<h2 id=\"谨慎style的scoped属性\"><a href=\"#谨慎style的scoped属性\" class=\"headerlink\" title=\"谨慎style的scoped属性\"></a>谨慎style的scoped属性</h2><p>scoped属性在vue中被设计出来的目的：为了使得当前组件的样式不影响其他任何组件的样式。但同时也使得其他组件修改当前组件的样式变得困难（修改可能不会生肖），为什么会困难，我在一篇文章中分析了scoped是如何实现私有化样式的，可以去看看: <a href=\"https://2ue.github.io/2017/11/15/vue-style-scoped/\" target=\"_blank\" rel=\"noopener\">vue中慎用style的scoped属性</a>。</p>\n<h2 id=\"vue-router配置404页面\"><a href=\"#vue-router配置404页面\" class=\"headerlink\" title=\"vue-router配置404页面\"></a>vue-router配置404页面</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> routerList = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/\"</span>, <span class=\"attr\">component</span>: Index &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"/login\"</span>, <span class=\"attr\">component</span>: Login &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//404页面</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">\"*\"</span>, <span class=\"attr\">component</span>: NotFound&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"_content":"## npm发布包\n\n\n### error\n- no_perms Private mode enable, only admin can publish this module\n\nhttps://segmentfault.com/a/1190000006250554\n\nhttp://www.cnblogs.com/pingfan1990/p/4824658.html\n\nhttp://cnodejs.org/topic/5364dcde31a870830700b847","source":"_drafts/npm.md","raw":"## npm发布包\n\n\n### error\n- no_perms Private mode enable, only admin can publish this module\n\nhttps://segmentfault.com/a/1190000006250554\n\nhttp://www.cnblogs.com/pingfan1990/p/4824658.html\n\nhttp://cnodejs.org/topic/5364dcde31a870830700b847","slug":"npm","published":0,"date":"2018-07-30T01:55:33.661Z","updated":"2018-07-30T01:55:33.661Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swew000c2kv7nkmqs4po","content":"<h2 id=\"npm发布包\"><a href=\"#npm发布包\" class=\"headerlink\" title=\"npm发布包\"></a>npm发布包</h2><h3 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h3><ul>\n<li>no_perms Private mode enable, only admin can publish this module</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000006250554\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006250554</a></p>\n<p><a href=\"http://www.cnblogs.com/pingfan1990/p/4824658.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/pingfan1990/p/4824658.html</a></p>\n<p><a href=\"http://cnodejs.org/topic/5364dcde31a870830700b847\" target=\"_blank\" rel=\"noopener\">http://cnodejs.org/topic/5364dcde31a870830700b847</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"npm发布包\"><a href=\"#npm发布包\" class=\"headerlink\" title=\"npm发布包\"></a>npm发布包</h2><h3 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h3><ul>\n<li>no_perms Private mode enable, only admin can publish this module</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000006250554\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006250554</a></p>\n<p><a href=\"http://www.cnblogs.com/pingfan1990/p/4824658.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/pingfan1990/p/4824658.html</a></p>\n<p><a href=\"http://cnodejs.org/topic/5364dcde31a870830700b847\" target=\"_blank\" rel=\"noopener\">http://cnodejs.org/topic/5364dcde31a870830700b847</a></p>\n"},{"_content":"## 待做项目\n\n## 弹幕\n\n播放器\n\n- 暂停，快进，快退，全屏，音量\n- 弹幕开启/关闭\n- 快捷键\n\n输入文字\n- 增加各种样式，并记录\n  - 控制长度（在输入端控制和在显示端控制）\n- 记录播放时间，以便于在播放时显示\n- 存储在服务器(待定)\n- 本地持久化存储(待定)\n- 同时显示效果\n\n显示弹幕\n- 动画显示\n    - 考虑用css实现或者js实现\n- 时间节点\n\n网站广告\n\n## 组件\n- rem\n- reset.css\n- util\n- 瀑布流插件\n- 时间加载器\n- 滚动条\n- 下拉刷新，下拉加载下一篇\n- 倒计时\n\n## 博客--自己开发主题\n- 设计，自主设计\n- 模块\n  - 文章\n  - 读书\n  - 简介\n  - 音乐\n  - 视频 （推荐视频，弹幕播放器等）\n  - 项目list\n\n## vue-组件\n参考三秒和ele\n\n## node写一个通过注释自生成文档的脚本\n\n\n\n## css button\n\n参考：http://www.bootcss.com/p/buttons/\n\n发布到npm上，\n\n- button.css：未压缩的样式，包括了rest和button\n- button.min.css：用于直接引用，包括了rest和button\n- rest.min.css：初始化样式\n- button.code.css：按钮样式\nrest.min.css 和 button.code.css用于用户直接编译。\nrest.min.css内部的样式会加前缀（如input.className{}），覆盖掉用户自己的rest（重叠部分），如果用户不希望自己的rest被覆盖可以只引入button.code.css","source":"_drafts/porject-to-do-list.md","raw":"## 待做项目\n\n## 弹幕\n\n播放器\n\n- 暂停，快进，快退，全屏，音量\n- 弹幕开启/关闭\n- 快捷键\n\n输入文字\n- 增加各种样式，并记录\n  - 控制长度（在输入端控制和在显示端控制）\n- 记录播放时间，以便于在播放时显示\n- 存储在服务器(待定)\n- 本地持久化存储(待定)\n- 同时显示效果\n\n显示弹幕\n- 动画显示\n    - 考虑用css实现或者js实现\n- 时间节点\n\n网站广告\n\n## 组件\n- rem\n- reset.css\n- util\n- 瀑布流插件\n- 时间加载器\n- 滚动条\n- 下拉刷新，下拉加载下一篇\n- 倒计时\n\n## 博客--自己开发主题\n- 设计，自主设计\n- 模块\n  - 文章\n  - 读书\n  - 简介\n  - 音乐\n  - 视频 （推荐视频，弹幕播放器等）\n  - 项目list\n\n## vue-组件\n参考三秒和ele\n\n## node写一个通过注释自生成文档的脚本\n\n\n\n## css button\n\n参考：http://www.bootcss.com/p/buttons/\n\n发布到npm上，\n\n- button.css：未压缩的样式，包括了rest和button\n- button.min.css：用于直接引用，包括了rest和button\n- rest.min.css：初始化样式\n- button.code.css：按钮样式\nrest.min.css 和 button.code.css用于用户直接编译。\nrest.min.css内部的样式会加前缀（如input.className{}），覆盖掉用户自己的rest（重叠部分），如果用户不希望自己的rest被覆盖可以只引入button.code.css","slug":"porject-to-do-list","published":0,"date":"2018-07-30T01:55:33.661Z","updated":"2018-07-30T01:55:33.661Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swf4000g2kv7a2es2dxn","content":"<h2 id=\"待做项目\"><a href=\"#待做项目\" class=\"headerlink\" title=\"待做项目\"></a>待做项目</h2><h2 id=\"弹幕\"><a href=\"#弹幕\" class=\"headerlink\" title=\"弹幕\"></a>弹幕</h2><p>播放器</p>\n<ul>\n<li>暂停，快进，快退，全屏，音量</li>\n<li>弹幕开启/关闭</li>\n<li>快捷键</li>\n</ul>\n<p>输入文字</p>\n<ul>\n<li>增加各种样式，并记录<ul>\n<li>控制长度（在输入端控制和在显示端控制）</li>\n</ul>\n</li>\n<li>记录播放时间，以便于在播放时显示</li>\n<li>存储在服务器(待定)</li>\n<li>本地持久化存储(待定)</li>\n<li>同时显示效果</li>\n</ul>\n<p>显示弹幕</p>\n<ul>\n<li>动画显示<ul>\n<li>考虑用css实现或者js实现</li>\n</ul>\n</li>\n<li>时间节点</li>\n</ul>\n<p>网站广告</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ul>\n<li>rem</li>\n<li>reset.css</li>\n<li>util</li>\n<li>瀑布流插件</li>\n<li>时间加载器</li>\n<li>滚动条</li>\n<li>下拉刷新，下拉加载下一篇</li>\n<li>倒计时</li>\n</ul>\n<h2 id=\"博客–自己开发主题\"><a href=\"#博客–自己开发主题\" class=\"headerlink\" title=\"博客–自己开发主题\"></a>博客–自己开发主题</h2><ul>\n<li>设计，自主设计</li>\n<li>模块<ul>\n<li>文章</li>\n<li>读书</li>\n<li>简介</li>\n<li>音乐</li>\n<li>视频 （推荐视频，弹幕播放器等）</li>\n<li>项目list</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-组件\"><a href=\"#vue-组件\" class=\"headerlink\" title=\"vue-组件\"></a>vue-组件</h2><p>参考三秒和ele</p>\n<h2 id=\"node写一个通过注释自生成文档的脚本\"><a href=\"#node写一个通过注释自生成文档的脚本\" class=\"headerlink\" title=\"node写一个通过注释自生成文档的脚本\"></a>node写一个通过注释自生成文档的脚本</h2><h2 id=\"css-button\"><a href=\"#css-button\" class=\"headerlink\" title=\"css button\"></a>css button</h2><p>参考：<a href=\"http://www.bootcss.com/p/buttons/\" target=\"_blank\" rel=\"noopener\">http://www.bootcss.com/p/buttons/</a></p>\n<p>发布到npm上，</p>\n<ul>\n<li>button.css：未压缩的样式，包括了rest和button</li>\n<li>button.min.css：用于直接引用，包括了rest和button</li>\n<li>rest.min.css：初始化样式</li>\n<li>button.code.css：按钮样式<br>rest.min.css 和 button.code.css用于用户直接编译。<br>rest.min.css内部的样式会加前缀（如input.className{}），覆盖掉用户自己的rest（重叠部分），如果用户不希望自己的rest被覆盖可以只引入button.code.css</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"待做项目\"><a href=\"#待做项目\" class=\"headerlink\" title=\"待做项目\"></a>待做项目</h2><h2 id=\"弹幕\"><a href=\"#弹幕\" class=\"headerlink\" title=\"弹幕\"></a>弹幕</h2><p>播放器</p>\n<ul>\n<li>暂停，快进，快退，全屏，音量</li>\n<li>弹幕开启/关闭</li>\n<li>快捷键</li>\n</ul>\n<p>输入文字</p>\n<ul>\n<li>增加各种样式，并记录<ul>\n<li>控制长度（在输入端控制和在显示端控制）</li>\n</ul>\n</li>\n<li>记录播放时间，以便于在播放时显示</li>\n<li>存储在服务器(待定)</li>\n<li>本地持久化存储(待定)</li>\n<li>同时显示效果</li>\n</ul>\n<p>显示弹幕</p>\n<ul>\n<li>动画显示<ul>\n<li>考虑用css实现或者js实现</li>\n</ul>\n</li>\n<li>时间节点</li>\n</ul>\n<p>网站广告</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><ul>\n<li>rem</li>\n<li>reset.css</li>\n<li>util</li>\n<li>瀑布流插件</li>\n<li>时间加载器</li>\n<li>滚动条</li>\n<li>下拉刷新，下拉加载下一篇</li>\n<li>倒计时</li>\n</ul>\n<h2 id=\"博客–自己开发主题\"><a href=\"#博客–自己开发主题\" class=\"headerlink\" title=\"博客–自己开发主题\"></a>博客–自己开发主题</h2><ul>\n<li>设计，自主设计</li>\n<li>模块<ul>\n<li>文章</li>\n<li>读书</li>\n<li>简介</li>\n<li>音乐</li>\n<li>视频 （推荐视频，弹幕播放器等）</li>\n<li>项目list</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-组件\"><a href=\"#vue-组件\" class=\"headerlink\" title=\"vue-组件\"></a>vue-组件</h2><p>参考三秒和ele</p>\n<h2 id=\"node写一个通过注释自生成文档的脚本\"><a href=\"#node写一个通过注释自生成文档的脚本\" class=\"headerlink\" title=\"node写一个通过注释自生成文档的脚本\"></a>node写一个通过注释自生成文档的脚本</h2><h2 id=\"css-button\"><a href=\"#css-button\" class=\"headerlink\" title=\"css button\"></a>css button</h2><p>参考：<a href=\"http://www.bootcss.com/p/buttons/\" target=\"_blank\" rel=\"noopener\">http://www.bootcss.com/p/buttons/</a></p>\n<p>发布到npm上，</p>\n<ul>\n<li>button.css：未压缩的样式，包括了rest和button</li>\n<li>button.min.css：用于直接引用，包括了rest和button</li>\n<li>rest.min.css：初始化样式</li>\n<li>button.code.css：按钮样式<br>rest.min.css 和 button.code.css用于用户直接编译。<br>rest.min.css内部的样式会加前缀（如input.className{}），覆盖掉用户自己的rest（重叠部分），如果用户不希望自己的rest被覆盖可以只引入button.code.css</li>\n</ul>\n"},{"_content":"## css\n- button input之类\n\n## tools\n- git pull -p\n\n## jq event 中文输入法不触发onkeyup事件的解决办法\n> 当时监听的是keyup事件，当输入法改为中文，然后按enter键，这样还是能输入其他的字符（火狐没有这个问题，谷歌里有这个问题），后来百度下才知道原因，具体参考以上两个网址\nhttp://www.cnblogs.com/jonie-wong/p/5647554.html\n\n\n## 使用idea的初步设置\n\n- 高亮文件 http://www.jianshu.com/p/027dedbc62d7\n- 快捷键更改\n- 主题更改\n- 插件推荐\n    - vue\n    - twig\n    - translate\n    - git log\n- 文件模板\n- 签名设置\n- es6语法切换","source":"_drafts/post_to_do_list.md","raw":"## css\n- button input之类\n\n## tools\n- git pull -p\n\n## jq event 中文输入法不触发onkeyup事件的解决办法\n> 当时监听的是keyup事件，当输入法改为中文，然后按enter键，这样还是能输入其他的字符（火狐没有这个问题，谷歌里有这个问题），后来百度下才知道原因，具体参考以上两个网址\nhttp://www.cnblogs.com/jonie-wong/p/5647554.html\n\n\n## 使用idea的初步设置\n\n- 高亮文件 http://www.jianshu.com/p/027dedbc62d7\n- 快捷键更改\n- 主题更改\n- 插件推荐\n    - vue\n    - twig\n    - translate\n    - git log\n- 文件模板\n- 签名设置\n- es6语法切换","slug":"post_to_do_list","published":0,"date":"2018-07-30T01:55:33.661Z","updated":"2018-07-30T01:55:33.661Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swf5000h2kv7uozz0xt9","content":"<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><ul>\n<li>button input之类</li>\n</ul>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ul>\n<li>git pull -p</li>\n</ul>\n<h2 id=\"jq-event-中文输入法不触发onkeyup事件的解决办法\"><a href=\"#jq-event-中文输入法不触发onkeyup事件的解决办法\" class=\"headerlink\" title=\"jq event 中文输入法不触发onkeyup事件的解决办法\"></a>jq event 中文输入法不触发onkeyup事件的解决办法</h2><blockquote>\n<p>当时监听的是keyup事件，当输入法改为中文，然后按enter键，这样还是能输入其他的字符（火狐没有这个问题，谷歌里有这个问题），后来百度下才知道原因，具体参考以上两个网址<br><a href=\"http://www.cnblogs.com/jonie-wong/p/5647554.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jonie-wong/p/5647554.html</a></p>\n</blockquote>\n<h2 id=\"使用idea的初步设置\"><a href=\"#使用idea的初步设置\" class=\"headerlink\" title=\"使用idea的初步设置\"></a>使用idea的初步设置</h2><ul>\n<li>高亮文件 <a href=\"http://www.jianshu.com/p/027dedbc62d7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/027dedbc62d7</a></li>\n<li>快捷键更改</li>\n<li>主题更改</li>\n<li>插件推荐<ul>\n<li>vue</li>\n<li>twig</li>\n<li>translate</li>\n<li>git log</li>\n</ul>\n</li>\n<li>文件模板</li>\n<li>签名设置</li>\n<li>es6语法切换</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><ul>\n<li>button input之类</li>\n</ul>\n<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ul>\n<li>git pull -p</li>\n</ul>\n<h2 id=\"jq-event-中文输入法不触发onkeyup事件的解决办法\"><a href=\"#jq-event-中文输入法不触发onkeyup事件的解决办法\" class=\"headerlink\" title=\"jq event 中文输入法不触发onkeyup事件的解决办法\"></a>jq event 中文输入法不触发onkeyup事件的解决办法</h2><blockquote>\n<p>当时监听的是keyup事件，当输入法改为中文，然后按enter键，这样还是能输入其他的字符（火狐没有这个问题，谷歌里有这个问题），后来百度下才知道原因，具体参考以上两个网址<br><a href=\"http://www.cnblogs.com/jonie-wong/p/5647554.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jonie-wong/p/5647554.html</a></p>\n</blockquote>\n<h2 id=\"使用idea的初步设置\"><a href=\"#使用idea的初步设置\" class=\"headerlink\" title=\"使用idea的初步设置\"></a>使用idea的初步设置</h2><ul>\n<li>高亮文件 <a href=\"http://www.jianshu.com/p/027dedbc62d7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/027dedbc62d7</a></li>\n<li>快捷键更改</li>\n<li>主题更改</li>\n<li>插件推荐<ul>\n<li>vue</li>\n<li>twig</li>\n<li>translate</li>\n<li>git log</li>\n</ul>\n</li>\n<li>文件模板</li>\n<li>签名设置</li>\n<li>es6语法切换</li>\n</ul>\n"},{"title":"字符串转译成HTML","date":"2017-07-18T07:12:09.000Z","author":"J.2ue","comments":1,"_content":"\n>转义后的str如何插入到页面\n\n\n## 参考文献\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nhttps://segmentfault.com/q/1010000007510692\nhttps://segmentfault.com/q/1010000002395872\nhttps://segmentfault.com/q/1010000006093135\nhttp://blog.csdn.net/phantomes/article/details/26570113\n\n","source":"_drafts/string-escape-htmlDOM.md","raw":"---\ntitle: 字符串转译成HTML\ndate: 2017-7-18 15:12:09\nauthor: J.2ue\ncomments: true\ntags:\n- Javascript\n- DOM\ncategories:\n- javascript\n---\n\n>转义后的str如何插入到页面\n\n\n## 参考文献\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nhttps://segmentfault.com/q/1010000007510692\nhttps://segmentfault.com/q/1010000002395872\nhttps://segmentfault.com/q/1010000006093135\nhttp://blog.csdn.net/phantomes/article/details/26570113\n\n","slug":"string-escape-htmlDOM","published":0,"updated":"2018-07-30T01:55:33.662Z","layout":"post","photos":[],"link":"","_id":"cjny0swf7000l2kv7rlwkz1e7","content":"<blockquote>\n<p>转义后的str如何插入到页面</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent</a><br><a href=\"https://segmentfault.com/q/1010000007510692\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000007510692</a><br><a href=\"https://segmentfault.com/q/1010000002395872\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000002395872</a><br><a href=\"https://segmentfault.com/q/1010000006093135\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006093135</a><br><a href=\"http://blog.csdn.net/phantomes/article/details/26570113\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/phantomes/article/details/26570113</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>转义后的str如何插入到页面</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent</a><br><a href=\"https://segmentfault.com/q/1010000007510692\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000007510692</a><br><a href=\"https://segmentfault.com/q/1010000002395872\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000002395872</a><br><a href=\"https://segmentfault.com/q/1010000006093135\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000006093135</a><br><a href=\"http://blog.csdn.net/phantomes/article/details/26570113\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/phantomes/article/details/26570113</a></p>\n"},{"title":"如何实现阿拉伯数字和中文数字互转","date":"2017-04-10T08:39:23.000Z","author":"J.2ue","comments":1,"_content":"\n## 场景\n\n> 在涉及到金融系统中，很多地方都会把阿拉伯数字转换成中文字。\n\n## javascript的数值极限\n\n> 在javascript的数值极限中Number类型的实质是64为浮点数，所以其能表示的数值范围-2^32到2^32。我们考虑此总极限情况的处理方式\n- 方案一： 超过极限直接提示超出长度\n- 方案二： 整个过程将数字转换成字符串类型，进行操作\n\n## 中阿数值对照表及中文数字单位\n### [中文数字单位](https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%8D%95%E4%BD%8D%E5%88%B6/394982?fr=aladdin)\n\n> 一、十、百、千、万、亿、兆、京、垓、秭、穣、沟、涧、正、载、极、恒河沙、阿僧祇、那由他、不可思议、无量大数\n对于`亿级`以上的单位除了`兆`用得稍多（相对于其它亿级以上单位），其它的单位在现实生活中基本上未使用。\n\n- 保留所有单位，但需考虑亿级以上的单位是万进制，以下的十进制\n- 去掉亿级单位，保留常用单位\n\n### [中文数值对照表](https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/2921705#1)\n\n中文数值对照表分位繁体简体两种，可以考虑两种情况处理\n\n``` javascript\n\n//默认配置\nvar UNIT_ARRAY = ['千','百','十'];\nvar NUM_ARRAY = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nvar NUM_UNIT_ARRAY = ['万', '亿', '兆', '京', '垓', '秭', '穰', '沟', '涧', '正', '载', '极', '恒河沙', '阿僧祗', '那由他', '不可思议', '无量', '大数'];\nvar REG_DEL_REPEAT = /(.)\\1+/g;\nvar REG_SPLIT_LEN = /(\\d{4}(?=\\d)(?!\\d+\\.|$))/g;\n\n\n//以四位数分割\nfunction splitNum(num,_len,_type){\n\n    if(!num) return 0;\n\n    return num.toString().replace(/\\,/g,'').split('').reverse().join('').replace(REG_SPLIT_LEN, '$1,').split('').reverse().join('').split(',');\n\n};\n\n//拆分四位数，转换成几千几百几十几\nfunction switchNum(num,_isFirst){\n    // num 需要转换的数字\n    //_isFirst 是否需要首位零，true表示不需要\n    var _notFisrt = !_isFirst;\n    //最终返回结果的数组\n    var res = [];\n    if(!num) return '';\n    //不足四位的补足四位，以便补零\n    num = num.split('').reverse().slice(0,4).reverse();\n\n    for(let i = 0; i < num.length; i++){\n        if(!num[i] || num[i] == 0) {\n            // （i < num.length - 1 && (!num[i+1] || num[i+1] == 0) 在0-length-1（不包含边界）这个范围内，下一个为零，则当前不补位\n            // i == num.length - 1如果最后一位为0，则不补位\n            if(i < num.length - 1 && (!num[i+1] || num[i+1] == 0) || i == num.length - 1) {\n                res.push('');\n            }else{\n                res.push(NUM_ARRAY[0]);\n            }\n        }else if(i != num.length - 1){\n            res.push(NUM_ARRAY[num[i]] + UNIT_ARRAY[i])\n        }else{\n            res.push(NUM_ARRAY[num[i]])\n        }\n    };\n    return res.join('').replace(REG_DEL_REPEAT,'$1');\n\n}\n\n//拼接\nfunction jionNum (num) {\n    // num = splitNum('300000000000047740230023050789');\n    num = splitNum(num);\n\n    var len = num.length;\n    var reslt = '';\n    for(let i = 0; i < len; i++){\n        var temp = switchNum(num[i],i == 0);\n        if(!temp) temp = NUM_ARRAY[0];\n        if(len == 1 || len - 1 == i || temp == NUM_ARRAY[0]){\n            reslt += temp;\n        }else{\n            reslt += (temp + NUM_UNIT_ARRAY[len - i - 2]);\n        }\n    };\n\n    return reslt.replace(REG_DEL_REPEAT,'$1');\n};\n\nconsole.log(jionNum('300000000000047740230023050789'));\n```\n","source":"_drafts/switch-number-to-chinese.md","raw":"---\ntitle: 如何实现阿拉伯数字和中文数字互转\ndate: 2017-4-10 16:39:23\nauthor: J.2ue\ncomments: true\ntags:\n- Javascript\n- number\ncategories:\n- utils\n---\n\n## 场景\n\n> 在涉及到金融系统中，很多地方都会把阿拉伯数字转换成中文字。\n\n## javascript的数值极限\n\n> 在javascript的数值极限中Number类型的实质是64为浮点数，所以其能表示的数值范围-2^32到2^32。我们考虑此总极限情况的处理方式\n- 方案一： 超过极限直接提示超出长度\n- 方案二： 整个过程将数字转换成字符串类型，进行操作\n\n## 中阿数值对照表及中文数字单位\n### [中文数字单位](https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%8D%95%E4%BD%8D%E5%88%B6/394982?fr=aladdin)\n\n> 一、十、百、千、万、亿、兆、京、垓、秭、穣、沟、涧、正、载、极、恒河沙、阿僧祇、那由他、不可思议、无量大数\n对于`亿级`以上的单位除了`兆`用得稍多（相对于其它亿级以上单位），其它的单位在现实生活中基本上未使用。\n\n- 保留所有单位，但需考虑亿级以上的单位是万进制，以下的十进制\n- 去掉亿级单位，保留常用单位\n\n### [中文数值对照表](https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/2921705#1)\n\n中文数值对照表分位繁体简体两种，可以考虑两种情况处理\n\n``` javascript\n\n//默认配置\nvar UNIT_ARRAY = ['千','百','十'];\nvar NUM_ARRAY = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nvar NUM_UNIT_ARRAY = ['万', '亿', '兆', '京', '垓', '秭', '穰', '沟', '涧', '正', '载', '极', '恒河沙', '阿僧祗', '那由他', '不可思议', '无量', '大数'];\nvar REG_DEL_REPEAT = /(.)\\1+/g;\nvar REG_SPLIT_LEN = /(\\d{4}(?=\\d)(?!\\d+\\.|$))/g;\n\n\n//以四位数分割\nfunction splitNum(num,_len,_type){\n\n    if(!num) return 0;\n\n    return num.toString().replace(/\\,/g,'').split('').reverse().join('').replace(REG_SPLIT_LEN, '$1,').split('').reverse().join('').split(',');\n\n};\n\n//拆分四位数，转换成几千几百几十几\nfunction switchNum(num,_isFirst){\n    // num 需要转换的数字\n    //_isFirst 是否需要首位零，true表示不需要\n    var _notFisrt = !_isFirst;\n    //最终返回结果的数组\n    var res = [];\n    if(!num) return '';\n    //不足四位的补足四位，以便补零\n    num = num.split('').reverse().slice(0,4).reverse();\n\n    for(let i = 0; i < num.length; i++){\n        if(!num[i] || num[i] == 0) {\n            // （i < num.length - 1 && (!num[i+1] || num[i+1] == 0) 在0-length-1（不包含边界）这个范围内，下一个为零，则当前不补位\n            // i == num.length - 1如果最后一位为0，则不补位\n            if(i < num.length - 1 && (!num[i+1] || num[i+1] == 0) || i == num.length - 1) {\n                res.push('');\n            }else{\n                res.push(NUM_ARRAY[0]);\n            }\n        }else if(i != num.length - 1){\n            res.push(NUM_ARRAY[num[i]] + UNIT_ARRAY[i])\n        }else{\n            res.push(NUM_ARRAY[num[i]])\n        }\n    };\n    return res.join('').replace(REG_DEL_REPEAT,'$1');\n\n}\n\n//拼接\nfunction jionNum (num) {\n    // num = splitNum('300000000000047740230023050789');\n    num = splitNum(num);\n\n    var len = num.length;\n    var reslt = '';\n    for(let i = 0; i < len; i++){\n        var temp = switchNum(num[i],i == 0);\n        if(!temp) temp = NUM_ARRAY[0];\n        if(len == 1 || len - 1 == i || temp == NUM_ARRAY[0]){\n            reslt += temp;\n        }else{\n            reslt += (temp + NUM_UNIT_ARRAY[len - i - 2]);\n        }\n    };\n\n    return reslt.replace(REG_DEL_REPEAT,'$1');\n};\n\nconsole.log(jionNum('300000000000047740230023050789'));\n```\n","slug":"switch-number-to-chinese","published":0,"updated":"2018-07-30T01:55:33.662Z","layout":"post","photos":[],"link":"","_id":"cjny0swf8000m2kv71xzjjozp","content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><blockquote>\n<p>在涉及到金融系统中，很多地方都会把阿拉伯数字转换成中文字。</p>\n</blockquote>\n<h2 id=\"javascript的数值极限\"><a href=\"#javascript的数值极限\" class=\"headerlink\" title=\"javascript的数值极限\"></a>javascript的数值极限</h2><blockquote>\n<p>在javascript的数值极限中Number类型的实质是64为浮点数，所以其能表示的数值范围-2^32到2^32。我们考虑此总极限情况的处理方式</p>\n<ul>\n<li>方案一： 超过极限直接提示超出长度</li>\n<li>方案二： 整个过程将数字转换成字符串类型，进行操作</li>\n</ul>\n</blockquote>\n<h2 id=\"中阿数值对照表及中文数字单位\"><a href=\"#中阿数值对照表及中文数字单位\" class=\"headerlink\" title=\"中阿数值对照表及中文数字单位\"></a>中阿数值对照表及中文数字单位</h2><h3 id=\"中文数字单位\"><a href=\"#中文数字单位\" class=\"headerlink\" title=\"中文数字单位\"></a><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%8D%95%E4%BD%8D%E5%88%B6/394982?fr=aladdin\" target=\"_blank\" rel=\"noopener\">中文数字单位</a></h3><blockquote>\n<p>一、十、百、千、万、亿、兆、京、垓、秭、穣、沟、涧、正、载、极、恒河沙、阿僧祇、那由他、不可思议、无量大数<br>对于<code>亿级</code>以上的单位除了<code>兆</code>用得稍多（相对于其它亿级以上单位），其它的单位在现实生活中基本上未使用。</p>\n</blockquote>\n<ul>\n<li>保留所有单位，但需考虑亿级以上的单位是万进制，以下的十进制</li>\n<li>去掉亿级单位，保留常用单位</li>\n</ul>\n<h3 id=\"中文数值对照表\"><a href=\"#中文数值对照表\" class=\"headerlink\" title=\"中文数值对照表\"></a><a href=\"https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/2921705#1\" target=\"_blank\" rel=\"noopener\">中文数值对照表</a></h3><p>中文数值对照表分位繁体简体两种，可以考虑两种情况处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UNIT_ARRAY = [<span class=\"string\">'千'</span>,<span class=\"string\">'百'</span>,<span class=\"string\">'十'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> NUM_ARRAY = [<span class=\"string\">'零'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'七'</span>, <span class=\"string\">'八'</span>, <span class=\"string\">'九'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> NUM_UNIT_ARRAY = [<span class=\"string\">'万'</span>, <span class=\"string\">'亿'</span>, <span class=\"string\">'兆'</span>, <span class=\"string\">'京'</span>, <span class=\"string\">'垓'</span>, <span class=\"string\">'秭'</span>, <span class=\"string\">'穰'</span>, <span class=\"string\">'沟'</span>, <span class=\"string\">'涧'</span>, <span class=\"string\">'正'</span>, <span class=\"string\">'载'</span>, <span class=\"string\">'极'</span>, <span class=\"string\">'恒河沙'</span>, <span class=\"string\">'阿僧祗'</span>, <span class=\"string\">'那由他'</span>, <span class=\"string\">'不可思议'</span>, <span class=\"string\">'无量'</span>, <span class=\"string\">'大数'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> REG_DEL_REPEAT = <span class=\"regexp\">/(.)\\1+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> REG_SPLIT_LEN = <span class=\"regexp\">/(\\d&#123;4&#125;(?=\\d)(?!\\d+\\.|$))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以四位数分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitNum</span>(<span class=\"params\">num,_len,_type</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!num) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.toString().replace(<span class=\"regexp\">/\\,/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).replace(REG_SPLIT_LEN, <span class=\"string\">'$1,'</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).split(<span class=\"string\">','</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拆分四位数，转换成几千几百几十几</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">switchNum</span>(<span class=\"params\">num,_isFirst</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// num 需要转换的数字</span></span><br><span class=\"line\">    <span class=\"comment\">//_isFirst 是否需要首位零，true表示不需要</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _notFisrt = !_isFirst;</span><br><span class=\"line\">    <span class=\"comment\">//最终返回结果的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!num) <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//不足四位的补足四位，以便补零</span></span><br><span class=\"line\">    num = num.split(<span class=\"string\">''</span>).reverse().slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>).reverse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!num[i] || num[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// （i &lt; num.length - 1 &amp;&amp; (!num[i+1] || num[i+1] == 0) 在0-length-1（不包含边界）这个范围内，下一个为零，则当前不补位</span></span><br><span class=\"line\">            <span class=\"comment\">// i == num.length - 1如果最后一位为0，则不补位</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; num.length - <span class=\"number\">1</span> &amp;&amp; (!num[i+<span class=\"number\">1</span>] || num[i+<span class=\"number\">1</span>] == <span class=\"number\">0</span>) || i == num.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res.push(<span class=\"string\">''</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res.push(NUM_ARRAY[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i != num.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            res.push(NUM_ARRAY[num[i]] + UNIT_ARRAY[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.push(NUM_ARRAY[num[i]])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>).replace(REG_DEL_REPEAT,<span class=\"string\">'$1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拼接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jionNum</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// num = splitNum('300000000000047740230023050789');</span></span><br><span class=\"line\">    num = splitNum(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = num.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reslt = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = switchNum(num[i],i == <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!temp) temp = NUM_ARRAY[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span> || len - <span class=\"number\">1</span> == i || temp == NUM_ARRAY[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            reslt += temp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reslt += (temp + NUM_UNIT_ARRAY[len - i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reslt.replace(REG_DEL_REPEAT,<span class=\"string\">'$1'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jionNum(<span class=\"string\">'300000000000047740230023050789'</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><blockquote>\n<p>在涉及到金融系统中，很多地方都会把阿拉伯数字转换成中文字。</p>\n</blockquote>\n<h2 id=\"javascript的数值极限\"><a href=\"#javascript的数值极限\" class=\"headerlink\" title=\"javascript的数值极限\"></a>javascript的数值极限</h2><blockquote>\n<p>在javascript的数值极限中Number类型的实质是64为浮点数，所以其能表示的数值范围-2^32到2^32。我们考虑此总极限情况的处理方式</p>\n<ul>\n<li>方案一： 超过极限直接提示超出长度</li>\n<li>方案二： 整个过程将数字转换成字符串类型，进行操作</li>\n</ul>\n</blockquote>\n<h2 id=\"中阿数值对照表及中文数字单位\"><a href=\"#中阿数值对照表及中文数字单位\" class=\"headerlink\" title=\"中阿数值对照表及中文数字单位\"></a>中阿数值对照表及中文数字单位</h2><h3 id=\"中文数字单位\"><a href=\"#中文数字单位\" class=\"headerlink\" title=\"中文数字单位\"></a><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%8D%95%E4%BD%8D%E5%88%B6/394982?fr=aladdin\" target=\"_blank\" rel=\"noopener\">中文数字单位</a></h3><blockquote>\n<p>一、十、百、千、万、亿、兆、京、垓、秭、穣、沟、涧、正、载、极、恒河沙、阿僧祇、那由他、不可思议、无量大数<br>对于<code>亿级</code>以上的单位除了<code>兆</code>用得稍多（相对于其它亿级以上单位），其它的单位在现实生活中基本上未使用。</p>\n</blockquote>\n<ul>\n<li>保留所有单位，但需考虑亿级以上的单位是万进制，以下的十进制</li>\n<li>去掉亿级单位，保留常用单位</li>\n</ul>\n<h3 id=\"中文数值对照表\"><a href=\"#中文数值对照表\" class=\"headerlink\" title=\"中文数值对照表\"></a><a href=\"https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97/2921705#1\" target=\"_blank\" rel=\"noopener\">中文数值对照表</a></h3><p>中文数值对照表分位繁体简体两种，可以考虑两种情况处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认配置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> UNIT_ARRAY = [<span class=\"string\">'千'</span>,<span class=\"string\">'百'</span>,<span class=\"string\">'十'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> NUM_ARRAY = [<span class=\"string\">'零'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'七'</span>, <span class=\"string\">'八'</span>, <span class=\"string\">'九'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> NUM_UNIT_ARRAY = [<span class=\"string\">'万'</span>, <span class=\"string\">'亿'</span>, <span class=\"string\">'兆'</span>, <span class=\"string\">'京'</span>, <span class=\"string\">'垓'</span>, <span class=\"string\">'秭'</span>, <span class=\"string\">'穰'</span>, <span class=\"string\">'沟'</span>, <span class=\"string\">'涧'</span>, <span class=\"string\">'正'</span>, <span class=\"string\">'载'</span>, <span class=\"string\">'极'</span>, <span class=\"string\">'恒河沙'</span>, <span class=\"string\">'阿僧祗'</span>, <span class=\"string\">'那由他'</span>, <span class=\"string\">'不可思议'</span>, <span class=\"string\">'无量'</span>, <span class=\"string\">'大数'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> REG_DEL_REPEAT = <span class=\"regexp\">/(.)\\1+/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> REG_SPLIT_LEN = <span class=\"regexp\">/(\\d&#123;4&#125;(?=\\d)(?!\\d+\\.|$))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以四位数分割</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitNum</span>(<span class=\"params\">num,_len,_type</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!num) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num.toString().replace(<span class=\"regexp\">/\\,/g</span>,<span class=\"string\">''</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).replace(REG_SPLIT_LEN, <span class=\"string\">'$1,'</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).split(<span class=\"string\">','</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拆分四位数，转换成几千几百几十几</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">switchNum</span>(<span class=\"params\">num,_isFirst</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// num 需要转换的数字</span></span><br><span class=\"line\">    <span class=\"comment\">//_isFirst 是否需要首位零，true表示不需要</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _notFisrt = !_isFirst;</span><br><span class=\"line\">    <span class=\"comment\">//最终返回结果的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!num) <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//不足四位的补足四位，以便补零</span></span><br><span class=\"line\">    num = num.split(<span class=\"string\">''</span>).reverse().slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>).reverse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!num[i] || num[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// （i &lt; num.length - 1 &amp;&amp; (!num[i+1] || num[i+1] == 0) 在0-length-1（不包含边界）这个范围内，下一个为零，则当前不补位</span></span><br><span class=\"line\">            <span class=\"comment\">// i == num.length - 1如果最后一位为0，则不补位</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; num.length - <span class=\"number\">1</span> &amp;&amp; (!num[i+<span class=\"number\">1</span>] || num[i+<span class=\"number\">1</span>] == <span class=\"number\">0</span>) || i == num.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res.push(<span class=\"string\">''</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res.push(NUM_ARRAY[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i != num.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            res.push(NUM_ARRAY[num[i]] + UNIT_ARRAY[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.push(NUM_ARRAY[num[i]])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>).replace(REG_DEL_REPEAT,<span class=\"string\">'$1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拼接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jionNum</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// num = splitNum('300000000000047740230023050789');</span></span><br><span class=\"line\">    num = splitNum(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = num.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reslt = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = switchNum(num[i],i == <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!temp) temp = NUM_ARRAY[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span> || len - <span class=\"number\">1</span> == i || temp == NUM_ARRAY[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            reslt += temp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reslt += (temp + NUM_UNIT_ARRAY[len - i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reslt.replace(REG_DEL_REPEAT,<span class=\"string\">'$1'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jionNum(<span class=\"string\">'300000000000047740230023050789'</span>));</span><br></pre></td></tr></table></figure>\n"},{"_content":"## css\n\nhttps://css-tricks.com/animating-border/\n","source":"_drafts/translate-list.md","raw":"## css\n\nhttps://css-tricks.com/animating-border/\n","slug":"translate-list","published":0,"date":"2018-07-30T01:55:33.662Z","updated":"2018-07-30T01:55:33.662Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swfb000q2kv70965mhxu","content":"<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p><a href=\"https://css-tricks.com/animating-border/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/animating-border/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p><a href=\"https://css-tricks.com/animating-border/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/animating-border/</a></p>\n"},{"title":"windows平台下实用的小工具","date":"2017-11-22T06:14:22.000Z","author":"J.2ue","_content":"\n> 自古以来有句话：工欲善其事，必先利其器。是的，好的实用的工具或软件，不仅能提升效率，还能提升人的愉悦度，下面推荐一些本人常使用的windows平台下的软件，不定期更新。但是请记住，我们要成为驾驭工具的主人，不要成为被工具驾驭的奴隶，工具是提升效率（或者其他目的）的手段，也仅仅如此。\n\n## 动图截图工具\n\n## GIF.can\n\n## apowersoft录屏王\n\n听这个名字就很霸气，它不仅支持pc端录屏还支持手机端录屏哦，而且比较高清\n","source":"_drafts/useful-tools-in-windows.md","raw":"---\ntitle: windows平台下实用的小工具\ndate: 2017-11-22 14:14:22\nauthor: J.2ue\ntags:\n- windows\n- software\ncategories:\n- software\n---\n\n> 自古以来有句话：工欲善其事，必先利其器。是的，好的实用的工具或软件，不仅能提升效率，还能提升人的愉悦度，下面推荐一些本人常使用的windows平台下的软件，不定期更新。但是请记住，我们要成为驾驭工具的主人，不要成为被工具驾驭的奴隶，工具是提升效率（或者其他目的）的手段，也仅仅如此。\n\n## 动图截图工具\n\n## GIF.can\n\n## apowersoft录屏王\n\n听这个名字就很霸气，它不仅支持pc端录屏还支持手机端录屏哦，而且比较高清\n","slug":"useful-tools-in-windows","published":0,"updated":"2018-07-30T01:55:33.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swfc000r2kv7rtqxrhe2","content":"<blockquote>\n<p>自古以来有句话：工欲善其事，必先利其器。是的，好的实用的工具或软件，不仅能提升效率，还能提升人的愉悦度，下面推荐一些本人常使用的windows平台下的软件，不定期更新。但是请记住，我们要成为驾驭工具的主人，不要成为被工具驾驭的奴隶，工具是提升效率（或者其他目的）的手段，也仅仅如此。</p>\n</blockquote>\n<h2 id=\"动图截图工具\"><a href=\"#动图截图工具\" class=\"headerlink\" title=\"动图截图工具\"></a>动图截图工具</h2><h2 id=\"GIF-can\"><a href=\"#GIF-can\" class=\"headerlink\" title=\"GIF.can\"></a>GIF.can</h2><h2 id=\"apowersoft录屏王\"><a href=\"#apowersoft录屏王\" class=\"headerlink\" title=\"apowersoft录屏王\"></a>apowersoft录屏王</h2><p>听这个名字就很霸气，它不仅支持pc端录屏还支持手机端录屏哦，而且比较高清</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>自古以来有句话：工欲善其事，必先利其器。是的，好的实用的工具或软件，不仅能提升效率，还能提升人的愉悦度，下面推荐一些本人常使用的windows平台下的软件，不定期更新。但是请记住，我们要成为驾驭工具的主人，不要成为被工具驾驭的奴隶，工具是提升效率（或者其他目的）的手段，也仅仅如此。</p>\n</blockquote>\n<h2 id=\"动图截图工具\"><a href=\"#动图截图工具\" class=\"headerlink\" title=\"动图截图工具\"></a>动图截图工具</h2><h2 id=\"GIF-can\"><a href=\"#GIF-can\" class=\"headerlink\" title=\"GIF.can\"></a>GIF.can</h2><h2 id=\"apowersoft录屏王\"><a href=\"#apowersoft录屏王\" class=\"headerlink\" title=\"apowersoft录屏王\"></a>apowersoft录屏王</h2><p>听这个名字就很霸气，它不仅支持pc端录屏还支持手机端录屏哦，而且比较高清</p>\n"},{"title":"vue项目中通过router自动生成导航菜单","date":"2017-11-26T13:36:49.000Z","author":"J.2ue","_content":"\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。\n\n## 谨慎箭头函数\n\n对于箭头函数，它会强行改变函数上下文，所以凡是在`vue`实例内部，需要用到`this`的地方，都不要在最外层使用箭头函数，否则拿不到期望的`this`实例。当然你也可以在外部混缓存一个`this`实例，但这样貌似有点自找麻烦！\n\n关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：\n- [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)\n- [computed](https://cn.vuejs.org/v2/api/#computed)\n- [watch](https://cn.vuejs.org/v2/api/#watch)\n- [methods](https://cn.vuejs.org/v2/api/#methods)\n\n## 谨慎style的scoped属性\n\n我的一篇文章中分析了scoped是如何实现私有化样式的，可以去看看。[vue中慎用style的scoped属性](https://2ue.github.io/2017/11/15/vue-style-scoped/)\n","source":"_drafts/vue-router-generate-menus.md","raw":"---\ntitle: vue项目中通过router自动生成导航菜单\ndate: 2017-11-26 21:36:49\nauthor: J.2ue\ntags:\n- vue-router\n- javascript\ncategories:\n- vue\n---\n\n> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=530 height=86 src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。\n\n## 谨慎箭头函数\n\n对于箭头函数，它会强行改变函数上下文，所以凡是在`vue`实例内部，需要用到`this`的地方，都不要在最外层使用箭头函数，否则拿不到期望的`this`实例。当然你也可以在外部混缓存一个`this`实例，但这样貌似有点自找麻烦！\n\n关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：\n- [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)\n- [computed](https://cn.vuejs.org/v2/api/#computed)\n- [watch](https://cn.vuejs.org/v2/api/#watch)\n- [methods](https://cn.vuejs.org/v2/api/#methods)\n\n## 谨慎style的scoped属性\n\n我的一篇文章中分析了scoped是如何实现私有化样式的，可以去看看。[vue中慎用style的scoped属性](https://2ue.github.io/2017/11/15/vue-style-scoped/)\n","slug":"vue-router-generate-menus","published":0,"updated":"2018-07-30T01:55:33.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swfj000v2kv75u00d435","content":"<blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。</p>\n</blockquote>\n<h2 id=\"谨慎箭头函数\"><a href=\"#谨慎箭头函数\" class=\"headerlink\" title=\"谨慎箭头函数\"></a>谨慎箭头函数</h2><p>对于箭头函数，它会强行改变函数上下文，所以凡是在<code>vue</code>实例内部，需要用到<code>this</code>的地方，都不要在最外层使用箭头函数，否则拿不到期望的<code>this</code>实例。当然你也可以在外部混缓存一个<code>this</code>实例，但这样貌似有点自找麻烦！</p>\n<p>关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#computed\" target=\"_blank\" rel=\"noopener\">computed</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">watch</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#methods\" target=\"_blank\" rel=\"noopener\">methods</a></li>\n</ul>\n<h2 id=\"谨慎style的scoped属性\"><a href=\"#谨慎style的scoped属性\" class=\"headerlink\" title=\"谨慎style的scoped属性\"></a>谨慎style的scoped属性</h2><p>我的一篇文章中分析了scoped是如何实现私有化样式的，可以去看看。<a href=\"https://2ue.github.io/2017/11/15/vue-style-scoped/\" target=\"_blank\" rel=\"noopener\">vue中慎用style的scoped属性</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"530\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22677433&auto=0&height=66\"></iframe>从昨年开始，自己折腾vue也很久了，最近半年在项目中大量使用了vue，深深体会到了vue框架的便捷，高效。但由于开发模式的转变以及框架某些方面的限制也踩了不少坑，由此记录下来一些解决方案或者坑，最后发现仔细读官方文档会少踩很多坑。</p>\n</blockquote>\n<h2 id=\"谨慎箭头函数\"><a href=\"#谨慎箭头函数\" class=\"headerlink\" title=\"谨慎箭头函数\"></a>谨慎箭头函数</h2><p>对于箭头函数，它会强行改变函数上下文，所以凡是在<code>vue</code>实例内部，需要用到<code>this</code>的地方，都不要在最外层使用箭头函数，否则拿不到期望的<code>this</code>实例。当然你也可以在外部混缓存一个<code>this</code>实例，但这样貌似有点自找麻烦！</p>\n<p>关于箭头函数，官方文档已经写得很详细了，可以关注一下几部分：</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#computed\" target=\"_blank\" rel=\"noopener\">computed</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">watch</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#methods\" target=\"_blank\" rel=\"noopener\">methods</a></li>\n</ul>\n<h2 id=\"谨慎style的scoped属性\"><a href=\"#谨慎style的scoped属性\" class=\"headerlink\" title=\"谨慎style的scoped属性\"></a>谨慎style的scoped属性</h2><p>我的一篇文章中分析了scoped是如何实现私有化样式的，可以去看看。<a href=\"https://2ue.github.io/2017/11/15/vue-style-scoped/\" target=\"_blank\" rel=\"noopener\">vue中慎用style的scoped属性</a></p>\n"},{"_content":"\ni18n和i10n：国际化&本地化--gettext\nhttp://blog.csdn.net/senlin1202/article/details/53114370\n","source":"_drafts/zhangzhishi.md","raw":"\ni18n和i10n：国际化&本地化--gettext\nhttp://blog.csdn.net/senlin1202/article/details/53114370\n","slug":"zhangzhishi","published":0,"date":"2018-07-30T01:55:33.663Z","updated":"2018-07-30T01:55:33.663Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swfm000x2kv7kj7i7s9z","content":"<p>i18n和i10n：国际化&amp;本地化–gettext<br><a href=\"http://blog.csdn.net/senlin1202/article/details/53114370\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/senlin1202/article/details/53114370</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>i18n和i10n：国际化&amp;本地化–gettext<br><a href=\"http://blog.csdn.net/senlin1202/article/details/53114370\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/senlin1202/article/details/53114370</a></p>\n"},{"title":"移动端适配方案","date":"2016-11-22T07:39:04.000Z","author":"J.2ue","comments":1,"_content":"\n> 移动端越来越被大众所接收，那么相应的技术就越来越向它靠拢，这是一种不可阻挡的趋势，也是万物发展的规律。移动端有三大难题：兼容、调试和适配。这三大问题就好像三座无法逾越的大山阻挡者我们前进的步伐，此文将记录我在项目中关于移动端适配的一些方式，供大家参考\n\n## 分析\n\n移动端适配的根本原因\n- 屏幕窗口的大小\n- 设备像素比(devicepixelratio，简称dpr)\n\n很多地方介绍设备像素比的，这里就不做具体探讨，简单总结一下：`devicepixelratio`(设备像素比,即dpr) = `physicalpixel` (物理像素) / `density-independent pixel`(设备独立像素,即dip)。`dip`或`dp`,（`device independent pixels`，设备独立像素）与屏幕密度有关。`dip`可以用来辅助区分视网膜设备还是非视网膜设备。\n在`JavaScript`中，可以通过`window.devicePixelRatio`获取到当前设备的dpr，但遗憾的是并不是所有的都支持。\n在CSS中，可以分别针对屏幕大小和设备像素比做适配：\n针对窗口大小，一般使用媒体查询的`only screen`、`min-width`、`max-width`来适配，也是使用`css`做适配最常见的一种方式\n针对像素比，可以使用`-webkit-device-pixel-ratio`，`-webkit-min-device-pixel-ratio`和 `-webkit-max-device-pixel-ratio`属性，同样他的支持度一样不高（其实是很低），所以几乎没有用武之地。\n\n## 适配方式\n\n移动端适配主要有两大不同的方向：\n- 响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配\n- 自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。\n\n两种方式应用的场景不同，各有优劣，本人对自适应布局使用的比较多\n\n## 解决方案\n\n为了解决这个老大难问题，从最初开始百分比到`em`，然后到现在`rem`的使用，都一一体现着技术的滚滚向前。目前是用的最多的也就是`rem`，他们的区别和有点请自行`GG`。\n有了`rem`这个大杀器，解决问题就变得简单起来，具体请往下看。\n\n## 纯css实现方式 -- 媒体查询\n\n使用原生`css`来实现媒体查询是很繁琐的，因为每个媒体查询都要去设定规则。推荐使用`css`的预编译器(sass,less,stylus)，比较方便。\n\n``` css\n/* 定义规则 */\nhtml {\n    font-size: 20px;\n}\n@media only screen and (min-width: 401px) {\n    html {\n        font-size: 24px !important;\n    }\n}\n@media only screen and (min-width: 428px) {\n    html {\n        font-size: 28 !important;\n    }\n}\n@media only screen and (min-width: 481px) {\n    html {\n        font-size: 30px !important;\n    }\n}\n@media only screen and (min-width: 569px) {\n    html {\n        font-size: 35px !important;\n    }\n}\n@media only screen and (min-width: 641px) {\n    html {\n        font-size: 40px !important;\n    }\n}\n@media only screen and (min-width: 751px) {\n    html {\n        font-size: 50px !important;\n    }\n}\n@media only screen and (min-width: 1080px) {\n    html {\n        font-size: 60px !important;\n    }\n}\n```\n\n``` less\n//less 方式调用\n@unit: 50rem; //基准单位,根据设计稿来确定。假设：设计稿尺寸为750，那么@unit设置为50rem(1rem=50px更方便下面计算)\n.warp{with: 100 / @unit} // 设计稿上元素的尺寸为100px => .warp{with: 2rem}\n.warp{with: 10 / @unit} // 设计稿上元素的尺寸为10px => .warp{with: 0.2rem}\n```\n\n如果这里使用原生`css`来做，每个尺寸都需要去计算，如果使用预处理器，只需要定义一个变量，计算的事情直接交给它们就行。\n\n这样当页面展示在`750`的屏幕上时，html的`font-size`为`50px`，那么当设置为2rem的元素显示的尺寸就为`2*50px=100px`。在其他尺寸的设备也会根据媒体查询设置的不同`font-size`进行自动缩放适配。\n当然上面也提到了，在`css`中也是可以获取到`devicePixelRatio`的值，那么为了更精确在写媒体查询的时候可以把它也加上去，这里就不展开了。\n\n## 纯css实现方式 -- 计算属性\n\n当然除了媒体查询，还有一种更潮的方式就是利用css3的一些新属性：计算属性和`vw`属性来实现自动设置根字体大小的目的\n\n``` css\nhtml{font-size:calc(100vw/6.4)} //6.4为psd设计稿尺寸/100\n```\n\n这套方案几乎是目前最简洁的方案了，并且`calc`和`vw`在移动端的支持也不错哟。\n\n## js的实现方式\n\njs的实现方式，参考了`网易`和`淘宝`的实现方式，对他们进行了整合。并且修复了手机端`1px问题`。\n- `网易实现方式`是通过设备尺寸动态的设置DOM的根元素字体大小，没有考虑devicePixelRatio的因素;\n- `淘宝实现方式`也是通过设备尺寸动态的设置DOM的根元素字体大小，并且考虑了devicePixelRatio的因素，但淘宝在设置rem时，显得较复杂(不方便写css把px转化成rem);\n- `1px问`题简单点说就是因为`devicePixelRatio`的存在，css的1px不等于移动端的1px。\n\n``` javascript\n(function(doc, win, designSize) { //designSize为设计稿的尺寸(宽)\n\n    var docEl = document.documentElement,\n        devWidth = docEl.clientWidth > 1080 ? 1080 : docEl.clientWidth,\n        dpr = devicePixelRatio || 1,\n        scale = 1 / dpr,\n        width = dpr * devWidth,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'onresize', //判断横屏和窗口重置\n        recalc = function() {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            document.querySelector('meta[name=\"viewport\"]')\n                    .setAttribute('content','width=' + width +\n                                ', initial-scale=' + scale +\n                                ', maximum-scale=' + scale +\n                                ', minimum-scale=' + scale +\n                                ', user-scalable=no');\n            docEl.style.fontSize = devWidth / (designSize / 100) * dpr + 'px';\n        };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window, 750);\n```\n\n## 总结\n\n- 以上三种方案对比，第一种媒体查询是最死板的，基本就是纯体力活。\n- 利用`css`的计算属性可以很优雅的解决问题，但是在兼容方面来说，目前还不是很完美\n- 并且利用纯`css`也没考虑`devicePixelRatio`（像素问题）这个因素。\n- 最后的`javascript`解决方案则是考虑到了兼容和`devicePixelRatio`这些因素，但是这里有一个很大的弊端就是：页面在某些情况（性能慢）会经过两次重回（给`HTML`根设置`font-size`和设置`meta`标签时）,在网络或者终端性能不是很好的情况用户体验很不错甚至页面错乱的情况。\n","source":"_posts/Mobile-terminal-adapter.md","raw":"---\ntitle: 移动端适配方案\ndate: 2016-11-22 15:39:04\nauthor: J.2ue\ncomments: true\ntags:\n- rem\n- mobile\ncategories:\n- javascript\n---\n\n> 移动端越来越被大众所接收，那么相应的技术就越来越向它靠拢，这是一种不可阻挡的趋势，也是万物发展的规律。移动端有三大难题：兼容、调试和适配。这三大问题就好像三座无法逾越的大山阻挡者我们前进的步伐，此文将记录我在项目中关于移动端适配的一些方式，供大家参考\n\n## 分析\n\n移动端适配的根本原因\n- 屏幕窗口的大小\n- 设备像素比(devicepixelratio，简称dpr)\n\n很多地方介绍设备像素比的，这里就不做具体探讨，简单总结一下：`devicepixelratio`(设备像素比,即dpr) = `physicalpixel` (物理像素) / `density-independent pixel`(设备独立像素,即dip)。`dip`或`dp`,（`device independent pixels`，设备独立像素）与屏幕密度有关。`dip`可以用来辅助区分视网膜设备还是非视网膜设备。\n在`JavaScript`中，可以通过`window.devicePixelRatio`获取到当前设备的dpr，但遗憾的是并不是所有的都支持。\n在CSS中，可以分别针对屏幕大小和设备像素比做适配：\n针对窗口大小，一般使用媒体查询的`only screen`、`min-width`、`max-width`来适配，也是使用`css`做适配最常见的一种方式\n针对像素比，可以使用`-webkit-device-pixel-ratio`，`-webkit-min-device-pixel-ratio`和 `-webkit-max-device-pixel-ratio`属性，同样他的支持度一样不高（其实是很低），所以几乎没有用武之地。\n\n## 适配方式\n\n移动端适配主要有两大不同的方向：\n- 响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配\n- 自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。\n\n两种方式应用的场景不同，各有优劣，本人对自适应布局使用的比较多\n\n## 解决方案\n\n为了解决这个老大难问题，从最初开始百分比到`em`，然后到现在`rem`的使用，都一一体现着技术的滚滚向前。目前是用的最多的也就是`rem`，他们的区别和有点请自行`GG`。\n有了`rem`这个大杀器，解决问题就变得简单起来，具体请往下看。\n\n## 纯css实现方式 -- 媒体查询\n\n使用原生`css`来实现媒体查询是很繁琐的，因为每个媒体查询都要去设定规则。推荐使用`css`的预编译器(sass,less,stylus)，比较方便。\n\n``` css\n/* 定义规则 */\nhtml {\n    font-size: 20px;\n}\n@media only screen and (min-width: 401px) {\n    html {\n        font-size: 24px !important;\n    }\n}\n@media only screen and (min-width: 428px) {\n    html {\n        font-size: 28 !important;\n    }\n}\n@media only screen and (min-width: 481px) {\n    html {\n        font-size: 30px !important;\n    }\n}\n@media only screen and (min-width: 569px) {\n    html {\n        font-size: 35px !important;\n    }\n}\n@media only screen and (min-width: 641px) {\n    html {\n        font-size: 40px !important;\n    }\n}\n@media only screen and (min-width: 751px) {\n    html {\n        font-size: 50px !important;\n    }\n}\n@media only screen and (min-width: 1080px) {\n    html {\n        font-size: 60px !important;\n    }\n}\n```\n\n``` less\n//less 方式调用\n@unit: 50rem; //基准单位,根据设计稿来确定。假设：设计稿尺寸为750，那么@unit设置为50rem(1rem=50px更方便下面计算)\n.warp{with: 100 / @unit} // 设计稿上元素的尺寸为100px => .warp{with: 2rem}\n.warp{with: 10 / @unit} // 设计稿上元素的尺寸为10px => .warp{with: 0.2rem}\n```\n\n如果这里使用原生`css`来做，每个尺寸都需要去计算，如果使用预处理器，只需要定义一个变量，计算的事情直接交给它们就行。\n\n这样当页面展示在`750`的屏幕上时，html的`font-size`为`50px`，那么当设置为2rem的元素显示的尺寸就为`2*50px=100px`。在其他尺寸的设备也会根据媒体查询设置的不同`font-size`进行自动缩放适配。\n当然上面也提到了，在`css`中也是可以获取到`devicePixelRatio`的值，那么为了更精确在写媒体查询的时候可以把它也加上去，这里就不展开了。\n\n## 纯css实现方式 -- 计算属性\n\n当然除了媒体查询，还有一种更潮的方式就是利用css3的一些新属性：计算属性和`vw`属性来实现自动设置根字体大小的目的\n\n``` css\nhtml{font-size:calc(100vw/6.4)} //6.4为psd设计稿尺寸/100\n```\n\n这套方案几乎是目前最简洁的方案了，并且`calc`和`vw`在移动端的支持也不错哟。\n\n## js的实现方式\n\njs的实现方式，参考了`网易`和`淘宝`的实现方式，对他们进行了整合。并且修复了手机端`1px问题`。\n- `网易实现方式`是通过设备尺寸动态的设置DOM的根元素字体大小，没有考虑devicePixelRatio的因素;\n- `淘宝实现方式`也是通过设备尺寸动态的设置DOM的根元素字体大小，并且考虑了devicePixelRatio的因素，但淘宝在设置rem时，显得较复杂(不方便写css把px转化成rem);\n- `1px问`题简单点说就是因为`devicePixelRatio`的存在，css的1px不等于移动端的1px。\n\n``` javascript\n(function(doc, win, designSize) { //designSize为设计稿的尺寸(宽)\n\n    var docEl = document.documentElement,\n        devWidth = docEl.clientWidth > 1080 ? 1080 : docEl.clientWidth,\n        dpr = devicePixelRatio || 1,\n        scale = 1 / dpr,\n        width = dpr * devWidth,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'onresize', //判断横屏和窗口重置\n        recalc = function() {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            document.querySelector('meta[name=\"viewport\"]')\n                    .setAttribute('content','width=' + width +\n                                ', initial-scale=' + scale +\n                                ', maximum-scale=' + scale +\n                                ', minimum-scale=' + scale +\n                                ', user-scalable=no');\n            docEl.style.fontSize = devWidth / (designSize / 100) * dpr + 'px';\n        };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window, 750);\n```\n\n## 总结\n\n- 以上三种方案对比，第一种媒体查询是最死板的，基本就是纯体力活。\n- 利用`css`的计算属性可以很优雅的解决问题，但是在兼容方面来说，目前还不是很完美\n- 并且利用纯`css`也没考虑`devicePixelRatio`（像素问题）这个因素。\n- 最后的`javascript`解决方案则是考虑到了兼容和`devicePixelRatio`这些因素，但是这里有一个很大的弊端就是：页面在某些情况（性能慢）会经过两次重回（给`HTML`根设置`font-size`和设置`meta`标签时）,在网络或者终端性能不是很好的情况用户体验很不错甚至页面错乱的情况。\n","slug":"Mobile-terminal-adapter","published":1,"updated":"2018-07-30T01:55:33.664Z","layout":"post","photos":[],"link":"","_id":"cjny0swfo00102kv72cb09s23","content":"<blockquote>\n<p>移动端越来越被大众所接收，那么相应的技术就越来越向它靠拢，这是一种不可阻挡的趋势，也是万物发展的规律。移动端有三大难题：兼容、调试和适配。这三大问题就好像三座无法逾越的大山阻挡者我们前进的步伐，此文将记录我在项目中关于移动端适配的一些方式，供大家参考</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>移动端适配的根本原因</p>\n<ul>\n<li>屏幕窗口的大小</li>\n<li>设备像素比(devicepixelratio，简称dpr)</li>\n</ul>\n<p>很多地方介绍设备像素比的，这里就不做具体探讨，简单总结一下：<code>devicepixelratio</code>(设备像素比,即dpr) = <code>physicalpixel</code> (物理像素) / <code>density-independent pixel</code>(设备独立像素,即dip)。<code>dip</code>或<code>dp</code>,（<code>device independent pixels</code>，设备独立像素）与屏幕密度有关。<code>dip</code>可以用来辅助区分视网膜设备还是非视网膜设备。<br>在<code>JavaScript</code>中，可以通过<code>window.devicePixelRatio</code>获取到当前设备的dpr，但遗憾的是并不是所有的都支持。<br>在CSS中，可以分别针对屏幕大小和设备像素比做适配：<br>针对窗口大小，一般使用媒体查询的<code>only screen</code>、<code>min-width</code>、<code>max-width</code>来适配，也是使用<code>css</code>做适配最常见的一种方式<br>针对像素比，可以使用<code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code>和 <code>-webkit-max-device-pixel-ratio</code>属性，同样他的支持度一样不高（其实是很低），所以几乎没有用武之地。</p>\n<h2 id=\"适配方式\"><a href=\"#适配方式\" class=\"headerlink\" title=\"适配方式\"></a>适配方式</h2><p>移动端适配主要有两大不同的方向：</p>\n<ul>\n<li>响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配</li>\n<li>自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。</li>\n</ul>\n<p>两种方式应用的场景不同，各有优劣，本人对自适应布局使用的比较多</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>为了解决这个老大难问题，从最初开始百分比到<code>em</code>，然后到现在<code>rem</code>的使用，都一一体现着技术的滚滚向前。目前是用的最多的也就是<code>rem</code>，他们的区别和有点请自行<code>GG</code>。<br>有了<code>rem</code>这个大杀器，解决问题就变得简单起来，具体请往下看。</p>\n<h2 id=\"纯css实现方式-–-媒体查询\"><a href=\"#纯css实现方式-–-媒体查询\" class=\"headerlink\" title=\"纯css实现方式 – 媒体查询\"></a>纯css实现方式 – 媒体查询</h2><p>使用原生<code>css</code>来实现媒体查询是很繁琐的，因为每个媒体查询都要去设定规则。推荐使用<code>css</code>的预编译器(sass,less,stylus)，比较方便。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义规则 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">401px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">428px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">28</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">481px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">569px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">35px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">751px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">1080px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//less 方式调用</span></span><br><span class=\"line\"><span class=\"variable\">@unit:</span> <span class=\"number\">50rem</span>; <span class=\"comment\">//基准单位,根据设计稿来确定。假设：设计稿尺寸为750，那么@unit设置为50rem(1rem=50px更方便下面计算)</span></span><br><span class=\"line\"><span class=\"selector-class\">.warp</span>&#123;<span class=\"attribute\">with</span>: <span class=\"number\">100</span> / <span class=\"variable\">@unit</span>&#125; <span class=\"comment\">// 设计稿上元素的尺寸为100px =&gt; .warp&#123;with: 2rem&#125;</span></span><br><span class=\"line\"><span class=\"selector-class\">.warp</span>&#123;<span class=\"attribute\">with</span>: <span class=\"number\">10</span> / <span class=\"variable\">@unit</span>&#125; <span class=\"comment\">// 设计稿上元素的尺寸为10px =&gt; .warp&#123;with: 0.2rem&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果这里使用原生<code>css</code>来做，每个尺寸都需要去计算，如果使用预处理器，只需要定义一个变量，计算的事情直接交给它们就行。</p>\n<p>这样当页面展示在<code>750</code>的屏幕上时，html的<code>font-size</code>为<code>50px</code>，那么当设置为2rem的元素显示的尺寸就为<code>2*50px=100px</code>。在其他尺寸的设备也会根据媒体查询设置的不同<code>font-size</code>进行自动缩放适配。<br>当然上面也提到了，在<code>css</code>中也是可以获取到<code>devicePixelRatio</code>的值，那么为了更精确在写媒体查询的时候可以把它也加上去，这里就不展开了。</p>\n<h2 id=\"纯css实现方式-–-计算属性\"><a href=\"#纯css实现方式-–-计算属性\" class=\"headerlink\" title=\"纯css实现方式 – 计算属性\"></a>纯css实现方式 – 计算属性</h2><p>当然除了媒体查询，还有一种更潮的方式就是利用css3的一些新属性：计算属性和<code>vw</code>属性来实现自动设置根字体大小的目的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123;font-size:calc(100vw/6.4)&#125; //6.4为psd设计稿尺寸/100</span><br></pre></td></tr></table></figure>\n<p>这套方案几乎是目前最简洁的方案了，并且<code>calc</code>和<code>vw</code>在移动端的支持也不错哟。</p>\n<h2 id=\"js的实现方式\"><a href=\"#js的实现方式\" class=\"headerlink\" title=\"js的实现方式\"></a>js的实现方式</h2><p>js的实现方式，参考了<code>网易</code>和<code>淘宝</code>的实现方式，对他们进行了整合。并且修复了手机端<code>1px问题</code>。</p>\n<ul>\n<li><code>网易实现方式</code>是通过设备尺寸动态的设置DOM的根元素字体大小，没有考虑devicePixelRatio的因素;</li>\n<li><code>淘宝实现方式</code>也是通过设备尺寸动态的设置DOM的根元素字体大小，并且考虑了devicePixelRatio的因素，但淘宝在设置rem时，显得较复杂(不方便写css把px转化成rem);</li>\n<li><code>1px问</code>题简单点说就是因为<code>devicePixelRatio</code>的存在，css的1px不等于移动端的1px。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc, win, designSize</span>) </span>&#123; <span class=\"comment\">//designSize为设计稿的尺寸(宽)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement,</span><br><span class=\"line\">        devWidth = docEl.clientWidth &gt; <span class=\"number\">1080</span> ? <span class=\"number\">1080</span> : docEl.clientWidth,</span><br><span class=\"line\">        dpr = devicePixelRatio || <span class=\"number\">1</span>,</span><br><span class=\"line\">        scale = <span class=\"number\">1</span> / dpr,</span><br><span class=\"line\">        width = dpr * devWidth,</span><br><span class=\"line\">        resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'onresize'</span>, <span class=\"comment\">//判断横屏和窗口重置</span></span><br><span class=\"line\">        recalc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=\"viewport\"]'</span>)</span><br><span class=\"line\">                    .setAttribute(<span class=\"string\">'content'</span>,<span class=\"string\">'width='</span> + width +</span><br><span class=\"line\">                                <span class=\"string\">', initial-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', maximum-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', minimum-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', user-scalable=no'</span>);</span><br><span class=\"line\">            docEl.style.fontSize = devWidth / (designSize / <span class=\"number\">100</span>) * dpr + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>, <span class=\"number\">750</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>以上三种方案对比，第一种媒体查询是最死板的，基本就是纯体力活。</li>\n<li>利用<code>css</code>的计算属性可以很优雅的解决问题，但是在兼容方面来说，目前还不是很完美</li>\n<li>并且利用纯<code>css</code>也没考虑<code>devicePixelRatio</code>（像素问题）这个因素。</li>\n<li>最后的<code>javascript</code>解决方案则是考虑到了兼容和<code>devicePixelRatio</code>这些因素，但是这里有一个很大的弊端就是：页面在某些情况（性能慢）会经过两次重回（给<code>HTML</code>根设置<code>font-size</code>和设置<code>meta</code>标签时）,在网络或者终端性能不是很好的情况用户体验很不错甚至页面错乱的情况。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>移动端越来越被大众所接收，那么相应的技术就越来越向它靠拢，这是一种不可阻挡的趋势，也是万物发展的规律。移动端有三大难题：兼容、调试和适配。这三大问题就好像三座无法逾越的大山阻挡者我们前进的步伐，此文将记录我在项目中关于移动端适配的一些方式，供大家参考</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>移动端适配的根本原因</p>\n<ul>\n<li>屏幕窗口的大小</li>\n<li>设备像素比(devicepixelratio，简称dpr)</li>\n</ul>\n<p>很多地方介绍设备像素比的，这里就不做具体探讨，简单总结一下：<code>devicepixelratio</code>(设备像素比,即dpr) = <code>physicalpixel</code> (物理像素) / <code>density-independent pixel</code>(设备独立像素,即dip)。<code>dip</code>或<code>dp</code>,（<code>device independent pixels</code>，设备独立像素）与屏幕密度有关。<code>dip</code>可以用来辅助区分视网膜设备还是非视网膜设备。<br>在<code>JavaScript</code>中，可以通过<code>window.devicePixelRatio</code>获取到当前设备的dpr，但遗憾的是并不是所有的都支持。<br>在CSS中，可以分别针对屏幕大小和设备像素比做适配：<br>针对窗口大小，一般使用媒体查询的<code>only screen</code>、<code>min-width</code>、<code>max-width</code>来适配，也是使用<code>css</code>做适配最常见的一种方式<br>针对像素比，可以使用<code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code>和 <code>-webkit-max-device-pixel-ratio</code>属性，同样他的支持度一样不高（其实是很低），所以几乎没有用武之地。</p>\n<h2 id=\"适配方式\"><a href=\"#适配方式\" class=\"headerlink\" title=\"适配方式\"></a>适配方式</h2><p>移动端适配主要有两大不同的方向：</p>\n<ul>\n<li>响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配</li>\n<li>自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。</li>\n</ul>\n<p>两种方式应用的场景不同，各有优劣，本人对自适应布局使用的比较多</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>为了解决这个老大难问题，从最初开始百分比到<code>em</code>，然后到现在<code>rem</code>的使用，都一一体现着技术的滚滚向前。目前是用的最多的也就是<code>rem</code>，他们的区别和有点请自行<code>GG</code>。<br>有了<code>rem</code>这个大杀器，解决问题就变得简单起来，具体请往下看。</p>\n<h2 id=\"纯css实现方式-–-媒体查询\"><a href=\"#纯css实现方式-–-媒体查询\" class=\"headerlink\" title=\"纯css实现方式 – 媒体查询\"></a>纯css实现方式 – 媒体查询</h2><p>使用原生<code>css</code>来实现媒体查询是很繁琐的，因为每个媒体查询都要去设定规则。推荐使用<code>css</code>的预编译器(sass,less,stylus)，比较方便。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义规则 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">401px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">428px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">28</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">481px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">569px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">35px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">751px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-width: <span class=\"number\">1080px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//less 方式调用</span></span><br><span class=\"line\"><span class=\"variable\">@unit:</span> <span class=\"number\">50rem</span>; <span class=\"comment\">//基准单位,根据设计稿来确定。假设：设计稿尺寸为750，那么@unit设置为50rem(1rem=50px更方便下面计算)</span></span><br><span class=\"line\"><span class=\"selector-class\">.warp</span>&#123;<span class=\"attribute\">with</span>: <span class=\"number\">100</span> / <span class=\"variable\">@unit</span>&#125; <span class=\"comment\">// 设计稿上元素的尺寸为100px =&gt; .warp&#123;with: 2rem&#125;</span></span><br><span class=\"line\"><span class=\"selector-class\">.warp</span>&#123;<span class=\"attribute\">with</span>: <span class=\"number\">10</span> / <span class=\"variable\">@unit</span>&#125; <span class=\"comment\">// 设计稿上元素的尺寸为10px =&gt; .warp&#123;with: 0.2rem&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果这里使用原生<code>css</code>来做，每个尺寸都需要去计算，如果使用预处理器，只需要定义一个变量，计算的事情直接交给它们就行。</p>\n<p>这样当页面展示在<code>750</code>的屏幕上时，html的<code>font-size</code>为<code>50px</code>，那么当设置为2rem的元素显示的尺寸就为<code>2*50px=100px</code>。在其他尺寸的设备也会根据媒体查询设置的不同<code>font-size</code>进行自动缩放适配。<br>当然上面也提到了，在<code>css</code>中也是可以获取到<code>devicePixelRatio</code>的值，那么为了更精确在写媒体查询的时候可以把它也加上去，这里就不展开了。</p>\n<h2 id=\"纯css实现方式-–-计算属性\"><a href=\"#纯css实现方式-–-计算属性\" class=\"headerlink\" title=\"纯css实现方式 – 计算属性\"></a>纯css实现方式 – 计算属性</h2><p>当然除了媒体查询，还有一种更潮的方式就是利用css3的一些新属性：计算属性和<code>vw</code>属性来实现自动设置根字体大小的目的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123;font-size:calc(100vw/6.4)&#125; //6.4为psd设计稿尺寸/100</span><br></pre></td></tr></table></figure>\n<p>这套方案几乎是目前最简洁的方案了，并且<code>calc</code>和<code>vw</code>在移动端的支持也不错哟。</p>\n<h2 id=\"js的实现方式\"><a href=\"#js的实现方式\" class=\"headerlink\" title=\"js的实现方式\"></a>js的实现方式</h2><p>js的实现方式，参考了<code>网易</code>和<code>淘宝</code>的实现方式，对他们进行了整合。并且修复了手机端<code>1px问题</code>。</p>\n<ul>\n<li><code>网易实现方式</code>是通过设备尺寸动态的设置DOM的根元素字体大小，没有考虑devicePixelRatio的因素;</li>\n<li><code>淘宝实现方式</code>也是通过设备尺寸动态的设置DOM的根元素字体大小，并且考虑了devicePixelRatio的因素，但淘宝在设置rem时，显得较复杂(不方便写css把px转化成rem);</li>\n<li><code>1px问</code>题简单点说就是因为<code>devicePixelRatio</code>的存在，css的1px不等于移动端的1px。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc, win, designSize</span>) </span>&#123; <span class=\"comment\">//designSize为设计稿的尺寸(宽)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement,</span><br><span class=\"line\">        devWidth = docEl.clientWidth &gt; <span class=\"number\">1080</span> ? <span class=\"number\">1080</span> : docEl.clientWidth,</span><br><span class=\"line\">        dpr = devicePixelRatio || <span class=\"number\">1</span>,</span><br><span class=\"line\">        scale = <span class=\"number\">1</span> / dpr,</span><br><span class=\"line\">        width = dpr * devWidth,</span><br><span class=\"line\">        resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'onresize'</span>, <span class=\"comment\">//判断横屏和窗口重置</span></span><br><span class=\"line\">        recalc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=\"viewport\"]'</span>)</span><br><span class=\"line\">                    .setAttribute(<span class=\"string\">'content'</span>,<span class=\"string\">'width='</span> + width +</span><br><span class=\"line\">                                <span class=\"string\">', initial-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', maximum-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', minimum-scale='</span> + scale +</span><br><span class=\"line\">                                <span class=\"string\">', user-scalable=no'</span>);</span><br><span class=\"line\">            docEl.style.fontSize = devWidth / (designSize / <span class=\"number\">100</span>) * dpr + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>, <span class=\"number\">750</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>以上三种方案对比，第一种媒体查询是最死板的，基本就是纯体力活。</li>\n<li>利用<code>css</code>的计算属性可以很优雅的解决问题，但是在兼容方面来说，目前还不是很完美</li>\n<li>并且利用纯<code>css</code>也没考虑<code>devicePixelRatio</code>（像素问题）这个因素。</li>\n<li>最后的<code>javascript</code>解决方案则是考虑到了兼容和<code>devicePixelRatio</code>这些因素，但是这里有一个很大的弊端就是：页面在某些情况（性能慢）会经过两次重回（给<code>HTML</code>根设置<code>font-size</code>和设置<code>meta</code>标签时）,在网络或者终端性能不是很好的情况用户体验很不错甚至页面错乱的情况。</li>\n</ul>\n"},{"title":"实现数字滚动变化以及延伸","date":"2016-06-14T04:39:19.000Z","author":"J.2ue","comments":1,"_content":"\n> 利用jquery的插件jquery.animateNumber实现一个简单的数字滚动效果\n\n## 需求分析\n\n1. 处理数据：因为数据是后端提供，所以有可能格式不是我们想要的，所以也许需要格式化数据；\n2. 根据页面设计的效果图（如图），需要把数字字符串拆分成单个数字字符串\n    ![animateNumber_01](/images/posts/animateNumber_01.png)\n3. 每一个数字进行滚动变化\n4. 最后，在项目中，我选取了插件[jquery.animateNumber](http://aishek.github.io/jquery-animateNumber/)来实现滚动效果。这个插件的使用方式很简单，在官方有很详尽的文档来展示各个案例，就不一一赘述了。\n\n## HTML布局\n\n其中num是后台传入的值,notChangeUint用来标记不进行单位变换的值\n\n``` html\n<div class=\"warp\">\n    <div class=\"net-credit-num\" >\n        <p>平台累积会员人数（人）</p>\n        <span date-num=\"123\" class=\"animateNumber notChangeUint\"></span>\n    </div>\n    <div class=\"net-credit-money\">\n        <p>平台完成投资金额（万元）</p>\n        <span date-num=\"91,123,456.00\" class=\"animateNumber\"></span>\n    </div>\n    <div class=\"net-return-money\">\n        <p>累计已还款金额（万元）</p>\n        <span date-num=\"8,895,678.00\" class=\"animateNumber\"></span>\n    </div>\n</div>\n```\n\n## 撸JS\n\n### 去除逗号(,)\n\n``` js\nnum = num.replace(',','');\n```\n\n上面这种方法只能去除字符串中的第一个逗号，但是实际数据中可能存在多个逗号，所以需要用到正则全局匹配替换，代码如下：\n\n``` js\nvar reg = new RegExp(',','g');\nnum = num.replace(reg,'');\n```\n\n### 转化单位(元-->万元)\n\n把金额单位转化为万元，并且保留两位小数，人数不进行转化\n\n``` javascript\nif(!numWarpParent.hasClass('notChangeUint')){\n    num = (Number(num) / 10000).toFixed(2);\n}\n```\n\n### 字符串拆分为数组\n\n``` javascript\nnumArry = num.split('');\n```\n\n### 把数字添加到页面并调用animateNumber的方法\n\n``` javascript\nfor(var i = 0; i < numArry.length; i++){\n    var thisNum = parseInt(numArry[i]);\n    var spanNum;\n    if (!isNaN(thisNum)){\n        spanNum = $('<span class=\"single-num\">' + numArry[i] +'</span>');\n    }else{\n        spanNum = $('<span class=\"single-point\">.</span>');\n    };\n    numWarpParent.append(spanNum);\n    thisNumWarp.prop('number', stratNum).animateNumber({\n        number: thisNum\n    }, time);\n}\n```\n\n## 最后代码\n\n``` javascript\n$('.animateNumber').each(function(){\n    var _this = $(this);\n    var totalNum = _this.attr('date-num'); //后台数据储存在date-num上\n    appendNum(totalNum,_this);\n});\nfunction appendNum(num,numWarpParent){\n    var newNum;\n    var reg = new RegExp(',','g'); //正则匹配所有逗号\n    newNum = num.replace(reg,'');\n    if(isNaN(num)) newNum = 0;  //容错，当后台传入的参数错误(非数字)时，将只值置为0，以保证页面的正常渲染\n    if(!numWarpParent.hasClass('notChangeUint')){ //判断是否需要转换单位\n        newNum = (Number(newNum) / 10000).toFixed(2);\n    };\n    numArry = newNum.split('');\n    for(var i = 0; i < numArry.length; i++){\n        var thisNum = numArry[i];\n        var numWarp;\n        if (!isNaN(thisNum)){ //判断是否可以转化为数字\n            numWarp = $('<label class=\"single-num\">' + numArry[i] +'</label>');\n        }else{\n            numWarp = $('<label class=\"single-point\">.</label>');\n        };\n        numWarpParent.append(numWarp);\n        isAnimate(thisNum,numWarpParent,i);\n    };\n};\nfunction isAnimate(num,numWarpParent,index){\n    if (isNaN(num))return;\n    //调用animate.js插件方法\n    numWarpParent.find('label').eq(index).prop('number', 0).animateNumber({\n        number: num\n    }, num * 100);\n};\n```\n\n## 总结\n\n1.功能模块化，尽量一个方法(函数)只做一件事情\n2.容错，由于涉及到DOM操作，所以为了保证页面的正常渲染必须有容错处理机制：数据出错不影响整个流程(页面渲染)的畅通\n","source":"_posts/animateNumber.md","raw":"---\ntitle: 实现数字滚动变化以及延伸\ndate: 2016-06-14 12:39:19\nauthor: J.2ue\ncomments: true\ntags:\n- animation\ncategories:\n- javascript\n---\n\n> 利用jquery的插件jquery.animateNumber实现一个简单的数字滚动效果\n\n## 需求分析\n\n1. 处理数据：因为数据是后端提供，所以有可能格式不是我们想要的，所以也许需要格式化数据；\n2. 根据页面设计的效果图（如图），需要把数字字符串拆分成单个数字字符串\n    ![animateNumber_01](/images/posts/animateNumber_01.png)\n3. 每一个数字进行滚动变化\n4. 最后，在项目中，我选取了插件[jquery.animateNumber](http://aishek.github.io/jquery-animateNumber/)来实现滚动效果。这个插件的使用方式很简单，在官方有很详尽的文档来展示各个案例，就不一一赘述了。\n\n## HTML布局\n\n其中num是后台传入的值,notChangeUint用来标记不进行单位变换的值\n\n``` html\n<div class=\"warp\">\n    <div class=\"net-credit-num\" >\n        <p>平台累积会员人数（人）</p>\n        <span date-num=\"123\" class=\"animateNumber notChangeUint\"></span>\n    </div>\n    <div class=\"net-credit-money\">\n        <p>平台完成投资金额（万元）</p>\n        <span date-num=\"91,123,456.00\" class=\"animateNumber\"></span>\n    </div>\n    <div class=\"net-return-money\">\n        <p>累计已还款金额（万元）</p>\n        <span date-num=\"8,895,678.00\" class=\"animateNumber\"></span>\n    </div>\n</div>\n```\n\n## 撸JS\n\n### 去除逗号(,)\n\n``` js\nnum = num.replace(',','');\n```\n\n上面这种方法只能去除字符串中的第一个逗号，但是实际数据中可能存在多个逗号，所以需要用到正则全局匹配替换，代码如下：\n\n``` js\nvar reg = new RegExp(',','g');\nnum = num.replace(reg,'');\n```\n\n### 转化单位(元-->万元)\n\n把金额单位转化为万元，并且保留两位小数，人数不进行转化\n\n``` javascript\nif(!numWarpParent.hasClass('notChangeUint')){\n    num = (Number(num) / 10000).toFixed(2);\n}\n```\n\n### 字符串拆分为数组\n\n``` javascript\nnumArry = num.split('');\n```\n\n### 把数字添加到页面并调用animateNumber的方法\n\n``` javascript\nfor(var i = 0; i < numArry.length; i++){\n    var thisNum = parseInt(numArry[i]);\n    var spanNum;\n    if (!isNaN(thisNum)){\n        spanNum = $('<span class=\"single-num\">' + numArry[i] +'</span>');\n    }else{\n        spanNum = $('<span class=\"single-point\">.</span>');\n    };\n    numWarpParent.append(spanNum);\n    thisNumWarp.prop('number', stratNum).animateNumber({\n        number: thisNum\n    }, time);\n}\n```\n\n## 最后代码\n\n``` javascript\n$('.animateNumber').each(function(){\n    var _this = $(this);\n    var totalNum = _this.attr('date-num'); //后台数据储存在date-num上\n    appendNum(totalNum,_this);\n});\nfunction appendNum(num,numWarpParent){\n    var newNum;\n    var reg = new RegExp(',','g'); //正则匹配所有逗号\n    newNum = num.replace(reg,'');\n    if(isNaN(num)) newNum = 0;  //容错，当后台传入的参数错误(非数字)时，将只值置为0，以保证页面的正常渲染\n    if(!numWarpParent.hasClass('notChangeUint')){ //判断是否需要转换单位\n        newNum = (Number(newNum) / 10000).toFixed(2);\n    };\n    numArry = newNum.split('');\n    for(var i = 0; i < numArry.length; i++){\n        var thisNum = numArry[i];\n        var numWarp;\n        if (!isNaN(thisNum)){ //判断是否可以转化为数字\n            numWarp = $('<label class=\"single-num\">' + numArry[i] +'</label>');\n        }else{\n            numWarp = $('<label class=\"single-point\">.</label>');\n        };\n        numWarpParent.append(numWarp);\n        isAnimate(thisNum,numWarpParent,i);\n    };\n};\nfunction isAnimate(num,numWarpParent,index){\n    if (isNaN(num))return;\n    //调用animate.js插件方法\n    numWarpParent.find('label').eq(index).prop('number', 0).animateNumber({\n        number: num\n    }, num * 100);\n};\n```\n\n## 总结\n\n1.功能模块化，尽量一个方法(函数)只做一件事情\n2.容错，由于涉及到DOM操作，所以为了保证页面的正常渲染必须有容错处理机制：数据出错不影响整个流程(页面渲染)的畅通\n","slug":"animateNumber","published":1,"updated":"2018-07-30T01:55:33.664Z","layout":"post","photos":[],"link":"","_id":"cjny0swfq00132kv79fk4w31e","content":"<blockquote>\n<p>利用jquery的插件jquery.animateNumber实现一个简单的数字滚动效果</p>\n</blockquote>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ol>\n<li>处理数据：因为数据是后端提供，所以有可能格式不是我们想要的，所以也许需要格式化数据；</li>\n<li>根据页面设计的效果图（如图），需要把数字字符串拆分成单个数字字符串<br> <img src=\"/images/posts/animateNumber_01.png\" alt=\"animateNumber_01\"></li>\n<li>每一个数字进行滚动变化</li>\n<li>最后，在项目中，我选取了插件<a href=\"http://aishek.github.io/jquery-animateNumber/\" target=\"_blank\" rel=\"noopener\">jquery.animateNumber</a>来实现滚动效果。这个插件的使用方式很简单，在官方有很详尽的文档来展示各个案例，就不一一赘述了。</li>\n</ol>\n<h2 id=\"HTML布局\"><a href=\"#HTML布局\" class=\"headerlink\" title=\"HTML布局\"></a>HTML布局</h2><p>其中num是后台传入的值,notChangeUint用来标记不进行单位变换的值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"warp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-credit-num\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>平台累积会员人数（人）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"123\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber notChangeUint\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-credit-money\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>平台完成投资金额（万元）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"91,123,456.00\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-return-money\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>累计已还款金额（万元）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"8,895,678.00\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"撸JS\"><a href=\"#撸JS\" class=\"headerlink\" title=\"撸JS\"></a>撸JS</h2><h3 id=\"去除逗号\"><a href=\"#去除逗号\" class=\"headerlink\" title=\"去除逗号(,)\"></a>去除逗号(,)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = num.replace(<span class=\"string\">','</span>,<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<p>上面这种方法只能去除字符串中的第一个逗号，但是实际数据中可能存在多个逗号，所以需要用到正则全局匹配替换，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">','</span>,<span class=\"string\">'g'</span>);</span><br><span class=\"line\">num = num.replace(reg,<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转化单位-元–-gt-万元\"><a href=\"#转化单位-元–-gt-万元\" class=\"headerlink\" title=\"转化单位(元–&gt;万元)\"></a>转化单位(元–&gt;万元)</h3><p>把金额单位转化为万元，并且保留两位小数，人数不进行转化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!numWarpParent.hasClass(<span class=\"string\">'notChangeUint'</span>))&#123;</span><br><span class=\"line\">    num = (<span class=\"built_in\">Number</span>(num) / <span class=\"number\">10000</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拆分为数组\"><a href=\"#字符串拆分为数组\" class=\"headerlink\" title=\"字符串拆分为数组\"></a>字符串拆分为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numArry = num.split(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"把数字添加到页面并调用animateNumber的方法\"><a href=\"#把数字添加到页面并调用animateNumber的方法\" class=\"headerlink\" title=\"把数字添加到页面并调用animateNumber的方法\"></a>把数字添加到页面并调用animateNumber的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numArry.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisNum = <span class=\"built_in\">parseInt</span>(numArry[i]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> spanNum;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(thisNum))&#123;</span><br><span class=\"line\">        spanNum = $(<span class=\"string\">'&lt;span class=\"single-num\"&gt;'</span> + numArry[i] +<span class=\"string\">'&lt;/span&gt;'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        spanNum = $(<span class=\"string\">'&lt;span class=\"single-point\"&gt;.&lt;/span&gt;'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    numWarpParent.append(spanNum);</span><br><span class=\"line\">    thisNumWarp.prop(<span class=\"string\">'number'</span>, stratNum).animateNumber(&#123;</span><br><span class=\"line\">        number: thisNum</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后代码\"><a href=\"#最后代码\" class=\"headerlink\" title=\"最后代码\"></a>最后代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.animateNumber'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalNum = _this.attr(<span class=\"string\">'date-num'</span>); <span class=\"comment\">//后台数据储存在date-num上</span></span><br><span class=\"line\">    appendNum(totalNum,_this);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendNum</span>(<span class=\"params\">num,numWarpParent</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newNum;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">','</span>,<span class=\"string\">'g'</span>); <span class=\"comment\">//正则匹配所有逗号</span></span><br><span class=\"line\">    newNum = num.replace(reg,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(num)) newNum = <span class=\"number\">0</span>;  <span class=\"comment\">//容错，当后台传入的参数错误(非数字)时，将只值置为0，以保证页面的正常渲染</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!numWarpParent.hasClass(<span class=\"string\">'notChangeUint'</span>))&#123; <span class=\"comment\">//判断是否需要转换单位</span></span><br><span class=\"line\">        newNum = (<span class=\"built_in\">Number</span>(newNum) / <span class=\"number\">10000</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    numArry = newNum.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numArry.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thisNum = numArry[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numWarp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(thisNum))&#123; <span class=\"comment\">//判断是否可以转化为数字</span></span><br><span class=\"line\">            numWarp = $(<span class=\"string\">'&lt;label class=\"single-num\"&gt;'</span> + numArry[i] +<span class=\"string\">'&lt;/label&gt;'</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            numWarp = $(<span class=\"string\">'&lt;label class=\"single-point\"&gt;.&lt;/label&gt;'</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        numWarpParent.append(numWarp);</span><br><span class=\"line\">        isAnimate(thisNum,numWarpParent,i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAnimate</span>(<span class=\"params\">num,numWarpParent,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(num))<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//调用animate.js插件方法</span></span><br><span class=\"line\">    numWarpParent.find(<span class=\"string\">'label'</span>).eq(index).prop(<span class=\"string\">'number'</span>, <span class=\"number\">0</span>).animateNumber(&#123;</span><br><span class=\"line\">        number: num</span><br><span class=\"line\">    &#125;, num * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.功能模块化，尽量一个方法(函数)只做一件事情<br>2.容错，由于涉及到DOM操作，所以为了保证页面的正常渲染必须有容错处理机制：数据出错不影响整个流程(页面渲染)的畅通</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>利用jquery的插件jquery.animateNumber实现一个简单的数字滚动效果</p>\n</blockquote>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><ol>\n<li>处理数据：因为数据是后端提供，所以有可能格式不是我们想要的，所以也许需要格式化数据；</li>\n<li>根据页面设计的效果图（如图），需要把数字字符串拆分成单个数字字符串<br> <img src=\"/images/posts/animateNumber_01.png\" alt=\"animateNumber_01\"></li>\n<li>每一个数字进行滚动变化</li>\n<li>最后，在项目中，我选取了插件<a href=\"http://aishek.github.io/jquery-animateNumber/\" target=\"_blank\" rel=\"noopener\">jquery.animateNumber</a>来实现滚动效果。这个插件的使用方式很简单，在官方有很详尽的文档来展示各个案例，就不一一赘述了。</li>\n</ol>\n<h2 id=\"HTML布局\"><a href=\"#HTML布局\" class=\"headerlink\" title=\"HTML布局\"></a>HTML布局</h2><p>其中num是后台传入的值,notChangeUint用来标记不进行单位变换的值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"warp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-credit-num\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>平台累积会员人数（人）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"123\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber notChangeUint\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-credit-money\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>平台完成投资金额（万元）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"91,123,456.00\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"net-return-money\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>累计已还款金额（万元）<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">date-num</span>=<span class=\"string\">\"8,895,678.00\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"animateNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"撸JS\"><a href=\"#撸JS\" class=\"headerlink\" title=\"撸JS\"></a>撸JS</h2><h3 id=\"去除逗号\"><a href=\"#去除逗号\" class=\"headerlink\" title=\"去除逗号(,)\"></a>去除逗号(,)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = num.replace(<span class=\"string\">','</span>,<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<p>上面这种方法只能去除字符串中的第一个逗号，但是实际数据中可能存在多个逗号，所以需要用到正则全局匹配替换，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">','</span>,<span class=\"string\">'g'</span>);</span><br><span class=\"line\">num = num.replace(reg,<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转化单位-元–-gt-万元\"><a href=\"#转化单位-元–-gt-万元\" class=\"headerlink\" title=\"转化单位(元–&gt;万元)\"></a>转化单位(元–&gt;万元)</h3><p>把金额单位转化为万元，并且保留两位小数，人数不进行转化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!numWarpParent.hasClass(<span class=\"string\">'notChangeUint'</span>))&#123;</span><br><span class=\"line\">    num = (<span class=\"built_in\">Number</span>(num) / <span class=\"number\">10000</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拆分为数组\"><a href=\"#字符串拆分为数组\" class=\"headerlink\" title=\"字符串拆分为数组\"></a>字符串拆分为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numArry = num.split(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"把数字添加到页面并调用animateNumber的方法\"><a href=\"#把数字添加到页面并调用animateNumber的方法\" class=\"headerlink\" title=\"把数字添加到页面并调用animateNumber的方法\"></a>把数字添加到页面并调用animateNumber的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numArry.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisNum = <span class=\"built_in\">parseInt</span>(numArry[i]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> spanNum;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(thisNum))&#123;</span><br><span class=\"line\">        spanNum = $(<span class=\"string\">'&lt;span class=\"single-num\"&gt;'</span> + numArry[i] +<span class=\"string\">'&lt;/span&gt;'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        spanNum = $(<span class=\"string\">'&lt;span class=\"single-point\"&gt;.&lt;/span&gt;'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    numWarpParent.append(spanNum);</span><br><span class=\"line\">    thisNumWarp.prop(<span class=\"string\">'number'</span>, stratNum).animateNumber(&#123;</span><br><span class=\"line\">        number: thisNum</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后代码\"><a href=\"#最后代码\" class=\"headerlink\" title=\"最后代码\"></a>最后代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.animateNumber'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalNum = _this.attr(<span class=\"string\">'date-num'</span>); <span class=\"comment\">//后台数据储存在date-num上</span></span><br><span class=\"line\">    appendNum(totalNum,_this);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendNum</span>(<span class=\"params\">num,numWarpParent</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newNum;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">','</span>,<span class=\"string\">'g'</span>); <span class=\"comment\">//正则匹配所有逗号</span></span><br><span class=\"line\">    newNum = num.replace(reg,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">isNaN</span>(num)) newNum = <span class=\"number\">0</span>;  <span class=\"comment\">//容错，当后台传入的参数错误(非数字)时，将只值置为0，以保证页面的正常渲染</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!numWarpParent.hasClass(<span class=\"string\">'notChangeUint'</span>))&#123; <span class=\"comment\">//判断是否需要转换单位</span></span><br><span class=\"line\">        newNum = (<span class=\"built_in\">Number</span>(newNum) / <span class=\"number\">10000</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    numArry = newNum.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numArry.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> thisNum = numArry[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> numWarp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(thisNum))&#123; <span class=\"comment\">//判断是否可以转化为数字</span></span><br><span class=\"line\">            numWarp = $(<span class=\"string\">'&lt;label class=\"single-num\"&gt;'</span> + numArry[i] +<span class=\"string\">'&lt;/label&gt;'</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            numWarp = $(<span class=\"string\">'&lt;label class=\"single-point\"&gt;.&lt;/label&gt;'</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        numWarpParent.append(numWarp);</span><br><span class=\"line\">        isAnimate(thisNum,numWarpParent,i);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAnimate</span>(<span class=\"params\">num,numWarpParent,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(num))<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//调用animate.js插件方法</span></span><br><span class=\"line\">    numWarpParent.find(<span class=\"string\">'label'</span>).eq(index).prop(<span class=\"string\">'number'</span>, <span class=\"number\">0</span>).animateNumber(&#123;</span><br><span class=\"line\">        number: num</span><br><span class=\"line\">    &#125;, num * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.功能模块化，尽量一个方法(函数)只做一件事情<br>2.容错，由于涉及到DOM操作，所以为了保证页面的正常渲染必须有容错处理机制：数据出错不影响整个流程(页面渲染)的畅通</p>\n"},{"title":"Babun导致本地SSH-KEY不可用","date":"2017-06-15T11:11:24.000Z","author":"T.2stt","comments":1,"_content":"\n> Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。\n\nps: 前文有我记录的关于`Babun`的一些特点，以及使用，请看[windows平台下超强的cmd工具Babun使用笔记](https://2ue.github.io/2017/03/15/Babun/)一文\n\n## 问题描述\n\n如果你本地先安装了git命令行工具并生成了`ssh-key`，再安装`Babun`之后，可能会导致原有的`ssh-key`不可用，原因：\n安装`Babun`会添加全局变量`Home`，指向`Babun`安装目录下的`.Babun/cymwin/home`，因此在使用命令生成key时不会在`C:\\Users\\userName\\.ssh`目录。\n\n``` bash\nssh -T git@github.com\nPermission denied (publickey).\n```\n\n### 解决办法\n\n- 删掉以前目录（`C:\\Users\\userName\\.ssh`）下的ssh-key。\n- 生成重新生成`ssh key`，此时生成的key在`.Babun\\cymwin\\home\\userName\\.ssh`下。\n- 把生成的key映射到`C:\\Users\\userName\\.ssh`目录。\n- 获取权限\n- 把key关联到相应github账户（此处以github为例）。\n- 测试`ssh key`是否可用\n\n``` bash\nssh -T git@github.com\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0670 for '/home/Administrator/.ssh/id_rsa' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"/home/Administrator/.ssh/id_rsa\": bad permissions\nPermission denied (publickey).\n```\n\n当生成key之后，测试是否联通，你会发现还是报错了，提示权限不够，错误信息为`Permissions 0670`\n\n#### 在终端切换到`C:\\Users\\userName\\.ssh`目录，执行下面命令\n\n``` bash\nln -s /c/Users/userName/.ssh /home/userName/.ssh\n```\n\n此操作会把`.Babun\\cymwin\\home\\userName\\.ssh`目录下的`ssh key`映射`C:\\Users\\userName\\.ssh`\n\n#### 在终端切换到根目录（~），执行以下命令(一般只执行其中一个)\n\n```bash\nchmod 400 ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nchmod 700 ~/.ssh/id_rsa\nssh -T git@github.com\nHi 2ue! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n参考文章：\n\n1.https://github.com/Babun/Babun/issues/327\n2.http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error\n","source":"_posts/babun-casue-ssh-key-bad.md","raw":"---\ntitle: Babun导致本地SSH-KEY不可用\ndate: 2017-6-15 19:11:24\nauthor: T.2stt\ncomments: true\ntags:\n- Babun\n- cmd\n- shell\n- git\ncategories:\n- [工具,操作类]\n---\n\n> Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。\n\nps: 前文有我记录的关于`Babun`的一些特点，以及使用，请看[windows平台下超强的cmd工具Babun使用笔记](https://2ue.github.io/2017/03/15/Babun/)一文\n\n## 问题描述\n\n如果你本地先安装了git命令行工具并生成了`ssh-key`，再安装`Babun`之后，可能会导致原有的`ssh-key`不可用，原因：\n安装`Babun`会添加全局变量`Home`，指向`Babun`安装目录下的`.Babun/cymwin/home`，因此在使用命令生成key时不会在`C:\\Users\\userName\\.ssh`目录。\n\n``` bash\nssh -T git@github.com\nPermission denied (publickey).\n```\n\n### 解决办法\n\n- 删掉以前目录（`C:\\Users\\userName\\.ssh`）下的ssh-key。\n- 生成重新生成`ssh key`，此时生成的key在`.Babun\\cymwin\\home\\userName\\.ssh`下。\n- 把生成的key映射到`C:\\Users\\userName\\.ssh`目录。\n- 获取权限\n- 把key关联到相应github账户（此处以github为例）。\n- 测试`ssh key`是否可用\n\n``` bash\nssh -T git@github.com\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0670 for '/home/Administrator/.ssh/id_rsa' are too open.\nIt is recommended that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"/home/Administrator/.ssh/id_rsa\": bad permissions\nPermission denied (publickey).\n```\n\n当生成key之后，测试是否联通，你会发现还是报错了，提示权限不够，错误信息为`Permissions 0670`\n\n#### 在终端切换到`C:\\Users\\userName\\.ssh`目录，执行下面命令\n\n``` bash\nln -s /c/Users/userName/.ssh /home/userName/.ssh\n```\n\n此操作会把`.Babun\\cymwin\\home\\userName\\.ssh`目录下的`ssh key`映射`C:\\Users\\userName\\.ssh`\n\n#### 在终端切换到根目录（~），执行以下命令(一般只执行其中一个)\n\n```bash\nchmod 400 ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nchmod 700 ~/.ssh/id_rsa\nssh -T git@github.com\nHi 2ue! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n参考文章：\n\n1.https://github.com/Babun/Babun/issues/327\n2.http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error\n","slug":"babun-casue-ssh-key-bad","published":1,"updated":"2018-11-01T06:51:37.896Z","_id":"cjny0swfs00162kv7xtcniogg","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>\n</blockquote>\n<p>ps: 前文有我记录的关于<code>Babun</code>的一些特点，以及使用，请看<a href=\"https://2ue.github.io/2017/03/15/Babun/\" target=\"_blank\" rel=\"noopener\">windows平台下超强的cmd工具Babun使用笔记</a>一文</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>如果你本地先安装了git命令行工具并生成了<code>ssh-key</code>，再安装<code>Babun</code>之后，可能会导致原有的<code>ssh-key</code>不可用，原因：<br>安装<code>Babun</code>会添加全局变量<code>Home</code>，指向<code>Babun</code>安装目录下的<code>.Babun/cymwin/home</code>，因此在使用命令生成key时不会在<code>C:\\Users\\userName\\.ssh</code>目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>删掉以前目录（<code>C:\\Users\\userName\\.ssh</code>）下的ssh-key。</li>\n<li>生成重新生成<code>ssh key</code>，此时生成的key在<code>.Babun\\cymwin\\home\\userName\\.ssh</code>下。</li>\n<li>把生成的key映射到<code>C:\\Users\\userName\\.ssh</code>目录。</li>\n<li>获取权限</li>\n<li>把key关联到相应github账户（此处以github为例）。</li>\n<li>测试<code>ssh key</code>是否可用</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">Permissions 0670 <span class=\"keyword\">for</span> <span class=\"string\">'/home/Administrator/.ssh/id_rsa'</span> are too open.</span><br><span class=\"line\">It is recommended that your private key files are NOT accessible by others.</span><br><span class=\"line\">This private key will be ignored.</span><br><span class=\"line\">Load key <span class=\"string\">\"/home/Administrator/.ssh/id_rsa\"</span>: bad permissions</span><br><span class=\"line\">Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n<p>当生成key之后，测试是否联通，你会发现还是报错了，提示权限不够，错误信息为<code>Permissions 0670</code></p>\n<h4 id=\"在终端切换到C-Users-userName-ssh目录，执行下面命令\"><a href=\"#在终端切换到C-Users-userName-ssh目录，执行下面命令\" class=\"headerlink\" title=\"在终端切换到C:\\Users\\userName\\.ssh目录，执行下面命令\"></a>在终端切换到<code>C:\\Users\\userName\\.ssh</code>目录，执行下面命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /c/Users/userName/.ssh /home/userName/.ssh</span><br></pre></td></tr></table></figure>\n<p>此操作会把<code>.Babun\\cymwin\\home\\userName\\.ssh</code>目录下的<code>ssh key</code>映射<code>C:\\Users\\userName\\.ssh</code></p>\n<h4 id=\"在终端切换到根目录（-），执行以下命令-一般只执行其中一个\"><a href=\"#在终端切换到根目录（-），执行以下命令-一般只执行其中一个\" class=\"headerlink\" title=\"在终端切换到根目录（~），执行以下命令(一般只执行其中一个)\"></a>在终端切换到根目录（~），执行以下命令(一般只执行其中一个)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 ~/.ssh/id_rsa</span><br><span class=\"line\">chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\">chmod 700 ~/.ssh/id_rsa</span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">Hi 2ue! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p>1.<a href=\"https://github.com/Babun/Babun/issues/327\" target=\"_blank\" rel=\"noopener\">https://github.com/Babun/Babun/issues/327</a><br>2.<a href=\"http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>\n</blockquote>\n<p>ps: 前文有我记录的关于<code>Babun</code>的一些特点，以及使用，请看<a href=\"https://2ue.github.io/2017/03/15/Babun/\" target=\"_blank\" rel=\"noopener\">windows平台下超强的cmd工具Babun使用笔记</a>一文</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>如果你本地先安装了git命令行工具并生成了<code>ssh-key</code>，再安装<code>Babun</code>之后，可能会导致原有的<code>ssh-key</code>不可用，原因：<br>安装<code>Babun</code>会添加全局变量<code>Home</code>，指向<code>Babun</code>安装目录下的<code>.Babun/cymwin/home</code>，因此在使用命令生成key时不会在<code>C:\\Users\\userName\\.ssh</code>目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>删掉以前目录（<code>C:\\Users\\userName\\.ssh</code>）下的ssh-key。</li>\n<li>生成重新生成<code>ssh key</code>，此时生成的key在<code>.Babun\\cymwin\\home\\userName\\.ssh</code>下。</li>\n<li>把生成的key映射到<code>C:\\Users\\userName\\.ssh</code>目录。</li>\n<li>获取权限</li>\n<li>把key关联到相应github账户（此处以github为例）。</li>\n<li>测试<code>ssh key</code>是否可用</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">Permissions 0670 <span class=\"keyword\">for</span> <span class=\"string\">'/home/Administrator/.ssh/id_rsa'</span> are too open.</span><br><span class=\"line\">It is recommended that your private key files are NOT accessible by others.</span><br><span class=\"line\">This private key will be ignored.</span><br><span class=\"line\">Load key <span class=\"string\">\"/home/Administrator/.ssh/id_rsa\"</span>: bad permissions</span><br><span class=\"line\">Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n<p>当生成key之后，测试是否联通，你会发现还是报错了，提示权限不够，错误信息为<code>Permissions 0670</code></p>\n<h4 id=\"在终端切换到C-Users-userName-ssh目录，执行下面命令\"><a href=\"#在终端切换到C-Users-userName-ssh目录，执行下面命令\" class=\"headerlink\" title=\"在终端切换到C:\\Users\\userName\\.ssh目录，执行下面命令\"></a>在终端切换到<code>C:\\Users\\userName\\.ssh</code>目录，执行下面命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /c/Users/userName/.ssh /home/userName/.ssh</span><br></pre></td></tr></table></figure>\n<p>此操作会把<code>.Babun\\cymwin\\home\\userName\\.ssh</code>目录下的<code>ssh key</code>映射<code>C:\\Users\\userName\\.ssh</code></p>\n<h4 id=\"在终端切换到根目录（-），执行以下命令-一般只执行其中一个\"><a href=\"#在终端切换到根目录（-），执行以下命令-一般只执行其中一个\" class=\"headerlink\" title=\"在终端切换到根目录（~），执行以下命令(一般只执行其中一个)\"></a>在终端切换到根目录（~），执行以下命令(一般只执行其中一个)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 ~/.ssh/id_rsa</span><br><span class=\"line\">chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\">chmod 700 ~/.ssh/id_rsa</span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">Hi 2ue! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<p>1.<a href=\"https://github.com/Babun/Babun/issues/327\" target=\"_blank\" rel=\"noopener\">https://github.com/Babun/Babun/issues/327</a><br>2.<a href=\"http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error</a></p>\n"},{"title":"windows平台下超强的cmd工具Babun使用笔记","date":"2017-03-15T05:01:33.000Z","author":"T.2stt","comments":1,"_content":"\n\n> Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。\n\n## [Babun](https://Babun.github.io/)\n\n官方贴出了Babun的十大特性\n\n- Pre-configured Cygwin with a lot of addons： 预置大量的Cygwin插件\n- Silent command-line installer, no admin rights required：静默命令行安装，不需要管理员权限\n- pact - advanced package manager (like apt-get or yum)： 支持pact高级包管理器，类似于apt-get、yum等\n- xTerm-256 compatible console： xterm-256兼容控制台\n- HTTP(s) proxying support： HTTP(s) 代理支持\n- Plugin-oriented architecture： 插件体系，可以安装丰富的插件\n- Pre-configured git and shell： 预置git和shell，支持自定义配置\n- Integrated oh-my-zsh： 集成了zsh\n- Auto update feature： 自动检测最新版本\n- \"Open Babun Here\" context menu entry： 支持右键菜单“此处打开Babun\"\n\n当然对于上面这些特性，我不得不补充一点，那就是它强大的命令提示功能，能从根据你的输入匹配历史输入，狠棒！\n\n### Cygwin\n\n`Babun`的核心包括一个预配置的`Cygwin`。`cygwin`是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。`Babun`解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们\n\n### shell\n\n`Babun`的`shell`通过调整，已达到最佳的用户体验，`Babun`有两个配置之后马上使用的`shell`(默认使用`zsh`，可以使用`bash`或者`zsh`命令切换到对应的模式)，`Babun`的`shell`具有以下的特点:\n- 语法高亮\n- 具有unix的工具\n- 软件开发工具\n- git-语义提示\n- 自定义脚本和别名\n- ...\n\n### Console\n\n`Babun`支持`HTTP`代理，只需添加地址和`HTTP`代理服务器的凭据。`Babunrc`文件所在文件夹执行源`Babunrc`启用HTTP代理。目前还不支持`SOCKS`代理。\n\n### 开发者工具\n\nBabun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下:\n- 编程语言(python,Perl, etc等)\n- git(各种各样的别名调整)\n- UNIX工具((grep, wget, curl, etc)\n- vcs (svn, git)\n- oh-my-zsh\n- 自定义脚本(pbcopy, pbpaste, Babun, etc)\n\n## 安装\n\n### 默认安装\n\n双击`install.bat`脚本，`Babun`使用默认安装位置`C:\\Users\\userName\\.Babun`，安装好的`Babun`会在`C:\\Users\\userName\\`下；\n当然也可以指定安装位置\n\n### 自定义安装\n\n通过`cmd`命令行在执行`install.bat`时指定参数`/t`或`/target`指定安装的目录。\n执行：Babun.bat /t install-dir\n\n``` bash\nBabun.bat /t c:\\Babun\n```\n\n安装好之后会在`d:\\Babun`目录下生成一个`.Babun`的目录，`Babun`所有文件都在这个目录中。注意安装目录最好不要有空格，这是`cygwin`要求的\n\n启动`Babun`默认是在'%userprofile%\\.Babun\\cygwin\\home\\username'\n\n## 开发环境配置\n\n### pip\n\n`Babun`内置了`Python`、`Perl`等解释器。`cygwin`自带的`python`没有`pip`，需手动安装。\n直接执行下面这个命令就好了。\n\n``` bash\nwget https://bootstrap.pypa.io/get-pip.py -O - | python\n```\n\n有了pip就可以自由的安装诸如`ipython`之类的东西，还有包罗万象的类库。\n\n### 常用插件\n\n`Babun`默认是安装了`oh-my-zsh`的，这里可以根据自身情况安装一些插件。具体可参考[利用`oh-my-zsh`打造你的超级终端一文](http://blog.csdn.net/czg13548930186/article/details/72858289);\n\n### 包管理器使用\n\n`Babun`提供一个叫`pact`包管理工具，类似于`linux`上面的`apt-get`或`yum`的包管理工具\n\n## 配置别名（alias）\n\n可以在`.Babun\\cygwin\\home\\username`目录下配置对应工具的别名，而并不仅限于`git-bash`。\n当然记忆别名其实也是体力活，我的想法是对一些常用的命令、经常手滑手速过快打错的命令、复杂的命令配置一些别名，例如\n\n``` bash\ngt = git\ngti = git\nn = npm\nnr = npm run dev\ngtlg = git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\n...等等\n```\n\n## 问题\n\n### 本地SSH-KEY不可用\n\n查看我记录的[Babun导致本地SSH-KEY不可用](https://2ue.github.io/2017/06/15/babun-casue-ssh-key-bad/)一文\n\n### 中文乱码问题\n\n找了很多解决方案，都不能完美的解决问题，最后还是回归原始：不解决！！！\n\n### 锁定文件夹\n\n在使用`Babun`时（比如此时进入了`a`目录），它会锁定文件夹`a`目录，导致你可能无法做一些危险操作。必须关闭`Babun`后才能解锁进程\n\n参考文章：\n\n- [windows下的命令行工具Babun](http://www.mamicode.com/info-detail-1653353.html)\n","source":"_posts/babun.md","raw":"---\ntitle: windows平台下超强的cmd工具Babun使用笔记\ndate: 2017-3-15 13:01:33\nauthor: T.2stt\ncomments: true\ntags:\n- Babun\n- cmd\n- shell\n- git\ncategories:\n- [工具,操作类]\n\n---\n\n\n> Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。\n\n## [Babun](https://Babun.github.io/)\n\n官方贴出了Babun的十大特性\n\n- Pre-configured Cygwin with a lot of addons： 预置大量的Cygwin插件\n- Silent command-line installer, no admin rights required：静默命令行安装，不需要管理员权限\n- pact - advanced package manager (like apt-get or yum)： 支持pact高级包管理器，类似于apt-get、yum等\n- xTerm-256 compatible console： xterm-256兼容控制台\n- HTTP(s) proxying support： HTTP(s) 代理支持\n- Plugin-oriented architecture： 插件体系，可以安装丰富的插件\n- Pre-configured git and shell： 预置git和shell，支持自定义配置\n- Integrated oh-my-zsh： 集成了zsh\n- Auto update feature： 自动检测最新版本\n- \"Open Babun Here\" context menu entry： 支持右键菜单“此处打开Babun\"\n\n当然对于上面这些特性，我不得不补充一点，那就是它强大的命令提示功能，能从根据你的输入匹配历史输入，狠棒！\n\n### Cygwin\n\n`Babun`的核心包括一个预配置的`Cygwin`。`cygwin`是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。`Babun`解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们\n\n### shell\n\n`Babun`的`shell`通过调整，已达到最佳的用户体验，`Babun`有两个配置之后马上使用的`shell`(默认使用`zsh`，可以使用`bash`或者`zsh`命令切换到对应的模式)，`Babun`的`shell`具有以下的特点:\n- 语法高亮\n- 具有unix的工具\n- 软件开发工具\n- git-语义提示\n- 自定义脚本和别名\n- ...\n\n### Console\n\n`Babun`支持`HTTP`代理，只需添加地址和`HTTP`代理服务器的凭据。`Babunrc`文件所在文件夹执行源`Babunrc`启用HTTP代理。目前还不支持`SOCKS`代理。\n\n### 开发者工具\n\nBabun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下:\n- 编程语言(python,Perl, etc等)\n- git(各种各样的别名调整)\n- UNIX工具((grep, wget, curl, etc)\n- vcs (svn, git)\n- oh-my-zsh\n- 自定义脚本(pbcopy, pbpaste, Babun, etc)\n\n## 安装\n\n### 默认安装\n\n双击`install.bat`脚本，`Babun`使用默认安装位置`C:\\Users\\userName\\.Babun`，安装好的`Babun`会在`C:\\Users\\userName\\`下；\n当然也可以指定安装位置\n\n### 自定义安装\n\n通过`cmd`命令行在执行`install.bat`时指定参数`/t`或`/target`指定安装的目录。\n执行：Babun.bat /t install-dir\n\n``` bash\nBabun.bat /t c:\\Babun\n```\n\n安装好之后会在`d:\\Babun`目录下生成一个`.Babun`的目录，`Babun`所有文件都在这个目录中。注意安装目录最好不要有空格，这是`cygwin`要求的\n\n启动`Babun`默认是在'%userprofile%\\.Babun\\cygwin\\home\\username'\n\n## 开发环境配置\n\n### pip\n\n`Babun`内置了`Python`、`Perl`等解释器。`cygwin`自带的`python`没有`pip`，需手动安装。\n直接执行下面这个命令就好了。\n\n``` bash\nwget https://bootstrap.pypa.io/get-pip.py -O - | python\n```\n\n有了pip就可以自由的安装诸如`ipython`之类的东西，还有包罗万象的类库。\n\n### 常用插件\n\n`Babun`默认是安装了`oh-my-zsh`的，这里可以根据自身情况安装一些插件。具体可参考[利用`oh-my-zsh`打造你的超级终端一文](http://blog.csdn.net/czg13548930186/article/details/72858289);\n\n### 包管理器使用\n\n`Babun`提供一个叫`pact`包管理工具，类似于`linux`上面的`apt-get`或`yum`的包管理工具\n\n## 配置别名（alias）\n\n可以在`.Babun\\cygwin\\home\\username`目录下配置对应工具的别名，而并不仅限于`git-bash`。\n当然记忆别名其实也是体力活，我的想法是对一些常用的命令、经常手滑手速过快打错的命令、复杂的命令配置一些别名，例如\n\n``` bash\ngt = git\ngti = git\nn = npm\nnr = npm run dev\ngtlg = git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\n...等等\n```\n\n## 问题\n\n### 本地SSH-KEY不可用\n\n查看我记录的[Babun导致本地SSH-KEY不可用](https://2ue.github.io/2017/06/15/babun-casue-ssh-key-bad/)一文\n\n### 中文乱码问题\n\n找了很多解决方案，都不能完美的解决问题，最后还是回归原始：不解决！！！\n\n### 锁定文件夹\n\n在使用`Babun`时（比如此时进入了`a`目录），它会锁定文件夹`a`目录，导致你可能无法做一些危险操作。必须关闭`Babun`后才能解锁进程\n\n参考文章：\n\n- [windows下的命令行工具Babun](http://www.mamicode.com/info-detail-1653353.html)\n","slug":"babun","published":1,"updated":"2018-11-01T06:51:06.346Z","_id":"cjny0swfu001a2kv7qukpbjqa","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>\n</blockquote>\n<h2 id=\"Babun\"><a href=\"#Babun\" class=\"headerlink\" title=\"Babun\"></a><a href=\"https://Babun.github.io/\" target=\"_blank\" rel=\"noopener\">Babun</a></h2><p>官方贴出了Babun的十大特性</p>\n<ul>\n<li>Pre-configured Cygwin with a lot of addons： 预置大量的Cygwin插件</li>\n<li>Silent command-line installer, no admin rights required：静默命令行安装，不需要管理员权限</li>\n<li>pact - advanced package manager (like apt-get or yum)： 支持pact高级包管理器，类似于apt-get、yum等</li>\n<li>xTerm-256 compatible console： xterm-256兼容控制台</li>\n<li>HTTP(s) proxying support： HTTP(s) 代理支持</li>\n<li>Plugin-oriented architecture： 插件体系，可以安装丰富的插件</li>\n<li>Pre-configured git and shell： 预置git和shell，支持自定义配置</li>\n<li>Integrated oh-my-zsh： 集成了zsh</li>\n<li>Auto update feature： 自动检测最新版本</li>\n<li>“Open Babun Here” context menu entry： 支持右键菜单“此处打开Babun”</li>\n</ul>\n<p>当然对于上面这些特性，我不得不补充一点，那就是它强大的命令提示功能，能从根据你的输入匹配历史输入，狠棒！</p>\n<h3 id=\"Cygwin\"><a href=\"#Cygwin\" class=\"headerlink\" title=\"Cygwin\"></a>Cygwin</h3><p><code>Babun</code>的核心包括一个预配置的<code>Cygwin</code>。<code>cygwin</code>是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。<code>Babun</code>解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们</p>\n<h3 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h3><p><code>Babun</code>的<code>shell</code>通过调整，已达到最佳的用户体验，<code>Babun</code>有两个配置之后马上使用的<code>shell</code>(默认使用<code>zsh</code>，可以使用<code>bash</code>或者<code>zsh</code>命令切换到对应的模式)，<code>Babun</code>的<code>shell</code>具有以下的特点:</p>\n<ul>\n<li>语法高亮</li>\n<li>具有unix的工具</li>\n<li>软件开发工具</li>\n<li>git-语义提示</li>\n<li>自定义脚本和别名</li>\n<li>…</li>\n</ul>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><p><code>Babun</code>支持<code>HTTP</code>代理，只需添加地址和<code>HTTP</code>代理服务器的凭据。<code>Babunrc</code>文件所在文件夹执行源<code>Babunrc</code>启用HTTP代理。目前还不支持<code>SOCKS</code>代理。</p>\n<h3 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h3><p>Babun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下:</p>\n<ul>\n<li>编程语言(python,Perl, etc等)</li>\n<li>git(各种各样的别名调整)</li>\n<li>UNIX工具((grep, wget, curl, etc)</li>\n<li>vcs (svn, git)</li>\n<li>oh-my-zsh</li>\n<li>自定义脚本(pbcopy, pbpaste, Babun, etc)</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"默认安装\"><a href=\"#默认安装\" class=\"headerlink\" title=\"默认安装\"></a>默认安装</h3><p>双击<code>install.bat</code>脚本，<code>Babun</code>使用默认安装位置<code>C:\\Users\\userName\\.Babun</code>，安装好的<code>Babun</code>会在<code>C:\\Users\\userName\\</code>下；<br>当然也可以指定安装位置</p>\n<h3 id=\"自定义安装\"><a href=\"#自定义安装\" class=\"headerlink\" title=\"自定义安装\"></a>自定义安装</h3><p>通过<code>cmd</code>命令行在执行<code>install.bat</code>时指定参数<code>/t</code>或<code>/target</code>指定安装的目录。<br>执行：Babun.bat /t install-dir</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Babun.bat /t c:\\Babun</span><br></pre></td></tr></table></figure>\n<p>安装好之后会在<code>d:\\Babun</code>目录下生成一个<code>.Babun</code>的目录，<code>Babun</code>所有文件都在这个目录中。注意安装目录最好不要有空格，这是<code>cygwin</code>要求的</p>\n<p>启动<code>Babun</code>默认是在’%userprofile%.Babun\\cygwin\\home\\username’</p>\n<h2 id=\"开发环境配置\"><a href=\"#开发环境配置\" class=\"headerlink\" title=\"开发环境配置\"></a>开发环境配置</h2><h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><code>Babun</code>内置了<code>Python</code>、<code>Perl</code>等解释器。<code>cygwin</code>自带的<code>python</code>没有<code>pip</code>，需手动安装。<br>直接执行下面这个命令就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py -O - | python</span><br></pre></td></tr></table></figure>\n<p>有了pip就可以自由的安装诸如<code>ipython</code>之类的东西，还有包罗万象的类库。</p>\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><p><code>Babun</code>默认是安装了<code>oh-my-zsh</code>的，这里可以根据自身情况安装一些插件。具体可参考<a href=\"http://blog.csdn.net/czg13548930186/article/details/72858289\" target=\"_blank\" rel=\"noopener\">利用<code>oh-my-zsh</code>打造你的超级终端一文</a>;</p>\n<h3 id=\"包管理器使用\"><a href=\"#包管理器使用\" class=\"headerlink\" title=\"包管理器使用\"></a>包管理器使用</h3><p><code>Babun</code>提供一个叫<code>pact</code>包管理工具，类似于<code>linux</code>上面的<code>apt-get</code>或<code>yum</code>的包管理工具</p>\n<h2 id=\"配置别名（alias）\"><a href=\"#配置别名（alias）\" class=\"headerlink\" title=\"配置别名（alias）\"></a>配置别名（alias）</h2><p>可以在<code>.Babun\\cygwin\\home\\username</code>目录下配置对应工具的别名，而并不仅限于<code>git-bash</code>。<br>当然记忆别名其实也是体力活，我的想法是对一些常用的命令、经常手滑手速过快打错的命令、复杂的命令配置一些别名，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt = git</span><br><span class=\"line\">gti = git</span><br><span class=\"line\">n = npm</span><br><span class=\"line\">nr = npm run dev</span><br><span class=\"line\">gtlg = git <span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">...等等</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"本地SSH-KEY不可用\"><a href=\"#本地SSH-KEY不可用\" class=\"headerlink\" title=\"本地SSH-KEY不可用\"></a>本地SSH-KEY不可用</h3><p>查看我记录的<a href=\"https://2ue.github.io/2017/06/15/babun-casue-ssh-key-bad/\" target=\"_blank\" rel=\"noopener\">Babun导致本地SSH-KEY不可用</a>一文</p>\n<h3 id=\"中文乱码问题\"><a href=\"#中文乱码问题\" class=\"headerlink\" title=\"中文乱码问题\"></a>中文乱码问题</h3><p>找了很多解决方案，都不能完美的解决问题，最后还是回归原始：不解决！！！</p>\n<h3 id=\"锁定文件夹\"><a href=\"#锁定文件夹\" class=\"headerlink\" title=\"锁定文件夹\"></a>锁定文件夹</h3><p>在使用<code>Babun</code>时（比如此时进入了<code>a</code>目录），它会锁定文件夹<code>a</code>目录，导致你可能无法做一些危险操作。必须关闭<code>Babun</code>后才能解锁进程</p>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"http://www.mamicode.com/info-detail-1653353.html\" target=\"_blank\" rel=\"noopener\">windows下的命令行工具Babun</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>\n</blockquote>\n<h2 id=\"Babun\"><a href=\"#Babun\" class=\"headerlink\" title=\"Babun\"></a><a href=\"https://Babun.github.io/\" target=\"_blank\" rel=\"noopener\">Babun</a></h2><p>官方贴出了Babun的十大特性</p>\n<ul>\n<li>Pre-configured Cygwin with a lot of addons： 预置大量的Cygwin插件</li>\n<li>Silent command-line installer, no admin rights required：静默命令行安装，不需要管理员权限</li>\n<li>pact - advanced package manager (like apt-get or yum)： 支持pact高级包管理器，类似于apt-get、yum等</li>\n<li>xTerm-256 compatible console： xterm-256兼容控制台</li>\n<li>HTTP(s) proxying support： HTTP(s) 代理支持</li>\n<li>Plugin-oriented architecture： 插件体系，可以安装丰富的插件</li>\n<li>Pre-configured git and shell： 预置git和shell，支持自定义配置</li>\n<li>Integrated oh-my-zsh： 集成了zsh</li>\n<li>Auto update feature： 自动检测最新版本</li>\n<li>“Open Babun Here” context menu entry： 支持右键菜单“此处打开Babun”</li>\n</ul>\n<p>当然对于上面这些特性，我不得不补充一点，那就是它强大的命令提示功能，能从根据你的输入匹配历史输入，狠棒！</p>\n<h3 id=\"Cygwin\"><a href=\"#Cygwin\" class=\"headerlink\" title=\"Cygwin\"></a>Cygwin</h3><p><code>Babun</code>的核心包括一个预配置的<code>Cygwin</code>。<code>cygwin</code>是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。<code>Babun</code>解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们</p>\n<h3 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h3><p><code>Babun</code>的<code>shell</code>通过调整，已达到最佳的用户体验，<code>Babun</code>有两个配置之后马上使用的<code>shell</code>(默认使用<code>zsh</code>，可以使用<code>bash</code>或者<code>zsh</code>命令切换到对应的模式)，<code>Babun</code>的<code>shell</code>具有以下的特点:</p>\n<ul>\n<li>语法高亮</li>\n<li>具有unix的工具</li>\n<li>软件开发工具</li>\n<li>git-语义提示</li>\n<li>自定义脚本和别名</li>\n<li>…</li>\n</ul>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><p><code>Babun</code>支持<code>HTTP</code>代理，只需添加地址和<code>HTTP</code>代理服务器的凭据。<code>Babunrc</code>文件所在文件夹执行源<code>Babunrc</code>启用HTTP代理。目前还不支持<code>SOCKS</code>代理。</p>\n<h3 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h3><p>Babun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下:</p>\n<ul>\n<li>编程语言(python,Perl, etc等)</li>\n<li>git(各种各样的别名调整)</li>\n<li>UNIX工具((grep, wget, curl, etc)</li>\n<li>vcs (svn, git)</li>\n<li>oh-my-zsh</li>\n<li>自定义脚本(pbcopy, pbpaste, Babun, etc)</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"默认安装\"><a href=\"#默认安装\" class=\"headerlink\" title=\"默认安装\"></a>默认安装</h3><p>双击<code>install.bat</code>脚本，<code>Babun</code>使用默认安装位置<code>C:\\Users\\userName\\.Babun</code>，安装好的<code>Babun</code>会在<code>C:\\Users\\userName\\</code>下；<br>当然也可以指定安装位置</p>\n<h3 id=\"自定义安装\"><a href=\"#自定义安装\" class=\"headerlink\" title=\"自定义安装\"></a>自定义安装</h3><p>通过<code>cmd</code>命令行在执行<code>install.bat</code>时指定参数<code>/t</code>或<code>/target</code>指定安装的目录。<br>执行：Babun.bat /t install-dir</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Babun.bat /t c:\\Babun</span><br></pre></td></tr></table></figure>\n<p>安装好之后会在<code>d:\\Babun</code>目录下生成一个<code>.Babun</code>的目录，<code>Babun</code>所有文件都在这个目录中。注意安装目录最好不要有空格，这是<code>cygwin</code>要求的</p>\n<p>启动<code>Babun</code>默认是在’%userprofile%.Babun\\cygwin\\home\\username’</p>\n<h2 id=\"开发环境配置\"><a href=\"#开发环境配置\" class=\"headerlink\" title=\"开发环境配置\"></a>开发环境配置</h2><h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><code>Babun</code>内置了<code>Python</code>、<code>Perl</code>等解释器。<code>cygwin</code>自带的<code>python</code>没有<code>pip</code>，需手动安装。<br>直接执行下面这个命令就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py -O - | python</span><br></pre></td></tr></table></figure>\n<p>有了pip就可以自由的安装诸如<code>ipython</code>之类的东西，还有包罗万象的类库。</p>\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><p><code>Babun</code>默认是安装了<code>oh-my-zsh</code>的，这里可以根据自身情况安装一些插件。具体可参考<a href=\"http://blog.csdn.net/czg13548930186/article/details/72858289\" target=\"_blank\" rel=\"noopener\">利用<code>oh-my-zsh</code>打造你的超级终端一文</a>;</p>\n<h3 id=\"包管理器使用\"><a href=\"#包管理器使用\" class=\"headerlink\" title=\"包管理器使用\"></a>包管理器使用</h3><p><code>Babun</code>提供一个叫<code>pact</code>包管理工具，类似于<code>linux</code>上面的<code>apt-get</code>或<code>yum</code>的包管理工具</p>\n<h2 id=\"配置别名（alias）\"><a href=\"#配置别名（alias）\" class=\"headerlink\" title=\"配置别名（alias）\"></a>配置别名（alias）</h2><p>可以在<code>.Babun\\cygwin\\home\\username</code>目录下配置对应工具的别名，而并不仅限于<code>git-bash</code>。<br>当然记忆别名其实也是体力活，我的想法是对一些常用的命令、经常手滑手速过快打错的命令、复杂的命令配置一些别名，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt = git</span><br><span class=\"line\">gti = git</span><br><span class=\"line\">n = npm</span><br><span class=\"line\">nr = npm run dev</span><br><span class=\"line\">gtlg = git <span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">...等等</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"本地SSH-KEY不可用\"><a href=\"#本地SSH-KEY不可用\" class=\"headerlink\" title=\"本地SSH-KEY不可用\"></a>本地SSH-KEY不可用</h3><p>查看我记录的<a href=\"https://2ue.github.io/2017/06/15/babun-casue-ssh-key-bad/\" target=\"_blank\" rel=\"noopener\">Babun导致本地SSH-KEY不可用</a>一文</p>\n<h3 id=\"中文乱码问题\"><a href=\"#中文乱码问题\" class=\"headerlink\" title=\"中文乱码问题\"></a>中文乱码问题</h3><p>找了很多解决方案，都不能完美的解决问题，最后还是回归原始：不解决！！！</p>\n<h3 id=\"锁定文件夹\"><a href=\"#锁定文件夹\" class=\"headerlink\" title=\"锁定文件夹\"></a>锁定文件夹</h3><p>在使用<code>Babun</code>时（比如此时进入了<code>a</code>目录），它会锁定文件夹<code>a</code>目录，导致你可能无法做一些危险操作。必须关闭<code>Babun</code>后才能解锁进程</p>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"http://www.mamicode.com/info-detail-1653353.html\" target=\"_blank\" rel=\"noopener\">windows下的命令行工具Babun</a></li>\n</ul>\n"},{"title":"前端测试探索","date":"2017-10-10T02:06:30.000Z","author":"T.2stt","comments":1,"_content":"\n> 前端测试是保证代码质量以及程序稳定的一种可靠方式，同时也从代码层面解决了自测难，自测烦等前端测试综合症。当然在前端开发引入测试环节无疑会增加人力和时间成本，如果最终产生的结果和增加的成本能够两两抵消产生正面效应，那么有必要考虑把测试环节加入到团队的规划中。但是在实际开发过程中，测试用例更多的被用于开源项目中，在大部分公司的生成项目很少使用维护测试用例，其根本原因是不纯粹的生产环境导致维护测试用例变得困难，而目的性很强的开源项目则更纯粹，所以前端测试的发展任重而道远。\n\nPs：本次更多的是讲述概念性的东西，代码性的具体实例不做过多实践\n\n------\n## GUI(Graphical User Interface)软件测试\n\n> 前端测试不同于后端测试，因为除了一般的逻辑测试以外，由于存在界面交互，所以涉及到模拟用户行为达到测试的目的。由此引入了一个概念：GUI(Graphical User Interface)软件测试，也就是图形用户界面软件测试\n\n## TDD(Test Driven Development) & BDD(Behaviour Driven Development)\n\n`TDD`很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n`TDD`的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的`bug`，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆bug，或者存在设计问题，或者更严重的逻辑问题，而`TDD`正好可以帮助我们尽量减少类似事件的发生。\n当然，并不是所有的项目都适合`TDD`，要使用`TDD`,我认为必须至少具备以下两个条件\n\n- 项目的业务逻辑很清晰，并且程序员对开发逻辑很清晰\n- 项目模块的复杂度和依赖度不高。如果复杂度高和依赖度高会导致在最开始拆分单元的时候造成很大的困扰，有可能根本不能顺利拆分\n\n`BDD`行为驱动开发，这里的行为不是指程序员的行为，而是指业务（程序）的逻辑行为，实际上`BDD`可以看作是对`TDD`的一种补充，当然你也可以把它看作`TDD`的一个分支，因为在`TDD`中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能\n\n## 如何实现自动化\n\n说一千道一万，新环节的引入必然带来成本的增加，那么我们如何控制增加的成本在合理范围内？很自然的我们想到了使用工具来实现自动化的测试，让机器帮我完成复杂的交互和测试，并自动监控返回错误报警，为我们手动排除问题提供参考\n\n## 可覆盖的测试\n\n> 那到底前端在开发中需要测试哪些东西？在目前技术又可以实现那些测试？\n\n- 函数功能测试\n  - 全局变量\n  - 公共方法\n- 界面&交互测试\n  - 事件交互\n  - 数据输入交互\n  - 特征检测\n    - 设计图还原度\n    - 图片大小\n    - ...\n  - 特殊情况\n    - 自适应和响应式测试\n    - 浏览器兼容\n    - 多端测试\n    - ...\n- 网络请求测试\n  - 数据库访问\n  - 模拟用户登陆等\n  - ajax请求\n- 直观的错误信息展示\n    - 网页表格\n    - 截图\n- 性能测试\n- 回归测试\n- 自动化\n  - 测试用例数据自动化 - 结合mockjs打造假数据\n  - 测试用例自动化创建 - 通过读取源码中的注释来自动生成测试用例？\n\n## 业务逻辑/业务代码/测试用例的关系\n\n业务代码的颗粒度与测试用例的复杂度成反比：颗粒度划分越多（细），复杂度越低\n业务代码的量与测试用例的量成正比\n\n## Good\n\n- 相对于等待问题产生，更倾向于避免可能的问题\n- 有利于形成团队代码规范，对团队未来成员的扩充是一个很好的约束规范\n- 对输出的产品有进一步的质量保证\n\n## Bad\n\n- 增加维护测试用例本（时间和人力）\n- 增加编码复杂度（需要靠如何更友好的进行测试），对团队人员的编码要求提高了\n- 也许会增加学习成本（并不一定所有人都会写测试用例）\n- 需要把控测试用例的合理性、覆盖率、通过率\n\n## 测试框架\n\n### [PhantomJS](http://phantomjs.org/)/[CasperJS](http://casperjs.org)\n\n`PhantomJS`是一个服务器端的支持`JavaScript API`的`WebKit`。其支持各种Web标准：`DOM`处理, `CSS`选择器, `JSON`, `Canvas`和`SVG`。对于`web`测试、界面、网络捕获、页面自动化访问等等方面。当启动的时候会在内存在开启一个无界面浏览器，以此模拟用户各种操作，可以对界面截图\n`Casperjs`是对`PhantomJS`的封装，提供了更加易用的`API`, 增强了测试等方面的支持\n\n### [PhantomCSS](https://github.com/Huddle/PhantomCSS)\n\n像素对比工具，基于`PhantomJs`开发，结合了`Casperjs`截图和`ResembleJs`图像对比分析\n\n### [Page-monitor](https://github.com/fouber/page-monitor)\n\n`DOM`结构对比工具，基于`PhantomJS`开发，根据`DOM`结构与样式的对比来对比整个页面的变动部分\n\n### [BackstopJS](https://garris.github.io/BackstopJS)\n\n主要通过`PhantomJS`、`capserJS`等工具在不同尺寸下截图，然后根据`resemberJS`进行像素比对判断是否正常，以实现响应式测试\n\n### [Mocha + Chai](https://www.zybuluo.com/mdeditor#911714-full-reader)\n\n`mocha+chai`是一个经典的组合主要用来测试函数功能，也能测试异步操作。也有常用`chai`的超集（拓展库）`sion-chai`来加强`chai`\n\n### [Selenium2](http://www.seleniumhq.org/docs)\n\n`Selenium2`，它的主要新功能是集成了`Selenium1.0`以及`WebDriver`。\n也就是说`Selenium2`是`Selenium`和`WebDriver`两个项目的合并，即`Selenium2`兼容`Selenium`，它既支持`Selenium API`也支持`WebDriver API`。`WebDriver`是一个用来进行复杂重复的`web`自动化测试的工具,意在提供一种比`Selenium1.0`更简单易学，有利于维护的`API`。它没有和任何测试框架进行绑定，所以他可以很好的在单元测试中调用。当启动`Selenium2`时通常会调起一个可见的界面，但也可以通过设置，让它以`PhantomJS`的形式进行无界面的测试\n当然使用`Selenium2`必须额外的安装每种浏览器的`WebDriver`\n`Selenium2`上手难度大于`PhantomJS`\n\n### [NightwatchJs](http://nightwatchjs.org/guide)\n\n推特出品，基于`Selenium WebDriver API`开发，意味着支持浏览器自动化测试，内部集成了`mocha+chai`并将它加强，同时支持分组测试和单个测试，对语法进行了简化，归纳有以下特点:\n\n- 简单但强大的语法（更符合`js`书写习惯），只需要使用`JavaScript`和`CSS`选择器，开发者就能够非常迅捷地撰写测试。\n- 开发者也不必初始化其他对象和类，只需要编写测试规范即可。\n- 使用`CSS`选择器或`Xpath`，定位并验证页面中的元素或是执行命令。\n- 易于扩展，便于开发者根据需要，实现与自己应用相关的命令。\n- ...\n\n目前，`Selenium`是`JavaScript`的验收测试方面最流行的工具之一，同类的还有`PhantomJS`。二者都有其独到的方法：`Selenium`使用`WebDriver API`，而`PhantomJS`使用无界面的`WebKit`浏览器。它们都是非常成熟的工具，都具有强大的社区支持。它们与`Nightwatch`之间最大的不同，主要是在于语法的简易度以及对持续集成的支持。与`Nightwatch`相比，`Selenium`和`PhantomJS`都拥有更加冗长的语法，这会让编码变得更庞大\n\n``` javascript\nthis.demoTestGoogle = function (browser) {\n   browser\n     .url(“http://www.google.com”)\n     .waitForElementVisible('body', 1000)\n     .setValue('input[type=text]', 'nightwatch')\n     .waitForElementVisible('button[name=btnG]', 1000)\n     .click('button[name=btnG]')\n     .pause(1000)\n     .assert.containsText('#main', 'The Night Watch')\n     .end();\n};\n\n//也可以\nmodule.exports = {\n  'step one' : function (browser) {\n    browser\n      .url('http://www.google.com')\n      .waitForElementVisible('body', 1000)\n      .setValue('input[type=text]', 'nightwatch')\n      .waitForElementVisible('button[name=btnG]', 1000)\n  },\n\n  'step two' : function (browser) {\n    browser\n      .click('button[name=btnG]')\n      .pause(1000)\n      .assert.containsText('#main', 'Night Watch')\n      .end();\n  }\n};\n```\n\n## 对前端框架的支持\n\n在实际开发中，我们可能是用了不同的框架。虽然我们完全可以在把源码编译成普通的`HTML/CSS/JS`代码然后测试，但是此种方法的弊端也显而易见：不易于自动化，必须等到所有模块开发完成才能测试...为此我们必须寻找某种方式使得测试不收框架的限制\n\n### Vue\n\n本身可以通过`new`一个`Vue`的方式挂载节点达到效果。\n下面是一个简单的测试用例，测试`.hello h1`标签内容是否符合预期\n\n``` javascript\nimport Vue from 'vue'\nimport HelloWorld from '@/components/HelloWorld'\n\ndescribe('HelloWorld.vue', () => {\n  it('should render correct contents', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h1').textContent)\n      .to.equal('Welcome to Your Vue.js App')\n  })\n})\n```\n\n### React\n\n1.官方提供了两种方法：\n\n- 渲染虚拟`DOM`（`Shallow Rendering`）\n\n只渲染第一层，不渲染子组件，速度快，返回一个浅渲染的虚拟`DOM`对象。然后拿到节点的各种信息，进行测试\n\n- 渲染真实`DOM`节点（`renderIntoDocument`）\n\n`renderIntoDocument` 方法要求存在一个真实的`DOM`环境，否则会报错。因此，测试用例之中，`DOM`环境（即`window`, `document` 和 `navigator` 对象）必须是存在的。`jsdom`库提供这项功能\n\n``` javscript\nimport jsdom from 'jsdom';\n\nif (typeof document === 'undefined') {\n  global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\n  global.window = document.defaultView;\n  global.navigator = global.window.navigator;\n}\n```\n\n2.`Enzyme`\n`Enzyme`是官方测试工具库的封装，它模拟了`jQuery`的`API`，非常直观，易于使用和学习，主要提供三种方法：\n\n- shallow\n\n`shallow`方法就是官方的`shallow rendering`的封装\n\n```javascrpit\nimport {shallow} from 'enzyme';\n\ndescribe('Enzyme Shallow', function () {\n  it('App\\'s title should be Todos', function () {\n    let app = shallow(<App/>);\n    expect(app.find('h1').text()).to.equal('Todos');\n  });\n};\n```\n\n- render\n\n`render`方法将`React`组件渲染成静态的`HTML`字符串，然后分析这段`HTML`代码的结构，返回一个对象。它跟`shallow`方法非常像，主要的不同是采用了第三方HTML解析库`Cheerio`，它返回的是一个`Cheerio`实例对象。\n\n- mount\n\n`mount`方法用于将`React`组件加载为真实`DOM`节点\n\n## 最后\n\n回到开始，个人认为不要滥用测试，需要合理评估测试用例对团队项目的积极作用和消极作用。不合理或者不恰当的使用测试只会增加工作复杂度和成本。\n并且测试用例只是检查代码的工具，所以不要本末倒置以测试用例强行约束业务代码\n\n## 参考\n\n- [关于TDD、BDD和DDD的一些看法](http://www.cnblogs.com/ustbwuyi/archive/2012/10/26/2741223.html)\n- [虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发](http://www.infoq.com/cn/articles/virtual-panel-`TDD`-`BDD`)\n- [Mocha](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n- [PhantomJS](https://segmentfault.com/a/1190000009333157)\n- [NightwatchJs](http://www.infoq.com/cn/news/2014/02/nightwatch)\n- [前端自动化测试探索](http://fex.baidu.com/blog/2015/07/front-end-test/)\n","source":"_posts/fed-test.md","raw":"---\ntitle: 前端测试探索\ndate: 2017-10-10 10:06:30\nauthor: T.2stt\ncomments: true\ntags:\n- 自动化测试\n- 前端测试\ncategories:\n- 测试工具\n---\n\n> 前端测试是保证代码质量以及程序稳定的一种可靠方式，同时也从代码层面解决了自测难，自测烦等前端测试综合症。当然在前端开发引入测试环节无疑会增加人力和时间成本，如果最终产生的结果和增加的成本能够两两抵消产生正面效应，那么有必要考虑把测试环节加入到团队的规划中。但是在实际开发过程中，测试用例更多的被用于开源项目中，在大部分公司的生成项目很少使用维护测试用例，其根本原因是不纯粹的生产环境导致维护测试用例变得困难，而目的性很强的开源项目则更纯粹，所以前端测试的发展任重而道远。\n\nPs：本次更多的是讲述概念性的东西，代码性的具体实例不做过多实践\n\n------\n## GUI(Graphical User Interface)软件测试\n\n> 前端测试不同于后端测试，因为除了一般的逻辑测试以外，由于存在界面交互，所以涉及到模拟用户行为达到测试的目的。由此引入了一个概念：GUI(Graphical User Interface)软件测试，也就是图形用户界面软件测试\n\n## TDD(Test Driven Development) & BDD(Behaviour Driven Development)\n\n`TDD`很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n`TDD`的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的`bug`，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆bug，或者存在设计问题，或者更严重的逻辑问题，而`TDD`正好可以帮助我们尽量减少类似事件的发生。\n当然，并不是所有的项目都适合`TDD`，要使用`TDD`,我认为必须至少具备以下两个条件\n\n- 项目的业务逻辑很清晰，并且程序员对开发逻辑很清晰\n- 项目模块的复杂度和依赖度不高。如果复杂度高和依赖度高会导致在最开始拆分单元的时候造成很大的困扰，有可能根本不能顺利拆分\n\n`BDD`行为驱动开发，这里的行为不是指程序员的行为，而是指业务（程序）的逻辑行为，实际上`BDD`可以看作是对`TDD`的一种补充，当然你也可以把它看作`TDD`的一个分支，因为在`TDD`中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能\n\n## 如何实现自动化\n\n说一千道一万，新环节的引入必然带来成本的增加，那么我们如何控制增加的成本在合理范围内？很自然的我们想到了使用工具来实现自动化的测试，让机器帮我完成复杂的交互和测试，并自动监控返回错误报警，为我们手动排除问题提供参考\n\n## 可覆盖的测试\n\n> 那到底前端在开发中需要测试哪些东西？在目前技术又可以实现那些测试？\n\n- 函数功能测试\n  - 全局变量\n  - 公共方法\n- 界面&交互测试\n  - 事件交互\n  - 数据输入交互\n  - 特征检测\n    - 设计图还原度\n    - 图片大小\n    - ...\n  - 特殊情况\n    - 自适应和响应式测试\n    - 浏览器兼容\n    - 多端测试\n    - ...\n- 网络请求测试\n  - 数据库访问\n  - 模拟用户登陆等\n  - ajax请求\n- 直观的错误信息展示\n    - 网页表格\n    - 截图\n- 性能测试\n- 回归测试\n- 自动化\n  - 测试用例数据自动化 - 结合mockjs打造假数据\n  - 测试用例自动化创建 - 通过读取源码中的注释来自动生成测试用例？\n\n## 业务逻辑/业务代码/测试用例的关系\n\n业务代码的颗粒度与测试用例的复杂度成反比：颗粒度划分越多（细），复杂度越低\n业务代码的量与测试用例的量成正比\n\n## Good\n\n- 相对于等待问题产生，更倾向于避免可能的问题\n- 有利于形成团队代码规范，对团队未来成员的扩充是一个很好的约束规范\n- 对输出的产品有进一步的质量保证\n\n## Bad\n\n- 增加维护测试用例本（时间和人力）\n- 增加编码复杂度（需要靠如何更友好的进行测试），对团队人员的编码要求提高了\n- 也许会增加学习成本（并不一定所有人都会写测试用例）\n- 需要把控测试用例的合理性、覆盖率、通过率\n\n## 测试框架\n\n### [PhantomJS](http://phantomjs.org/)/[CasperJS](http://casperjs.org)\n\n`PhantomJS`是一个服务器端的支持`JavaScript API`的`WebKit`。其支持各种Web标准：`DOM`处理, `CSS`选择器, `JSON`, `Canvas`和`SVG`。对于`web`测试、界面、网络捕获、页面自动化访问等等方面。当启动的时候会在内存在开启一个无界面浏览器，以此模拟用户各种操作，可以对界面截图\n`Casperjs`是对`PhantomJS`的封装，提供了更加易用的`API`, 增强了测试等方面的支持\n\n### [PhantomCSS](https://github.com/Huddle/PhantomCSS)\n\n像素对比工具，基于`PhantomJs`开发，结合了`Casperjs`截图和`ResembleJs`图像对比分析\n\n### [Page-monitor](https://github.com/fouber/page-monitor)\n\n`DOM`结构对比工具，基于`PhantomJS`开发，根据`DOM`结构与样式的对比来对比整个页面的变动部分\n\n### [BackstopJS](https://garris.github.io/BackstopJS)\n\n主要通过`PhantomJS`、`capserJS`等工具在不同尺寸下截图，然后根据`resemberJS`进行像素比对判断是否正常，以实现响应式测试\n\n### [Mocha + Chai](https://www.zybuluo.com/mdeditor#911714-full-reader)\n\n`mocha+chai`是一个经典的组合主要用来测试函数功能，也能测试异步操作。也有常用`chai`的超集（拓展库）`sion-chai`来加强`chai`\n\n### [Selenium2](http://www.seleniumhq.org/docs)\n\n`Selenium2`，它的主要新功能是集成了`Selenium1.0`以及`WebDriver`。\n也就是说`Selenium2`是`Selenium`和`WebDriver`两个项目的合并，即`Selenium2`兼容`Selenium`，它既支持`Selenium API`也支持`WebDriver API`。`WebDriver`是一个用来进行复杂重复的`web`自动化测试的工具,意在提供一种比`Selenium1.0`更简单易学，有利于维护的`API`。它没有和任何测试框架进行绑定，所以他可以很好的在单元测试中调用。当启动`Selenium2`时通常会调起一个可见的界面，但也可以通过设置，让它以`PhantomJS`的形式进行无界面的测试\n当然使用`Selenium2`必须额外的安装每种浏览器的`WebDriver`\n`Selenium2`上手难度大于`PhantomJS`\n\n### [NightwatchJs](http://nightwatchjs.org/guide)\n\n推特出品，基于`Selenium WebDriver API`开发，意味着支持浏览器自动化测试，内部集成了`mocha+chai`并将它加强，同时支持分组测试和单个测试，对语法进行了简化，归纳有以下特点:\n\n- 简单但强大的语法（更符合`js`书写习惯），只需要使用`JavaScript`和`CSS`选择器，开发者就能够非常迅捷地撰写测试。\n- 开发者也不必初始化其他对象和类，只需要编写测试规范即可。\n- 使用`CSS`选择器或`Xpath`，定位并验证页面中的元素或是执行命令。\n- 易于扩展，便于开发者根据需要，实现与自己应用相关的命令。\n- ...\n\n目前，`Selenium`是`JavaScript`的验收测试方面最流行的工具之一，同类的还有`PhantomJS`。二者都有其独到的方法：`Selenium`使用`WebDriver API`，而`PhantomJS`使用无界面的`WebKit`浏览器。它们都是非常成熟的工具，都具有强大的社区支持。它们与`Nightwatch`之间最大的不同，主要是在于语法的简易度以及对持续集成的支持。与`Nightwatch`相比，`Selenium`和`PhantomJS`都拥有更加冗长的语法，这会让编码变得更庞大\n\n``` javascript\nthis.demoTestGoogle = function (browser) {\n   browser\n     .url(“http://www.google.com”)\n     .waitForElementVisible('body', 1000)\n     .setValue('input[type=text]', 'nightwatch')\n     .waitForElementVisible('button[name=btnG]', 1000)\n     .click('button[name=btnG]')\n     .pause(1000)\n     .assert.containsText('#main', 'The Night Watch')\n     .end();\n};\n\n//也可以\nmodule.exports = {\n  'step one' : function (browser) {\n    browser\n      .url('http://www.google.com')\n      .waitForElementVisible('body', 1000)\n      .setValue('input[type=text]', 'nightwatch')\n      .waitForElementVisible('button[name=btnG]', 1000)\n  },\n\n  'step two' : function (browser) {\n    browser\n      .click('button[name=btnG]')\n      .pause(1000)\n      .assert.containsText('#main', 'Night Watch')\n      .end();\n  }\n};\n```\n\n## 对前端框架的支持\n\n在实际开发中，我们可能是用了不同的框架。虽然我们完全可以在把源码编译成普通的`HTML/CSS/JS`代码然后测试，但是此种方法的弊端也显而易见：不易于自动化，必须等到所有模块开发完成才能测试...为此我们必须寻找某种方式使得测试不收框架的限制\n\n### Vue\n\n本身可以通过`new`一个`Vue`的方式挂载节点达到效果。\n下面是一个简单的测试用例，测试`.hello h1`标签内容是否符合预期\n\n``` javascript\nimport Vue from 'vue'\nimport HelloWorld from '@/components/HelloWorld'\n\ndescribe('HelloWorld.vue', () => {\n  it('should render correct contents', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h1').textContent)\n      .to.equal('Welcome to Your Vue.js App')\n  })\n})\n```\n\n### React\n\n1.官方提供了两种方法：\n\n- 渲染虚拟`DOM`（`Shallow Rendering`）\n\n只渲染第一层，不渲染子组件，速度快，返回一个浅渲染的虚拟`DOM`对象。然后拿到节点的各种信息，进行测试\n\n- 渲染真实`DOM`节点（`renderIntoDocument`）\n\n`renderIntoDocument` 方法要求存在一个真实的`DOM`环境，否则会报错。因此，测试用例之中，`DOM`环境（即`window`, `document` 和 `navigator` 对象）必须是存在的。`jsdom`库提供这项功能\n\n``` javscript\nimport jsdom from 'jsdom';\n\nif (typeof document === 'undefined') {\n  global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\n  global.window = document.defaultView;\n  global.navigator = global.window.navigator;\n}\n```\n\n2.`Enzyme`\n`Enzyme`是官方测试工具库的封装，它模拟了`jQuery`的`API`，非常直观，易于使用和学习，主要提供三种方法：\n\n- shallow\n\n`shallow`方法就是官方的`shallow rendering`的封装\n\n```javascrpit\nimport {shallow} from 'enzyme';\n\ndescribe('Enzyme Shallow', function () {\n  it('App\\'s title should be Todos', function () {\n    let app = shallow(<App/>);\n    expect(app.find('h1').text()).to.equal('Todos');\n  });\n};\n```\n\n- render\n\n`render`方法将`React`组件渲染成静态的`HTML`字符串，然后分析这段`HTML`代码的结构，返回一个对象。它跟`shallow`方法非常像，主要的不同是采用了第三方HTML解析库`Cheerio`，它返回的是一个`Cheerio`实例对象。\n\n- mount\n\n`mount`方法用于将`React`组件加载为真实`DOM`节点\n\n## 最后\n\n回到开始，个人认为不要滥用测试，需要合理评估测试用例对团队项目的积极作用和消极作用。不合理或者不恰当的使用测试只会增加工作复杂度和成本。\n并且测试用例只是检查代码的工具，所以不要本末倒置以测试用例强行约束业务代码\n\n## 参考\n\n- [关于TDD、BDD和DDD的一些看法](http://www.cnblogs.com/ustbwuyi/archive/2012/10/26/2741223.html)\n- [虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发](http://www.infoq.com/cn/articles/virtual-panel-`TDD`-`BDD`)\n- [Mocha](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n- [PhantomJS](https://segmentfault.com/a/1190000009333157)\n- [NightwatchJs](http://www.infoq.com/cn/news/2014/02/nightwatch)\n- [前端自动化测试探索](http://fex.baidu.com/blog/2015/07/front-end-test/)\n","slug":"fed-test","published":1,"updated":"2018-11-01T07:28:58.716Z","_id":"cjny0swg2001h2kv7jr25f3uh","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>前端测试是保证代码质量以及程序稳定的一种可靠方式，同时也从代码层面解决了自测难，自测烦等前端测试综合症。当然在前端开发引入测试环节无疑会增加人力和时间成本，如果最终产生的结果和增加的成本能够两两抵消产生正面效应，那么有必要考虑把测试环节加入到团队的规划中。但是在实际开发过程中，测试用例更多的被用于开源项目中，在大部分公司的生成项目很少使用维护测试用例，其根本原因是不纯粹的生产环境导致维护测试用例变得困难，而目的性很强的开源项目则更纯粹，所以前端测试的发展任重而道远。</p>\n</blockquote>\n<p>Ps：本次更多的是讲述概念性的东西，代码性的具体实例不做过多实践</p>\n<hr>\n<h2 id=\"GUI-Graphical-User-Interface-软件测试\"><a href=\"#GUI-Graphical-User-Interface-软件测试\" class=\"headerlink\" title=\"GUI(Graphical User Interface)软件测试\"></a>GUI(Graphical User Interface)软件测试</h2><blockquote>\n<p>前端测试不同于后端测试，因为除了一般的逻辑测试以外，由于存在界面交互，所以涉及到模拟用户行为达到测试的目的。由此引入了一个概念：GUI(Graphical User Interface)软件测试，也就是图形用户界面软件测试</p>\n</blockquote>\n<h2 id=\"TDD-Test-Driven-Development-amp-BDD-Behaviour-Driven-Development\"><a href=\"#TDD-Test-Driven-Development-amp-BDD-Behaviour-Driven-Development\" class=\"headerlink\" title=\"TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)\"></a>TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)</h2><p><code>TDD</code>很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。<br><code>TDD</code>的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的<code>bug</code>，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆bug，或者存在设计问题，或者更严重的逻辑问题，而<code>TDD</code>正好可以帮助我们尽量减少类似事件的发生。<br>当然，并不是所有的项目都适合<code>TDD</code>，要使用<code>TDD</code>,我认为必须至少具备以下两个条件</p>\n<ul>\n<li>项目的业务逻辑很清晰，并且程序员对开发逻辑很清晰</li>\n<li>项目模块的复杂度和依赖度不高。如果复杂度高和依赖度高会导致在最开始拆分单元的时候造成很大的困扰，有可能根本不能顺利拆分</li>\n</ul>\n<p><code>BDD</code>行为驱动开发，这里的行为不是指程序员的行为，而是指业务（程序）的逻辑行为，实际上<code>BDD</code>可以看作是对<code>TDD</code>的一种补充，当然你也可以把它看作<code>TDD</code>的一个分支，因为在<code>TDD</code>中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能</p>\n<h2 id=\"如何实现自动化\"><a href=\"#如何实现自动化\" class=\"headerlink\" title=\"如何实现自动化\"></a>如何实现自动化</h2><p>说一千道一万，新环节的引入必然带来成本的增加，那么我们如何控制增加的成本在合理范围内？很自然的我们想到了使用工具来实现自动化的测试，让机器帮我完成复杂的交互和测试，并自动监控返回错误报警，为我们手动排除问题提供参考</p>\n<h2 id=\"可覆盖的测试\"><a href=\"#可覆盖的测试\" class=\"headerlink\" title=\"可覆盖的测试\"></a>可覆盖的测试</h2><blockquote>\n<p>那到底前端在开发中需要测试哪些东西？在目前技术又可以实现那些测试？</p>\n</blockquote>\n<ul>\n<li>函数功能测试<ul>\n<li>全局变量</li>\n<li>公共方法</li>\n</ul>\n</li>\n<li>界面&amp;交互测试<ul>\n<li>事件交互</li>\n<li>数据输入交互</li>\n<li>特征检测<ul>\n<li>设计图还原度</li>\n<li>图片大小</li>\n<li>…</li>\n</ul>\n</li>\n<li>特殊情况<ul>\n<li>自适应和响应式测试</li>\n<li>浏览器兼容</li>\n<li>多端测试</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络请求测试<ul>\n<li>数据库访问</li>\n<li>模拟用户登陆等</li>\n<li>ajax请求</li>\n</ul>\n</li>\n<li>直观的错误信息展示<ul>\n<li>网页表格</li>\n<li>截图</li>\n</ul>\n</li>\n<li>性能测试</li>\n<li>回归测试</li>\n<li>自动化<ul>\n<li>测试用例数据自动化 - 结合mockjs打造假数据</li>\n<li>测试用例自动化创建 - 通过读取源码中的注释来自动生成测试用例？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"业务逻辑-业务代码-测试用例的关系\"><a href=\"#业务逻辑-业务代码-测试用例的关系\" class=\"headerlink\" title=\"业务逻辑/业务代码/测试用例的关系\"></a>业务逻辑/业务代码/测试用例的关系</h2><p>业务代码的颗粒度与测试用例的复杂度成反比：颗粒度划分越多（细），复杂度越低<br>业务代码的量与测试用例的量成正比</p>\n<h2 id=\"Good\"><a href=\"#Good\" class=\"headerlink\" title=\"Good\"></a>Good</h2><ul>\n<li>相对于等待问题产生，更倾向于避免可能的问题</li>\n<li>有利于形成团队代码规范，对团队未来成员的扩充是一个很好的约束规范</li>\n<li>对输出的产品有进一步的质量保证</li>\n</ul>\n<h2 id=\"Bad\"><a href=\"#Bad\" class=\"headerlink\" title=\"Bad\"></a>Bad</h2><ul>\n<li>增加维护测试用例本（时间和人力）</li>\n<li>增加编码复杂度（需要靠如何更友好的进行测试），对团队人员的编码要求提高了</li>\n<li>也许会增加学习成本（并不一定所有人都会写测试用例）</li>\n<li>需要把控测试用例的合理性、覆盖率、通过率</li>\n</ul>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><h3 id=\"PhantomJS-CasperJS\"><a href=\"#PhantomJS-CasperJS\" class=\"headerlink\" title=\"PhantomJS/CasperJS\"></a><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a>/<a href=\"http://casperjs.org\" target=\"_blank\" rel=\"noopener\">CasperJS</a></h3><p><code>PhantomJS</code>是一个服务器端的支持<code>JavaScript API</code>的<code>WebKit</code>。其支持各种Web标准：<code>DOM</code>处理, <code>CSS</code>选择器, <code>JSON</code>, <code>Canvas</code>和<code>SVG</code>。对于<code>web</code>测试、界面、网络捕获、页面自动化访问等等方面。当启动的时候会在内存在开启一个无界面浏览器，以此模拟用户各种操作，可以对界面截图<br><code>Casperjs</code>是对<code>PhantomJS</code>的封装，提供了更加易用的<code>API</code>, 增强了测试等方面的支持</p>\n<h3 id=\"PhantomCSS\"><a href=\"#PhantomCSS\" class=\"headerlink\" title=\"PhantomCSS\"></a><a href=\"https://github.com/Huddle/PhantomCSS\" target=\"_blank\" rel=\"noopener\">PhantomCSS</a></h3><p>像素对比工具，基于<code>PhantomJs</code>开发，结合了<code>Casperjs</code>截图和<code>ResembleJs</code>图像对比分析</p>\n<h3 id=\"Page-monitor\"><a href=\"#Page-monitor\" class=\"headerlink\" title=\"Page-monitor\"></a><a href=\"https://github.com/fouber/page-monitor\" target=\"_blank\" rel=\"noopener\">Page-monitor</a></h3><p><code>DOM</code>结构对比工具，基于<code>PhantomJS</code>开发，根据<code>DOM</code>结构与样式的对比来对比整个页面的变动部分</p>\n<h3 id=\"BackstopJS\"><a href=\"#BackstopJS\" class=\"headerlink\" title=\"BackstopJS\"></a><a href=\"https://garris.github.io/BackstopJS\" target=\"_blank\" rel=\"noopener\">BackstopJS</a></h3><p>主要通过<code>PhantomJS</code>、<code>capserJS</code>等工具在不同尺寸下截图，然后根据<code>resemberJS</code>进行像素比对判断是否正常，以实现响应式测试</p>\n<h3 id=\"Mocha-Chai\"><a href=\"#Mocha-Chai\" class=\"headerlink\" title=\"Mocha + Chai\"></a><a href=\"https://www.zybuluo.com/mdeditor#911714-full-reader\" target=\"_blank\" rel=\"noopener\">Mocha + Chai</a></h3><p><code>mocha+chai</code>是一个经典的组合主要用来测试函数功能，也能测试异步操作。也有常用<code>chai</code>的超集（拓展库）<code>sion-chai</code>来加强<code>chai</code></p>\n<h3 id=\"Selenium2\"><a href=\"#Selenium2\" class=\"headerlink\" title=\"Selenium2\"></a><a href=\"http://www.seleniumhq.org/docs\" target=\"_blank\" rel=\"noopener\">Selenium2</a></h3><p><code>Selenium2</code>，它的主要新功能是集成了<code>Selenium1.0</code>以及<code>WebDriver</code>。<br>也就是说<code>Selenium2</code>是<code>Selenium</code>和<code>WebDriver</code>两个项目的合并，即<code>Selenium2</code>兼容<code>Selenium</code>，它既支持<code>Selenium API</code>也支持<code>WebDriver API</code>。<code>WebDriver</code>是一个用来进行复杂重复的<code>web</code>自动化测试的工具,意在提供一种比<code>Selenium1.0</code>更简单易学，有利于维护的<code>API</code>。它没有和任何测试框架进行绑定，所以他可以很好的在单元测试中调用。当启动<code>Selenium2</code>时通常会调起一个可见的界面，但也可以通过设置，让它以<code>PhantomJS</code>的形式进行无界面的测试<br>当然使用<code>Selenium2</code>必须额外的安装每种浏览器的<code>WebDriver</code><br><code>Selenium2</code>上手难度大于<code>PhantomJS</code></p>\n<h3 id=\"NightwatchJs\"><a href=\"#NightwatchJs\" class=\"headerlink\" title=\"NightwatchJs\"></a><a href=\"http://nightwatchjs.org/guide\" target=\"_blank\" rel=\"noopener\">NightwatchJs</a></h3><p>推特出品，基于<code>Selenium WebDriver API</code>开发，意味着支持浏览器自动化测试，内部集成了<code>mocha+chai</code>并将它加强，同时支持分组测试和单个测试，对语法进行了简化，归纳有以下特点:</p>\n<ul>\n<li>简单但强大的语法（更符合<code>js</code>书写习惯），只需要使用<code>JavaScript</code>和<code>CSS</code>选择器，开发者就能够非常迅捷地撰写测试。</li>\n<li>开发者也不必初始化其他对象和类，只需要编写测试规范即可。</li>\n<li>使用<code>CSS</code>选择器或<code>Xpath</code>，定位并验证页面中的元素或是执行命令。</li>\n<li>易于扩展，便于开发者根据需要，实现与自己应用相关的命令。</li>\n<li>…</li>\n</ul>\n<p>目前，<code>Selenium</code>是<code>JavaScript</code>的验收测试方面最流行的工具之一，同类的还有<code>PhantomJS</code>。二者都有其独到的方法：<code>Selenium</code>使用<code>WebDriver API</code>，而<code>PhantomJS</code>使用无界面的<code>WebKit</code>浏览器。它们都是非常成熟的工具，都具有强大的社区支持。它们与<code>Nightwatch</code>之间最大的不同，主要是在于语法的简易度以及对持续集成的支持。与<code>Nightwatch</code>相比，<code>Selenium</code>和<code>PhantomJS</code>都拥有更加冗长的语法，这会让编码变得更庞大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.demoTestGoogle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">   browser</span><br><span class=\"line\">     .url(“http:<span class=\"comment\">//www.google.com”)</span></span><br><span class=\"line\">     .waitForElementVisible(<span class=\"string\">'body'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">     .setValue(<span class=\"string\">'input[type=text]'</span>, <span class=\"string\">'nightwatch'</span>)</span><br><span class=\"line\">     .waitForElementVisible(<span class=\"string\">'button[name=btnG]'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">     .click(<span class=\"string\">'button[name=btnG]'</span>)</span><br><span class=\"line\">     .pause(<span class=\"number\">1000</span>)</span><br><span class=\"line\">     .assert.containsText(<span class=\"string\">'#main'</span>, <span class=\"string\">'The Night Watch'</span>)</span><br><span class=\"line\">     .end();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"string\">'step one'</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">    browser</span><br><span class=\"line\">      .url(<span class=\"string\">'http://www.google.com'</span>)</span><br><span class=\"line\">      .waitForElementVisible(<span class=\"string\">'body'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      .setValue(<span class=\"string\">'input[type=text]'</span>, <span class=\"string\">'nightwatch'</span>)</span><br><span class=\"line\">      .waitForElementVisible(<span class=\"string\">'button[name=btnG]'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">'step two'</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">    browser</span><br><span class=\"line\">      .click(<span class=\"string\">'button[name=btnG]'</span>)</span><br><span class=\"line\">      .pause(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      .assert.containsText(<span class=\"string\">'#main'</span>, <span class=\"string\">'Night Watch'</span>)</span><br><span class=\"line\">      .end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对前端框架的支持\"><a href=\"#对前端框架的支持\" class=\"headerlink\" title=\"对前端框架的支持\"></a>对前端框架的支持</h2><p>在实际开发中，我们可能是用了不同的框架。虽然我们完全可以在把源码编译成普通的<code>HTML/CSS/JS</code>代码然后测试，但是此种方法的弊端也显而易见：不易于自动化，必须等到所有模块开发完成才能测试…为此我们必须寻找某种方式使得测试不收框架的限制</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>本身可以通过<code>new</code>一个<code>Vue</code>的方式挂载节点达到效果。<br>下面是一个简单的测试用例，测试<code>.hello h1</code>标签内容是否符合预期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'HelloWorld.vue'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should render correct contents'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h1'</span>).textContent)</span><br><span class=\"line\">      .to.equal(<span class=\"string\">'Welcome to Your Vue.js App'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>1.官方提供了两种方法：</p>\n<ul>\n<li>渲染虚拟<code>DOM</code>（<code>Shallow Rendering</code>）</li>\n</ul>\n<p>只渲染第一层，不渲染子组件，速度快，返回一个浅渲染的虚拟<code>DOM</code>对象。然后拿到节点的各种信息，进行测试</p>\n<ul>\n<li>渲染真实<code>DOM</code>节点（<code>renderIntoDocument</code>）</li>\n</ul>\n<p><code>renderIntoDocument</code> 方法要求存在一个真实的<code>DOM</code>环境，否则会报错。因此，测试用例之中，<code>DOM</code>环境（即<code>window</code>, <code>document</code> 和 <code>navigator</code> 对象）必须是存在的。<code>jsdom</code>库提供这项功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import jsdom from &apos;jsdom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (typeof document === &apos;undefined&apos;) &#123;</span><br><span class=\"line\">  global.document = jsdom.jsdom(&apos;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&apos;);</span><br><span class=\"line\">  global.window = document.defaultView;</span><br><span class=\"line\">  global.navigator = global.window.navigator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.<code>Enzyme</code><br><code>Enzyme</code>是官方测试工具库的封装，它模拟了<code>jQuery</code>的<code>API</code>，非常直观，易于使用和学习，主要提供三种方法：</p>\n<ul>\n<li>shallow</li>\n</ul>\n<p><code>shallow</code>方法就是官方的<code>shallow rendering</code>的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;shallow&#125; from &apos;enzyme&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;Enzyme Shallow&apos;, function () &#123;</span><br><span class=\"line\">  it(&apos;App\\&apos;s title should be Todos&apos;, function () &#123;</span><br><span class=\"line\">    let app = shallow(&lt;App/&gt;);</span><br><span class=\"line\">    expect(app.find(&apos;h1&apos;).text()).to.equal(&apos;Todos&apos;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>render</li>\n</ul>\n<p><code>render</code>方法将<code>React</code>组件渲染成静态的<code>HTML</code>字符串，然后分析这段<code>HTML</code>代码的结构，返回一个对象。它跟<code>shallow</code>方法非常像，主要的不同是采用了第三方HTML解析库<code>Cheerio</code>，它返回的是一个<code>Cheerio</code>实例对象。</p>\n<ul>\n<li>mount</li>\n</ul>\n<p><code>mount</code>方法用于将<code>React</code>组件加载为真实<code>DOM</code>节点</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>回到开始，个人认为不要滥用测试，需要合理评估测试用例对团队项目的积极作用和消极作用。不合理或者不恰当的使用测试只会增加工作复杂度和成本。<br>并且测试用例只是检查代码的工具，所以不要本末倒置以测试用例强行约束业务代码</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/ustbwuyi/archive/2012/10/26/2741223.html\" target=\"_blank\" rel=\"noopener\">关于TDD、BDD和DDD的一些看法</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/virtual-panel-`TDD`-`BDD`\" target=\"_blank\" rel=\"noopener\">虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">Mocha</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009333157\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/02/nightwatch\" target=\"_blank\" rel=\"noopener\">NightwatchJs</a></li>\n<li><a href=\"http://fex.baidu.com/blog/2015/07/front-end-test/\" target=\"_blank\" rel=\"noopener\">前端自动化测试探索</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前端测试是保证代码质量以及程序稳定的一种可靠方式，同时也从代码层面解决了自测难，自测烦等前端测试综合症。当然在前端开发引入测试环节无疑会增加人力和时间成本，如果最终产生的结果和增加的成本能够两两抵消产生正面效应，那么有必要考虑把测试环节加入到团队的规划中。但是在实际开发过程中，测试用例更多的被用于开源项目中，在大部分公司的生成项目很少使用维护测试用例，其根本原因是不纯粹的生产环境导致维护测试用例变得困难，而目的性很强的开源项目则更纯粹，所以前端测试的发展任重而道远。</p>\n</blockquote>\n<p>Ps：本次更多的是讲述概念性的东西，代码性的具体实例不做过多实践</p>\n<hr>\n<h2 id=\"GUI-Graphical-User-Interface-软件测试\"><a href=\"#GUI-Graphical-User-Interface-软件测试\" class=\"headerlink\" title=\"GUI(Graphical User Interface)软件测试\"></a>GUI(Graphical User Interface)软件测试</h2><blockquote>\n<p>前端测试不同于后端测试，因为除了一般的逻辑测试以外，由于存在界面交互，所以涉及到模拟用户行为达到测试的目的。由此引入了一个概念：GUI(Graphical User Interface)软件测试，也就是图形用户界面软件测试</p>\n</blockquote>\n<h2 id=\"TDD-Test-Driven-Development-amp-BDD-Behaviour-Driven-Development\"><a href=\"#TDD-Test-Driven-Development-amp-BDD-Behaviour-Driven-Development\" class=\"headerlink\" title=\"TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)\"></a>TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)</h2><p><code>TDD</code>很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。<br><code>TDD</code>的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的<code>bug</code>，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆bug，或者存在设计问题，或者更严重的逻辑问题，而<code>TDD</code>正好可以帮助我们尽量减少类似事件的发生。<br>当然，并不是所有的项目都适合<code>TDD</code>，要使用<code>TDD</code>,我认为必须至少具备以下两个条件</p>\n<ul>\n<li>项目的业务逻辑很清晰，并且程序员对开发逻辑很清晰</li>\n<li>项目模块的复杂度和依赖度不高。如果复杂度高和依赖度高会导致在最开始拆分单元的时候造成很大的困扰，有可能根本不能顺利拆分</li>\n</ul>\n<p><code>BDD</code>行为驱动开发，这里的行为不是指程序员的行为，而是指业务（程序）的逻辑行为，实际上<code>BDD</code>可以看作是对<code>TDD</code>的一种补充，当然你也可以把它看作<code>TDD</code>的一个分支，因为在<code>TDD</code>中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能</p>\n<h2 id=\"如何实现自动化\"><a href=\"#如何实现自动化\" class=\"headerlink\" title=\"如何实现自动化\"></a>如何实现自动化</h2><p>说一千道一万，新环节的引入必然带来成本的增加，那么我们如何控制增加的成本在合理范围内？很自然的我们想到了使用工具来实现自动化的测试，让机器帮我完成复杂的交互和测试，并自动监控返回错误报警，为我们手动排除问题提供参考</p>\n<h2 id=\"可覆盖的测试\"><a href=\"#可覆盖的测试\" class=\"headerlink\" title=\"可覆盖的测试\"></a>可覆盖的测试</h2><blockquote>\n<p>那到底前端在开发中需要测试哪些东西？在目前技术又可以实现那些测试？</p>\n</blockquote>\n<ul>\n<li>函数功能测试<ul>\n<li>全局变量</li>\n<li>公共方法</li>\n</ul>\n</li>\n<li>界面&amp;交互测试<ul>\n<li>事件交互</li>\n<li>数据输入交互</li>\n<li>特征检测<ul>\n<li>设计图还原度</li>\n<li>图片大小</li>\n<li>…</li>\n</ul>\n</li>\n<li>特殊情况<ul>\n<li>自适应和响应式测试</li>\n<li>浏览器兼容</li>\n<li>多端测试</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络请求测试<ul>\n<li>数据库访问</li>\n<li>模拟用户登陆等</li>\n<li>ajax请求</li>\n</ul>\n</li>\n<li>直观的错误信息展示<ul>\n<li>网页表格</li>\n<li>截图</li>\n</ul>\n</li>\n<li>性能测试</li>\n<li>回归测试</li>\n<li>自动化<ul>\n<li>测试用例数据自动化 - 结合mockjs打造假数据</li>\n<li>测试用例自动化创建 - 通过读取源码中的注释来自动生成测试用例？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"业务逻辑-业务代码-测试用例的关系\"><a href=\"#业务逻辑-业务代码-测试用例的关系\" class=\"headerlink\" title=\"业务逻辑/业务代码/测试用例的关系\"></a>业务逻辑/业务代码/测试用例的关系</h2><p>业务代码的颗粒度与测试用例的复杂度成反比：颗粒度划分越多（细），复杂度越低<br>业务代码的量与测试用例的量成正比</p>\n<h2 id=\"Good\"><a href=\"#Good\" class=\"headerlink\" title=\"Good\"></a>Good</h2><ul>\n<li>相对于等待问题产生，更倾向于避免可能的问题</li>\n<li>有利于形成团队代码规范，对团队未来成员的扩充是一个很好的约束规范</li>\n<li>对输出的产品有进一步的质量保证</li>\n</ul>\n<h2 id=\"Bad\"><a href=\"#Bad\" class=\"headerlink\" title=\"Bad\"></a>Bad</h2><ul>\n<li>增加维护测试用例本（时间和人力）</li>\n<li>增加编码复杂度（需要靠如何更友好的进行测试），对团队人员的编码要求提高了</li>\n<li>也许会增加学习成本（并不一定所有人都会写测试用例）</li>\n<li>需要把控测试用例的合理性、覆盖率、通过率</li>\n</ul>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><h3 id=\"PhantomJS-CasperJS\"><a href=\"#PhantomJS-CasperJS\" class=\"headerlink\" title=\"PhantomJS/CasperJS\"></a><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a>/<a href=\"http://casperjs.org\" target=\"_blank\" rel=\"noopener\">CasperJS</a></h3><p><code>PhantomJS</code>是一个服务器端的支持<code>JavaScript API</code>的<code>WebKit</code>。其支持各种Web标准：<code>DOM</code>处理, <code>CSS</code>选择器, <code>JSON</code>, <code>Canvas</code>和<code>SVG</code>。对于<code>web</code>测试、界面、网络捕获、页面自动化访问等等方面。当启动的时候会在内存在开启一个无界面浏览器，以此模拟用户各种操作，可以对界面截图<br><code>Casperjs</code>是对<code>PhantomJS</code>的封装，提供了更加易用的<code>API</code>, 增强了测试等方面的支持</p>\n<h3 id=\"PhantomCSS\"><a href=\"#PhantomCSS\" class=\"headerlink\" title=\"PhantomCSS\"></a><a href=\"https://github.com/Huddle/PhantomCSS\" target=\"_blank\" rel=\"noopener\">PhantomCSS</a></h3><p>像素对比工具，基于<code>PhantomJs</code>开发，结合了<code>Casperjs</code>截图和<code>ResembleJs</code>图像对比分析</p>\n<h3 id=\"Page-monitor\"><a href=\"#Page-monitor\" class=\"headerlink\" title=\"Page-monitor\"></a><a href=\"https://github.com/fouber/page-monitor\" target=\"_blank\" rel=\"noopener\">Page-monitor</a></h3><p><code>DOM</code>结构对比工具，基于<code>PhantomJS</code>开发，根据<code>DOM</code>结构与样式的对比来对比整个页面的变动部分</p>\n<h3 id=\"BackstopJS\"><a href=\"#BackstopJS\" class=\"headerlink\" title=\"BackstopJS\"></a><a href=\"https://garris.github.io/BackstopJS\" target=\"_blank\" rel=\"noopener\">BackstopJS</a></h3><p>主要通过<code>PhantomJS</code>、<code>capserJS</code>等工具在不同尺寸下截图，然后根据<code>resemberJS</code>进行像素比对判断是否正常，以实现响应式测试</p>\n<h3 id=\"Mocha-Chai\"><a href=\"#Mocha-Chai\" class=\"headerlink\" title=\"Mocha + Chai\"></a><a href=\"https://www.zybuluo.com/mdeditor#911714-full-reader\" target=\"_blank\" rel=\"noopener\">Mocha + Chai</a></h3><p><code>mocha+chai</code>是一个经典的组合主要用来测试函数功能，也能测试异步操作。也有常用<code>chai</code>的超集（拓展库）<code>sion-chai</code>来加强<code>chai</code></p>\n<h3 id=\"Selenium2\"><a href=\"#Selenium2\" class=\"headerlink\" title=\"Selenium2\"></a><a href=\"http://www.seleniumhq.org/docs\" target=\"_blank\" rel=\"noopener\">Selenium2</a></h3><p><code>Selenium2</code>，它的主要新功能是集成了<code>Selenium1.0</code>以及<code>WebDriver</code>。<br>也就是说<code>Selenium2</code>是<code>Selenium</code>和<code>WebDriver</code>两个项目的合并，即<code>Selenium2</code>兼容<code>Selenium</code>，它既支持<code>Selenium API</code>也支持<code>WebDriver API</code>。<code>WebDriver</code>是一个用来进行复杂重复的<code>web</code>自动化测试的工具,意在提供一种比<code>Selenium1.0</code>更简单易学，有利于维护的<code>API</code>。它没有和任何测试框架进行绑定，所以他可以很好的在单元测试中调用。当启动<code>Selenium2</code>时通常会调起一个可见的界面，但也可以通过设置，让它以<code>PhantomJS</code>的形式进行无界面的测试<br>当然使用<code>Selenium2</code>必须额外的安装每种浏览器的<code>WebDriver</code><br><code>Selenium2</code>上手难度大于<code>PhantomJS</code></p>\n<h3 id=\"NightwatchJs\"><a href=\"#NightwatchJs\" class=\"headerlink\" title=\"NightwatchJs\"></a><a href=\"http://nightwatchjs.org/guide\" target=\"_blank\" rel=\"noopener\">NightwatchJs</a></h3><p>推特出品，基于<code>Selenium WebDriver API</code>开发，意味着支持浏览器自动化测试，内部集成了<code>mocha+chai</code>并将它加强，同时支持分组测试和单个测试，对语法进行了简化，归纳有以下特点:</p>\n<ul>\n<li>简单但强大的语法（更符合<code>js</code>书写习惯），只需要使用<code>JavaScript</code>和<code>CSS</code>选择器，开发者就能够非常迅捷地撰写测试。</li>\n<li>开发者也不必初始化其他对象和类，只需要编写测试规范即可。</li>\n<li>使用<code>CSS</code>选择器或<code>Xpath</code>，定位并验证页面中的元素或是执行命令。</li>\n<li>易于扩展，便于开发者根据需要，实现与自己应用相关的命令。</li>\n<li>…</li>\n</ul>\n<p>目前，<code>Selenium</code>是<code>JavaScript</code>的验收测试方面最流行的工具之一，同类的还有<code>PhantomJS</code>。二者都有其独到的方法：<code>Selenium</code>使用<code>WebDriver API</code>，而<code>PhantomJS</code>使用无界面的<code>WebKit</code>浏览器。它们都是非常成熟的工具，都具有强大的社区支持。它们与<code>Nightwatch</code>之间最大的不同，主要是在于语法的简易度以及对持续集成的支持。与<code>Nightwatch</code>相比，<code>Selenium</code>和<code>PhantomJS</code>都拥有更加冗长的语法，这会让编码变得更庞大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.demoTestGoogle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">   browser</span><br><span class=\"line\">     .url(“http:<span class=\"comment\">//www.google.com”)</span></span><br><span class=\"line\">     .waitForElementVisible(<span class=\"string\">'body'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">     .setValue(<span class=\"string\">'input[type=text]'</span>, <span class=\"string\">'nightwatch'</span>)</span><br><span class=\"line\">     .waitForElementVisible(<span class=\"string\">'button[name=btnG]'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">     .click(<span class=\"string\">'button[name=btnG]'</span>)</span><br><span class=\"line\">     .pause(<span class=\"number\">1000</span>)</span><br><span class=\"line\">     .assert.containsText(<span class=\"string\">'#main'</span>, <span class=\"string\">'The Night Watch'</span>)</span><br><span class=\"line\">     .end();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"string\">'step one'</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">    browser</span><br><span class=\"line\">      .url(<span class=\"string\">'http://www.google.com'</span>)</span><br><span class=\"line\">      .waitForElementVisible(<span class=\"string\">'body'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      .setValue(<span class=\"string\">'input[type=text]'</span>, <span class=\"string\">'nightwatch'</span>)</span><br><span class=\"line\">      .waitForElementVisible(<span class=\"string\">'button[name=btnG]'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">'step two'</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">browser</span>) </span>&#123;</span><br><span class=\"line\">    browser</span><br><span class=\"line\">      .click(<span class=\"string\">'button[name=btnG]'</span>)</span><br><span class=\"line\">      .pause(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      .assert.containsText(<span class=\"string\">'#main'</span>, <span class=\"string\">'Night Watch'</span>)</span><br><span class=\"line\">      .end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对前端框架的支持\"><a href=\"#对前端框架的支持\" class=\"headerlink\" title=\"对前端框架的支持\"></a>对前端框架的支持</h2><p>在实际开发中，我们可能是用了不同的框架。虽然我们完全可以在把源码编译成普通的<code>HTML/CSS/JS</code>代码然后测试，但是此种方法的弊端也显而易见：不易于自动化，必须等到所有模块开发完成才能测试…为此我们必须寻找某种方式使得测试不收框架的限制</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>本身可以通过<code>new</code>一个<code>Vue</code>的方式挂载节点达到效果。<br>下面是一个简单的测试用例，测试<code>.hello h1</code>标签内容是否符合预期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'HelloWorld.vue'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should render correct contents'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h1'</span>).textContent)</span><br><span class=\"line\">      .to.equal(<span class=\"string\">'Welcome to Your Vue.js App'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>1.官方提供了两种方法：</p>\n<ul>\n<li>渲染虚拟<code>DOM</code>（<code>Shallow Rendering</code>）</li>\n</ul>\n<p>只渲染第一层，不渲染子组件，速度快，返回一个浅渲染的虚拟<code>DOM</code>对象。然后拿到节点的各种信息，进行测试</p>\n<ul>\n<li>渲染真实<code>DOM</code>节点（<code>renderIntoDocument</code>）</li>\n</ul>\n<p><code>renderIntoDocument</code> 方法要求存在一个真实的<code>DOM</code>环境，否则会报错。因此，测试用例之中，<code>DOM</code>环境（即<code>window</code>, <code>document</code> 和 <code>navigator</code> 对象）必须是存在的。<code>jsdom</code>库提供这项功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import jsdom from &apos;jsdom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (typeof document === &apos;undefined&apos;) &#123;</span><br><span class=\"line\">  global.document = jsdom.jsdom(&apos;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&apos;);</span><br><span class=\"line\">  global.window = document.defaultView;</span><br><span class=\"line\">  global.navigator = global.window.navigator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.<code>Enzyme</code><br><code>Enzyme</code>是官方测试工具库的封装，它模拟了<code>jQuery</code>的<code>API</code>，非常直观，易于使用和学习，主要提供三种方法：</p>\n<ul>\n<li>shallow</li>\n</ul>\n<p><code>shallow</code>方法就是官方的<code>shallow rendering</code>的封装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;shallow&#125; from &apos;enzyme&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;Enzyme Shallow&apos;, function () &#123;</span><br><span class=\"line\">  it(&apos;App\\&apos;s title should be Todos&apos;, function () &#123;</span><br><span class=\"line\">    let app = shallow(&lt;App/&gt;);</span><br><span class=\"line\">    expect(app.find(&apos;h1&apos;).text()).to.equal(&apos;Todos&apos;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>render</li>\n</ul>\n<p><code>render</code>方法将<code>React</code>组件渲染成静态的<code>HTML</code>字符串，然后分析这段<code>HTML</code>代码的结构，返回一个对象。它跟<code>shallow</code>方法非常像，主要的不同是采用了第三方HTML解析库<code>Cheerio</code>，它返回的是一个<code>Cheerio</code>实例对象。</p>\n<ul>\n<li>mount</li>\n</ul>\n<p><code>mount</code>方法用于将<code>React</code>组件加载为真实<code>DOM</code>节点</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>回到开始，个人认为不要滥用测试，需要合理评估测试用例对团队项目的积极作用和消极作用。不合理或者不恰当的使用测试只会增加工作复杂度和成本。<br>并且测试用例只是检查代码的工具，所以不要本末倒置以测试用例强行约束业务代码</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/ustbwuyi/archive/2012/10/26/2741223.html\" target=\"_blank\" rel=\"noopener\">关于TDD、BDD和DDD的一些看法</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/virtual-panel-`TDD`-`BDD`\" target=\"_blank\" rel=\"noopener\">虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">Mocha</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009333157\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/02/nightwatch\" target=\"_blank\" rel=\"noopener\">NightwatchJs</a></li>\n<li><a href=\"http://fex.baidu.com/blog/2015/07/front-end-test/\" target=\"_blank\" rel=\"noopener\">前端自动化测试探索</a></li>\n</ul>\n"},{"title":"慎重用for...in与for...of","date":"2017-10-27T06:43:12.000Z","author":"J.2ue","_content":"\n> `for...in`和`for...of`都是用于数据的遍历。`for...in`是`ES5`标准，用于遍历对象属性（键），而`for...of`是`ES6`标准，是对`for...in`的修正，用于遍历对象元素（值），`for...of`兼容性不是很好（除了PC端老顽固`IE`之外，移动端某些安卓机和浏览器也是不支持它，具体可以[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of)）。\n\n## for...in\n\n``` javascript\nObject.prototype.objMethod = function() {};\nArray.prototype.arrMethod = function() {};\n\nvar arr = [2, 9, 5], obj = { name: '2ue', w: 130 };\narr.msg = 'hello';\nobj.msg = 'hello';\n\nfor (var i in arr) {\n  console.log(i); // \"0\", \"1\", \"2\", \"msg\", \"arrCustom\", \"objCustom\"\n}\n\nfor (var i in arr) {\n  if (arr.hasOwnProperty(i)) {\n    console.log(i); // \"0\", \"1\", \"2\", \"msg\"\n  }\n}\nfor (var i in obj) {\n  console.log(i); // \"name\", \"w\", \"msg\", \"objCustom\"\n}\n\nfor (var i in obj) {\n  if (obj.hasOwnProperty(i)) {\n    console.log(i); // \"name\", \"w\", \"msg\"\n  }\n}\n```\n\n由上面的例子可以看出，`for...in`的一些特性：\n\n- 可以对`JSON`对象（数组和对象）进行遍历\n- `for...in`会遍历对象的所有可枚举属性，包括原型，例如一些我们挂载到原型链上的一些`method`和`name`\n- 遍历很有可能不是按照对象的内部顺序（我们预期的）进行\n- 对数组遍历时index索引为字符串型，在某些时候直接进行几何运算可能达不到预期结果\n\n## for...of\n\n`for...in`貌似强大的同时也带来很多副作用，想要达到预期的记过需要额外的代码来处理，所以`for...of`应运而生\n\n``` javascript\nObject.prototype.objMethod = function() {};\nArray.prototype.arrMethod = function() {};\n\nvar arr = [2, 9, 5], obj = { name: '2ue', w: 130 };\narr.msg = 'hello';\nobj.msg = 'hello';\n\nfor (var i of arr) {\n  console.log(i); // 2, 9, 5\n}\n//如果用for...of循环对象，会报错`obj is not iterable`\nfor (var i of obj) {\n  console.log(i);\n}\n```\n\n可以看出，`for...of`方法在`for...in`上做了优化，并且限制了只能遍历数组。当然在`ES5`中，具有遍历数组功能的还有`map`、`filter`、`some`、`every`、`reduce`、`reduceRight`等，但是需要注意的是，有些方法不能被`break`句柄打断循环，使用`retun`也不能返回到外层，如`forEach`\n\n其实不难看出`for...in`是属于鸡肋属性了，而`for...of`由于兼容性原因，在某些地方也应该慎用，即使是移动端也要慎用，应该它并不兼容所有内核。\n\n## 参考\n\n[for...in](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in)\n[for...of](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of)\n[for-of循环是遍历实现iterator接口的成员](http://es6.ruanyifeng.com/#docs/iterator)\n","source":"_posts/for-in-and-for-of.md","raw":"---\ntitle: 慎重用for...in与for...of\ndate: 2017-10-27 14:43:12\nauthor: J.2ue\ntags:\n- 遍历\n- for...in\n- for...of\ncategories:\n- javascript\n---\n\n> `for...in`和`for...of`都是用于数据的遍历。`for...in`是`ES5`标准，用于遍历对象属性（键），而`for...of`是`ES6`标准，是对`for...in`的修正，用于遍历对象元素（值），`for...of`兼容性不是很好（除了PC端老顽固`IE`之外，移动端某些安卓机和浏览器也是不支持它，具体可以[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of)）。\n\n## for...in\n\n``` javascript\nObject.prototype.objMethod = function() {};\nArray.prototype.arrMethod = function() {};\n\nvar arr = [2, 9, 5], obj = { name: '2ue', w: 130 };\narr.msg = 'hello';\nobj.msg = 'hello';\n\nfor (var i in arr) {\n  console.log(i); // \"0\", \"1\", \"2\", \"msg\", \"arrCustom\", \"objCustom\"\n}\n\nfor (var i in arr) {\n  if (arr.hasOwnProperty(i)) {\n    console.log(i); // \"0\", \"1\", \"2\", \"msg\"\n  }\n}\nfor (var i in obj) {\n  console.log(i); // \"name\", \"w\", \"msg\", \"objCustom\"\n}\n\nfor (var i in obj) {\n  if (obj.hasOwnProperty(i)) {\n    console.log(i); // \"name\", \"w\", \"msg\"\n  }\n}\n```\n\n由上面的例子可以看出，`for...in`的一些特性：\n\n- 可以对`JSON`对象（数组和对象）进行遍历\n- `for...in`会遍历对象的所有可枚举属性，包括原型，例如一些我们挂载到原型链上的一些`method`和`name`\n- 遍历很有可能不是按照对象的内部顺序（我们预期的）进行\n- 对数组遍历时index索引为字符串型，在某些时候直接进行几何运算可能达不到预期结果\n\n## for...of\n\n`for...in`貌似强大的同时也带来很多副作用，想要达到预期的记过需要额外的代码来处理，所以`for...of`应运而生\n\n``` javascript\nObject.prototype.objMethod = function() {};\nArray.prototype.arrMethod = function() {};\n\nvar arr = [2, 9, 5], obj = { name: '2ue', w: 130 };\narr.msg = 'hello';\nobj.msg = 'hello';\n\nfor (var i of arr) {\n  console.log(i); // 2, 9, 5\n}\n//如果用for...of循环对象，会报错`obj is not iterable`\nfor (var i of obj) {\n  console.log(i);\n}\n```\n\n可以看出，`for...of`方法在`for...in`上做了优化，并且限制了只能遍历数组。当然在`ES5`中，具有遍历数组功能的还有`map`、`filter`、`some`、`every`、`reduce`、`reduceRight`等，但是需要注意的是，有些方法不能被`break`句柄打断循环，使用`retun`也不能返回到外层，如`forEach`\n\n其实不难看出`for...in`是属于鸡肋属性了，而`for...of`由于兼容性原因，在某些地方也应该慎用，即使是移动端也要慎用，应该它并不兼容所有内核。\n\n## 参考\n\n[for...in](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in)\n[for...of](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of)\n[for-of循环是遍历实现iterator接口的成员](http://es6.ruanyifeng.com/#docs/iterator)\n","slug":"for-in-and-for-of","published":1,"updated":"2018-07-30T01:55:33.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swg4001k2kv75ofb0s25","content":"<blockquote>\n<p><code>for...in</code>和<code>for...of</code>都是用于数据的遍历。<code>for...in</code>是<code>ES5</code>标准，用于遍历对象属性（键），而<code>for...of</code>是<code>ES6</code>标准，是对<code>for...in</code>的修正，用于遍历对象元素（值），<code>for...of</code>兼容性不是很好（除了PC端老顽固<code>IE</code>之外，移动端某些安卓机和浏览器也是不支持它，具体可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\" target=\"_blank\" rel=\"noopener\">查看MDN</a>）。</p>\n</blockquote>\n<h2 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.objMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.arrMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>], obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'2ue'</span>, <span class=\"attr\">w</span>: <span class=\"number\">130</span> &#125;;</span><br><span class=\"line\">arr.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">obj.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\", \"msg\", \"arrCustom\", \"objCustom\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\", \"msg\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"name\", \"w\", \"msg\", \"objCustom\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"name\", \"w\", \"msg\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，<code>for...in</code>的一些特性：</p>\n<ul>\n<li>可以对<code>JSON</code>对象（数组和对象）进行遍历</li>\n<li><code>for...in</code>会遍历对象的所有可枚举属性，包括原型，例如一些我们挂载到原型链上的一些<code>method</code>和<code>name</code></li>\n<li>遍历很有可能不是按照对象的内部顺序（我们预期的）进行</li>\n<li>对数组遍历时index索引为字符串型，在某些时候直接进行几何运算可能达不到预期结果</li>\n</ul>\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><p><code>for...in</code>貌似强大的同时也带来很多副作用，想要达到预期的记过需要额外的代码来处理，所以<code>for...of</code>应运而生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.objMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.arrMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>], obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'2ue'</span>, <span class=\"attr\">w</span>: <span class=\"number\">130</span> &#125;;</span><br><span class=\"line\">arr.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">obj.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 2, 9, 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果用for...of循环对象，会报错`obj is not iterable`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<code>for...of</code>方法在<code>for...in</code>上做了优化，并且限制了只能遍历数组。当然在<code>ES5</code>中，具有遍历数组功能的还有<code>map</code>、<code>filter</code>、<code>some</code>、<code>every</code>、<code>reduce</code>、<code>reduceRight</code>等，但是需要注意的是，有些方法不能被<code>break</code>句柄打断循环，使用<code>retun</code>也不能返回到外层，如<code>forEach</code></p>\n<p>其实不难看出<code>for...in</code>是属于鸡肋属性了，而<code>for...of</code>由于兼容性原因，在某些地方也应该慎用，即使是移动端也要慎用，应该它并不兼容所有内核。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\" target=\"_blank\" rel=\"noopener\">for…in</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\" target=\"_blank\" rel=\"noopener\">for…of</a><br><a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener\">for-of循环是遍历实现iterator接口的成员</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>for...in</code>和<code>for...of</code>都是用于数据的遍历。<code>for...in</code>是<code>ES5</code>标准，用于遍历对象属性（键），而<code>for...of</code>是<code>ES6</code>标准，是对<code>for...in</code>的修正，用于遍历对象元素（值），<code>for...of</code>兼容性不是很好（除了PC端老顽固<code>IE</code>之外，移动端某些安卓机和浏览器也是不支持它，具体可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\" target=\"_blank\" rel=\"noopener\">查看MDN</a>）。</p>\n</blockquote>\n<h2 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.objMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.arrMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>], obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'2ue'</span>, <span class=\"attr\">w</span>: <span class=\"number\">130</span> &#125;;</span><br><span class=\"line\">arr.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">obj.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\", \"msg\", \"arrCustom\", \"objCustom\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\", \"msg\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"name\", \"w\", \"msg\", \"objCustom\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"name\", \"w\", \"msg\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，<code>for...in</code>的一些特性：</p>\n<ul>\n<li>可以对<code>JSON</code>对象（数组和对象）进行遍历</li>\n<li><code>for...in</code>会遍历对象的所有可枚举属性，包括原型，例如一些我们挂载到原型链上的一些<code>method</code>和<code>name</code></li>\n<li>遍历很有可能不是按照对象的内部顺序（我们预期的）进行</li>\n<li>对数组遍历时index索引为字符串型，在某些时候直接进行几何运算可能达不到预期结果</li>\n</ul>\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><p><code>for...in</code>貌似强大的同时也带来很多副作用，想要达到预期的记过需要额外的代码来处理，所以<code>for...of</code>应运而生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.objMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.arrMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>], obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'2ue'</span>, <span class=\"attr\">w</span>: <span class=\"number\">130</span> &#125;;</span><br><span class=\"line\">arr.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">obj.msg = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 2, 9, 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果用for...of循环对象，会报错`obj is not iterable`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，<code>for...of</code>方法在<code>for...in</code>上做了优化，并且限制了只能遍历数组。当然在<code>ES5</code>中，具有遍历数组功能的还有<code>map</code>、<code>filter</code>、<code>some</code>、<code>every</code>、<code>reduce</code>、<code>reduceRight</code>等，但是需要注意的是，有些方法不能被<code>break</code>句柄打断循环，使用<code>retun</code>也不能返回到外层，如<code>forEach</code></p>\n<p>其实不难看出<code>for...in</code>是属于鸡肋属性了，而<code>for...of</code>由于兼容性原因，在某些地方也应该慎用，即使是移动端也要慎用，应该它并不兼容所有内核。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\" target=\"_blank\" rel=\"noopener\">for…in</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\" target=\"_blank\" rel=\"noopener\">for…of</a><br><a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener\">for-of循环是遍历实现iterator接口的成员</a></p>\n"},{"title":"利用javascrit获取url传递的参数","date":"2016-06-15T12:54:14.000Z","author":"J.2ue","_content":"\n## 神奇的url\n\n一条url包含了很丰富的信息，那么我们如何来获取这些信息并有效的加以利用呢?\n随便举个例子：https://github.com/search?utf8=%E2%9C%93&q=javascript\n这条url就是在github上搜索javascript后跳转页面对应的url。我们要做的就是获取'?'后面的参数，以及获取后可以用来做什么。\n\n## 获取参数\n\n### window.location的对象方法\n\n![window.location的参数](/images/posts/windowLocation.png)\n\n### 获取url所有的参数\n\n我们可以直接通过`window.location.search`来取得这部分，也就是我们需要的url参数。\n\n当`url`没有包含`?`时，`window.location.search`会返回`undefined`。\n\n``` javascript\nfunction getUrlVal(str){\n  \tif(!str || str.indexOf('?') != 0) return false;\n    var urlValArry = str.replace('?','').split('&');\n    var urlValObject = {};\n    for(var i in urlValArry){\n        urlValObject[urlValArry[i].split('=')[0]] = urlValArry[i].split('=')[1];\n    };\n    return urlValObject;\n};\n\n//  https://github.com/search?utf8=%E2%9C%93&q=javascript\nvar urlStr = window.location.search.replace('?','');\nconsole.log(getUrlVal(urlStr));  //输出 Object {utf8: \"%E2%9C%93\", q: \"javascript\"}\n```\n\n### 获取url中指定键名(name)的键值(val)\n\n``` javascript\nfunction getOneVal(str,name){\n  \tif(!str || str.indexOf('?') != 0) return false;\n    var afterNameStr = str.replace('?','').split(name)[1];\n    var strFirstSite = afterNameStr.indexOf('&');\n  \t// 返回第一个&位置，如果没有'&'则返回字符串长度\n    strFirstSite = (strFirstSite == -1) ? afterNameStr.length : strFirstSite\n    var reslt = afterNameStr.slice(1,strFirstSite);\n    return reslt;\n};\n\n//  'http://www.gotoplay.com/active?itemtype=sport&active=basketball&time=20160614&place=N230&peopleNum=657'\nvar urlStr = window.location.search;\nconsole.log(getOneVal(urlStr,'time'))  //输出20160614\nconsole.log(getOneVal(urlStr,'peopleNum'))  //657\n```\n\n## 将方法绑定到原型链上\n\n``` javascript\nString.prototype.toObj = function(key){\n    /*\n  \t\t如果有传入key，那么就只返回key对应的Val(找不到则返回undefined)\n\t\t如果没有传入key,那么就返回一个object对象\n\t*/\n  var str = this;\n  if(str.indexOf('?') != 0) return {};\n  if(str.indexOf(key) == -1) return undefined;\n  var tmpArry = str.replace('?','').split('&');\n  var reslt = {};\n  for(var i in tmpArry){\n    var tempKeyVal = tmpArry[i].split('=');\n    if(!!key) {\n      if(tempKeyVal[0] != key) reslt = undefined;\n      reslt = tempKeyVal[1];\n      break;\n    }else {\n      reslt[tempKeyVal[0]] = tempKeyVal[1];\n    }\n  };\n  return reslt;\n};\n// http://www.gotoplay.com/active?itemtype=sport&active=basketball&time=20160614\nvar urlStr = window.location.search;\nconsole.log(urlStr.toObj()) //{itemtype:'sport',active:'basketball',time:'20160614'}\nconsole.log(urlStr.toObj('active'))  //basketball\n```\n\n## 利用正则表达式来获取参数\n\n强大的正则总是让人心生向往，利用正则无疑是最简洁优雅的一种方法\n\n### 获取指定某个参数\n\n``` javascript\n    function getUrlParam(url,name){\n        if(!name) return;\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'),\n            r = url.substr(1).match(reg);\n        if (r != null) {\n            return (r[2]);\n        }else{\n            return null;\n        }\n    }\n```\n\n### 获取所有的参数\n\n``` javascript\n    function parse_url(url){\n        if(!url) return;\n        var pattern = /(\\w+)=(\\w+)/ig;\n        var parames = {};\n        url.replace(pattern, function(a, b, c){\n            parames[b] = c;\n        });\n        return parames;\n    }\n```\n\n## 参数的利用\n\n在项目中这些参数有哪些用处呢，下面列举几个比较常用的用处\n- 传递数据\n- 导航定位\n- 更改状态\n- ...\n\n### 导航定位\n\n什么是导航定位？就是点击导航栏的标签，页面跳转后，对应的标签相应的会突出变化。如下图：\n![navLocation](/images/posts/navLocation.png)\n\n跳转后有两种情况：\n一种ajax异步刷新，只是局部页面发生变化，因为可以直接用点击事件来控制。\n另外一种比较常见的方式就是整个页面刷新，这种情况下，点击事件就没用了，就必须另辟蹊径：\n    1.比较传统的方法就是每个页面里面写一段CSS样式来控制\n    2.那么另外一种不用说就是通过url的参数来定位咯\n假如用每个页面写CSS样式来控制，可以明显感受到的弊端是：每次新的页面都需要修改对应的CSS\n那么利用url来控制又需要做哪些事呢？\n    1.首先需要约定参数，并且后台来传递这些参数\n    2.然后在导航栏部分，对应的地方加上参数值，这一步，导航栏都是公用模板，并且规则都一样，所以只需要一次添加\n    3.跳转后定位\n\n## html代码\n\n``` html\n<div class=\"nav\">\n    <a href=\"/index.htm?nav=index\">首页</a>\n    <a href=\"/layout/post.htm?nav=post\">文章</a>\n    <a href=\"/layout/tag.htm?nav=tags\">标签</a>\n    <a href=\"/layout/about.htm?nav=aboutUs\">关于我</a>\n</div>\n```\n\n### js代码\n\n``` javascript\nfunction getOneVal(name,urlValStr){\n    var afterNameStr = urlValStr.split(name)[1];\n    var strFirstSite = afterNameStr.indexOf('&');\n    strFirstSite = (strFirstSite == -1) ? afterNameStr.length : strFirstSit;\n    var val = afterNameStr.slice(1,strFirstSite);\n    return val;\n};\n\nvar thisUrlVal = window.location.search.replace('?','');\nvar thisNVal = getOneVal('nav',urlValStr);\n\n//定位\n$('.nav a').each(function(){\n    var _this = $(this);\n    var urlValStr = _this.attr('href').split('?')[1];\n    var nVal = getOneVal('nav',urlValStr);\n    if(nVal == thisNVal) {\n        _this.addClass('on');\n    }\n})\n```\n","source":"_posts/get-url-values.md","raw":"---\ntitle: 利用javascrit获取url传递的参数\ndate: 2016-06-15 20:54:14\nauthor:  J.2ue\ntags:\n- url\ncategories:\n- javascript\n---\n\n## 神奇的url\n\n一条url包含了很丰富的信息，那么我们如何来获取这些信息并有效的加以利用呢?\n随便举个例子：https://github.com/search?utf8=%E2%9C%93&q=javascript\n这条url就是在github上搜索javascript后跳转页面对应的url。我们要做的就是获取'?'后面的参数，以及获取后可以用来做什么。\n\n## 获取参数\n\n### window.location的对象方法\n\n![window.location的参数](/images/posts/windowLocation.png)\n\n### 获取url所有的参数\n\n我们可以直接通过`window.location.search`来取得这部分，也就是我们需要的url参数。\n\n当`url`没有包含`?`时，`window.location.search`会返回`undefined`。\n\n``` javascript\nfunction getUrlVal(str){\n  \tif(!str || str.indexOf('?') != 0) return false;\n    var urlValArry = str.replace('?','').split('&');\n    var urlValObject = {};\n    for(var i in urlValArry){\n        urlValObject[urlValArry[i].split('=')[0]] = urlValArry[i].split('=')[1];\n    };\n    return urlValObject;\n};\n\n//  https://github.com/search?utf8=%E2%9C%93&q=javascript\nvar urlStr = window.location.search.replace('?','');\nconsole.log(getUrlVal(urlStr));  //输出 Object {utf8: \"%E2%9C%93\", q: \"javascript\"}\n```\n\n### 获取url中指定键名(name)的键值(val)\n\n``` javascript\nfunction getOneVal(str,name){\n  \tif(!str || str.indexOf('?') != 0) return false;\n    var afterNameStr = str.replace('?','').split(name)[1];\n    var strFirstSite = afterNameStr.indexOf('&');\n  \t// 返回第一个&位置，如果没有'&'则返回字符串长度\n    strFirstSite = (strFirstSite == -1) ? afterNameStr.length : strFirstSite\n    var reslt = afterNameStr.slice(1,strFirstSite);\n    return reslt;\n};\n\n//  'http://www.gotoplay.com/active?itemtype=sport&active=basketball&time=20160614&place=N230&peopleNum=657'\nvar urlStr = window.location.search;\nconsole.log(getOneVal(urlStr,'time'))  //输出20160614\nconsole.log(getOneVal(urlStr,'peopleNum'))  //657\n```\n\n## 将方法绑定到原型链上\n\n``` javascript\nString.prototype.toObj = function(key){\n    /*\n  \t\t如果有传入key，那么就只返回key对应的Val(找不到则返回undefined)\n\t\t如果没有传入key,那么就返回一个object对象\n\t*/\n  var str = this;\n  if(str.indexOf('?') != 0) return {};\n  if(str.indexOf(key) == -1) return undefined;\n  var tmpArry = str.replace('?','').split('&');\n  var reslt = {};\n  for(var i in tmpArry){\n    var tempKeyVal = tmpArry[i].split('=');\n    if(!!key) {\n      if(tempKeyVal[0] != key) reslt = undefined;\n      reslt = tempKeyVal[1];\n      break;\n    }else {\n      reslt[tempKeyVal[0]] = tempKeyVal[1];\n    }\n  };\n  return reslt;\n};\n// http://www.gotoplay.com/active?itemtype=sport&active=basketball&time=20160614\nvar urlStr = window.location.search;\nconsole.log(urlStr.toObj()) //{itemtype:'sport',active:'basketball',time:'20160614'}\nconsole.log(urlStr.toObj('active'))  //basketball\n```\n\n## 利用正则表达式来获取参数\n\n强大的正则总是让人心生向往，利用正则无疑是最简洁优雅的一种方法\n\n### 获取指定某个参数\n\n``` javascript\n    function getUrlParam(url,name){\n        if(!name) return;\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'),\n            r = url.substr(1).match(reg);\n        if (r != null) {\n            return (r[2]);\n        }else{\n            return null;\n        }\n    }\n```\n\n### 获取所有的参数\n\n``` javascript\n    function parse_url(url){\n        if(!url) return;\n        var pattern = /(\\w+)=(\\w+)/ig;\n        var parames = {};\n        url.replace(pattern, function(a, b, c){\n            parames[b] = c;\n        });\n        return parames;\n    }\n```\n\n## 参数的利用\n\n在项目中这些参数有哪些用处呢，下面列举几个比较常用的用处\n- 传递数据\n- 导航定位\n- 更改状态\n- ...\n\n### 导航定位\n\n什么是导航定位？就是点击导航栏的标签，页面跳转后，对应的标签相应的会突出变化。如下图：\n![navLocation](/images/posts/navLocation.png)\n\n跳转后有两种情况：\n一种ajax异步刷新，只是局部页面发生变化，因为可以直接用点击事件来控制。\n另外一种比较常见的方式就是整个页面刷新，这种情况下，点击事件就没用了，就必须另辟蹊径：\n    1.比较传统的方法就是每个页面里面写一段CSS样式来控制\n    2.那么另外一种不用说就是通过url的参数来定位咯\n假如用每个页面写CSS样式来控制，可以明显感受到的弊端是：每次新的页面都需要修改对应的CSS\n那么利用url来控制又需要做哪些事呢？\n    1.首先需要约定参数，并且后台来传递这些参数\n    2.然后在导航栏部分，对应的地方加上参数值，这一步，导航栏都是公用模板，并且规则都一样，所以只需要一次添加\n    3.跳转后定位\n\n## html代码\n\n``` html\n<div class=\"nav\">\n    <a href=\"/index.htm?nav=index\">首页</a>\n    <a href=\"/layout/post.htm?nav=post\">文章</a>\n    <a href=\"/layout/tag.htm?nav=tags\">标签</a>\n    <a href=\"/layout/about.htm?nav=aboutUs\">关于我</a>\n</div>\n```\n\n### js代码\n\n``` javascript\nfunction getOneVal(name,urlValStr){\n    var afterNameStr = urlValStr.split(name)[1];\n    var strFirstSite = afterNameStr.indexOf('&');\n    strFirstSite = (strFirstSite == -1) ? afterNameStr.length : strFirstSit;\n    var val = afterNameStr.slice(1,strFirstSite);\n    return val;\n};\n\nvar thisUrlVal = window.location.search.replace('?','');\nvar thisNVal = getOneVal('nav',urlValStr);\n\n//定位\n$('.nav a').each(function(){\n    var _this = $(this);\n    var urlValStr = _this.attr('href').split('?')[1];\n    var nVal = getOneVal('nav',urlValStr);\n    if(nVal == thisNVal) {\n        _this.addClass('on');\n    }\n})\n```\n","slug":"get-url-values","published":1,"updated":"2018-07-30T01:55:33.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swg7001n2kv716ja8y40","content":"<h2 id=\"神奇的url\"><a href=\"#神奇的url\" class=\"headerlink\" title=\"神奇的url\"></a>神奇的url</h2><p>一条url包含了很丰富的信息，那么我们如何来获取这些信息并有效的加以利用呢?<br>随便举个例子：<a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/search?utf8=%E2%9C%93&amp;q=javascript</a><br>这条url就是在github上搜索javascript后跳转页面对应的url。我们要做的就是获取’?’后面的参数，以及获取后可以用来做什么。</p>\n<h2 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h2><h3 id=\"window-location的对象方法\"><a href=\"#window-location的对象方法\" class=\"headerlink\" title=\"window.location的对象方法\"></a>window.location的对象方法</h3><p><img src=\"/images/posts/windowLocation.png\" alt=\"window.location的参数\"></p>\n<h3 id=\"获取url所有的参数\"><a href=\"#获取url所有的参数\" class=\"headerlink\" title=\"获取url所有的参数\"></a>获取url所有的参数</h3><p>我们可以直接通过<code>window.location.search</code>来取得这部分，也就是我们需要的url参数。</p>\n<p>当<code>url</code>没有包含<code>?</code>时，<code>window.location.search</code>会返回<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVal</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!str || str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValArry = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValObject = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> urlValArry)&#123;</span><br><span class=\"line\">        urlValObject[urlValArry[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>]] = urlValArry[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urlValObject;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  https://github.com/search?utf8=%E2%9C%93&amp;q=javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getUrlVal(urlStr));  <span class=\"comment\">//输出 Object &#123;utf8: \"%E2%9C%93\", q: \"javascript\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取url中指定键名-name-的键值-val\"><a href=\"#获取url中指定键名-name-的键值-val\" class=\"headerlink\" title=\"获取url中指定键名(name)的键值(val)\"></a>获取url中指定键名(name)的键值(val)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOneVal</span>(<span class=\"params\">str,name</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!str || str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> afterNameStr = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(name)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strFirstSite = afterNameStr.indexOf(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  \t<span class=\"comment\">// 返回第一个&amp;位置，如果没有'&amp;'则返回字符串长度</span></span><br><span class=\"line\">    strFirstSite = (strFirstSite == <span class=\"number\">-1</span>) ? afterNameStr.length : strFirstSite</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reslt = afterNameStr.slice(<span class=\"number\">1</span>,strFirstSite);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reslt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  'http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614&amp;place=N230&amp;peopleNum=657'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getOneVal(urlStr,<span class=\"string\">'time'</span>))  <span class=\"comment\">//输出20160614</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getOneVal(urlStr,<span class=\"string\">'peopleNum'</span>))  <span class=\"comment\">//657</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将方法绑定到原型链上\"><a href=\"#将方法绑定到原型链上\" class=\"headerlink\" title=\"将方法绑定到原型链上\"></a>将方法绑定到原型链上</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.toObj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  \t\t如果有传入key，那么就只返回key对应的Val(找不到则返回undefined)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果没有传入key,那么就返回一个object对象</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmpArry = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reslt = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> tmpArry)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempKeyVal = tmpArry[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!!key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tempKeyVal[<span class=\"number\">0</span>] != key) reslt = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      reslt = tempKeyVal[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reslt[tempKeyVal[<span class=\"number\">0</span>]] = tempKeyVal[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reslt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(urlStr.toObj()) <span class=\"comment\">//&#123;itemtype:'sport',active:'basketball',time:'20160614'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(urlStr.toObj(<span class=\"string\">'active'</span>))  <span class=\"comment\">//basketball</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"利用正则表达式来获取参数\"><a href=\"#利用正则表达式来获取参数\" class=\"headerlink\" title=\"利用正则表达式来获取参数\"></a>利用正则表达式来获取参数</h2><p>强大的正则总是让人心生向往，利用正则无疑是最简洁优雅的一种方法</p>\n<h3 id=\"获取指定某个参数\"><a href=\"#获取指定某个参数\" class=\"headerlink\" title=\"获取指定某个参数\"></a>获取指定某个参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">url,name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^|&amp;)'</span> + name + <span class=\"string\">'=([^&amp;]*)(&amp;|$)'</span>, <span class=\"string\">'i'</span>),</span><br><span class=\"line\">        r = url.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有的参数\"><a href=\"#获取所有的参数\" class=\"headerlink\" title=\"获取所有的参数\"></a>获取所有的参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse_url</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!url) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/(\\w+)=(\\w+)/ig</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> parames = &#123;&#125;;</span><br><span class=\"line\">    url.replace(pattern, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">        parames[b] = c;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parames;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数的利用\"><a href=\"#参数的利用\" class=\"headerlink\" title=\"参数的利用\"></a>参数的利用</h2><p>在项目中这些参数有哪些用处呢，下面列举几个比较常用的用处</p>\n<ul>\n<li>传递数据</li>\n<li>导航定位</li>\n<li>更改状态</li>\n<li>…</li>\n</ul>\n<h3 id=\"导航定位\"><a href=\"#导航定位\" class=\"headerlink\" title=\"导航定位\"></a>导航定位</h3><p>什么是导航定位？就是点击导航栏的标签，页面跳转后，对应的标签相应的会突出变化。如下图：<br><img src=\"/images/posts/navLocation.png\" alt=\"navLocation\"></p>\n<p>跳转后有两种情况：<br>一种ajax异步刷新，只是局部页面发生变化，因为可以直接用点击事件来控制。<br>另外一种比较常见的方式就是整个页面刷新，这种情况下，点击事件就没用了，就必须另辟蹊径：<br>    1.比较传统的方法就是每个页面里面写一段CSS样式来控制<br>    2.那么另外一种不用说就是通过url的参数来定位咯<br>假如用每个页面写CSS样式来控制，可以明显感受到的弊端是：每次新的页面都需要修改对应的CSS<br>那么利用url来控制又需要做哪些事呢？<br>    1.首先需要约定参数，并且后台来传递这些参数<br>    2.然后在导航栏部分，对应的地方加上参数值，这一步，导航栏都是公用模板，并且规则都一样，所以只需要一次添加<br>    3.跳转后定位</p>\n<h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.htm?nav=index\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/post.htm?nav=post\"</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/tag.htm?nav=tags\"</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/about.htm?nav=aboutUs\"</span>&gt;</span>关于我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOneVal</span>(<span class=\"params\">name,urlValStr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> afterNameStr = urlValStr.split(name)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strFirstSite = afterNameStr.indexOf(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    strFirstSite = (strFirstSite == <span class=\"number\">-1</span>) ? afterNameStr.length : strFirstSit;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = afterNameStr.slice(<span class=\"number\">1</span>,strFirstSite);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisUrlVal = <span class=\"built_in\">window</span>.location.search.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thisNVal = getOneVal(<span class=\"string\">'nav'</span>,urlValStr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定位</span></span><br><span class=\"line\">$(<span class=\"string\">'.nav a'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValStr = _this.attr(<span class=\"string\">'href'</span>).split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nVal = getOneVal(<span class=\"string\">'nav'</span>,urlValStr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nVal == thisNVal) &#123;</span><br><span class=\"line\">        _this.addClass(<span class=\"string\">'on'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"神奇的url\"><a href=\"#神奇的url\" class=\"headerlink\" title=\"神奇的url\"></a>神奇的url</h2><p>一条url包含了很丰富的信息，那么我们如何来获取这些信息并有效的加以利用呢?<br>随便举个例子：<a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/search?utf8=%E2%9C%93&amp;q=javascript</a><br>这条url就是在github上搜索javascript后跳转页面对应的url。我们要做的就是获取’?’后面的参数，以及获取后可以用来做什么。</p>\n<h2 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h2><h3 id=\"window-location的对象方法\"><a href=\"#window-location的对象方法\" class=\"headerlink\" title=\"window.location的对象方法\"></a>window.location的对象方法</h3><p><img src=\"/images/posts/windowLocation.png\" alt=\"window.location的参数\"></p>\n<h3 id=\"获取url所有的参数\"><a href=\"#获取url所有的参数\" class=\"headerlink\" title=\"获取url所有的参数\"></a>获取url所有的参数</h3><p>我们可以直接通过<code>window.location.search</code>来取得这部分，也就是我们需要的url参数。</p>\n<p>当<code>url</code>没有包含<code>?</code>时，<code>window.location.search</code>会返回<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVal</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!str || str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValArry = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValObject = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> urlValArry)&#123;</span><br><span class=\"line\">        urlValObject[urlValArry[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>]] = urlValArry[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urlValObject;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  https://github.com/search?utf8=%E2%9C%93&amp;q=javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getUrlVal(urlStr));  <span class=\"comment\">//输出 Object &#123;utf8: \"%E2%9C%93\", q: \"javascript\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取url中指定键名-name-的键值-val\"><a href=\"#获取url中指定键名-name-的键值-val\" class=\"headerlink\" title=\"获取url中指定键名(name)的键值(val)\"></a>获取url中指定键名(name)的键值(val)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOneVal</span>(<span class=\"params\">str,name</span>)</span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!str || str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> afterNameStr = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(name)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strFirstSite = afterNameStr.indexOf(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  \t<span class=\"comment\">// 返回第一个&amp;位置，如果没有'&amp;'则返回字符串长度</span></span><br><span class=\"line\">    strFirstSite = (strFirstSite == <span class=\"number\">-1</span>) ? afterNameStr.length : strFirstSite</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reslt = afterNameStr.slice(<span class=\"number\">1</span>,strFirstSite);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reslt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  'http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614&amp;place=N230&amp;peopleNum=657'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getOneVal(urlStr,<span class=\"string\">'time'</span>))  <span class=\"comment\">//输出20160614</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getOneVal(urlStr,<span class=\"string\">'peopleNum'</span>))  <span class=\"comment\">//657</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将方法绑定到原型链上\"><a href=\"#将方法绑定到原型链上\" class=\"headerlink\" title=\"将方法绑定到原型链上\"></a>将方法绑定到原型链上</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.toObj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  \t\t如果有传入key，那么就只返回key对应的Val(找不到则返回undefined)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果没有传入key,那么就返回一个object对象</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(<span class=\"string\">'?'</span>) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.indexOf(key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmpArry = str.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reslt = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> tmpArry)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempKeyVal = tmpArry[i].split(<span class=\"string\">'='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!!key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tempKeyVal[<span class=\"number\">0</span>] != key) reslt = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      reslt = tempKeyVal[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reslt[tempKeyVal[<span class=\"number\">0</span>]] = tempKeyVal[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reslt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> urlStr = <span class=\"built_in\">window</span>.location.search;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(urlStr.toObj()) <span class=\"comment\">//&#123;itemtype:'sport',active:'basketball',time:'20160614'&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(urlStr.toObj(<span class=\"string\">'active'</span>))  <span class=\"comment\">//basketball</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"利用正则表达式来获取参数\"><a href=\"#利用正则表达式来获取参数\" class=\"headerlink\" title=\"利用正则表达式来获取参数\"></a>利用正则表达式来获取参数</h2><p>强大的正则总是让人心生向往，利用正则无疑是最简洁优雅的一种方法</p>\n<h3 id=\"获取指定某个参数\"><a href=\"#获取指定某个参数\" class=\"headerlink\" title=\"获取指定某个参数\"></a>获取指定某个参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlParam</span>(<span class=\"params\">url,name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^|&amp;)'</span> + name + <span class=\"string\">'=([^&amp;]*)(&amp;|$)'</span>, <span class=\"string\">'i'</span>),</span><br><span class=\"line\">        r = url.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有的参数\"><a href=\"#获取所有的参数\" class=\"headerlink\" title=\"获取所有的参数\"></a>获取所有的参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse_url</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!url) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/(\\w+)=(\\w+)/ig</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> parames = &#123;&#125;;</span><br><span class=\"line\">    url.replace(pattern, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">        parames[b] = c;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parames;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数的利用\"><a href=\"#参数的利用\" class=\"headerlink\" title=\"参数的利用\"></a>参数的利用</h2><p>在项目中这些参数有哪些用处呢，下面列举几个比较常用的用处</p>\n<ul>\n<li>传递数据</li>\n<li>导航定位</li>\n<li>更改状态</li>\n<li>…</li>\n</ul>\n<h3 id=\"导航定位\"><a href=\"#导航定位\" class=\"headerlink\" title=\"导航定位\"></a>导航定位</h3><p>什么是导航定位？就是点击导航栏的标签，页面跳转后，对应的标签相应的会突出变化。如下图：<br><img src=\"/images/posts/navLocation.png\" alt=\"navLocation\"></p>\n<p>跳转后有两种情况：<br>一种ajax异步刷新，只是局部页面发生变化，因为可以直接用点击事件来控制。<br>另外一种比较常见的方式就是整个页面刷新，这种情况下，点击事件就没用了，就必须另辟蹊径：<br>    1.比较传统的方法就是每个页面里面写一段CSS样式来控制<br>    2.那么另外一种不用说就是通过url的参数来定位咯<br>假如用每个页面写CSS样式来控制，可以明显感受到的弊端是：每次新的页面都需要修改对应的CSS<br>那么利用url来控制又需要做哪些事呢？<br>    1.首先需要约定参数，并且后台来传递这些参数<br>    2.然后在导航栏部分，对应的地方加上参数值，这一步，导航栏都是公用模板，并且规则都一样，所以只需要一次添加<br>    3.跳转后定位</p>\n<h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.htm?nav=index\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/post.htm?nav=post\"</span>&gt;</span>文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/tag.htm?nav=tags\"</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/layout/about.htm?nav=aboutUs\"</span>&gt;</span>关于我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOneVal</span>(<span class=\"params\">name,urlValStr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> afterNameStr = urlValStr.split(name)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strFirstSite = afterNameStr.indexOf(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    strFirstSite = (strFirstSite == <span class=\"number\">-1</span>) ? afterNameStr.length : strFirstSit;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = afterNameStr.slice(<span class=\"number\">1</span>,strFirstSite);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisUrlVal = <span class=\"built_in\">window</span>.location.search.replace(<span class=\"string\">'?'</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thisNVal = getOneVal(<span class=\"string\">'nav'</span>,urlValStr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定位</span></span><br><span class=\"line\">$(<span class=\"string\">'.nav a'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlValStr = _this.attr(<span class=\"string\">'href'</span>).split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nVal = getOneVal(<span class=\"string\">'nav'</span>,urlValStr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nVal == thisNVal) &#123;</span><br><span class=\"line\">        _this.addClass(<span class=\"string\">'on'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"如何写一个日历组件","date":"2017-11-02T02:08:43.000Z","author":"J.2ue","_content":"\n> 众所周知，虽然`javascript`中关于时间的API有不少，我们可以通过方法单独的获取年、月、日、时、分、秒、毫秒...貌似很多，最近写了一个日历（以前写的，但写得很烂，最近优化一下），所以下面简单的记录一下如何写一个日历，列出了一些我在写日历过程中自己封装的一些方法\n\n## 效果图\n\n先来一张效果图，由于没有UI设计，所以就自己简单的设计了一个样式（好歹我也是设计专业的，虽然已不做设计很多年），虽然略丑，但重要的是功能！！！\n\n![datepicker](/images/posts/datepicker.gif)\n\n## 思路\n\n一个日历到底是怎样用代码生成的？其实观察一下现有的日历展现形式，可以很快的形成思路，就是：根据计算把日期号数对应到正确的星期几上，并按照顺序逐一输出。\n以下是我的思路:\n- 取得月份的天数\n- 取得月份第一天是星期几\n- 循环对应号数和星期几返回一个数组对象\n    - 返回数组对象的每一个子项至少包含：号数，星期几，然后根据情况添加：是否高亮，是否当前月，是否节日...等属性\n\n## 方法封装\n\n注意，为了保持方便调用`javascript`的方法，以及保持输出结果符合实际，所有的方法都有如下约定：\n- 在计算过程中\n    - 所有的关于月份都是0~11的数字\n    - 所有的关于星期都是0~6的数字\n- 在输出的结果中\n    - 所有关于月份的输出默认都是1-12的数字\n    - 所有关于星期的输出默认都是1-7的数字\n\n所以在向调用方法传递参数过程中，月份以及星期几统统都需要按照实际月份减一\n\n### 获取月份天数\n\n在`javascript`中没有直接获取月份天数的方法，但是它提供了一个`getDate`方法可以获取日期的某一天。那我们只需要获取月份的最后一天（下一个月的第0天）就可以得知这个月的天数：\n\n``` javascript\n// year是要获取的年份，闰年不一样\n// month是要获取的月份\n// 返回当前月天数\nfunction getMonthDays(year, month){\n    return new Date(year, month + 1, 0).getDate();\n}\n\ngetMonthDays(2016,2) //29\ngetMonthDays(2017,2) //28\n```\n\n### 获取星期几\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// 返回数字几则是星期几\nfunction getWeekday(year, month, day){\n    return new Date(year, month, day).getDate() + 1;\n}\n\ngetWeekday(2016,10,9) //输出4，表示2016年11月9是星期4\ngetWeekday(2017,10,9) //输出5，表示2017年11月9是星期5\n\n```\n\n### 获取月份有几个星期\n\n要计算月份包含几个星期，需要两个数据：月份天数和月份第一天是星期几，就能得到想要的结果\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// 返回当前月包含几个星期\nfunction getweeksInMonth(year, month){\n\n    var days = getMonthDays(year, month);\n    var FirstDayWeekday = getWeekday(year, month, 1);\n    return Math.ceil(days + FirstDayWeekday);\n}\n```\n\n### 循环生成月份对象\n\n有了以上方法之后，就可以通过循环生成一个简单的月份对象了。\n在这里需要注意，日历的排序有两种：\n- 每一行以星期日开头\n- 每一行以星期开头\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// day天，用来判断是否是当前天\n// type表明要星期几开头，0为星期一开头，1为星期日开头，默认为0\n// 返回当前月包含几个星期\n\nconst WEEKTABLE = [{\n    cn: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\n    cns: ['日', '一', '二', '三', '四', '五', '六'],\n    en: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n},{\n    cn: ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'],\n    cns: ['一', '二', '三', '四', '五', '六', '日'],\n    en: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n}]\n\ngetMonthDaysArray(year, month, day， type) {\n    if (typeof day === 'undefined' && year === YEAR && month === MONTH) day = DAY;\n\n    var dayArrays = [];\n    var days = this.getMonthDays(year, month), preDays = this.getMonthDays(year, month - 1);\n    var thisMonthFirstDayInWeek = this.getWeekday(year, month, 1), thisMonthLastDayInWeek = this.getWeekday(year, month, days);\n\n    type = !type || type !== 1 ? 0 : 1;\n\n    //上月在当月日历面板中的排列\n    for (var i = 0; i < thisMonthFirstDayInWeek; i++) {\n        dayArrays.push({\n            dayNum: (preDays - thisMonthFirstDayInWeek + i + 1),\n            weekDay: WEEKTABLE[type].cn[i]\n        })\n    }\n    //当月日历面板中的排列\n    for (var i = 1; i <= days; i++) {\n        var weekDayFlag = (thisMonthFirstDayInWeek + i - 1) % 7\n        dayArrays.push({\n            dayNum: i,\n            weekDay: WEEKTABLE[type].cn[weekDayFlag],\n            selected: i === +day,\n            isThisMonth: true\n        })\n    };\n    //下月在当月日历面板中的排列\n    for (var i = 1; i <= (6 - thisMonthLastDayInWeek); i++) {\n        var weekDayFlag = (thisMonthFirstDayInWeek + days + i - 1) % 7\n        dayArrays.push({\n            dayNum: i,\n            weekDay: WEEKTABLE[type].cn[weekDayFlag]\n        })\n    };\n    return dayArrays;\n}\n```\n\n### 格式化时间\n\n涉及到时间时，常常需要把时间格式进行转换，为了应对多中需求，所以自己封装了一个\n\n``` javascript\n// 参数fmt必须\n// date参数不必须，允许字符串和时间对象，不传或者传无法转换成合法时间对象的字符串则默认当前时间,\n// 年(YYYY/yyyy)固定四个占位符\n// 月(M)、日(d)、小时(h)、分(m)、秒(s)可以用 1-2个占位符,严格区分大小写，\n// 毫秒（ms/mss）最多三个占位符，分别对应56，056这种类型\n// 例子：\n// (Format(\"yyyy-MM-dd hh:mm:ss:ms\") ==> 2006-07-02 08:09:04:23\n// (Format(\"yyyy-MM-dd hh:mm:ss:mss\") ==> 2006-07-02 08:09:04:023\n// (Format(\"yyyy-M-d h:m:s:ms\")      ==> 2006-7-2 8:9:4.180\nfunction formate(fmt, date){\n    date = new Date(date).toString() === 'Invalid Date' ? new Date() : new Date(date);\n    var _rules = [{\n        rule: '[yY]{4}',\n        value: _date.getFullYear()\n    }, {\n        rule: 'M+',\n        value: _date.getMonth() + 1\n    }, {\n        rule: '[dD]+',\n        value: _date.getDate()\n    }, {\n        rule: 'h+',\n        value: _date.getHours()\n    }, {\n        rule: 'm+',\n        value: _date.getMinutes()\n    }, {\n        rule: 's+',\n        value: _date.getSeconds()\n    }, {\n        rule: 'ms{1,2}',\n        value: _date.getMilliseconds()\n    }];\n\n    _rules.forEach(function (_r){\n        const rule = _r.rule, val = _r.value;\n        fmt = fmt.replace(new RegExp(rule), function ($1) {\n            const rLen = val.toString().length, fLen = $1.length;\n            return (fLen !== 2 || rLen >= fLen) ? val : ['00', val].join().substr(rLen);\n        });\n    });\n    return fmt;\n}\n//调用：\nvar time1 = formate(\"YYYY/MM/DD hh:mm:ss\", new Date()); //2017/11/2 11:09:20\nvar time2 = formate(\"YYYY-MM-DD\", time1); //2017-11-2\nvar time3 = formate(\"MM-DD-YYYY\", time2); //11-2-2017\n```\n\n## 最后\n\n附上这些方法的源码[datepicker](https://github.com/2ue/vui/blob/master/src/utils/datepicker.js)\n基于vue实现的一个日历：\n- demo[vue-datepicker](https://2ue.github.io/vui/#/DatePicker)\n- 源码[datePickerPanel.vue](https://github.com/2ue/vui/blob/master/src/components/datePicker/datePickerPanel.vue)\n\n当然这只是最简单的日历输出，思路也是超级简单（感觉有点Low），如果有大神愿意分享它的经验欢迎，来邮~\n","source":"_posts/how-to-make-a-kalendar.md","raw":"---\ntitle: 如何写一个日历组件\ndate: 2017-11-2 10:08:43\nauthor: J.2ue\ntags:\n- 日历\n- kalendar\ncategories:\n- javascript\n---\n\n> 众所周知，虽然`javascript`中关于时间的API有不少，我们可以通过方法单独的获取年、月、日、时、分、秒、毫秒...貌似很多，最近写了一个日历（以前写的，但写得很烂，最近优化一下），所以下面简单的记录一下如何写一个日历，列出了一些我在写日历过程中自己封装的一些方法\n\n## 效果图\n\n先来一张效果图，由于没有UI设计，所以就自己简单的设计了一个样式（好歹我也是设计专业的，虽然已不做设计很多年），虽然略丑，但重要的是功能！！！\n\n![datepicker](/images/posts/datepicker.gif)\n\n## 思路\n\n一个日历到底是怎样用代码生成的？其实观察一下现有的日历展现形式，可以很快的形成思路，就是：根据计算把日期号数对应到正确的星期几上，并按照顺序逐一输出。\n以下是我的思路:\n- 取得月份的天数\n- 取得月份第一天是星期几\n- 循环对应号数和星期几返回一个数组对象\n    - 返回数组对象的每一个子项至少包含：号数，星期几，然后根据情况添加：是否高亮，是否当前月，是否节日...等属性\n\n## 方法封装\n\n注意，为了保持方便调用`javascript`的方法，以及保持输出结果符合实际，所有的方法都有如下约定：\n- 在计算过程中\n    - 所有的关于月份都是0~11的数字\n    - 所有的关于星期都是0~6的数字\n- 在输出的结果中\n    - 所有关于月份的输出默认都是1-12的数字\n    - 所有关于星期的输出默认都是1-7的数字\n\n所以在向调用方法传递参数过程中，月份以及星期几统统都需要按照实际月份减一\n\n### 获取月份天数\n\n在`javascript`中没有直接获取月份天数的方法，但是它提供了一个`getDate`方法可以获取日期的某一天。那我们只需要获取月份的最后一天（下一个月的第0天）就可以得知这个月的天数：\n\n``` javascript\n// year是要获取的年份，闰年不一样\n// month是要获取的月份\n// 返回当前月天数\nfunction getMonthDays(year, month){\n    return new Date(year, month + 1, 0).getDate();\n}\n\ngetMonthDays(2016,2) //29\ngetMonthDays(2017,2) //28\n```\n\n### 获取星期几\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// 返回数字几则是星期几\nfunction getWeekday(year, month, day){\n    return new Date(year, month, day).getDate() + 1;\n}\n\ngetWeekday(2016,10,9) //输出4，表示2016年11月9是星期4\ngetWeekday(2017,10,9) //输出5，表示2017年11月9是星期5\n\n```\n\n### 获取月份有几个星期\n\n要计算月份包含几个星期，需要两个数据：月份天数和月份第一天是星期几，就能得到想要的结果\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// 返回当前月包含几个星期\nfunction getweeksInMonth(year, month){\n\n    var days = getMonthDays(year, month);\n    var FirstDayWeekday = getWeekday(year, month, 1);\n    return Math.ceil(days + FirstDayWeekday);\n}\n```\n\n### 循环生成月份对象\n\n有了以上方法之后，就可以通过循环生成一个简单的月份对象了。\n在这里需要注意，日历的排序有两种：\n- 每一行以星期日开头\n- 每一行以星期开头\n\n``` javascript\n// year是要获取的年份\n// month是要获取的月份\n// day天，用来判断是否是当前天\n// type表明要星期几开头，0为星期一开头，1为星期日开头，默认为0\n// 返回当前月包含几个星期\n\nconst WEEKTABLE = [{\n    cn: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\n    cns: ['日', '一', '二', '三', '四', '五', '六'],\n    en: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n},{\n    cn: ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'],\n    cns: ['一', '二', '三', '四', '五', '六', '日'],\n    en: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n}]\n\ngetMonthDaysArray(year, month, day， type) {\n    if (typeof day === 'undefined' && year === YEAR && month === MONTH) day = DAY;\n\n    var dayArrays = [];\n    var days = this.getMonthDays(year, month), preDays = this.getMonthDays(year, month - 1);\n    var thisMonthFirstDayInWeek = this.getWeekday(year, month, 1), thisMonthLastDayInWeek = this.getWeekday(year, month, days);\n\n    type = !type || type !== 1 ? 0 : 1;\n\n    //上月在当月日历面板中的排列\n    for (var i = 0; i < thisMonthFirstDayInWeek; i++) {\n        dayArrays.push({\n            dayNum: (preDays - thisMonthFirstDayInWeek + i + 1),\n            weekDay: WEEKTABLE[type].cn[i]\n        })\n    }\n    //当月日历面板中的排列\n    for (var i = 1; i <= days; i++) {\n        var weekDayFlag = (thisMonthFirstDayInWeek + i - 1) % 7\n        dayArrays.push({\n            dayNum: i,\n            weekDay: WEEKTABLE[type].cn[weekDayFlag],\n            selected: i === +day,\n            isThisMonth: true\n        })\n    };\n    //下月在当月日历面板中的排列\n    for (var i = 1; i <= (6 - thisMonthLastDayInWeek); i++) {\n        var weekDayFlag = (thisMonthFirstDayInWeek + days + i - 1) % 7\n        dayArrays.push({\n            dayNum: i,\n            weekDay: WEEKTABLE[type].cn[weekDayFlag]\n        })\n    };\n    return dayArrays;\n}\n```\n\n### 格式化时间\n\n涉及到时间时，常常需要把时间格式进行转换，为了应对多中需求，所以自己封装了一个\n\n``` javascript\n// 参数fmt必须\n// date参数不必须，允许字符串和时间对象，不传或者传无法转换成合法时间对象的字符串则默认当前时间,\n// 年(YYYY/yyyy)固定四个占位符\n// 月(M)、日(d)、小时(h)、分(m)、秒(s)可以用 1-2个占位符,严格区分大小写，\n// 毫秒（ms/mss）最多三个占位符，分别对应56，056这种类型\n// 例子：\n// (Format(\"yyyy-MM-dd hh:mm:ss:ms\") ==> 2006-07-02 08:09:04:23\n// (Format(\"yyyy-MM-dd hh:mm:ss:mss\") ==> 2006-07-02 08:09:04:023\n// (Format(\"yyyy-M-d h:m:s:ms\")      ==> 2006-7-2 8:9:4.180\nfunction formate(fmt, date){\n    date = new Date(date).toString() === 'Invalid Date' ? new Date() : new Date(date);\n    var _rules = [{\n        rule: '[yY]{4}',\n        value: _date.getFullYear()\n    }, {\n        rule: 'M+',\n        value: _date.getMonth() + 1\n    }, {\n        rule: '[dD]+',\n        value: _date.getDate()\n    }, {\n        rule: 'h+',\n        value: _date.getHours()\n    }, {\n        rule: 'm+',\n        value: _date.getMinutes()\n    }, {\n        rule: 's+',\n        value: _date.getSeconds()\n    }, {\n        rule: 'ms{1,2}',\n        value: _date.getMilliseconds()\n    }];\n\n    _rules.forEach(function (_r){\n        const rule = _r.rule, val = _r.value;\n        fmt = fmt.replace(new RegExp(rule), function ($1) {\n            const rLen = val.toString().length, fLen = $1.length;\n            return (fLen !== 2 || rLen >= fLen) ? val : ['00', val].join().substr(rLen);\n        });\n    });\n    return fmt;\n}\n//调用：\nvar time1 = formate(\"YYYY/MM/DD hh:mm:ss\", new Date()); //2017/11/2 11:09:20\nvar time2 = formate(\"YYYY-MM-DD\", time1); //2017-11-2\nvar time3 = formate(\"MM-DD-YYYY\", time2); //11-2-2017\n```\n\n## 最后\n\n附上这些方法的源码[datepicker](https://github.com/2ue/vui/blob/master/src/utils/datepicker.js)\n基于vue实现的一个日历：\n- demo[vue-datepicker](https://2ue.github.io/vui/#/DatePicker)\n- 源码[datePickerPanel.vue](https://github.com/2ue/vui/blob/master/src/components/datePicker/datePickerPanel.vue)\n\n当然这只是最简单的日历输出，思路也是超级简单（感觉有点Low），如果有大神愿意分享它的经验欢迎，来邮~\n","slug":"how-to-make-a-kalendar","published":1,"updated":"2018-07-30T01:55:33.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swgb001u2kv7rn1ri12d","content":"<blockquote>\n<p>众所周知，虽然<code>javascript</code>中关于时间的API有不少，我们可以通过方法单独的获取年、月、日、时、分、秒、毫秒…貌似很多，最近写了一个日历（以前写的，但写得很烂，最近优化一下），所以下面简单的记录一下如何写一个日历，列出了一些我在写日历过程中自己封装的一些方法</p>\n</blockquote>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p>先来一张效果图，由于没有UI设计，所以就自己简单的设计了一个样式（好歹我也是设计专业的，虽然已不做设计很多年），虽然略丑，但重要的是功能！！！</p>\n<p><img src=\"/images/posts/datepicker.gif\" alt=\"datepicker\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一个日历到底是怎样用代码生成的？其实观察一下现有的日历展现形式，可以很快的形成思路，就是：根据计算把日期号数对应到正确的星期几上，并按照顺序逐一输出。<br>以下是我的思路:</p>\n<ul>\n<li>取得月份的天数</li>\n<li>取得月份第一天是星期几</li>\n<li>循环对应号数和星期几返回一个数组对象<ul>\n<li>返回数组对象的每一个子项至少包含：号数，星期几，然后根据情况添加：是否高亮，是否当前月，是否节日…等属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法封装\"><a href=\"#方法封装\" class=\"headerlink\" title=\"方法封装\"></a>方法封装</h2><p>注意，为了保持方便调用<code>javascript</code>的方法，以及保持输出结果符合实际，所有的方法都有如下约定：</p>\n<ul>\n<li>在计算过程中<ul>\n<li>所有的关于月份都是0~11的数字</li>\n<li>所有的关于星期都是0~6的数字</li>\n</ul>\n</li>\n<li>在输出的结果中<ul>\n<li>所有关于月份的输出默认都是1-12的数字</li>\n<li>所有关于星期的输出默认都是1-7的数字</li>\n</ul>\n</li>\n</ul>\n<p>所以在向调用方法传递参数过程中，月份以及星期几统统都需要按照实际月份减一</p>\n<h3 id=\"获取月份天数\"><a href=\"#获取月份天数\" class=\"headerlink\" title=\"获取月份天数\"></a>获取月份天数</h3><p>在<code>javascript</code>中没有直接获取月份天数的方法，但是它提供了一个<code>getDate</code>方法可以获取日期的某一天。那我们只需要获取月份的最后一天（下一个月的第0天）就可以得知这个月的天数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份，闰年不一样</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月天数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMonthDays</span>(<span class=\"params\">year, month</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month + <span class=\"number\">1</span>, <span class=\"number\">0</span>).getDate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getMonthDays(<span class=\"number\">2016</span>,<span class=\"number\">2</span>) <span class=\"comment\">//29</span></span><br><span class=\"line\">getMonthDays(<span class=\"number\">2017</span>,<span class=\"number\">2</span>) <span class=\"comment\">//28</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取星期几\"><a href=\"#获取星期几\" class=\"headerlink\" title=\"获取星期几\"></a>获取星期几</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回数字几则是星期几</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWeekday</span>(<span class=\"params\">year, month, day</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month, day).getDate() + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getWeekday(<span class=\"number\">2016</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>) <span class=\"comment\">//输出4，表示2016年11月9是星期4</span></span><br><span class=\"line\">getWeekday(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>) <span class=\"comment\">//输出5，表示2017年11月9是星期5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取月份有几个星期\"><a href=\"#获取月份有几个星期\" class=\"headerlink\" title=\"获取月份有几个星期\"></a>获取月份有几个星期</h3><p>要计算月份包含几个星期，需要两个数据：月份天数和月份第一天是星期几，就能得到想要的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月包含几个星期</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getweeksInMonth</span>(<span class=\"params\">year, month</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> days = getMonthDays(year, month);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> FirstDayWeekday = getWeekday(year, month, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(days + FirstDayWeekday);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环生成月份对象\"><a href=\"#循环生成月份对象\" class=\"headerlink\" title=\"循环生成月份对象\"></a>循环生成月份对象</h3><p>有了以上方法之后，就可以通过循环生成一个简单的月份对象了。<br>在这里需要注意，日历的排序有两种：</p>\n<ul>\n<li>每一行以星期日开头</li>\n<li>每一行以星期开头</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// day天，用来判断是否是当前天</span></span><br><span class=\"line\"><span class=\"comment\">// type表明要星期几开头，0为星期一开头，1为星期日开头，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月包含几个星期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> WEEKTABLE = [&#123;</span><br><span class=\"line\">    cn: [<span class=\"string\">'星期日'</span>, <span class=\"string\">'星期一'</span>, <span class=\"string\">'星期二'</span>, <span class=\"string\">'星期三'</span>, <span class=\"string\">'星期四'</span>, <span class=\"string\">'星期五'</span>, <span class=\"string\">'星期六'</span>],</span><br><span class=\"line\">    cns: [<span class=\"string\">'日'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>],</span><br><span class=\"line\">    en: [<span class=\"string\">'Sun'</span>, <span class=\"string\">'Mon'</span>, <span class=\"string\">'Tue'</span>, <span class=\"string\">'Wed'</span>, <span class=\"string\">'Thu'</span>, <span class=\"string\">'Fri'</span>, <span class=\"string\">'Sat'</span>]</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    cn: [<span class=\"string\">'星期一'</span>, <span class=\"string\">'星期二'</span>, <span class=\"string\">'星期三'</span>, <span class=\"string\">'星期四'</span>, <span class=\"string\">'星期五'</span>, <span class=\"string\">'星期六'</span>, <span class=\"string\">'星期日'</span>],</span><br><span class=\"line\">    cns: [<span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'日'</span>],</span><br><span class=\"line\">    en: [<span class=\"string\">'Mon'</span>, <span class=\"string\">'Tue'</span>, <span class=\"string\">'Wed'</span>, <span class=\"string\">'Thu'</span>, <span class=\"string\">'Fri'</span>, <span class=\"string\">'Sat'</span>, <span class=\"string\">'Sun'</span>]</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">getMonthDaysArray(year, month, day， type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> day === <span class=\"string\">'undefined'</span> &amp;&amp; year === YEAR &amp;&amp; month === MONTH) day = DAY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dayArrays = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> days = <span class=\"keyword\">this</span>.getMonthDays(year, month), preDays = <span class=\"keyword\">this</span>.getMonthDays(year, month - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisMonthFirstDayInWeek = <span class=\"keyword\">this</span>.getWeekday(year, month, <span class=\"number\">1</span>), thisMonthLastDayInWeek = <span class=\"keyword\">this</span>.getWeekday(year, month, days);</span><br><span class=\"line\"></span><br><span class=\"line\">    type = !type || type !== <span class=\"number\">1</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//上月在当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; thisMonthFirstDayInWeek; i++) &#123;</span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: (preDays - thisMonthFirstDayInWeek + i + <span class=\"number\">1</span>),</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[i]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= days; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> weekDayFlag = (thisMonthFirstDayInWeek + i - <span class=\"number\">1</span>) % <span class=\"number\">7</span></span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: i,</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[weekDayFlag],</span><br><span class=\"line\">            selected: i === +day,</span><br><span class=\"line\">            isThisMonth: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//下月在当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= (<span class=\"number\">6</span> - thisMonthLastDayInWeek); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> weekDayFlag = (thisMonthFirstDayInWeek + days + i - <span class=\"number\">1</span>) % <span class=\"number\">7</span></span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: i,</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[weekDayFlag]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dayArrays;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h3><p>涉及到时间时，常常需要把时间格式进行转换，为了应对多中需求，所以自己封装了一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数fmt必须</span></span><br><span class=\"line\"><span class=\"comment\">// date参数不必须，允许字符串和时间对象，不传或者传无法转换成合法时间对象的字符串则默认当前时间,</span></span><br><span class=\"line\"><span class=\"comment\">// 年(YYYY/yyyy)固定四个占位符</span></span><br><span class=\"line\"><span class=\"comment\">// 月(M)、日(d)、小时(h)、分(m)、秒(s)可以用 1-2个占位符,严格区分大小写，</span></span><br><span class=\"line\"><span class=\"comment\">// 毫秒（ms/mss）最多三个占位符，分别对应56，056这种类型</span></span><br><span class=\"line\"><span class=\"comment\">// 例子：</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-MM-dd hh:mm:ss:ms\") ==&gt; 2006-07-02 08:09:04:23</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-MM-dd hh:mm:ss:mss\") ==&gt; 2006-07-02 08:09:04:023</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-M-d h:m:s:ms\")      ==&gt; 2006-7-2 8:9:4.180</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formate</span>(<span class=\"params\">fmt, date</span>)</span>&#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date).toString() === <span class=\"string\">'Invalid Date'</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _rules = [&#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[yY]&#123;4&#125;'</span>,</span><br><span class=\"line\">        value: _date.getFullYear()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'M+'</span>,</span><br><span class=\"line\">        value: _date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[dD]+'</span>,</span><br><span class=\"line\">        value: _date.getDate()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'h+'</span>,</span><br><span class=\"line\">        value: _date.getHours()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'m+'</span>,</span><br><span class=\"line\">        value: _date.getMinutes()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'s+'</span>,</span><br><span class=\"line\">        value: _date.getSeconds()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'ms&#123;1,2&#125;'</span>,</span><br><span class=\"line\">        value: _date.getMilliseconds()</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    _rules.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_r</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rule = _r.rule, val = _r.value;</span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(rule), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rLen = val.toString().length, fLen = $<span class=\"number\">1.</span>length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (fLen !== <span class=\"number\">2</span> || rLen &gt;= fLen) ? val : [<span class=\"string\">'00'</span>, val].join().substr(rLen);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time1 = formate(<span class=\"string\">\"YYYY/MM/DD hh:mm:ss\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()); <span class=\"comment\">//2017/11/2 11:09:20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time2 = formate(<span class=\"string\">\"YYYY-MM-DD\"</span>, time1); <span class=\"comment\">//2017-11-2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time3 = formate(<span class=\"string\">\"MM-DD-YYYY\"</span>, time2); <span class=\"comment\">//11-2-2017</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>附上这些方法的源码<a href=\"https://github.com/2ue/vui/blob/master/src/utils/datepicker.js\" target=\"_blank\" rel=\"noopener\">datepicker</a><br>基于vue实现的一个日历：</p>\n<ul>\n<li>demo<a href=\"https://2ue.github.io/vui/#/DatePicker\" target=\"_blank\" rel=\"noopener\">vue-datepicker</a></li>\n<li>源码<a href=\"https://github.com/2ue/vui/blob/master/src/components/datePicker/datePickerPanel.vue\" target=\"_blank\" rel=\"noopener\">datePickerPanel.vue</a></li>\n</ul>\n<p>当然这只是最简单的日历输出，思路也是超级简单（感觉有点Low），如果有大神愿意分享它的经验欢迎，来邮~</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>众所周知，虽然<code>javascript</code>中关于时间的API有不少，我们可以通过方法单独的获取年、月、日、时、分、秒、毫秒…貌似很多，最近写了一个日历（以前写的，但写得很烂，最近优化一下），所以下面简单的记录一下如何写一个日历，列出了一些我在写日历过程中自己封装的一些方法</p>\n</blockquote>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p>先来一张效果图，由于没有UI设计，所以就自己简单的设计了一个样式（好歹我也是设计专业的，虽然已不做设计很多年），虽然略丑，但重要的是功能！！！</p>\n<p><img src=\"/images/posts/datepicker.gif\" alt=\"datepicker\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一个日历到底是怎样用代码生成的？其实观察一下现有的日历展现形式，可以很快的形成思路，就是：根据计算把日期号数对应到正确的星期几上，并按照顺序逐一输出。<br>以下是我的思路:</p>\n<ul>\n<li>取得月份的天数</li>\n<li>取得月份第一天是星期几</li>\n<li>循环对应号数和星期几返回一个数组对象<ul>\n<li>返回数组对象的每一个子项至少包含：号数，星期几，然后根据情况添加：是否高亮，是否当前月，是否节日…等属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法封装\"><a href=\"#方法封装\" class=\"headerlink\" title=\"方法封装\"></a>方法封装</h2><p>注意，为了保持方便调用<code>javascript</code>的方法，以及保持输出结果符合实际，所有的方法都有如下约定：</p>\n<ul>\n<li>在计算过程中<ul>\n<li>所有的关于月份都是0~11的数字</li>\n<li>所有的关于星期都是0~6的数字</li>\n</ul>\n</li>\n<li>在输出的结果中<ul>\n<li>所有关于月份的输出默认都是1-12的数字</li>\n<li>所有关于星期的输出默认都是1-7的数字</li>\n</ul>\n</li>\n</ul>\n<p>所以在向调用方法传递参数过程中，月份以及星期几统统都需要按照实际月份减一</p>\n<h3 id=\"获取月份天数\"><a href=\"#获取月份天数\" class=\"headerlink\" title=\"获取月份天数\"></a>获取月份天数</h3><p>在<code>javascript</code>中没有直接获取月份天数的方法，但是它提供了一个<code>getDate</code>方法可以获取日期的某一天。那我们只需要获取月份的最后一天（下一个月的第0天）就可以得知这个月的天数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份，闰年不一样</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月天数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMonthDays</span>(<span class=\"params\">year, month</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month + <span class=\"number\">1</span>, <span class=\"number\">0</span>).getDate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getMonthDays(<span class=\"number\">2016</span>,<span class=\"number\">2</span>) <span class=\"comment\">//29</span></span><br><span class=\"line\">getMonthDays(<span class=\"number\">2017</span>,<span class=\"number\">2</span>) <span class=\"comment\">//28</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取星期几\"><a href=\"#获取星期几\" class=\"headerlink\" title=\"获取星期几\"></a>获取星期几</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回数字几则是星期几</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWeekday</span>(<span class=\"params\">year, month, day</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month, day).getDate() + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getWeekday(<span class=\"number\">2016</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>) <span class=\"comment\">//输出4，表示2016年11月9是星期4</span></span><br><span class=\"line\">getWeekday(<span class=\"number\">2017</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>) <span class=\"comment\">//输出5，表示2017年11月9是星期5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取月份有几个星期\"><a href=\"#获取月份有几个星期\" class=\"headerlink\" title=\"获取月份有几个星期\"></a>获取月份有几个星期</h3><p>要计算月份包含几个星期，需要两个数据：月份天数和月份第一天是星期几，就能得到想要的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月包含几个星期</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getweeksInMonth</span>(<span class=\"params\">year, month</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> days = getMonthDays(year, month);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> FirstDayWeekday = getWeekday(year, month, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(days + FirstDayWeekday);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环生成月份对象\"><a href=\"#循环生成月份对象\" class=\"headerlink\" title=\"循环生成月份对象\"></a>循环生成月份对象</h3><p>有了以上方法之后，就可以通过循环生成一个简单的月份对象了。<br>在这里需要注意，日历的排序有两种：</p>\n<ul>\n<li>每一行以星期日开头</li>\n<li>每一行以星期开头</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// year是要获取的年份</span></span><br><span class=\"line\"><span class=\"comment\">// month是要获取的月份</span></span><br><span class=\"line\"><span class=\"comment\">// day天，用来判断是否是当前天</span></span><br><span class=\"line\"><span class=\"comment\">// type表明要星期几开头，0为星期一开头，1为星期日开头，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">// 返回当前月包含几个星期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> WEEKTABLE = [&#123;</span><br><span class=\"line\">    cn: [<span class=\"string\">'星期日'</span>, <span class=\"string\">'星期一'</span>, <span class=\"string\">'星期二'</span>, <span class=\"string\">'星期三'</span>, <span class=\"string\">'星期四'</span>, <span class=\"string\">'星期五'</span>, <span class=\"string\">'星期六'</span>],</span><br><span class=\"line\">    cns: [<span class=\"string\">'日'</span>, <span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>],</span><br><span class=\"line\">    en: [<span class=\"string\">'Sun'</span>, <span class=\"string\">'Mon'</span>, <span class=\"string\">'Tue'</span>, <span class=\"string\">'Wed'</span>, <span class=\"string\">'Thu'</span>, <span class=\"string\">'Fri'</span>, <span class=\"string\">'Sat'</span>]</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    cn: [<span class=\"string\">'星期一'</span>, <span class=\"string\">'星期二'</span>, <span class=\"string\">'星期三'</span>, <span class=\"string\">'星期四'</span>, <span class=\"string\">'星期五'</span>, <span class=\"string\">'星期六'</span>, <span class=\"string\">'星期日'</span>],</span><br><span class=\"line\">    cns: [<span class=\"string\">'一'</span>, <span class=\"string\">'二'</span>, <span class=\"string\">'三'</span>, <span class=\"string\">'四'</span>, <span class=\"string\">'五'</span>, <span class=\"string\">'六'</span>, <span class=\"string\">'日'</span>],</span><br><span class=\"line\">    en: [<span class=\"string\">'Mon'</span>, <span class=\"string\">'Tue'</span>, <span class=\"string\">'Wed'</span>, <span class=\"string\">'Thu'</span>, <span class=\"string\">'Fri'</span>, <span class=\"string\">'Sat'</span>, <span class=\"string\">'Sun'</span>]</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">getMonthDaysArray(year, month, day， type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> day === <span class=\"string\">'undefined'</span> &amp;&amp; year === YEAR &amp;&amp; month === MONTH) day = DAY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dayArrays = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> days = <span class=\"keyword\">this</span>.getMonthDays(year, month), preDays = <span class=\"keyword\">this</span>.getMonthDays(year, month - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisMonthFirstDayInWeek = <span class=\"keyword\">this</span>.getWeekday(year, month, <span class=\"number\">1</span>), thisMonthLastDayInWeek = <span class=\"keyword\">this</span>.getWeekday(year, month, days);</span><br><span class=\"line\"></span><br><span class=\"line\">    type = !type || type !== <span class=\"number\">1</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//上月在当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; thisMonthFirstDayInWeek; i++) &#123;</span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: (preDays - thisMonthFirstDayInWeek + i + <span class=\"number\">1</span>),</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[i]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= days; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> weekDayFlag = (thisMonthFirstDayInWeek + i - <span class=\"number\">1</span>) % <span class=\"number\">7</span></span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: i,</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[weekDayFlag],</span><br><span class=\"line\">            selected: i === +day,</span><br><span class=\"line\">            isThisMonth: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//下月在当月日历面板中的排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= (<span class=\"number\">6</span> - thisMonthLastDayInWeek); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> weekDayFlag = (thisMonthFirstDayInWeek + days + i - <span class=\"number\">1</span>) % <span class=\"number\">7</span></span><br><span class=\"line\">        dayArrays.push(&#123;</span><br><span class=\"line\">            dayNum: i,</span><br><span class=\"line\">            weekDay: WEEKTABLE[type].cn[weekDayFlag]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dayArrays;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h3><p>涉及到时间时，常常需要把时间格式进行转换，为了应对多中需求，所以自己封装了一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数fmt必须</span></span><br><span class=\"line\"><span class=\"comment\">// date参数不必须，允许字符串和时间对象，不传或者传无法转换成合法时间对象的字符串则默认当前时间,</span></span><br><span class=\"line\"><span class=\"comment\">// 年(YYYY/yyyy)固定四个占位符</span></span><br><span class=\"line\"><span class=\"comment\">// 月(M)、日(d)、小时(h)、分(m)、秒(s)可以用 1-2个占位符,严格区分大小写，</span></span><br><span class=\"line\"><span class=\"comment\">// 毫秒（ms/mss）最多三个占位符，分别对应56，056这种类型</span></span><br><span class=\"line\"><span class=\"comment\">// 例子：</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-MM-dd hh:mm:ss:ms\") ==&gt; 2006-07-02 08:09:04:23</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-MM-dd hh:mm:ss:mss\") ==&gt; 2006-07-02 08:09:04:023</span></span><br><span class=\"line\"><span class=\"comment\">// (Format(\"yyyy-M-d h:m:s:ms\")      ==&gt; 2006-7-2 8:9:4.180</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formate</span>(<span class=\"params\">fmt, date</span>)</span>&#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date).toString() === <span class=\"string\">'Invalid Date'</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _rules = [&#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[yY]&#123;4&#125;'</span>,</span><br><span class=\"line\">        value: _date.getFullYear()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'M+'</span>,</span><br><span class=\"line\">        value: _date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[dD]+'</span>,</span><br><span class=\"line\">        value: _date.getDate()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'h+'</span>,</span><br><span class=\"line\">        value: _date.getHours()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'m+'</span>,</span><br><span class=\"line\">        value: _date.getMinutes()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'s+'</span>,</span><br><span class=\"line\">        value: _date.getSeconds()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'ms&#123;1,2&#125;'</span>,</span><br><span class=\"line\">        value: _date.getMilliseconds()</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    _rules.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_r</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rule = _r.rule, val = _r.value;</span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(rule), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rLen = val.toString().length, fLen = $<span class=\"number\">1.</span>length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (fLen !== <span class=\"number\">2</span> || rLen &gt;= fLen) ? val : [<span class=\"string\">'00'</span>, val].join().substr(rLen);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time1 = formate(<span class=\"string\">\"YYYY/MM/DD hh:mm:ss\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()); <span class=\"comment\">//2017/11/2 11:09:20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time2 = formate(<span class=\"string\">\"YYYY-MM-DD\"</span>, time1); <span class=\"comment\">//2017-11-2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time3 = formate(<span class=\"string\">\"MM-DD-YYYY\"</span>, time2); <span class=\"comment\">//11-2-2017</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>附上这些方法的源码<a href=\"https://github.com/2ue/vui/blob/master/src/utils/datepicker.js\" target=\"_blank\" rel=\"noopener\">datepicker</a><br>基于vue实现的一个日历：</p>\n<ul>\n<li>demo<a href=\"https://2ue.github.io/vui/#/DatePicker\" target=\"_blank\" rel=\"noopener\">vue-datepicker</a></li>\n<li>源码<a href=\"https://github.com/2ue/vui/blob/master/src/components/datePicker/datePickerPanel.vue\" target=\"_blank\" rel=\"noopener\">datePickerPanel.vue</a></li>\n</ul>\n<p>当然这只是最简单的日历输出，思路也是超级简单（感觉有点Low），如果有大神愿意分享它的经验欢迎，来邮~</p>\n"},{"title":"Javascript系列 - Javascript数组方法","date":"2016-08-11T13:22:35.000Z","author":"J.2ue","_content":"\n> Javascript的Array(数组对象)方法整理，对比他们的功能，返回值，分析他们的参数，以及具体的作用。\n\n## length：获取数组长度\n\n> - Method:  Arry.length\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  无\n> - Return:  返回被引用数组长度\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.length //返回5，arry = [1,6,8,'2ue','o90']\n```\n\n## join：连接数组内各元素组成一个字符串\n\n> - Method:  Arry.join(str)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  `str`非必需\n>   - `str`不存在时(不传递str)以默认逗号连接元素\n>   - `str`可以为任意字符串，也可以为空('')（字符串为空时，各元素之间无连接符号）\n> - Return:  返回连接后的字符串\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.join() //返回字符串1,6,8,2ue,o90，arry = [1,6,8,'2ue','o90']\narry.join('-') //返回字符串1-6-8-2ue-o90，arry = [1,6,8,'2ue','o90']\narry.join('') //返回字符串1682ueo90，arry = [1,6,8,'2ue','o90']\n```\n\n**注意如果需要加数组arry以逗号形式展示到页面，则不需要`.join()`方法，因为javascript的赋值操作会自动调用`.toString()`方法**，如\n\n``` javascript\n//JS\nvar arry = [1,6,8,'2ue','o90']\nvar divBox = document.getElementById('div');\ndivBox.innerHTML = arry;\n\n//前面赋值的操作将会调用toString方法，因此\nconsole.log(divBox) //<div id=\"div\">1,6,8,2ue,o90</div>\n```\n\n## push：在数组尾部添加一个元素\n\n> - Method:  Arry.push(value,...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回被引用数组长度，无实际意义\n>   - `value`可以为`合法的`布尔值，字符串，数组，对象，数字，`null`，`undefined`，空\n>   - 其中，也可以接收多个参数\n> - Return:  返回被引用数组长度\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.push() //返回5，arry = [1,6,8,'2ue','o90']  实际没有任何意义\narry.push(true) //返回6，arry = [1,6,8,'2ue','o90',true]\narry.push('dmw') //返回7，arry = [1,6,8,'2ue','o90',true,'dmw']\narry.push('') //返回8，arry = [1,6,8,'2ue','o90',true,'dmw','']\narry.push(3) //返回9，arry = [1,6,8,'2ue','o90',true,'dmw','',3]\narry.push(undefined) //返回10，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined]\narry.push(null) //返回11，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null]\narry.push(['9','8']) //返回12，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8']]\narry.push({key:'hah'}) //返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],{key:'hah'}]\n//接收多个参数\nvar arry = [1,6,8,'2ue','o90']\narry.push(true,'dmw','',3,undefined,null,['9','8'],{key:'hah'})\n//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],{key:'hah'}]\n```\n\n## unshift：在数组尾部添加一个元素\n\n> - Method:  Arry.unshift(value,...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回被引用数组长度，无实际意\n>   - `value`可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空\n>   - 其中也可以接收多个参数。\n> - Return:  返回被引用数组长度\n\n同`.push()`方法\n\n## concat：在尾部添加元素到数组\n\n> - Method:  Arry.concat(value,...)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回组成的新数组，无实际意\n>   - `value`可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空，也可以接收多个参数。\n>   - 其中当`value`为数组时，那么添加的是数组中的元素，而不是数组，所以可以用`.concat()`来连接数组\n> - Return:  返回组成的新数组\n\n``` javascript\n//返回值为一个新的数组，不改变原数组\n//参数为数组时\nvar arry = [1,6,8,'2ue','o90']\nvar newArry = arry.concat(['lalal','mof'])\n//返回值 newArry = [1,6,8,'2ue','o90','lalal','mof']\n//原数组 arry = [1,6,8,'2ue','o90']\n//其它情况同push方法一致\n```\n\n## pop：删除最后一个元素\n\n> - Method:  Arry.pop()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回被删除(最后一个)元素，被引用数组为空，不改变数组，返回`undefined`\n\n``` javascript\nvar arry = [1]\narry.pop() //返回1，arry = []\narry.pop() //返回undefined，arry = []\n```\n\n## shift：删除第一个元素\n\n> - Method:  Arry.shift()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回被删除(第一个)元素，被引用数组为空，不改变数组，返回`undefined`\n\n同`.pop()`\n\n## reverse：颠倒数组元素顺序\n\n> - Method:  Arry.reverse()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回对数组的引用，返回值为数组类型\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.reverse() //返回['o90','2ue',8,6,1] arry = ['o90','2ue',8,6,1]\n```\n\n## sort：数组元素排序\n\n> - Method:  Arry.sort(fun)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  fun非必需\n>   - **fun如果为空，那么默认安装字符编码的顺序进行排序**\n>   - **如不为空，那么fun必须为函数类型**。\n>   - Arry.sort(fun(value1,value2){})，fun函数参数`value1` 的值为`Arry[i]`，`value2` 的值为`Arry[i+1]`，其中`0< = i < Arry.length - 1`。所以请注意，`.sort()`方法排序会对被引用数组进行遍历，遍历的次数为`Arry.length - 1`，而非`Arry.length`。因为在`Arry.length - 1`次时，排序其实就已经完成了。\n> - Return:  返回对数组的引用，返回值为数组类型\n\n``` javascript\nvar arry = [1,'2ue','o90',6,890,9,7990]\narry.sort()//返回[1, \"2ue\", 6, 7990, 890, 9, \"o90\"] arry = [1, \"2ue\", 6, 7990, 890, 9, \"o90\"]\nvar arry = [1,65443,6,890,9,7990]\narry.sort(function(value1,value2){\n    return value2-value1\n})\n//返回[65443, 7990, 890, 9, 6, 1] arry = [65443, 7990, 890, 9, 6, 1]\n```\n\n## slice：根据索引返回数组的一部分\n\n> - Method:  Arry.slice(satrtIndex,endIndex)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:\n>   - `satrtIndex`开始索引(**不包含开始索引**)，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - `endIndex`结束索引(**不包含结束索引**)，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - 最终`satrtIndex`的实际值必须小于`endIndex`，且他们所在的那段索引必须与被引用数组的索引有交集，否则返回空数组。\n> - Return:  根据索引返回数组的一部分，返回值为数组类型\n\n``` javascript\n//被引用数组值不会改变\nvar arry = [1,6,8,'2ue','o90']\narry.slice(1,3) //返回[6,8,'2ue']\narry.slice(3,1) //返回[]\narry.slice(-1,2) //返回[]\narry.slice(1,-2) //返回[6,8]\narry.slice(1,-4) //返回[]\narry.slice(-3,-1) //返回[6,8,'2ue']\narry.slice(-1,-3) //返回[]\n```\n\n## splice：移除元素\n\n> - Method:  Arry.splice(satrtIndex, deleteCount, value, ...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:\n>   - `satrtIndex`开始索引，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - `deleteCount`将删除的个数，非必须，且必须为`nubmer`类型。从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素，小于等于0将不会删除。\n>   - `value`要插入数组的零个或多个值，从start所指的下标处开始插入。可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空，可接收多个参数。\n> - Return:  被移除元素组成的数组\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90',4,5,6,7]\narry.splice(7)  // 返回 [6,7]; arry = [1,6,8,'2ue','o90',4,5]\narry.splice(1,2)  // 返回 [6,8]; arry = [1,'2ue','o90',4,5]\narry.splice(-1,1)  //返回 [5]; arry = [1,'o90',4]\narry.splice(0,0,2,3,[8,9])  // 返回 []; arry = [2,3,[8,9],1,'o90',4]\n```\n\n## 来一张表\n\n|     方法名     |        功能         | 原数组是否改变 |      返回      |\n| :---------: | :---------------: | :-----: | :----------: |\n| **length**  |      获取数组长度       |   NO    |   被引用数组长度    |\n|  **join**   | 将数组元素连接起来以构建一个字符串 |   NO    |   转换后的字符串    |\n|  **push**   |      在尾部添加元素      | **YES** |    新数组长度     |\n| **unshift** |      在头部添加元素      | **YES** |    新数组长度     |\n| **concat**  |      在尾部添加元素      |   NO    |     新数组      |\n|   **pop**   |     删除最后一个元素      | **YES** |    被删除元素     |\n|  **shift**  |      删除第一个元素      | **YES** |    被删除元素     |\n| **reverse** |     颠倒数组元素顺序      | **YES** |    对数组的引用    |\n|  **sort**   |      数组元素排序       | **YES** |    对数组的引用    |\n|  **slice**  |   根据索引返回数组的一部分    |   NO    | 根据索引返回数组的一部分 |\n| **splice**  |   插入、删除或替换数组的元素   | **YES** |  被移除元素组成的数组  |\n","source":"_posts/javascript-array-method.md","raw":"---\ntitle: Javascript系列 - Javascript数组方法\ndate: 2016-8-11 21:22:35\nauthor: J.2ue\ntags:\n- Array\n- 数组\ncategories:\n- javascript\n---\n\n> Javascript的Array(数组对象)方法整理，对比他们的功能，返回值，分析他们的参数，以及具体的作用。\n\n## length：获取数组长度\n\n> - Method:  Arry.length\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  无\n> - Return:  返回被引用数组长度\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.length //返回5，arry = [1,6,8,'2ue','o90']\n```\n\n## join：连接数组内各元素组成一个字符串\n\n> - Method:  Arry.join(str)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  `str`非必需\n>   - `str`不存在时(不传递str)以默认逗号连接元素\n>   - `str`可以为任意字符串，也可以为空('')（字符串为空时，各元素之间无连接符号）\n> - Return:  返回连接后的字符串\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.join() //返回字符串1,6,8,2ue,o90，arry = [1,6,8,'2ue','o90']\narry.join('-') //返回字符串1-6-8-2ue-o90，arry = [1,6,8,'2ue','o90']\narry.join('') //返回字符串1682ueo90，arry = [1,6,8,'2ue','o90']\n```\n\n**注意如果需要加数组arry以逗号形式展示到页面，则不需要`.join()`方法，因为javascript的赋值操作会自动调用`.toString()`方法**，如\n\n``` javascript\n//JS\nvar arry = [1,6,8,'2ue','o90']\nvar divBox = document.getElementById('div');\ndivBox.innerHTML = arry;\n\n//前面赋值的操作将会调用toString方法，因此\nconsole.log(divBox) //<div id=\"div\">1,6,8,2ue,o90</div>\n```\n\n## push：在数组尾部添加一个元素\n\n> - Method:  Arry.push(value,...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回被引用数组长度，无实际意义\n>   - `value`可以为`合法的`布尔值，字符串，数组，对象，数字，`null`，`undefined`，空\n>   - 其中，也可以接收多个参数\n> - Return:  返回被引用数组长度\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.push() //返回5，arry = [1,6,8,'2ue','o90']  实际没有任何意义\narry.push(true) //返回6，arry = [1,6,8,'2ue','o90',true]\narry.push('dmw') //返回7，arry = [1,6,8,'2ue','o90',true,'dmw']\narry.push('') //返回8，arry = [1,6,8,'2ue','o90',true,'dmw','']\narry.push(3) //返回9，arry = [1,6,8,'2ue','o90',true,'dmw','',3]\narry.push(undefined) //返回10，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined]\narry.push(null) //返回11，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null]\narry.push(['9','8']) //返回12，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8']]\narry.push({key:'hah'}) //返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],{key:'hah'}]\n//接收多个参数\nvar arry = [1,6,8,'2ue','o90']\narry.push(true,'dmw','',3,undefined,null,['9','8'],{key:'hah'})\n//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],{key:'hah'}]\n```\n\n## unshift：在数组尾部添加一个元素\n\n> - Method:  Arry.unshift(value,...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回被引用数组长度，无实际意\n>   - `value`可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空\n>   - 其中也可以接收多个参数。\n> - Return:  返回被引用数组长度\n\n同`.push()`方法\n\n## concat：在尾部添加元素到数组\n\n> - Method:  Arry.concat(value,...)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:  `value`非必需。\n>   - `value`不存在(不传递str)返回组成的新数组，无实际意\n>   - `value`可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空，也可以接收多个参数。\n>   - 其中当`value`为数组时，那么添加的是数组中的元素，而不是数组，所以可以用`.concat()`来连接数组\n> - Return:  返回组成的新数组\n\n``` javascript\n//返回值为一个新的数组，不改变原数组\n//参数为数组时\nvar arry = [1,6,8,'2ue','o90']\nvar newArry = arry.concat(['lalal','mof'])\n//返回值 newArry = [1,6,8,'2ue','o90','lalal','mof']\n//原数组 arry = [1,6,8,'2ue','o90']\n//其它情况同push方法一致\n```\n\n## pop：删除最后一个元素\n\n> - Method:  Arry.pop()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回被删除(最后一个)元素，被引用数组为空，不改变数组，返回`undefined`\n\n``` javascript\nvar arry = [1]\narry.pop() //返回1，arry = []\narry.pop() //返回undefined，arry = []\n```\n\n## shift：删除第一个元素\n\n> - Method:  Arry.shift()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回被删除(第一个)元素，被引用数组为空，不改变数组，返回`undefined`\n\n同`.pop()`\n\n## reverse：颠倒数组元素顺序\n\n> - Method:  Arry.reverse()\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  无\n> - Return:  返回对数组的引用，返回值为数组类型\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90']\narry.reverse() //返回['o90','2ue',8,6,1] arry = ['o90','2ue',8,6,1]\n```\n\n## sort：数组元素排序\n\n> - Method:  Arry.sort(fun)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:  fun非必需\n>   - **fun如果为空，那么默认安装字符编码的顺序进行排序**\n>   - **如不为空，那么fun必须为函数类型**。\n>   - Arry.sort(fun(value1,value2){})，fun函数参数`value1` 的值为`Arry[i]`，`value2` 的值为`Arry[i+1]`，其中`0< = i < Arry.length - 1`。所以请注意，`.sort()`方法排序会对被引用数组进行遍历，遍历的次数为`Arry.length - 1`，而非`Arry.length`。因为在`Arry.length - 1`次时，排序其实就已经完成了。\n> - Return:  返回对数组的引用，返回值为数组类型\n\n``` javascript\nvar arry = [1,'2ue','o90',6,890,9,7990]\narry.sort()//返回[1, \"2ue\", 6, 7990, 890, 9, \"o90\"] arry = [1, \"2ue\", 6, 7990, 890, 9, \"o90\"]\nvar arry = [1,65443,6,890,9,7990]\narry.sort(function(value1,value2){\n    return value2-value1\n})\n//返回[65443, 7990, 890, 9, 6, 1] arry = [65443, 7990, 890, 9, 6, 1]\n```\n\n## slice：根据索引返回数组的一部分\n\n> - Method:  Arry.slice(satrtIndex,endIndex)\n> - **被引用数组(Arry)是否改变:  NO**\n> - Arguments:\n>   - `satrtIndex`开始索引(**不包含开始索引**)，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - `endIndex`结束索引(**不包含结束索引**)，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - 最终`satrtIndex`的实际值必须小于`endIndex`，且他们所在的那段索引必须与被引用数组的索引有交集，否则返回空数组。\n> - Return:  根据索引返回数组的一部分，返回值为数组类型\n\n``` javascript\n//被引用数组值不会改变\nvar arry = [1,6,8,'2ue','o90']\narry.slice(1,3) //返回[6,8,'2ue']\narry.slice(3,1) //返回[]\narry.slice(-1,2) //返回[]\narry.slice(1,-2) //返回[6,8]\narry.slice(1,-4) //返回[]\narry.slice(-3,-1) //返回[6,8,'2ue']\narry.slice(-1,-3) //返回[]\n```\n\n## splice：移除元素\n\n> - Method:  Arry.splice(satrtIndex, deleteCount, value, ...)\n> - **被引用数组(Arry)是否改变:  YES**\n> - Arguments:\n>   - `satrtIndex`开始索引，必须，且必须为`nubmer`类型，正负皆可。为正或者`0(0,+0,-0)`表示从数组正向开始索引，为负表示从方向开始索引(**-1表示倒数的0**)。\n>   - `deleteCount`将删除的个数，非必须，且必须为`nubmer`类型。从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素，小于等于0将不会删除。\n>   - `value`要插入数组的零个或多个值，从start所指的下标处开始插入。可以为`合法的`布尔，字符串，数组，对象，数字，`null`，`undefined`，空，可接收多个参数。\n> - Return:  被移除元素组成的数组\n\n``` javascript\nvar arry = [1,6,8,'2ue','o90',4,5,6,7]\narry.splice(7)  // 返回 [6,7]; arry = [1,6,8,'2ue','o90',4,5]\narry.splice(1,2)  // 返回 [6,8]; arry = [1,'2ue','o90',4,5]\narry.splice(-1,1)  //返回 [5]; arry = [1,'o90',4]\narry.splice(0,0,2,3,[8,9])  // 返回 []; arry = [2,3,[8,9],1,'o90',4]\n```\n\n## 来一张表\n\n|     方法名     |        功能         | 原数组是否改变 |      返回      |\n| :---------: | :---------------: | :-----: | :----------: |\n| **length**  |      获取数组长度       |   NO    |   被引用数组长度    |\n|  **join**   | 将数组元素连接起来以构建一个字符串 |   NO    |   转换后的字符串    |\n|  **push**   |      在尾部添加元素      | **YES** |    新数组长度     |\n| **unshift** |      在头部添加元素      | **YES** |    新数组长度     |\n| **concat**  |      在尾部添加元素      |   NO    |     新数组      |\n|   **pop**   |     删除最后一个元素      | **YES** |    被删除元素     |\n|  **shift**  |      删除第一个元素      | **YES** |    被删除元素     |\n| **reverse** |     颠倒数组元素顺序      | **YES** |    对数组的引用    |\n|  **sort**   |      数组元素排序       | **YES** |    对数组的引用    |\n|  **slice**  |   根据索引返回数组的一部分    |   NO    | 根据索引返回数组的一部分 |\n| **splice**  |   插入、删除或替换数组的元素   | **YES** |  被移除元素组成的数组  |\n","slug":"javascript-array-method","published":1,"updated":"2018-07-30T01:55:33.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swgc001w2kv7yk87m43f","content":"<blockquote>\n<p>Javascript的Array(数组对象)方法整理，对比他们的功能，返回值，分析他们的参数，以及具体的作用。</p>\n</blockquote>\n<h2 id=\"length：获取数组长度\"><a href=\"#length：获取数组长度\" class=\"headerlink\" title=\"length：获取数组长度\"></a>length：获取数组长度</h2><blockquote>\n<ul>\n<li>Method:  Arry.length</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.length <span class=\"comment\">//返回5，arry = [1,6,8,'2ue','o90']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"join：连接数组内各元素组成一个字符串\"><a href=\"#join：连接数组内各元素组成一个字符串\" class=\"headerlink\" title=\"join：连接数组内各元素组成一个字符串\"></a>join：连接数组内各元素组成一个字符串</h2><blockquote>\n<ul>\n<li>Method:  Arry.join(str)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  <code>str</code>非必需<ul>\n<li><code>str</code>不存在时(不传递str)以默认逗号连接元素</li>\n<li><code>str</code>可以为任意字符串，也可以为空(‘’)（字符串为空时，各元素之间无连接符号）</li>\n</ul>\n</li>\n<li>Return:  返回连接后的字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.join() <span class=\"comment\">//返回字符串1,6,8,2ue,o90，arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\">arry.join(<span class=\"string\">'-'</span>) <span class=\"comment\">//返回字符串1-6-8-2ue-o90，arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\">arry.join(<span class=\"string\">''</span>) <span class=\"comment\">//返回字符串1682ueo90，arry = [1,6,8,'2ue','o90']</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意如果需要加数组arry以逗号形式展示到页面，则不需要<code>.join()</code>方法，因为javascript的赋值操作会自动调用<code>.toString()</code>方法</strong>，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> divBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">divBox.innerHTML = arry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前面赋值的操作将会调用toString方法，因此</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(divBox) <span class=\"comment\">//&lt;div id=\"div\"&gt;1,6,8,2ue,o90&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"push：在数组尾部添加一个元素\"><a href=\"#push：在数组尾部添加一个元素\" class=\"headerlink\" title=\"push：在数组尾部添加一个元素\"></a>push：在数组尾部添加一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.push(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意义</li>\n<li><code>value</code>可以为<code>合法的</code>布尔值，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>\n<li>其中，也可以接收多个参数</li>\n</ul>\n</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.push() <span class=\"comment\">//返回5，arry = [1,6,8,'2ue','o90']  实际没有任何意义</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">true</span>) <span class=\"comment\">//返回6，arry = [1,6,8,'2ue','o90',true]</span></span><br><span class=\"line\">arry.push(<span class=\"string\">'dmw'</span>) <span class=\"comment\">//返回7，arry = [1,6,8,'2ue','o90',true,'dmw']</span></span><br><span class=\"line\">arry.push(<span class=\"string\">''</span>) <span class=\"comment\">//返回8，arry = [1,6,8,'2ue','o90',true,'dmw','']</span></span><br><span class=\"line\">arry.push(<span class=\"number\">3</span>) <span class=\"comment\">//返回9，arry = [1,6,8,'2ue','o90',true,'dmw','',3]</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">undefined</span>) <span class=\"comment\">//返回10，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined]</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">null</span>) <span class=\"comment\">//返回11，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null]</span></span><br><span class=\"line\">arry.push([<span class=\"string\">'9'</span>,<span class=\"string\">'8'</span>]) <span class=\"comment\">//返回12，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8']]</span></span><br><span class=\"line\">arry.push(&#123;<span class=\"attr\">key</span>:<span class=\"string\">'hah'</span>&#125;) <span class=\"comment\">//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],&#123;key:'hah'&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">//接收多个参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.push(<span class=\"literal\">true</span>,<span class=\"string\">'dmw'</span>,<span class=\"string\">''</span>,<span class=\"number\">3</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>,[<span class=\"string\">'9'</span>,<span class=\"string\">'8'</span>],&#123;<span class=\"attr\">key</span>:<span class=\"string\">'hah'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],&#123;key:'hah'&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"unshift：在数组尾部添加一个元素\"><a href=\"#unshift：在数组尾部添加一个元素\" class=\"headerlink\" title=\"unshift：在数组尾部添加一个元素\"></a>unshift：在数组尾部添加一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.unshift(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意</li>\n<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>\n<li>其中也可以接收多个参数。</li>\n</ul>\n</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<p>同<code>.push()</code>方法</p>\n<h2 id=\"concat：在尾部添加元素到数组\"><a href=\"#concat：在尾部添加元素到数组\" class=\"headerlink\" title=\"concat：在尾部添加元素到数组\"></a>concat：在尾部添加元素到数组</h2><blockquote>\n<ul>\n<li>Method:  Arry.concat(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回组成的新数组，无实际意</li>\n<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，也可以接收多个参数。</li>\n<li>其中当<code>value</code>为数组时，那么添加的是数组中的元素，而不是数组，所以可以用<code>.concat()</code>来连接数组</li>\n</ul>\n</li>\n<li>Return:  返回组成的新数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回值为一个新的数组，不改变原数组</span></span><br><span class=\"line\"><span class=\"comment\">//参数为数组时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArry = arry.concat([<span class=\"string\">'lalal'</span>,<span class=\"string\">'mof'</span>])</span><br><span class=\"line\"><span class=\"comment\">//返回值 newArry = [1,6,8,'2ue','o90','lalal','mof']</span></span><br><span class=\"line\"><span class=\"comment\">//原数组 arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\"><span class=\"comment\">//其它情况同push方法一致</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pop：删除最后一个元素\"><a href=\"#pop：删除最后一个元素\" class=\"headerlink\" title=\"pop：删除最后一个元素\"></a>pop：删除最后一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.pop()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被删除(最后一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>]</span><br><span class=\"line\">arry.pop() <span class=\"comment\">//返回1，arry = []</span></span><br><span class=\"line\">arry.pop() <span class=\"comment\">//返回undefined，arry = []</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"shift：删除第一个元素\"><a href=\"#shift：删除第一个元素\" class=\"headerlink\" title=\"shift：删除第一个元素\"></a>shift：删除第一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.shift()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被删除(第一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>\n</ul>\n</blockquote>\n<p>同<code>.pop()</code></p>\n<h2 id=\"reverse：颠倒数组元素顺序\"><a href=\"#reverse：颠倒数组元素顺序\" class=\"headerlink\" title=\"reverse：颠倒数组元素顺序\"></a>reverse：颠倒数组元素顺序</h2><blockquote>\n<ul>\n<li>Method:  Arry.reverse()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回对数组的引用，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.reverse() <span class=\"comment\">//返回['o90','2ue',8,6,1] arry = ['o90','2ue',8,6,1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"sort：数组元素排序\"><a href=\"#sort：数组元素排序\" class=\"headerlink\" title=\"sort：数组元素排序\"></a>sort：数组元素排序</h2><blockquote>\n<ul>\n<li>Method:  Arry.sort(fun)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  fun非必需<ul>\n<li><strong>fun如果为空，那么默认安装字符编码的顺序进行排序</strong></li>\n<li><strong>如不为空，那么fun必须为函数类型</strong>。</li>\n<li>Arry.sort(fun(value1,value2){})，fun函数参数<code>value1</code> 的值为<code>Arry[i]</code>，<code>value2</code> 的值为<code>Arry[i+1]</code>，其中<code>0&lt; = i &lt; Arry.length - 1</code>。所以请注意，<code>.sort()</code>方法排序会对被引用数组进行遍历，遍历的次数为<code>Arry.length - 1</code>，而非<code>Arry.length</code>。因为在<code>Arry.length - 1</code>次时，排序其实就已经完成了。</li>\n</ul>\n</li>\n<li>Return:  返回对数组的引用，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>,<span class=\"number\">6</span>,<span class=\"number\">890</span>,<span class=\"number\">9</span>,<span class=\"number\">7990</span>]</span><br><span class=\"line\">arry.sort()<span class=\"comment\">//返回[1, \"2ue\", 6, 7990, 890, 9, \"o90\"] arry = [1, \"2ue\", 6, 7990, 890, 9, \"o90\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">65443</span>,<span class=\"number\">6</span>,<span class=\"number\">890</span>,<span class=\"number\">9</span>,<span class=\"number\">7990</span>]</span><br><span class=\"line\">arry.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value2-value1</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//返回[65443, 7990, 890, 9, 6, 1] arry = [65443, 7990, 890, 9, 6, 1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"slice：根据索引返回数组的一部分\"><a href=\"#slice：根据索引返回数组的一部分\" class=\"headerlink\" title=\"slice：根据索引返回数组的一部分\"></a>slice：根据索引返回数组的一部分</h2><blockquote>\n<ul>\n<li>Method:  Arry.slice(satrtIndex,endIndex)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:<ul>\n<li><code>satrtIndex</code>开始索引(<strong>不包含开始索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li><code>endIndex</code>结束索引(<strong>不包含结束索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li>最终<code>satrtIndex</code>的实际值必须小于<code>endIndex</code>，且他们所在的那段索引必须与被引用数组的索引有交集，否则返回空数组。</li>\n</ul>\n</li>\n<li>Return:  根据索引返回数组的一部分，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被引用数组值不会改变</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"comment\">//返回[6,8,'2ue']</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">3</span>,<span class=\"number\">1</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">-2</span>) <span class=\"comment\">//返回[6,8]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-3</span>,<span class=\"number\">-1</span>) <span class=\"comment\">//返回[6,8,'2ue']</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-1</span>,<span class=\"number\">-3</span>) <span class=\"comment\">//返回[]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"splice：移除元素\"><a href=\"#splice：移除元素\" class=\"headerlink\" title=\"splice：移除元素\"></a>splice：移除元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.splice(satrtIndex, deleteCount, value, …)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:<ul>\n<li><code>satrtIndex</code>开始索引，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li><code>deleteCount</code>将删除的个数，非必须，且必须为<code>nubmer</code>类型。从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素，小于等于0将不会删除。</li>\n<li><code>value</code>要插入数组的零个或多个值，从start所指的下标处开始插入。可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，可接收多个参数。</li>\n</ul>\n</li>\n<li>Return:  被移除元素组成的数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">arry.splice(<span class=\"number\">7</span>)  <span class=\"comment\">// 返回 [6,7]; arry = [1,6,8,'2ue','o90',4,5]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 返回 [6,8]; arry = [1,'2ue','o90',4,5]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">-1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">//返回 [5]; arry = [1,'o90',4]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">8</span>,<span class=\"number\">9</span>])  <span class=\"comment\">// 返回 []; arry = [2,3,[8,9],1,'o90',4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"来一张表\"><a href=\"#来一张表\" class=\"headerlink\" title=\"来一张表\"></a>来一张表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">原数组是否改变</th>\n<th style=\"text-align:center\">返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>length</strong></td>\n<td style=\"text-align:center\">获取数组长度</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">被引用数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>join</strong></td>\n<td style=\"text-align:center\">将数组元素连接起来以构建一个字符串</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">转换后的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>push</strong></td>\n<td style=\"text-align:center\">在尾部添加元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">新数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>unshift</strong></td>\n<td style=\"text-align:center\">在头部添加元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">新数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>concat</strong></td>\n<td style=\"text-align:center\">在尾部添加元素</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">新数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>pop</strong></td>\n<td style=\"text-align:center\">删除最后一个元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被删除元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>shift</strong></td>\n<td style=\"text-align:center\">删除第一个元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被删除元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>reverse</strong></td>\n<td style=\"text-align:center\">颠倒数组元素顺序</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">对数组的引用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>sort</strong></td>\n<td style=\"text-align:center\">数组元素排序</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">对数组的引用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>slice</strong></td>\n<td style=\"text-align:center\">根据索引返回数组的一部分</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">根据索引返回数组的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>splice</strong></td>\n<td style=\"text-align:center\">插入、删除或替换数组的元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被移除元素组成的数组</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Javascript的Array(数组对象)方法整理，对比他们的功能，返回值，分析他们的参数，以及具体的作用。</p>\n</blockquote>\n<h2 id=\"length：获取数组长度\"><a href=\"#length：获取数组长度\" class=\"headerlink\" title=\"length：获取数组长度\"></a>length：获取数组长度</h2><blockquote>\n<ul>\n<li>Method:  Arry.length</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.length <span class=\"comment\">//返回5，arry = [1,6,8,'2ue','o90']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"join：连接数组内各元素组成一个字符串\"><a href=\"#join：连接数组内各元素组成一个字符串\" class=\"headerlink\" title=\"join：连接数组内各元素组成一个字符串\"></a>join：连接数组内各元素组成一个字符串</h2><blockquote>\n<ul>\n<li>Method:  Arry.join(str)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  <code>str</code>非必需<ul>\n<li><code>str</code>不存在时(不传递str)以默认逗号连接元素</li>\n<li><code>str</code>可以为任意字符串，也可以为空(‘’)（字符串为空时，各元素之间无连接符号）</li>\n</ul>\n</li>\n<li>Return:  返回连接后的字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.join() <span class=\"comment\">//返回字符串1,6,8,2ue,o90，arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\">arry.join(<span class=\"string\">'-'</span>) <span class=\"comment\">//返回字符串1-6-8-2ue-o90，arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\">arry.join(<span class=\"string\">''</span>) <span class=\"comment\">//返回字符串1682ueo90，arry = [1,6,8,'2ue','o90']</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意如果需要加数组arry以逗号形式展示到页面，则不需要<code>.join()</code>方法，因为javascript的赋值操作会自动调用<code>.toString()</code>方法</strong>，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JS</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> divBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">divBox.innerHTML = arry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前面赋值的操作将会调用toString方法，因此</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(divBox) <span class=\"comment\">//&lt;div id=\"div\"&gt;1,6,8,2ue,o90&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"push：在数组尾部添加一个元素\"><a href=\"#push：在数组尾部添加一个元素\" class=\"headerlink\" title=\"push：在数组尾部添加一个元素\"></a>push：在数组尾部添加一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.push(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意义</li>\n<li><code>value</code>可以为<code>合法的</code>布尔值，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>\n<li>其中，也可以接收多个参数</li>\n</ul>\n</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.push() <span class=\"comment\">//返回5，arry = [1,6,8,'2ue','o90']  实际没有任何意义</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">true</span>) <span class=\"comment\">//返回6，arry = [1,6,8,'2ue','o90',true]</span></span><br><span class=\"line\">arry.push(<span class=\"string\">'dmw'</span>) <span class=\"comment\">//返回7，arry = [1,6,8,'2ue','o90',true,'dmw']</span></span><br><span class=\"line\">arry.push(<span class=\"string\">''</span>) <span class=\"comment\">//返回8，arry = [1,6,8,'2ue','o90',true,'dmw','']</span></span><br><span class=\"line\">arry.push(<span class=\"number\">3</span>) <span class=\"comment\">//返回9，arry = [1,6,8,'2ue','o90',true,'dmw','',3]</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">undefined</span>) <span class=\"comment\">//返回10，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined]</span></span><br><span class=\"line\">arry.push(<span class=\"literal\">null</span>) <span class=\"comment\">//返回11，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null]</span></span><br><span class=\"line\">arry.push([<span class=\"string\">'9'</span>,<span class=\"string\">'8'</span>]) <span class=\"comment\">//返回12，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8']]</span></span><br><span class=\"line\">arry.push(&#123;<span class=\"attr\">key</span>:<span class=\"string\">'hah'</span>&#125;) <span class=\"comment\">//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],&#123;key:'hah'&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">//接收多个参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.push(<span class=\"literal\">true</span>,<span class=\"string\">'dmw'</span>,<span class=\"string\">''</span>,<span class=\"number\">3</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>,[<span class=\"string\">'9'</span>,<span class=\"string\">'8'</span>],&#123;<span class=\"attr\">key</span>:<span class=\"string\">'hah'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">//返回13，arry = [1,6,8,'2ue','o90',true,'dmw','',3,undefined,null,['9','8'],&#123;key:'hah'&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"unshift：在数组尾部添加一个元素\"><a href=\"#unshift：在数组尾部添加一个元素\" class=\"headerlink\" title=\"unshift：在数组尾部添加一个元素\"></a>unshift：在数组尾部添加一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.unshift(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意</li>\n<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>\n<li>其中也可以接收多个参数。</li>\n</ul>\n</li>\n<li>Return:  返回被引用数组长度</li>\n</ul>\n</blockquote>\n<p>同<code>.push()</code>方法</p>\n<h2 id=\"concat：在尾部添加元素到数组\"><a href=\"#concat：在尾部添加元素到数组\" class=\"headerlink\" title=\"concat：在尾部添加元素到数组\"></a>concat：在尾部添加元素到数组</h2><blockquote>\n<ul>\n<li>Method:  Arry.concat(value,…)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:  <code>value</code>非必需。<ul>\n<li><code>value</code>不存在(不传递str)返回组成的新数组，无实际意</li>\n<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，也可以接收多个参数。</li>\n<li>其中当<code>value</code>为数组时，那么添加的是数组中的元素，而不是数组，所以可以用<code>.concat()</code>来连接数组</li>\n</ul>\n</li>\n<li>Return:  返回组成的新数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回值为一个新的数组，不改变原数组</span></span><br><span class=\"line\"><span class=\"comment\">//参数为数组时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArry = arry.concat([<span class=\"string\">'lalal'</span>,<span class=\"string\">'mof'</span>])</span><br><span class=\"line\"><span class=\"comment\">//返回值 newArry = [1,6,8,'2ue','o90','lalal','mof']</span></span><br><span class=\"line\"><span class=\"comment\">//原数组 arry = [1,6,8,'2ue','o90']</span></span><br><span class=\"line\"><span class=\"comment\">//其它情况同push方法一致</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pop：删除最后一个元素\"><a href=\"#pop：删除最后一个元素\" class=\"headerlink\" title=\"pop：删除最后一个元素\"></a>pop：删除最后一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.pop()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被删除(最后一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>]</span><br><span class=\"line\">arry.pop() <span class=\"comment\">//返回1，arry = []</span></span><br><span class=\"line\">arry.pop() <span class=\"comment\">//返回undefined，arry = []</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"shift：删除第一个元素\"><a href=\"#shift：删除第一个元素\" class=\"headerlink\" title=\"shift：删除第一个元素\"></a>shift：删除第一个元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.shift()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回被删除(第一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>\n</ul>\n</blockquote>\n<p>同<code>.pop()</code></p>\n<h2 id=\"reverse：颠倒数组元素顺序\"><a href=\"#reverse：颠倒数组元素顺序\" class=\"headerlink\" title=\"reverse：颠倒数组元素顺序\"></a>reverse：颠倒数组元素顺序</h2><blockquote>\n<ul>\n<li>Method:  Arry.reverse()</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  无</li>\n<li>Return:  返回对数组的引用，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.reverse() <span class=\"comment\">//返回['o90','2ue',8,6,1] arry = ['o90','2ue',8,6,1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"sort：数组元素排序\"><a href=\"#sort：数组元素排序\" class=\"headerlink\" title=\"sort：数组元素排序\"></a>sort：数组元素排序</h2><blockquote>\n<ul>\n<li>Method:  Arry.sort(fun)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:  fun非必需<ul>\n<li><strong>fun如果为空，那么默认安装字符编码的顺序进行排序</strong></li>\n<li><strong>如不为空，那么fun必须为函数类型</strong>。</li>\n<li>Arry.sort(fun(value1,value2){})，fun函数参数<code>value1</code> 的值为<code>Arry[i]</code>，<code>value2</code> 的值为<code>Arry[i+1]</code>，其中<code>0&lt; = i &lt; Arry.length - 1</code>。所以请注意，<code>.sort()</code>方法排序会对被引用数组进行遍历，遍历的次数为<code>Arry.length - 1</code>，而非<code>Arry.length</code>。因为在<code>Arry.length - 1</code>次时，排序其实就已经完成了。</li>\n</ul>\n</li>\n<li>Return:  返回对数组的引用，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>,<span class=\"number\">6</span>,<span class=\"number\">890</span>,<span class=\"number\">9</span>,<span class=\"number\">7990</span>]</span><br><span class=\"line\">arry.sort()<span class=\"comment\">//返回[1, \"2ue\", 6, 7990, 890, 9, \"o90\"] arry = [1, \"2ue\", 6, 7990, 890, 9, \"o90\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">65443</span>,<span class=\"number\">6</span>,<span class=\"number\">890</span>,<span class=\"number\">9</span>,<span class=\"number\">7990</span>]</span><br><span class=\"line\">arry.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value2-value1</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//返回[65443, 7990, 890, 9, 6, 1] arry = [65443, 7990, 890, 9, 6, 1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"slice：根据索引返回数组的一部分\"><a href=\"#slice：根据索引返回数组的一部分\" class=\"headerlink\" title=\"slice：根据索引返回数组的一部分\"></a>slice：根据索引返回数组的一部分</h2><blockquote>\n<ul>\n<li>Method:  Arry.slice(satrtIndex,endIndex)</li>\n<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>\n<li>Arguments:<ul>\n<li><code>satrtIndex</code>开始索引(<strong>不包含开始索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li><code>endIndex</code>结束索引(<strong>不包含结束索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li>最终<code>satrtIndex</code>的实际值必须小于<code>endIndex</code>，且他们所在的那段索引必须与被引用数组的索引有交集，否则返回空数组。</li>\n</ul>\n</li>\n<li>Return:  根据索引返回数组的一部分，返回值为数组类型</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//被引用数组值不会改变</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>]</span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"comment\">//返回[6,8,'2ue']</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">3</span>,<span class=\"number\">1</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">-2</span>) <span class=\"comment\">//返回[6,8]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">1</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//返回[]</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-3</span>,<span class=\"number\">-1</span>) <span class=\"comment\">//返回[6,8,'2ue']</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">-1</span>,<span class=\"number\">-3</span>) <span class=\"comment\">//返回[]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"splice：移除元素\"><a href=\"#splice：移除元素\" class=\"headerlink\" title=\"splice：移除元素\"></a>splice：移除元素</h2><blockquote>\n<ul>\n<li>Method:  Arry.splice(satrtIndex, deleteCount, value, …)</li>\n<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>\n<li>Arguments:<ul>\n<li><code>satrtIndex</code>开始索引，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>\n<li><code>deleteCount</code>将删除的个数，非必须，且必须为<code>nubmer</code>类型。从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素，小于等于0将不会删除。</li>\n<li><code>value</code>要插入数组的零个或多个值，从start所指的下标处开始插入。可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，可接收多个参数。</li>\n</ul>\n</li>\n<li>Return:  被移除元素组成的数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"string\">'2ue'</span>,<span class=\"string\">'o90'</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">arry.splice(<span class=\"number\">7</span>)  <span class=\"comment\">// 返回 [6,7]; arry = [1,6,8,'2ue','o90',4,5]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 返回 [6,8]; arry = [1,'2ue','o90',4,5]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">-1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">//返回 [5]; arry = [1,'o90',4]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">8</span>,<span class=\"number\">9</span>])  <span class=\"comment\">// 返回 []; arry = [2,3,[8,9],1,'o90',4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"来一张表\"><a href=\"#来一张表\" class=\"headerlink\" title=\"来一张表\"></a>来一张表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">原数组是否改变</th>\n<th style=\"text-align:center\">返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>length</strong></td>\n<td style=\"text-align:center\">获取数组长度</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">被引用数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>join</strong></td>\n<td style=\"text-align:center\">将数组元素连接起来以构建一个字符串</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">转换后的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>push</strong></td>\n<td style=\"text-align:center\">在尾部添加元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">新数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>unshift</strong></td>\n<td style=\"text-align:center\">在头部添加元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">新数组长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>concat</strong></td>\n<td style=\"text-align:center\">在尾部添加元素</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">新数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>pop</strong></td>\n<td style=\"text-align:center\">删除最后一个元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被删除元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>shift</strong></td>\n<td style=\"text-align:center\">删除第一个元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被删除元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>reverse</strong></td>\n<td style=\"text-align:center\">颠倒数组元素顺序</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">对数组的引用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>sort</strong></td>\n<td style=\"text-align:center\">数组元素排序</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">对数组的引用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>slice</strong></td>\n<td style=\"text-align:center\">根据索引返回数组的一部分</td>\n<td style=\"text-align:center\">NO</td>\n<td style=\"text-align:center\">根据索引返回数组的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>splice</strong></td>\n<td style=\"text-align:center\">插入、删除或替换数组的元素</td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:center\">被移除元素组成的数组</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"常用javascript代码片段","date":"2017-11-26T14:37:45.000Z","author":"J.2ue","_content":"\n> 下面记录的主要是本人在项目中遇到的一些问题的解决方案或者个人觉得精妙的代码，方案也许来自于自己的想法，也有可能来自于网络（我尽量给出出处，以便大家追源溯流），也许干脆就是一个插件库（实际在项目中对于一些小的功能个人是拒绝引入不纯粹的三方库的）。肯定，这其中有些方案也不是尽善尽美，我会一一列出。如果对于某个问题在你看来有更好的解决方案，请不吝指出！\n\n## placeholder属性支持\n\n有时候项目中placeholder也许要兼容某些特殊的浏览器，所以才有了下面这段代码。这种方案有一个缺点就是：如果你恰好要对这个输入框绑定focus事件并操作它的值，必须要小心处理\n\n```javascript\n//修复不支持placeholder属性 start\nconst isSurportPlder = \"placeholder\" in document.createElement(\"input\"); // 判断浏览器是否支持 placeholder\nif (!isSurportPlder) {\n  $(\"[placeholder]\").focus(function () {\n    const _this = $(this);\n    if (_this.val() == _this.attr(\"placeholder\")) {\n      _this.val('');\n    }\n  }).blur(function () {\n    const _this = $(this);\n    if (_this.val() == '' || _this.val() == _this.attr(\"placeholder\")) {\n      _this.val(_this.attr(\"placeholder\"));\n    }\n  }).blur();\n};\n```\n\n## 格式化时间\n\n关于格式化时间有很多插件，其中比较有名的就可以列很大一堆出来，比如老牌的[moment.js](https://github.com/moment/moment)，最近比较多star的[luxon.js](https://github.com/moment/luxon); 对于为什么不选择他么，上面已经说了原因了。\n\n```javascript\nformate(fmt, date) {\n    date = new Date(date).toString() === 'Invalid Date' ? new Date() : new Date(date);\n    const _rules = [{\n        rule: '[yY]{4}',\n        value: date.getFullYear()\n    }, {\n        rule: 'M+',\n        value: date.getMonth() + 1\n    }, {\n        rule: '[dD]+',\n        value: date.getDate()\n    }, {\n        rule: 'h+',\n        value: date.getHours()\n    }, {\n        rule: 'm+',\n        value: date.getMinutes()\n    }, {\n        rule: 's+',\n        value: date.getSeconds()\n    }, {\n        rule: 'ms{1,2}',\n        value: date.getMilliseconds()\n    }];\n\n    _rules.forEach((_r) => {\n        const rule = _r.rule, val = _r.value;\n        fmt = fmt.replace(new RegExp(rule), function ($1) {\n            const rLen = val.toString().length, fLen = $1.length;\n            return (fLen !== 2 || rLen >= fLen) ? val : ['00', val].join('').substr(rLen);\n        });\n    });\n    return fmt;\n}\n```\n\n## 解析浏览器的版本等详细信息\n\n浏览器的判断涉及到很多复杂的变量和参数，所以偷懒选取了一个比较好的库，这个库它唯一的功能就是识别浏览器的版本等详细信息。\n如果大家有更好的库，请推荐过来！\n\n[browser.js](https://github.com/mumuy/browser)\n\n## 数字转换成千分位格式(如：123,456,9.89)\n\n```javascript\nfunction translateThree(num) {\n  return num.split('').reverse().join('').replace(/(\\d{3}(?=\\d)(?!\\d+\\.|$))/g, '$1,').split('').reverse().join('');\n}\n```\n\n## 判断任意数据的类型\n\n精准的判断类型，`'2'`会识别成`string`类型，`2`会识别成`number`类型\n\n``` javascript\nfunction tryType(para) {\n    const type = typeof para;\n    if (type === \"number\" && isNaN(para)) return \"NaN\";\n    if (type !== \"object\") return type;\n    return Object.prototype.toString\n        .call(para)\n        .replace(/[\\[\\]]/g, \"\")\n        .split(\" \")[1]\n        .toLowerCase();\n}\n```\n\n## 判断是不是一个可计算的数字\n\n上面的`tryType`方法会将`'2'`和`2`区别成两种类型，而这个方法将忽略这种区别\n\n``` javascript\nfunction isNumber(para) {\n    if (window.isNumber) return window.isNumber(para);\n    if (Number.isNumber) return Number.isNumber(para);\n    return typeof para !== \"undefined\" && !isNaN(para);\n}\n```\n\n## 深度取值防止代码挂掉\n\n在项目中经常会遇到层级很深的`json`数据，这时候可能就会写类似这样的代码`a[2].list[3].name`，这种代码很不可靠，很容易由于数据的一点小错误，导致整段js代码挂掉。出的问题多了自然就会思考问题的解决方案，正当我苦思不得其解时，看到一篇文章[如何优雅安全地在深层数据结构中取值](http://www.jianshu.com/p/11fc75f28302)，他详细的分析了深层取值如何避免报错的情况。\n我阅读了博主的文章，整理了一下思路，没有像原博主那样使用`xs && xs[x]`判断来打断取值，是因为这种情况可能会把`0`这种类型的值误伤\n\n``` javascript\nfunction getValueFromDeepData (props, target){\n    if (!props || !target) return undefined;\n    return props.reduce((pre, nxt) => (typeof pre === 'undefined' || typeof pre[nxt] === 'undefined' ? undefined : pre[nxt]), target);\n}\n```\n\n## 反转义字符串\n\n何谓反转义字符串？就是后端在传输HTML代码的时候往往会对字符串处理：把一些特殊符号转义了；当我们拿到HTML渲染到页面希望他按照HTML代码的格式来显示，而不是按照转义的字符串显示成文本，所以我们需要对这段字符串反转义！\n网上看到很多解决方案是通过正则的方式一一替换过来，但是个人觉得这样不好维护。后面发现一种浏览器自动转换的办法，利用这一特性，可以通过js创建一个虚拟的DOM节点，然后把需要转义的字符串使用innerHTML方法放进去，再通过nodeValue方法取出来。\n但这种方法需要注意的是：`e.childNodes`是一个数组，它将`_html`分段（每65536字符分一段）存储到`e.childNodes[i]`中，使用`e.childNodes`方法取得反转义后的字符串需要循环`e.childNodes`数组。我看到网上很多方法都是直接取的`e.childNodes[0].nodeValue`，这样在内容过多的时候，是无法把数据取完整的\n\n``` javascript\nfunction htmlDecode(str) {\n    const e = document.createElement('div'), _html = '';\n    e.innerHTML = str;\n    for (let i = 0; i < e.childNodes.length; i++) {\n        _html += e.childNodes[i].nodeValue;\n    };\n    return _html;\n};\n```\n\n## 未完\n","source":"_posts/javascript-sinpats.md","raw":"---\ntitle: 常用javascript代码片段\ndate: 2017-11-26 22:37:45\nauthor: J.2ue\ntags:\n- sinpats\ncategories:\n- javascript\n---\n\n> 下面记录的主要是本人在项目中遇到的一些问题的解决方案或者个人觉得精妙的代码，方案也许来自于自己的想法，也有可能来自于网络（我尽量给出出处，以便大家追源溯流），也许干脆就是一个插件库（实际在项目中对于一些小的功能个人是拒绝引入不纯粹的三方库的）。肯定，这其中有些方案也不是尽善尽美，我会一一列出。如果对于某个问题在你看来有更好的解决方案，请不吝指出！\n\n## placeholder属性支持\n\n有时候项目中placeholder也许要兼容某些特殊的浏览器，所以才有了下面这段代码。这种方案有一个缺点就是：如果你恰好要对这个输入框绑定focus事件并操作它的值，必须要小心处理\n\n```javascript\n//修复不支持placeholder属性 start\nconst isSurportPlder = \"placeholder\" in document.createElement(\"input\"); // 判断浏览器是否支持 placeholder\nif (!isSurportPlder) {\n  $(\"[placeholder]\").focus(function () {\n    const _this = $(this);\n    if (_this.val() == _this.attr(\"placeholder\")) {\n      _this.val('');\n    }\n  }).blur(function () {\n    const _this = $(this);\n    if (_this.val() == '' || _this.val() == _this.attr(\"placeholder\")) {\n      _this.val(_this.attr(\"placeholder\"));\n    }\n  }).blur();\n};\n```\n\n## 格式化时间\n\n关于格式化时间有很多插件，其中比较有名的就可以列很大一堆出来，比如老牌的[moment.js](https://github.com/moment/moment)，最近比较多star的[luxon.js](https://github.com/moment/luxon); 对于为什么不选择他么，上面已经说了原因了。\n\n```javascript\nformate(fmt, date) {\n    date = new Date(date).toString() === 'Invalid Date' ? new Date() : new Date(date);\n    const _rules = [{\n        rule: '[yY]{4}',\n        value: date.getFullYear()\n    }, {\n        rule: 'M+',\n        value: date.getMonth() + 1\n    }, {\n        rule: '[dD]+',\n        value: date.getDate()\n    }, {\n        rule: 'h+',\n        value: date.getHours()\n    }, {\n        rule: 'm+',\n        value: date.getMinutes()\n    }, {\n        rule: 's+',\n        value: date.getSeconds()\n    }, {\n        rule: 'ms{1,2}',\n        value: date.getMilliseconds()\n    }];\n\n    _rules.forEach((_r) => {\n        const rule = _r.rule, val = _r.value;\n        fmt = fmt.replace(new RegExp(rule), function ($1) {\n            const rLen = val.toString().length, fLen = $1.length;\n            return (fLen !== 2 || rLen >= fLen) ? val : ['00', val].join('').substr(rLen);\n        });\n    });\n    return fmt;\n}\n```\n\n## 解析浏览器的版本等详细信息\n\n浏览器的判断涉及到很多复杂的变量和参数，所以偷懒选取了一个比较好的库，这个库它唯一的功能就是识别浏览器的版本等详细信息。\n如果大家有更好的库，请推荐过来！\n\n[browser.js](https://github.com/mumuy/browser)\n\n## 数字转换成千分位格式(如：123,456,9.89)\n\n```javascript\nfunction translateThree(num) {\n  return num.split('').reverse().join('').replace(/(\\d{3}(?=\\d)(?!\\d+\\.|$))/g, '$1,').split('').reverse().join('');\n}\n```\n\n## 判断任意数据的类型\n\n精准的判断类型，`'2'`会识别成`string`类型，`2`会识别成`number`类型\n\n``` javascript\nfunction tryType(para) {\n    const type = typeof para;\n    if (type === \"number\" && isNaN(para)) return \"NaN\";\n    if (type !== \"object\") return type;\n    return Object.prototype.toString\n        .call(para)\n        .replace(/[\\[\\]]/g, \"\")\n        .split(\" \")[1]\n        .toLowerCase();\n}\n```\n\n## 判断是不是一个可计算的数字\n\n上面的`tryType`方法会将`'2'`和`2`区别成两种类型，而这个方法将忽略这种区别\n\n``` javascript\nfunction isNumber(para) {\n    if (window.isNumber) return window.isNumber(para);\n    if (Number.isNumber) return Number.isNumber(para);\n    return typeof para !== \"undefined\" && !isNaN(para);\n}\n```\n\n## 深度取值防止代码挂掉\n\n在项目中经常会遇到层级很深的`json`数据，这时候可能就会写类似这样的代码`a[2].list[3].name`，这种代码很不可靠，很容易由于数据的一点小错误，导致整段js代码挂掉。出的问题多了自然就会思考问题的解决方案，正当我苦思不得其解时，看到一篇文章[如何优雅安全地在深层数据结构中取值](http://www.jianshu.com/p/11fc75f28302)，他详细的分析了深层取值如何避免报错的情况。\n我阅读了博主的文章，整理了一下思路，没有像原博主那样使用`xs && xs[x]`判断来打断取值，是因为这种情况可能会把`0`这种类型的值误伤\n\n``` javascript\nfunction getValueFromDeepData (props, target){\n    if (!props || !target) return undefined;\n    return props.reduce((pre, nxt) => (typeof pre === 'undefined' || typeof pre[nxt] === 'undefined' ? undefined : pre[nxt]), target);\n}\n```\n\n## 反转义字符串\n\n何谓反转义字符串？就是后端在传输HTML代码的时候往往会对字符串处理：把一些特殊符号转义了；当我们拿到HTML渲染到页面希望他按照HTML代码的格式来显示，而不是按照转义的字符串显示成文本，所以我们需要对这段字符串反转义！\n网上看到很多解决方案是通过正则的方式一一替换过来，但是个人觉得这样不好维护。后面发现一种浏览器自动转换的办法，利用这一特性，可以通过js创建一个虚拟的DOM节点，然后把需要转义的字符串使用innerHTML方法放进去，再通过nodeValue方法取出来。\n但这种方法需要注意的是：`e.childNodes`是一个数组，它将`_html`分段（每65536字符分一段）存储到`e.childNodes[i]`中，使用`e.childNodes`方法取得反转义后的字符串需要循环`e.childNodes`数组。我看到网上很多方法都是直接取的`e.childNodes[0].nodeValue`，这样在内容过多的时候，是无法把数据取完整的\n\n``` javascript\nfunction htmlDecode(str) {\n    const e = document.createElement('div'), _html = '';\n    e.innerHTML = str;\n    for (let i = 0; i < e.childNodes.length; i++) {\n        _html += e.childNodes[i].nodeValue;\n    };\n    return _html;\n};\n```\n\n## 未完\n","slug":"javascript-sinpats","published":1,"updated":"2018-07-30T01:55:33.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny0swgh001z2kv731amx2tr","content":"<blockquote>\n<p>下面记录的主要是本人在项目中遇到的一些问题的解决方案或者个人觉得精妙的代码，方案也许来自于自己的想法，也有可能来自于网络（我尽量给出出处，以便大家追源溯流），也许干脆就是一个插件库（实际在项目中对于一些小的功能个人是拒绝引入不纯粹的三方库的）。肯定，这其中有些方案也不是尽善尽美，我会一一列出。如果对于某个问题在你看来有更好的解决方案，请不吝指出！</p>\n</blockquote>\n<h2 id=\"placeholder属性支持\"><a href=\"#placeholder属性支持\" class=\"headerlink\" title=\"placeholder属性支持\"></a>placeholder属性支持</h2><p>有时候项目中placeholder也许要兼容某些特殊的浏览器，所以才有了下面这段代码。这种方案有一个缺点就是：如果你恰好要对这个输入框绑定focus事件并操作它的值，必须要小心处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//修复不支持placeholder属性 start</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isSurportPlder = <span class=\"string\">\"placeholder\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>); <span class=\"comment\">// 判断浏览器是否支持 placeholder</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isSurportPlder) &#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"[placeholder]\"</span>).focus(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.val() == _this.attr(<span class=\"string\">\"placeholder\"</span>)) &#123;</span><br><span class=\"line\">      _this.val(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).blur(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.val() == <span class=\"string\">''</span> || _this.val() == _this.attr(<span class=\"string\">\"placeholder\"</span>)) &#123;</span><br><span class=\"line\">      _this.val(_this.attr(<span class=\"string\">\"placeholder\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).blur();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h2><p>关于格式化时间有很多插件，其中比较有名的就可以列很大一堆出来，比如老牌的<a href=\"https://github.com/moment/moment\" target=\"_blank\" rel=\"noopener\">moment.js</a>，最近比较多star的<a href=\"https://github.com/moment/luxon\" target=\"_blank\" rel=\"noopener\">luxon.js</a>; 对于为什么不选择他么，上面已经说了原因了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formate(fmt, date) &#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date).toString() === <span class=\"string\">'Invalid Date'</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _rules = [&#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[yY]&#123;4&#125;'</span>,</span><br><span class=\"line\">        value: date.getFullYear()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'M+'</span>,</span><br><span class=\"line\">        value: date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[dD]+'</span>,</span><br><span class=\"line\">        value: date.getDate()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'h+'</span>,</span><br><span class=\"line\">        value: date.getHours()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'m+'</span>,</span><br><span class=\"line\">        value: date.getMinutes()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'s+'</span>,</span><br><span class=\"line\">        value: date.getSeconds()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'ms&#123;1,2&#125;'</span>,</span><br><span class=\"line\">        value: date.getMilliseconds()</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    _rules.forEach(<span class=\"function\">(<span class=\"params\">_r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rule = _r.rule, val = _r.value;</span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(rule), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rLen = val.toString().length, fLen = $<span class=\"number\">1.</span>length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (fLen !== <span class=\"number\">2</span> || rLen &gt;= fLen) ? val : [<span class=\"string\">'00'</span>, val].join(<span class=\"string\">''</span>).substr(rLen);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析浏览器的版本等详细信息\"><a href=\"#解析浏览器的版本等详细信息\" class=\"headerlink\" title=\"解析浏览器的版本等详细信息\"></a>解析浏览器的版本等详细信息</h2><p>浏览器的判断涉及到很多复杂的变量和参数，所以偷懒选取了一个比较好的库，这个库它唯一的功能就是识别浏览器的版本等详细信息。<br>如果大家有更好的库，请推荐过来！</p>\n<p><a href=\"https://github.com/mumuy/browser\" target=\"_blank\" rel=\"noopener\">browser.js</a></p>\n<h2 id=\"数字转换成千分位格式-如：123-456-9-89\"><a href=\"#数字转换成千分位格式-如：123-456-9-89\" class=\"headerlink\" title=\"数字转换成千分位格式(如：123,456,9.89)\"></a>数字转换成千分位格式(如：123,456,9.89)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">translateThree</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).replace(<span class=\"regexp\">/(\\d&#123;3&#125;(?=\\d)(?!\\d+\\.|$))/g</span>, <span class=\"string\">'$1,'</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断任意数据的类型\"><a href=\"#判断任意数据的类型\" class=\"headerlink\" title=\"判断任意数据的类型\"></a>判断任意数据的类型</h2><p>精准的判断类型，<code>&#39;2&#39;</code>会识别成<code>string</code>类型，<code>2</code>会识别成<code>number</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryType</span>(<span class=\"params\">para</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> para;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"number\"</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(para)) <span class=\"keyword\">return</span> <span class=\"string\">\"NaN\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type !== <span class=\"string\">\"object\"</span>) <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">        .call(para)</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/[\\[\\]]/g</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        .split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        .toLowerCase();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是不是一个可计算的数字\"><a href=\"#判断是不是一个可计算的数字\" class=\"headerlink\" title=\"判断是不是一个可计算的数字\"></a>判断是不是一个可计算的数字</h2><p>上面的<code>tryType</code>方法会将<code>&#39;2&#39;</code>和<code>2</code>区别成两种类型，而这个方法将忽略这种区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">para</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.isNumber) <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.isNumber(para);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNumber) <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>.isNumber(para);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para !== <span class=\"string\">\"undefined\"</span> &amp;&amp; !<span class=\"built_in\">isNaN</span>(para);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深度取值防止代码挂掉\"><a href=\"#深度取值防止代码挂掉\" class=\"headerlink\" title=\"深度取值防止代码挂掉\"></a>深度取值防止代码挂掉</h2><p>在项目中经常会遇到层级很深的<code>json</code>数据，这时候可能就会写类似这样的代码<code>a[2].list[3].name</code>，这种代码很不可靠，很容易由于数据的一点小错误，导致整段js代码挂掉。出的问题多了自然就会思考问题的解决方案，正当我苦思不得其解时，看到一篇文章<a href=\"http://www.jianshu.com/p/11fc75f28302\" target=\"_blank\" rel=\"noopener\">如何优雅安全地在深层数据结构中取值</a>，他详细的分析了深层取值如何避免报错的情况。<br>我阅读了博主的文章，整理了一下思路，没有像原博主那样使用<code>xs &amp;&amp; xs[x]</code>判断来打断取值，是因为这种情况可能会把<code>0</code>这种类型的值误伤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getValueFromDeepData</span> (<span class=\"params\">props, target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!props || !target) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> props.reduce(<span class=\"function\">(<span class=\"params\">pre, nxt</span>) =&gt;</span> (<span class=\"keyword\">typeof</span> pre === <span class=\"string\">'undefined'</span> || <span class=\"keyword\">typeof</span> pre[nxt] === <span class=\"string\">'undefined'</span> ? <span class=\"literal\">undefined</span> : pre[nxt]), target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转义字符串\"><a href=\"#反转义字符串\" class=\"headerlink\" title=\"反转义字符串\"></a>反转义字符串</h2><p>何谓反转义字符串？就是后端在传输HTML代码的时候往往会对字符串处理：把一些特殊符号转义了；当我们拿到HTML渲染到页面希望他按照HTML代码的格式来显示，而不是按照转义的字符串显示成文本，所以我们需要对这段字符串反转义！<br>网上看到很多解决方案是通过正则的方式一一替换过来，但是个人觉得这样不好维护。后面发现一种浏览器自动转换的办法，利用这一特性，可以通过js创建一个虚拟的DOM节点，然后把需要转义的字符串使用innerHTML方法放进去，再通过nodeValue方法取出来。<br>但这种方法需要注意的是：<code>e.childNodes</code>是一个数组，它将<code>_html</code>分段（每65536字符分一段）存储到<code>e.childNodes[i]</code>中，使用<code>e.childNodes</code>方法取得反转义后的字符串需要循环<code>e.childNodes</code>数组。我看到网上很多方法都是直接取的<code>e.childNodes[0].nodeValue</code>，这样在内容过多的时候，是无法把数据取完整的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlDecode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>), _html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    e.innerHTML = str;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; e.childNodes.length; i++) &#123;</span><br><span class=\"line\">        _html += e.childNodes[i].nodeValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _html;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完\"><a href=\"#未完\" class=\"headerlink\" title=\"未完\"></a>未完</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>下面记录的主要是本人在项目中遇到的一些问题的解决方案或者个人觉得精妙的代码，方案也许来自于自己的想法，也有可能来自于网络（我尽量给出出处，以便大家追源溯流），也许干脆就是一个插件库（实际在项目中对于一些小的功能个人是拒绝引入不纯粹的三方库的）。肯定，这其中有些方案也不是尽善尽美，我会一一列出。如果对于某个问题在你看来有更好的解决方案，请不吝指出！</p>\n</blockquote>\n<h2 id=\"placeholder属性支持\"><a href=\"#placeholder属性支持\" class=\"headerlink\" title=\"placeholder属性支持\"></a>placeholder属性支持</h2><p>有时候项目中placeholder也许要兼容某些特殊的浏览器，所以才有了下面这段代码。这种方案有一个缺点就是：如果你恰好要对这个输入框绑定focus事件并操作它的值，必须要小心处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//修复不支持placeholder属性 start</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isSurportPlder = <span class=\"string\">\"placeholder\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>); <span class=\"comment\">// 判断浏览器是否支持 placeholder</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isSurportPlder) &#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"[placeholder]\"</span>).focus(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.val() == _this.attr(<span class=\"string\">\"placeholder\"</span>)) &#123;</span><br><span class=\"line\">      _this.val(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).blur(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.val() == <span class=\"string\">''</span> || _this.val() == _this.attr(<span class=\"string\">\"placeholder\"</span>)) &#123;</span><br><span class=\"line\">      _this.val(_this.attr(<span class=\"string\">\"placeholder\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).blur();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h2><p>关于格式化时间有很多插件，其中比较有名的就可以列很大一堆出来，比如老牌的<a href=\"https://github.com/moment/moment\" target=\"_blank\" rel=\"noopener\">moment.js</a>，最近比较多star的<a href=\"https://github.com/moment/luxon\" target=\"_blank\" rel=\"noopener\">luxon.js</a>; 对于为什么不选择他么，上面已经说了原因了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formate(fmt, date) &#123;</span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date).toString() === <span class=\"string\">'Invalid Date'</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _rules = [&#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[yY]&#123;4&#125;'</span>,</span><br><span class=\"line\">        value: date.getFullYear()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'M+'</span>,</span><br><span class=\"line\">        value: date.getMonth() + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'[dD]+'</span>,</span><br><span class=\"line\">        value: date.getDate()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'h+'</span>,</span><br><span class=\"line\">        value: date.getHours()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'m+'</span>,</span><br><span class=\"line\">        value: date.getMinutes()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'s+'</span>,</span><br><span class=\"line\">        value: date.getSeconds()</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        rule: <span class=\"string\">'ms&#123;1,2&#125;'</span>,</span><br><span class=\"line\">        value: date.getMilliseconds()</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    _rules.forEach(<span class=\"function\">(<span class=\"params\">_r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rule = _r.rule, val = _r.value;</span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(rule), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$<span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rLen = val.toString().length, fLen = $<span class=\"number\">1.</span>length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (fLen !== <span class=\"number\">2</span> || rLen &gt;= fLen) ? val : [<span class=\"string\">'00'</span>, val].join(<span class=\"string\">''</span>).substr(rLen);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析浏览器的版本等详细信息\"><a href=\"#解析浏览器的版本等详细信息\" class=\"headerlink\" title=\"解析浏览器的版本等详细信息\"></a>解析浏览器的版本等详细信息</h2><p>浏览器的判断涉及到很多复杂的变量和参数，所以偷懒选取了一个比较好的库，这个库它唯一的功能就是识别浏览器的版本等详细信息。<br>如果大家有更好的库，请推荐过来！</p>\n<p><a href=\"https://github.com/mumuy/browser\" target=\"_blank\" rel=\"noopener\">browser.js</a></p>\n<h2 id=\"数字转换成千分位格式-如：123-456-9-89\"><a href=\"#数字转换成千分位格式-如：123-456-9-89\" class=\"headerlink\" title=\"数字转换成千分位格式(如：123,456,9.89)\"></a>数字转换成千分位格式(如：123,456,9.89)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">translateThree</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>).replace(<span class=\"regexp\">/(\\d&#123;3&#125;(?=\\d)(?!\\d+\\.|$))/g</span>, <span class=\"string\">'$1,'</span>).split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断任意数据的类型\"><a href=\"#判断任意数据的类型\" class=\"headerlink\" title=\"判断任意数据的类型\"></a>判断任意数据的类型</h2><p>精准的判断类型，<code>&#39;2&#39;</code>会识别成<code>string</code>类型，<code>2</code>会识别成<code>number</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryType</span>(<span class=\"params\">para</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> para;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"number\"</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(para)) <span class=\"keyword\">return</span> <span class=\"string\">\"NaN\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type !== <span class=\"string\">\"object\"</span>) <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">        .call(para)</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/[\\[\\]]/g</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        .split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        .toLowerCase();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是不是一个可计算的数字\"><a href=\"#判断是不是一个可计算的数字\" class=\"headerlink\" title=\"判断是不是一个可计算的数字\"></a>判断是不是一个可计算的数字</h2><p>上面的<code>tryType</code>方法会将<code>&#39;2&#39;</code>和<code>2</code>区别成两种类型，而这个方法将忽略这种区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">para</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.isNumber) <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.isNumber(para);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNumber) <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>.isNumber(para);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para !== <span class=\"string\">\"undefined\"</span> &amp;&amp; !<span class=\"built_in\">isNaN</span>(para);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深度取值防止代码挂掉\"><a href=\"#深度取值防止代码挂掉\" class=\"headerlink\" title=\"深度取值防止代码挂掉\"></a>深度取值防止代码挂掉</h2><p>在项目中经常会遇到层级很深的<code>json</code>数据，这时候可能就会写类似这样的代码<code>a[2].list[3].name</code>，这种代码很不可靠，很容易由于数据的一点小错误，导致整段js代码挂掉。出的问题多了自然就会思考问题的解决方案，正当我苦思不得其解时，看到一篇文章<a href=\"http://www.jianshu.com/p/11fc75f28302\" target=\"_blank\" rel=\"noopener\">如何优雅安全地在深层数据结构中取值</a>，他详细的分析了深层取值如何避免报错的情况。<br>我阅读了博主的文章，整理了一下思路，没有像原博主那样使用<code>xs &amp;&amp; xs[x]</code>判断来打断取值，是因为这种情况可能会把<code>0</code>这种类型的值误伤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getValueFromDeepData</span> (<span class=\"params\">props, target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!props || !target) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> props.reduce(<span class=\"function\">(<span class=\"params\">pre, nxt</span>) =&gt;</span> (<span class=\"keyword\">typeof</span> pre === <span class=\"string\">'undefined'</span> || <span class=\"keyword\">typeof</span> pre[nxt] === <span class=\"string\">'undefined'</span> ? <span class=\"literal\">undefined</span> : pre[nxt]), target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转义字符串\"><a href=\"#反转义字符串\" class=\"headerlink\" title=\"反转义字符串\"></a>反转义字符串</h2><p>何谓反转义字符串？就是后端在传输HTML代码的时候往往会对字符串处理：把一些特殊符号转义了；当我们拿到HTML渲染到页面希望他按照HTML代码的格式来显示，而不是按照转义的字符串显示成文本，所以我们需要对这段字符串反转义！<br>网上看到很多解决方案是通过正则的方式一一替换过来，但是个人觉得这样不好维护。后面发现一种浏览器自动转换的办法，利用这一特性，可以通过js创建一个虚拟的DOM节点，然后把需要转义的字符串使用innerHTML方法放进去，再通过nodeValue方法取出来。<br>但这种方法需要注意的是：<code>e.childNodes</code>是一个数组，它将<code>_html</code>分段（每65536字符分一段）存储到<code>e.childNodes[i]</code>中，使用<code>e.childNodes</code>方法取得反转义后的字符串需要循环<code>e.childNodes</code>数组。我看到网上很多方法都是直接取的<code>e.childNodes[0].nodeValue</code>，这样在内容过多的时候，是无法把数据取完整的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlDecode</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>), _html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    e.innerHTML = str;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; e.childNodes.length; i++) &#123;</span><br><span class=\"line\">        _html += e.childNodes[i].nodeValue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _html;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完\"><a href=\"#未完\" class=\"headerlink\" title=\"未完\"></a>未完</h2>"},{"title":"Git---新手入门1---基本操作与搭建","date":"2018-02-10T08:48:01.000Z","author":"T.stt","_content":"\n> 工欲善其事，必先利其器。git一个不可或缺的利器，其魅力值得我们慢慢品尝！\n\n## 安装\n\n官网下载最新版本安装，然后查看是否安装成功\n\n``` bash\n$ git -v\ngit version 2.7.3.windows.1  //2.7.3为当前版本\n```\n\n## 全局个人信息配置\n\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email\"\n```\n\nwindows环境也可以打开计算机用户文件夹下的.gitconfig编辑\n\n``` html\n[user]\n    name = username\n    email = email\n```\n\n## 基本命令\n\n### 初始化本地仓库\n\n``` bash\n$ cd storage\n$ git init //初始化当前目录为本地仓库\nInitialized empty Git repository in D:/storages/.git/  //初始化了一个空的目录为本地仓库\n```\n\n### 第一次提交(提交到本地)\n\n``` bash\n$ git add README.md\n$ git commit -m \"添加项目文档简介\"  //-m 参数后面跟表示对当前提交的一个简单说明\n```\n\n### 查看状态\n\n查看当前文件处于何种状态\n\n``` bash\n$ git status\n```\n\n### 回退\n\n当你`add`或`commit`了错误的文件时，可以使用以下命令来撤回`add`或者`commit`;\n那么你必须首先明白工作区和暂存区是什么？\n直白的说.git文件夹所在的目录(即`git init`初始化的目录)为当前工作区\n当`add`之后，`add`的文件就会进入暂存区\n当`commit`之后，暂存区就会清空，`commit`的文件就会进入本地当前的分支(如master分支)\nPS：关于工作区和暂存区更详细的解释可以去看廖雪峰[工作区和暂存区](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000)\n\n### 丢弃工区的修改\n\n命令`git checkout -- filename`可以把`filename`文件在工作区的修改全部撤销\n\n``` bash\n$ git checkout -- README.md\n```\n\n### 撤销暂存区的修改\n\n命令`git reset HEAD filename`可以把`filename`文件在暂存区的修改全部撤销\n\n``` bash\n$ git reset HEAD README.md\n$ git checkout -- README.md //--参数不能省\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\n当然`reset` 命令,不仅能够撤销暂存区的内容，还能回退版本，即使你错误提交，也可以用`reset`回滚到之前的版本\n如果你提交了错误文件，可以使用以下命令来回退;\n\n``` bash\n$ git reset --hard HEAD^\n```\n\n`git reset --hard HEAD^`表示回退到上一个版本，`HEAD`后面的参数可以跟`commit ID`，这个ID可以通过以下命令获得\n\n``` bash\n$ git log\ncommit 97c8460bc1cda8233866686d9cae270e0e0113f1\nAuthor: 2ue <jie746635835@163.com>\nDate:   Mon Jun 20 15:44:01 2016 +0800\n\n    update README.md\n\n.....(中间有10条日志)\n\ncommit 2d936223341333384dd41533dd44ba8e0640493c\nAuthor: 2ue <jie746635835@163.com>\nDate:   Mon Jun 01 13:16:22 2016 +0800\n\n    README.md\n```\n\n`commit 97c8460bc1cda8233866686d9cae270e0e0113f1`，这一长串就是我们所需的ID,一般情况下，只需要前7位就够了。\n\n``` bash\n$ git reset --hard HEAD 2d93622 //回退到commit 2d936223341333384dd41533dd44ba8e0640493c\n$ git reset --hard HEAD~12 //回退到往上第12个版本，也是2d93622这个版本\n```\n\n### 提交到服务器\n\n当`commit`后，你做出的修改只是提交到了暂存区，下一步就需要把代码提交到服务器。这里的服务器，可以自己搭建，也可以是公司的，或者第三方的。这里我们将代码提交到`github`上(假设你是已经有一个`github`账户，并创建了一个仓库)。\n\n### 本地生成SSH KEY 并进行配置\n\n`SSH KEY`就是连通本地与`github`的桥梁，钥匙，使用以下命令来生成：\n\n``` bash\n操作方案见：Git---新手入门2---链接github，配置公钥\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n然后回车，中途会提示设置密码，可以设置也可以不设置，如果设置密码，以后每次提交需要输入密码。\n然后在用户主目录（例如：C:\\Users\\Administrator\\.ssh）找到`.ssh`，其中`id_rsa`表示私钥不能泄露和`id_rsa.pub`表示公钥，用于对外，可以公开。\n\n### github设置本地公钥\n\n打开`id_rsa.pub`，复制里面的全部内容；\n进入`github`账户；\n找到 `setting`；\n打开`SSH KEYS`新建一个`SSH KEY`，名字随便取，然后粘贴`id_rsa.pub`的内容，保存；\n\n### 测试是否连通\n\n理论上讲，上一步操作无特殊错误，就已经和`github`连通的，为了放心，我们可以测试一下\n\n``` bash\n$ ssh -T git@github.com\nEnter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':  //如果设置了密码，此处将会提示你输入密码\nHi 2ue! You've successfully authenticated, but GitHub does not provide shell access.\n```\n上面就是成功的提示\n\n### github仓库和本地仓库关联\n\n有两种方式把本地仓库和`github`仓库关联起来\n\n#### 方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\n\n登陆账号，新建仓库(new repository)；\n进入仓库主页，找到按钮`clone or download`按钮，复制里面的`git@github.com:userName/repositoryName.git`;\n打开`git bash`，clone；\n\n``` bash\n$ git clone git@github.com:userName/repositoryName.git\n```\n\n就会把这个项目克隆到你当前目录下。此时你就可以顺畅的像`github`推送你的东西了。\n\n#### 方法二：利用命令关联仓库，本地仓库名可以和`github`的仓库名不一样\n\n假设你github上有一个项目，`git@github.com:userName/repositoryName.git`\n\n``` bash\n$ mkdir testRepository  //新建目录testRepository\n$ cd testRepository  //切换到这个目录\n$ git init  //初始化当前目录\n$ git remote add origin git@github.com:userName/repositoryName.git\n// origin为本地暂存区的名字，为了语义化，建议默认为它\n// 注意github上的repositoryName与本地的testRepository可以不一样\n```\n\n## 提交(push)\n\n### 第一次提交\n\n``` bash\n$ git push -u origin master\n```\n\n### 第二次及以后\n\n``` bash\n$ git push origin master\n```\n\n第一次提交带参数`-u`是为了让你本地和`github`的仓库保持同步。\n\n### 更新代码(pull)\n\n当我们在一台设备上对`github`提交(push)代码之后，在另外的设备上修改这个项目时就必须先从`github`更新代码，以保持代码的同步\n\n``` bash\n$ git fetch (建立连接)\n$ git pull （拉去资源）\n```\n\n-------------\n\n## 总结\n\n### 至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\n\n`github`上创建一个新的项目\n`github repositoryName`：testGit\n`github userName`：2ue\n\n``` bash\n$ makdir testGit   //创建一个空文件夹testGit(名字任意取)，做仓库\n$ cd testGit    //切换到目录testGit\n$ git init    //初始化testGit为本地仓库\n$ echo 'this repository is localhost' > README.md\n//创建文件README.md，并写入'this repository is localhost'\n//在window下以上操作的第一步和第四步可以在图形化界面中完成\n$ git add README.md\n$ git commit -m 'add README.md'//提交更新，并注释信息“add README.md”\n$ git remote add origin git@github.com:2ue/testGit.git   //关联github上的项目\n$ git push -u origin master   //提交到github\n```\n","source":"_posts/learn-git-1.md","raw":"---\ntitle: Git---新手入门1---基本操作与搭建\ndate: 2018-2-10 16:48:01\nauthor: T.stt\ntags:\n- git\ncategories:\n- [工具,git]\n---\n\n> 工欲善其事，必先利其器。git一个不可或缺的利器，其魅力值得我们慢慢品尝！\n\n## 安装\n\n官网下载最新版本安装，然后查看是否安装成功\n\n``` bash\n$ git -v\ngit version 2.7.3.windows.1  //2.7.3为当前版本\n```\n\n## 全局个人信息配置\n\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email\"\n```\n\nwindows环境也可以打开计算机用户文件夹下的.gitconfig编辑\n\n``` html\n[user]\n    name = username\n    email = email\n```\n\n## 基本命令\n\n### 初始化本地仓库\n\n``` bash\n$ cd storage\n$ git init //初始化当前目录为本地仓库\nInitialized empty Git repository in D:/storages/.git/  //初始化了一个空的目录为本地仓库\n```\n\n### 第一次提交(提交到本地)\n\n``` bash\n$ git add README.md\n$ git commit -m \"添加项目文档简介\"  //-m 参数后面跟表示对当前提交的一个简单说明\n```\n\n### 查看状态\n\n查看当前文件处于何种状态\n\n``` bash\n$ git status\n```\n\n### 回退\n\n当你`add`或`commit`了错误的文件时，可以使用以下命令来撤回`add`或者`commit`;\n那么你必须首先明白工作区和暂存区是什么？\n直白的说.git文件夹所在的目录(即`git init`初始化的目录)为当前工作区\n当`add`之后，`add`的文件就会进入暂存区\n当`commit`之后，暂存区就会清空，`commit`的文件就会进入本地当前的分支(如master分支)\nPS：关于工作区和暂存区更详细的解释可以去看廖雪峰[工作区和暂存区](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000)\n\n### 丢弃工区的修改\n\n命令`git checkout -- filename`可以把`filename`文件在工作区的修改全部撤销\n\n``` bash\n$ git checkout -- README.md\n```\n\n### 撤销暂存区的修改\n\n命令`git reset HEAD filename`可以把`filename`文件在暂存区的修改全部撤销\n\n``` bash\n$ git reset HEAD README.md\n$ git checkout -- README.md //--参数不能省\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n```\n\n当然`reset` 命令,不仅能够撤销暂存区的内容，还能回退版本，即使你错误提交，也可以用`reset`回滚到之前的版本\n如果你提交了错误文件，可以使用以下命令来回退;\n\n``` bash\n$ git reset --hard HEAD^\n```\n\n`git reset --hard HEAD^`表示回退到上一个版本，`HEAD`后面的参数可以跟`commit ID`，这个ID可以通过以下命令获得\n\n``` bash\n$ git log\ncommit 97c8460bc1cda8233866686d9cae270e0e0113f1\nAuthor: 2ue <jie746635835@163.com>\nDate:   Mon Jun 20 15:44:01 2016 +0800\n\n    update README.md\n\n.....(中间有10条日志)\n\ncommit 2d936223341333384dd41533dd44ba8e0640493c\nAuthor: 2ue <jie746635835@163.com>\nDate:   Mon Jun 01 13:16:22 2016 +0800\n\n    README.md\n```\n\n`commit 97c8460bc1cda8233866686d9cae270e0e0113f1`，这一长串就是我们所需的ID,一般情况下，只需要前7位就够了。\n\n``` bash\n$ git reset --hard HEAD 2d93622 //回退到commit 2d936223341333384dd41533dd44ba8e0640493c\n$ git reset --hard HEAD~12 //回退到往上第12个版本，也是2d93622这个版本\n```\n\n### 提交到服务器\n\n当`commit`后，你做出的修改只是提交到了暂存区，下一步就需要把代码提交到服务器。这里的服务器，可以自己搭建，也可以是公司的，或者第三方的。这里我们将代码提交到`github`上(假设你是已经有一个`github`账户，并创建了一个仓库)。\n\n### 本地生成SSH KEY 并进行配置\n\n`SSH KEY`就是连通本地与`github`的桥梁，钥匙，使用以下命令来生成：\n\n``` bash\n操作方案见：Git---新手入门2---链接github，配置公钥\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n然后回车，中途会提示设置密码，可以设置也可以不设置，如果设置密码，以后每次提交需要输入密码。\n然后在用户主目录（例如：C:\\Users\\Administrator\\.ssh）找到`.ssh`，其中`id_rsa`表示私钥不能泄露和`id_rsa.pub`表示公钥，用于对外，可以公开。\n\n### github设置本地公钥\n\n打开`id_rsa.pub`，复制里面的全部内容；\n进入`github`账户；\n找到 `setting`；\n打开`SSH KEYS`新建一个`SSH KEY`，名字随便取，然后粘贴`id_rsa.pub`的内容，保存；\n\n### 测试是否连通\n\n理论上讲，上一步操作无特殊错误，就已经和`github`连通的，为了放心，我们可以测试一下\n\n``` bash\n$ ssh -T git@github.com\nEnter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':  //如果设置了密码，此处将会提示你输入密码\nHi 2ue! You've successfully authenticated, but GitHub does not provide shell access.\n```\n上面就是成功的提示\n\n### github仓库和本地仓库关联\n\n有两种方式把本地仓库和`github`仓库关联起来\n\n#### 方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\n\n登陆账号，新建仓库(new repository)；\n进入仓库主页，找到按钮`clone or download`按钮，复制里面的`git@github.com:userName/repositoryName.git`;\n打开`git bash`，clone；\n\n``` bash\n$ git clone git@github.com:userName/repositoryName.git\n```\n\n就会把这个项目克隆到你当前目录下。此时你就可以顺畅的像`github`推送你的东西了。\n\n#### 方法二：利用命令关联仓库，本地仓库名可以和`github`的仓库名不一样\n\n假设你github上有一个项目，`git@github.com:userName/repositoryName.git`\n\n``` bash\n$ mkdir testRepository  //新建目录testRepository\n$ cd testRepository  //切换到这个目录\n$ git init  //初始化当前目录\n$ git remote add origin git@github.com:userName/repositoryName.git\n// origin为本地暂存区的名字，为了语义化，建议默认为它\n// 注意github上的repositoryName与本地的testRepository可以不一样\n```\n\n## 提交(push)\n\n### 第一次提交\n\n``` bash\n$ git push -u origin master\n```\n\n### 第二次及以后\n\n``` bash\n$ git push origin master\n```\n\n第一次提交带参数`-u`是为了让你本地和`github`的仓库保持同步。\n\n### 更新代码(pull)\n\n当我们在一台设备上对`github`提交(push)代码之后，在另外的设备上修改这个项目时就必须先从`github`更新代码，以保持代码的同步\n\n``` bash\n$ git fetch (建立连接)\n$ git pull （拉去资源）\n```\n\n-------------\n\n## 总结\n\n### 至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\n\n`github`上创建一个新的项目\n`github repositoryName`：testGit\n`github userName`：2ue\n\n``` bash\n$ makdir testGit   //创建一个空文件夹testGit(名字任意取)，做仓库\n$ cd testGit    //切换到目录testGit\n$ git init    //初始化testGit为本地仓库\n$ echo 'this repository is localhost' > README.md\n//创建文件README.md，并写入'this repository is localhost'\n//在window下以上操作的第一步和第四步可以在图形化界面中完成\n$ git add README.md\n$ git commit -m 'add README.md'//提交更新，并注释信息“add README.md”\n$ git remote add origin git@github.com:2ue/testGit.git   //关联github上的项目\n$ git push -u origin master   //提交到github\n```\n","slug":"learn-git-1","published":1,"updated":"2018-11-01T06:53:20.275Z","_id":"cjny0swgl00262kv7x02g8oil","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>工欲善其事，必先利其器。git一个不可或缺的利器，其魅力值得我们慢慢品尝！</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网下载最新版本安装，然后查看是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -v</span><br><span class=\"line\">git version 2.7.3.windows.1  //2.7.3为当前版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局个人信息配置\"><a href=\"#全局个人信息配置\" class=\"headerlink\" title=\"全局个人信息配置\"></a>全局个人信息配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure>\n<p>windows环境也可以打开计算机用户文件夹下的.gitconfig编辑</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = username</span><br><span class=\"line\">    email = email</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"初始化本地仓库\"><a href=\"#初始化本地仓库\" class=\"headerlink\" title=\"初始化本地仓库\"></a>初始化本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> storage</span><br><span class=\"line\">$ git init //初始化当前目录为本地仓库</span><br><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> D:/storages/.git/  //初始化了一个空的目录为本地仓库</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一次提交-提交到本地\"><a href=\"#第一次提交-提交到本地\" class=\"headerlink\" title=\"第一次提交(提交到本地)\"></a>第一次提交(提交到本地)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"添加项目文档简介\"</span>  //-m 参数后面跟表示对当前提交的一个简单说明</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><p>查看当前文件处于何种状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退\"><a href=\"#回退\" class=\"headerlink\" title=\"回退\"></a>回退</h3><p>当你<code>add</code>或<code>commit</code>了错误的文件时，可以使用以下命令来撤回<code>add</code>或者<code>commit</code>;<br>那么你必须首先明白工作区和暂存区是什么？<br>直白的说.git文件夹所在的目录(即<code>git init</code>初始化的目录)为当前工作区<br>当<code>add</code>之后，<code>add</code>的文件就会进入暂存区<br>当<code>commit</code>之后，暂存区就会清空，<code>commit</code>的文件就会进入本地当前的分支(如master分支)<br>PS：关于工作区和暂存区更详细的解释可以去看廖雪峰<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000\" target=\"_blank\" rel=\"noopener\">工作区和暂存区</a></p>\n<h3 id=\"丢弃工区的修改\"><a href=\"#丢弃工区的修改\" class=\"headerlink\" title=\"丢弃工区的修改\"></a>丢弃工区的修改</h3><p>命令<code>git checkout -- filename</code>可以把<code>filename</code>文件在工作区的修改全部撤销</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销暂存区的修改\"><a href=\"#撤销暂存区的修改\" class=\"headerlink\" title=\"撤销暂存区的修改\"></a>撤销暂存区的修改</h3><p>命令<code>git reset HEAD filename</code>可以把<code>filename</code>文件在暂存区的修改全部撤销</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD README.md</span><br><span class=\"line\">$ git checkout -- README.md //--参数不能省</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>当然<code>reset</code> 命令,不仅能够撤销暂存区的内容，还能回退版本，即使你错误提交，也可以用<code>reset</code>回滚到之前的版本<br>如果你提交了错误文件，可以使用以下命令来回退;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p><code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>HEAD</code>后面的参数可以跟<code>commit ID</code>，这个ID可以通过以下命令获得</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 97c8460bc1cda8233866686d9cae270e0e0113f1</span><br><span class=\"line\">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class=\"line\">Date:   Mon Jun 20 15:44:01 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update README.md</span><br><span class=\"line\"></span><br><span class=\"line\">.....(中间有10条日志)</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class=\"line\">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class=\"line\">Date:   Mon Jun 01 13:16:22 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    README.md</span><br></pre></td></tr></table></figure>\n<p><code>commit 97c8460bc1cda8233866686d9cae270e0e0113f1</code>，这一长串就是我们所需的ID,一般情况下，只需要前7位就够了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD 2d93622 //回退到commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class=\"line\">$ git reset --hard HEAD~12 //回退到往上第12个版本，也是2d93622这个版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交到服务器\"><a href=\"#提交到服务器\" class=\"headerlink\" title=\"提交到服务器\"></a>提交到服务器</h3><p>当<code>commit</code>后，你做出的修改只是提交到了暂存区，下一步就需要把代码提交到服务器。这里的服务器，可以自己搭建，也可以是公司的，或者第三方的。这里我们将代码提交到<code>github</code>上(假设你是已经有一个<code>github</code>账户，并创建了一个仓库)。</p>\n<h3 id=\"本地生成SSH-KEY-并进行配置\"><a href=\"#本地生成SSH-KEY-并进行配置\" class=\"headerlink\" title=\"本地生成SSH KEY 并进行配置\"></a>本地生成SSH KEY 并进行配置</h3><p><code>SSH KEY</code>就是连通本地与<code>github</code>的桥梁，钥匙，使用以下命令来生成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作方案见：Git---新手入门2---链接github，配置公钥</span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n<p>然后回车，中途会提示设置密码，可以设置也可以不设置，如果设置密码，以后每次提交需要输入密码。<br>然后在用户主目录（例如：C:\\Users\\Administrator.ssh）找到<code>.ssh</code>，其中<code>id_rsa</code>表示私钥不能泄露和<code>id_rsa.pub</code>表示公钥，用于对外，可以公开。</p>\n<h3 id=\"github设置本地公钥\"><a href=\"#github设置本地公钥\" class=\"headerlink\" title=\"github设置本地公钥\"></a>github设置本地公钥</h3><p>打开<code>id_rsa.pub</code>，复制里面的全部内容；<br>进入<code>github</code>账户；<br>找到 <code>setting</code>；<br>打开<code>SSH KEYS</code>新建一个<code>SSH KEY</code>，名字随便取，然后粘贴<code>id_rsa.pub</code>的内容，保存；</p>\n<h3 id=\"测试是否连通\"><a href=\"#测试是否连通\" class=\"headerlink\" title=\"测试是否连通\"></a>测试是否连通</h3><p>理论上讲，上一步操作无特殊错误，就已经和<code>github</code>连通的，为了放心，我们可以测试一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> key <span class=\"string\">'/c/Users/Administrator/.ssh/id_rsa'</span>:  //如果设置了密码，此处将会提示你输入密码</span><br><span class=\"line\">Hi 2ue! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>上面就是成功的提示</p>\n<h3 id=\"github仓库和本地仓库关联\"><a href=\"#github仓库和本地仓库关联\" class=\"headerlink\" title=\"github仓库和本地仓库关联\"></a>github仓库和本地仓库关联</h3><p>有两种方式把本地仓库和<code>github</code>仓库关联起来</p>\n<h4 id=\"方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\"><a href=\"#方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\" class=\"headerlink\" title=\"方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\"></a>方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样</h4><p>登陆账号，新建仓库(new repository)；<br>进入仓库主页，找到按钮<code>clone or download</code>按钮，复制里面的<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:userName/repositoryName.git<code>;\n打开</code>git bash`，clone；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:userName/repositoryName.git</span><br></pre></td></tr></table></figure>\n<p>就会把这个项目克隆到你当前目录下。此时你就可以顺畅的像<code>github</code>推送你的东西了。</p>\n<h4 id=\"方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\"><a href=\"#方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\" class=\"headerlink\" title=\"方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\"></a>方法二：利用命令关联仓库，本地仓库名可以和<code>github</code>的仓库名不一样</h4><p>假设你github上有一个项目，<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:userName/repositoryName.git`</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir testRepository  //新建目录testRepository</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> testRepository  //切换到这个目录</span><br><span class=\"line\">$ git init  //初始化当前目录</span><br><span class=\"line\">$ git remote add origin git@github.com:userName/repositoryName.git</span><br><span class=\"line\">// origin为本地暂存区的名字，为了语义化，建议默认为它</span><br><span class=\"line\">// 注意github上的repositoryName与本地的testRepository可以不一样</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交-push\"><a href=\"#提交-push\" class=\"headerlink\" title=\"提交(push)\"></a>提交(push)</h2><h3 id=\"第一次提交\"><a href=\"#第一次提交\" class=\"headerlink\" title=\"第一次提交\"></a>第一次提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二次及以后\"><a href=\"#第二次及以后\" class=\"headerlink\" title=\"第二次及以后\"></a>第二次及以后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>第一次提交带参数<code>-u</code>是为了让你本地和<code>github</code>的仓库保持同步。</p>\n<h3 id=\"更新代码-pull\"><a href=\"#更新代码-pull\" class=\"headerlink\" title=\"更新代码(pull)\"></a>更新代码(pull)</h3><p>当我们在一台设备上对<code>github</code>提交(push)代码之后，在另外的设备上修改这个项目时就必须先从<code>github</code>更新代码，以保持代码的同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch (建立连接)</span><br><span class=\"line\">$ git pull （拉去资源）</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\"><a href=\"#至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\" class=\"headerlink\" title=\"至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\"></a>至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。</h3><p><code>github</code>上创建一个新的项目<br><code>github repositoryName</code>：testGit<br><code>github userName</code>：2ue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ makdir testGit   //创建一个空文件夹testGit(名字任意取)，做仓库</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> testGit    //切换到目录testGit</span><br><span class=\"line\">$ git init    //初始化testGit为本地仓库</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'this repository is localhost'</span> &gt; README.md</span><br><span class=\"line\">//创建文件README.md，并写入<span class=\"string\">'this repository is localhost'</span></span><br><span class=\"line\">//在window下以上操作的第一步和第四步可以在图形化界面中完成</span><br><span class=\"line\">$ git add README.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'add README.md'</span>//提交更新，并注释信息“add README.md”</span><br><span class=\"line\">$ git remote add origin git@github.com:2ue/testGit.git   //关联github上的项目</span><br><span class=\"line\">$ git push -u origin master   //提交到github</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>工欲善其事，必先利其器。git一个不可或缺的利器，其魅力值得我们慢慢品尝！</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>官网下载最新版本安装，然后查看是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -v</span><br><span class=\"line\">git version 2.7.3.windows.1  //2.7.3为当前版本</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局个人信息配置\"><a href=\"#全局个人信息配置\" class=\"headerlink\" title=\"全局个人信息配置\"></a>全局个人信息配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email\"</span></span><br></pre></td></tr></table></figure>\n<p>windows环境也可以打开计算机用户文件夹下的.gitconfig编辑</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = username</span><br><span class=\"line\">    email = email</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"初始化本地仓库\"><a href=\"#初始化本地仓库\" class=\"headerlink\" title=\"初始化本地仓库\"></a>初始化本地仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> storage</span><br><span class=\"line\">$ git init //初始化当前目录为本地仓库</span><br><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> D:/storages/.git/  //初始化了一个空的目录为本地仓库</span><br></pre></td></tr></table></figure>\n<h3 id=\"第一次提交-提交到本地\"><a href=\"#第一次提交-提交到本地\" class=\"headerlink\" title=\"第一次提交(提交到本地)\"></a>第一次提交(提交到本地)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"添加项目文档简介\"</span>  //-m 参数后面跟表示对当前提交的一个简单说明</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><p>查看当前文件处于何种状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退\"><a href=\"#回退\" class=\"headerlink\" title=\"回退\"></a>回退</h3><p>当你<code>add</code>或<code>commit</code>了错误的文件时，可以使用以下命令来撤回<code>add</code>或者<code>commit</code>;<br>那么你必须首先明白工作区和暂存区是什么？<br>直白的说.git文件夹所在的目录(即<code>git init</code>初始化的目录)为当前工作区<br>当<code>add</code>之后，<code>add</code>的文件就会进入暂存区<br>当<code>commit</code>之后，暂存区就会清空，<code>commit</code>的文件就会进入本地当前的分支(如master分支)<br>PS：关于工作区和暂存区更详细的解释可以去看廖雪峰<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000\" target=\"_blank\" rel=\"noopener\">工作区和暂存区</a></p>\n<h3 id=\"丢弃工区的修改\"><a href=\"#丢弃工区的修改\" class=\"headerlink\" title=\"丢弃工区的修改\"></a>丢弃工区的修改</h3><p>命令<code>git checkout -- filename</code>可以把<code>filename</code>文件在工作区的修改全部撤销</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销暂存区的修改\"><a href=\"#撤销暂存区的修改\" class=\"headerlink\" title=\"撤销暂存区的修改\"></a>撤销暂存区的修改</h3><p>命令<code>git reset HEAD filename</code>可以把<code>filename</code>文件在暂存区的修改全部撤销</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD README.md</span><br><span class=\"line\">$ git checkout -- README.md //--参数不能省</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>当然<code>reset</code> 命令,不仅能够撤销暂存区的内容，还能回退版本，即使你错误提交，也可以用<code>reset</code>回滚到之前的版本<br>如果你提交了错误文件，可以使用以下命令来回退;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p><code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>HEAD</code>后面的参数可以跟<code>commit ID</code>，这个ID可以通过以下命令获得</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 97c8460bc1cda8233866686d9cae270e0e0113f1</span><br><span class=\"line\">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class=\"line\">Date:   Mon Jun 20 15:44:01 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update README.md</span><br><span class=\"line\"></span><br><span class=\"line\">.....(中间有10条日志)</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class=\"line\">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class=\"line\">Date:   Mon Jun 01 13:16:22 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    README.md</span><br></pre></td></tr></table></figure>\n<p><code>commit 97c8460bc1cda8233866686d9cae270e0e0113f1</code>，这一长串就是我们所需的ID,一般情况下，只需要前7位就够了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD 2d93622 //回退到commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class=\"line\">$ git reset --hard HEAD~12 //回退到往上第12个版本，也是2d93622这个版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交到服务器\"><a href=\"#提交到服务器\" class=\"headerlink\" title=\"提交到服务器\"></a>提交到服务器</h3><p>当<code>commit</code>后，你做出的修改只是提交到了暂存区，下一步就需要把代码提交到服务器。这里的服务器，可以自己搭建，也可以是公司的，或者第三方的。这里我们将代码提交到<code>github</code>上(假设你是已经有一个<code>github</code>账户，并创建了一个仓库)。</p>\n<h3 id=\"本地生成SSH-KEY-并进行配置\"><a href=\"#本地生成SSH-KEY-并进行配置\" class=\"headerlink\" title=\"本地生成SSH KEY 并进行配置\"></a>本地生成SSH KEY 并进行配置</h3><p><code>SSH KEY</code>就是连通本地与<code>github</code>的桥梁，钥匙，使用以下命令来生成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作方案见：Git---新手入门2---链接github，配置公钥</span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n<p>然后回车，中途会提示设置密码，可以设置也可以不设置，如果设置密码，以后每次提交需要输入密码。<br>然后在用户主目录（例如：C:\\Users\\Administrator.ssh）找到<code>.ssh</code>，其中<code>id_rsa</code>表示私钥不能泄露和<code>id_rsa.pub</code>表示公钥，用于对外，可以公开。</p>\n<h3 id=\"github设置本地公钥\"><a href=\"#github设置本地公钥\" class=\"headerlink\" title=\"github设置本地公钥\"></a>github设置本地公钥</h3><p>打开<code>id_rsa.pub</code>，复制里面的全部内容；<br>进入<code>github</code>账户；<br>找到 <code>setting</code>；<br>打开<code>SSH KEYS</code>新建一个<code>SSH KEY</code>，名字随便取，然后粘贴<code>id_rsa.pub</code>的内容，保存；</p>\n<h3 id=\"测试是否连通\"><a href=\"#测试是否连通\" class=\"headerlink\" title=\"测试是否连通\"></a>测试是否连通</h3><p>理论上讲，上一步操作无特殊错误，就已经和<code>github</code>连通的，为了放心，我们可以测试一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> key <span class=\"string\">'/c/Users/Administrator/.ssh/id_rsa'</span>:  //如果设置了密码，此处将会提示你输入密码</span><br><span class=\"line\">Hi 2ue! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>上面就是成功的提示</p>\n<h3 id=\"github仓库和本地仓库关联\"><a href=\"#github仓库和本地仓库关联\" class=\"headerlink\" title=\"github仓库和本地仓库关联\"></a>github仓库和本地仓库关联</h3><p>有两种方式把本地仓库和<code>github</code>仓库关联起来</p>\n<h4 id=\"方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\"><a href=\"#方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\" class=\"headerlink\" title=\"方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样\"></a>方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样</h4><p>登陆账号，新建仓库(new repository)；<br>进入仓库主页，找到按钮<code>clone or download</code>按钮，复制里面的<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:userName/repositoryName.git<code>;\n打开</code>git bash`，clone；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:userName/repositoryName.git</span><br></pre></td></tr></table></figure>\n<p>就会把这个项目克隆到你当前目录下。此时你就可以顺畅的像<code>github</code>推送你的东西了。</p>\n<h4 id=\"方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\"><a href=\"#方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\" class=\"headerlink\" title=\"方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样\"></a>方法二：利用命令关联仓库，本地仓库名可以和<code>github</code>的仓库名不一样</h4><p>假设你github上有一个项目，<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:userName/repositoryName.git`</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir testRepository  //新建目录testRepository</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> testRepository  //切换到这个目录</span><br><span class=\"line\">$ git init  //初始化当前目录</span><br><span class=\"line\">$ git remote add origin git@github.com:userName/repositoryName.git</span><br><span class=\"line\">// origin为本地暂存区的名字，为了语义化，建议默认为它</span><br><span class=\"line\">// 注意github上的repositoryName与本地的testRepository可以不一样</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交-push\"><a href=\"#提交-push\" class=\"headerlink\" title=\"提交(push)\"></a>提交(push)</h2><h3 id=\"第一次提交\"><a href=\"#第一次提交\" class=\"headerlink\" title=\"第一次提交\"></a>第一次提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二次及以后\"><a href=\"#第二次及以后\" class=\"headerlink\" title=\"第二次及以后\"></a>第二次及以后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>第一次提交带参数<code>-u</code>是为了让你本地和<code>github</code>的仓库保持同步。</p>\n<h3 id=\"更新代码-pull\"><a href=\"#更新代码-pull\" class=\"headerlink\" title=\"更新代码(pull)\"></a>更新代码(pull)</h3><p>当我们在一台设备上对<code>github</code>提交(push)代码之后，在另外的设备上修改这个项目时就必须先从<code>github</code>更新代码，以保持代码的同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch (建立连接)</span><br><span class=\"line\">$ git pull （拉去资源）</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\"><a href=\"#至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\" class=\"headerlink\" title=\"至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。\"></a>至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。</h3><p><code>github</code>上创建一个新的项目<br><code>github repositoryName</code>：testGit<br><code>github userName</code>：2ue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ makdir testGit   //创建一个空文件夹testGit(名字任意取)，做仓库</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> testGit    //切换到目录testGit</span><br><span class=\"line\">$ git init    //初始化testGit为本地仓库</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'this repository is localhost'</span> &gt; README.md</span><br><span class=\"line\">//创建文件README.md，并写入<span class=\"string\">'this repository is localhost'</span></span><br><span class=\"line\">//在window下以上操作的第一步和第四步可以在图形化界面中完成</span><br><span class=\"line\">$ git add README.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'add README.md'</span>//提交更新，并注释信息“add README.md”</span><br><span class=\"line\">$ git remote add origin git@github.com:2ue/testGit.git   //关联github上的项目</span><br><span class=\"line\">$ git push -u origin master   //提交到github</span><br></pre></td></tr></table></figure>\n"},{"title":"Git---新手入门2---链接github，配置公钥","date":"2018-02-10T08:40:01.000Z","author":"T.stt","_content":"\n> 记录如何配置公钥的所有的历程\n\n## 下载生成软件并安装\n\n可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)\n\n``` bash\ngit status\n```\n\n## 提交到暂存区\n\n``` bash\n//提交某个文件\ngit add fileName\n//提交所有修改文件的三种写法\ngit add *\ngit add .\ngit add --all\n```\n## 保存在本地仓库\n\n``` bash\ngit commit -m \"note text（注释的内容，可为中文）\"\n```\n\n## 提交到远程仓库\n\n其中origin是本地仓库名，remote是远程仓库分支名\n\n``` bash\ngit push <origin> <remote>\n//如提交本覅origin到远程master分支\ngit push origin master\n```\n## 删除文件\n\n``` bash\n//单个\ngit rm xxx\n//多个\ngit rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）\n//接下来就是正常的提交操作了\n$ git add . \n$ git commit -m \"clear\"\n$ git push origin branchName\n\n```\n\n## 分支\n\n### 查看分支\n\n``` bash\n//查看本地分支\ngit branch\n//查看远程分支\ngit branch -r\n//查看所有分支\ngit branch -a\n```\n\n### 创建分支\n\n``` bash\n//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支\n//创建与切换分开实现\ngit branch name    //创建分支\ngit checkout dev   //切换分支\n//创建与切换合并实现\ngit checkout -b dev   \n```\n\n### 删除分支\n\n``` bash\n//删除本地分支\ngit branch -d name\n//删除远程分支两种方法\ngit push origin :name //冒号不能省\ngit branch -r -d origin/name\n```\n\n### 切换分支\n\n``` bash\ngit checkout name //如果分支不存在则创建一个名为name的新分支\n```\n\n### 合并分支\n\n``` bash\n//例如：合并分支dev到master\n//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次\n//然后切换分支到最终要合并的分支上（此处为master）\ngit checkout master\n//执行本地合并（合并dev到master）\ngit merge dev\n//推送合并到远程\ngit push origin master\n```\n\n### 放弃本地修改强制更新\n\n> git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\n```\n\n### 回退到某个历史版本\n\n> 首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66\n\n``` bash\n//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本\ngit reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66\n//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送\ngit push -f origin master\n```\n","source":"_posts/learn-git-2.md","raw":"---\ntitle: Git---新手入门2---链接github，配置公钥\ndate: 2018-2-10 16:40:01\nauthor: T.stt\ntags:\n- git\ncategories:\n- [工具,git]\n---\n\n> 记录如何配置公钥的所有的历程\n\n## 下载生成软件并安装\n\n可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)\n\n``` bash\ngit status\n```\n\n## 提交到暂存区\n\n``` bash\n//提交某个文件\ngit add fileName\n//提交所有修改文件的三种写法\ngit add *\ngit add .\ngit add --all\n```\n## 保存在本地仓库\n\n``` bash\ngit commit -m \"note text（注释的内容，可为中文）\"\n```\n\n## 提交到远程仓库\n\n其中origin是本地仓库名，remote是远程仓库分支名\n\n``` bash\ngit push <origin> <remote>\n//如提交本覅origin到远程master分支\ngit push origin master\n```\n## 删除文件\n\n``` bash\n//单个\ngit rm xxx\n//多个\ngit rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）\n//接下来就是正常的提交操作了\n$ git add . \n$ git commit -m \"clear\"\n$ git push origin branchName\n\n```\n\n## 分支\n\n### 查看分支\n\n``` bash\n//查看本地分支\ngit branch\n//查看远程分支\ngit branch -r\n//查看所有分支\ngit branch -a\n```\n\n### 创建分支\n\n``` bash\n//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支\n//创建与切换分开实现\ngit branch name    //创建分支\ngit checkout dev   //切换分支\n//创建与切换合并实现\ngit checkout -b dev   \n```\n\n### 删除分支\n\n``` bash\n//删除本地分支\ngit branch -d name\n//删除远程分支两种方法\ngit push origin :name //冒号不能省\ngit branch -r -d origin/name\n```\n\n### 切换分支\n\n``` bash\ngit checkout name //如果分支不存在则创建一个名为name的新分支\n```\n\n### 合并分支\n\n``` bash\n//例如：合并分支dev到master\n//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次\n//然后切换分支到最终要合并的分支上（此处为master）\ngit checkout master\n//执行本地合并（合并dev到master）\ngit merge dev\n//推送合并到远程\ngit push origin master\n```\n\n### 放弃本地修改强制更新\n\n> git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\n```\n\n### 回退到某个历史版本\n\n> 首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66\n\n``` bash\n//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本\ngit reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66\n//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送\ngit push -f origin master\n```\n","slug":"learn-git-2","published":1,"updated":"2018-11-01T06:53:24.046Z","_id":"cjny0swgn002a2kv7ii66ky6w","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记录如何配置公钥的所有的历程</p>\n</blockquote>\n<h2 id=\"下载生成软件并安装\"><a href=\"#下载生成软件并安装\" class=\"headerlink\" title=\"下载生成软件并安装\"></a>下载生成软件并安装</h2><p>可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//提交某个文件</span><br><span class=\"line\">git add fileName</span><br><span class=\"line\">//提交所有修改文件的三种写法</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存在本地仓库\"><a href=\"#保存在本地仓库\" class=\"headerlink\" title=\"保存在本地仓库\"></a>保存在本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"note text（注释的内容，可为中文）\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>其中origin是本地仓库名，remote是远程仓库分支名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;origin&gt; &lt;remote&gt;</span><br><span class=\"line\">//如提交本覅origin到远程master分支</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//单个</span><br><span class=\"line\">git rm xxx</span><br><span class=\"line\">//多个</span><br><span class=\"line\">git rm * -r（记得，<span class=\"built_in\">cd</span> 到你要删除的目录下。当然 * 可以换成指定目录）</span><br><span class=\"line\">//接下来就是正常的提交操作了</span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"clear\"</span></span><br><span class=\"line\">$ git push origin branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">//查看远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">//查看所有分支</span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支</span><br><span class=\"line\">//创建与切换分开实现</span><br><span class=\"line\">git branch name    //创建分支</span><br><span class=\"line\">git checkout dev   //切换分支</span><br><span class=\"line\">//创建与切换合并实现</span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除本地分支</span><br><span class=\"line\">git branch -d name</span><br><span class=\"line\">//删除远程分支两种方法</span><br><span class=\"line\">git push origin :name //冒号不能省</span><br><span class=\"line\">git branch -r -d origin/name</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout name //如果分支不存在则创建一个名为name的新分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例如：合并分支dev到master</span><br><span class=\"line\">//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次</span><br><span class=\"line\">//然后切换分支到最终要合并的分支上（此处为master）</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">//执行本地合并（合并dev到master）</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">//推送合并到远程</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"放弃本地修改强制更新\"><a href=\"#放弃本地修改强制更新\" class=\"headerlink\" title=\"放弃本地修改强制更新\"></a>放弃本地修改强制更新</h3><blockquote>\n<p>git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退到某个历史版本\"><a href=\"#回退到某个历史版本\" class=\"headerlink\" title=\"回退到某个历史版本\"></a>回退到某个历史版本</h3><blockquote>\n<p>首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本</span><br><span class=\"line\">git reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66</span><br><span class=\"line\">//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送</span><br><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录如何配置公钥的所有的历程</p>\n</blockquote>\n<h2 id=\"下载生成软件并安装\"><a href=\"#下载生成软件并安装\" class=\"headerlink\" title=\"下载生成软件并安装\"></a>下载生成软件并安装</h2><p>可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//提交某个文件</span><br><span class=\"line\">git add fileName</span><br><span class=\"line\">//提交所有修改文件的三种写法</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存在本地仓库\"><a href=\"#保存在本地仓库\" class=\"headerlink\" title=\"保存在本地仓库\"></a>保存在本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"note text（注释的内容，可为中文）\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>其中origin是本地仓库名，remote是远程仓库分支名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;origin&gt; &lt;remote&gt;</span><br><span class=\"line\">//如提交本覅origin到远程master分支</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//单个</span><br><span class=\"line\">git rm xxx</span><br><span class=\"line\">//多个</span><br><span class=\"line\">git rm * -r（记得，<span class=\"built_in\">cd</span> 到你要删除的目录下。当然 * 可以换成指定目录）</span><br><span class=\"line\">//接下来就是正常的提交操作了</span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"clear\"</span></span><br><span class=\"line\">$ git push origin branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">//查看远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">//查看所有分支</span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支</span><br><span class=\"line\">//创建与切换分开实现</span><br><span class=\"line\">git branch name    //创建分支</span><br><span class=\"line\">git checkout dev   //切换分支</span><br><span class=\"line\">//创建与切换合并实现</span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除本地分支</span><br><span class=\"line\">git branch -d name</span><br><span class=\"line\">//删除远程分支两种方法</span><br><span class=\"line\">git push origin :name //冒号不能省</span><br><span class=\"line\">git branch -r -d origin/name</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout name //如果分支不存在则创建一个名为name的新分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例如：合并分支dev到master</span><br><span class=\"line\">//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次</span><br><span class=\"line\">//然后切换分支到最终要合并的分支上（此处为master）</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">//执行本地合并（合并dev到master）</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">//推送合并到远程</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"放弃本地修改强制更新\"><a href=\"#放弃本地修改强制更新\" class=\"headerlink\" title=\"放弃本地修改强制更新\"></a>放弃本地修改强制更新</h3><blockquote>\n<p>git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退到某个历史版本\"><a href=\"#回退到某个历史版本\" class=\"headerlink\" title=\"回退到某个历史版本\"></a>回退到某个历史版本</h3><blockquote>\n<p>首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本</span><br><span class=\"line\">git reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66</span><br><span class=\"line\">//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送</span><br><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n"},{"title":"Git---常用命令","date":"2018-02-10T08:16:01.000Z","author":"T.stt","_content":"\n> 记录一些项目中常用的git命令，方便查阅\n\n## 查看状态\n\n可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)\n\n``` bash\ngit status\n```\n\n## 提交到暂存区\n\n``` bash\n//提交某个文件\ngit add fileName\n//提交所有修改文件的三种写法\ngit add *\ngit add .\ngit add --all\n```\n## 保存在本地仓库\n\n``` bash\ngit commit -m \"note text（注释的内容，可为中文）\"\n```\n\n## 提交到远程仓库\n\n其中origin是本地仓库名，remote是远程仓库分支名\n\n``` bash\ngit push <origin> <remote>\n//如提交本覅origin到远程master分支\ngit push origin master\n```\n## 删除文件\n\n``` bash\n//单个\ngit rm xxx\n//多个\ngit rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）\n//接下来就是正常的提交操作了\n$ git add . \n$ git commit -m \"clear\"\n$ git push origin branchName\n\n```\n\n## 分支\n\n### 查看分支\n\n``` bash\n//查看本地分支\ngit branch\n//查看远程分支\ngit branch -r\n//查看所有分支\ngit branch -a\n```\n\n### 创建分支\n\n``` bash\n//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支\n//创建与切换分开实现\ngit branch name    //创建分支\ngit checkout dev   //切换分支\n//创建与切换合并实现\ngit checkout -b dev   \n```\n\n### 删除分支\n\n``` bash\n//删除本地分支\ngit branch -d name\n//删除远程分支两种方法\ngit push origin :name //冒号不能省\ngit branch -r -d origin/name\n```\n\n### 切换分支\n\n``` bash\ngit checkout name //如果分支不存在则创建一个名为name的新分支\n```\n\n### 合并分支\n\n``` bash\n//例如：合并分支dev到master\n//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次\n//然后切换分支到最终要合并的分支上（此处为master）\ngit checkout master\n//执行本地合并（合并dev到master）\ngit merge dev\n//推送合并到远程\ngit push origin master\n```\n\n### 放弃本地修改强制更新\n\n> git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\n```\n\n### 回退到某个历史版本\n\n> 首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66\n\n``` bash\n//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本\ngit reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66\n//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送\ngit push -f origin master\n```\n","source":"_posts/learn-git-3.md","raw":"---\ntitle: Git---常用命令\ndate: 2018-2-10 16:16:01\nauthor: T.stt\ntags:\n- git\ncategories:\n- [工具,git]\n---\n\n> 记录一些项目中常用的git命令，方便查阅\n\n## 查看状态\n\n可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)\n\n``` bash\ngit status\n```\n\n## 提交到暂存区\n\n``` bash\n//提交某个文件\ngit add fileName\n//提交所有修改文件的三种写法\ngit add *\ngit add .\ngit add --all\n```\n## 保存在本地仓库\n\n``` bash\ngit commit -m \"note text（注释的内容，可为中文）\"\n```\n\n## 提交到远程仓库\n\n其中origin是本地仓库名，remote是远程仓库分支名\n\n``` bash\ngit push <origin> <remote>\n//如提交本覅origin到远程master分支\ngit push origin master\n```\n## 删除文件\n\n``` bash\n//单个\ngit rm xxx\n//多个\ngit rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）\n//接下来就是正常的提交操作了\n$ git add . \n$ git commit -m \"clear\"\n$ git push origin branchName\n\n```\n\n## 分支\n\n### 查看分支\n\n``` bash\n//查看本地分支\ngit branch\n//查看远程分支\ngit branch -r\n//查看所有分支\ngit branch -a\n```\n\n### 创建分支\n\n``` bash\n//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支\n//创建与切换分开实现\ngit branch name    //创建分支\ngit checkout dev   //切换分支\n//创建与切换合并实现\ngit checkout -b dev   \n```\n\n### 删除分支\n\n``` bash\n//删除本地分支\ngit branch -d name\n//删除远程分支两种方法\ngit push origin :name //冒号不能省\ngit branch -r -d origin/name\n```\n\n### 切换分支\n\n``` bash\ngit checkout name //如果分支不存在则创建一个名为name的新分支\n```\n\n### 合并分支\n\n``` bash\n//例如：合并分支dev到master\n//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次\n//然后切换分支到最终要合并的分支上（此处为master）\ngit checkout master\n//执行本地合并（合并dev到master）\ngit merge dev\n//推送合并到远程\ngit push origin master\n```\n\n### 放弃本地修改强制更新\n\n> git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本\n\n``` bash\ngit fetch --all\ngit reset --hard origin/master\n```\n\n### 回退到某个历史版本\n\n> 首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66\n\n``` bash\n//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本\ngit reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66\n//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送\ngit push -f origin master\n```\n","slug":"learn-git-3","published":1,"updated":"2018-11-01T06:53:30.957Z","_id":"cjny0swgo002c2kv7v624lxyd","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记录一些项目中常用的git命令，方便查阅</p>\n</blockquote>\n<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><p>可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//提交某个文件</span><br><span class=\"line\">git add fileName</span><br><span class=\"line\">//提交所有修改文件的三种写法</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存在本地仓库\"><a href=\"#保存在本地仓库\" class=\"headerlink\" title=\"保存在本地仓库\"></a>保存在本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"note text（注释的内容，可为中文）\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>其中origin是本地仓库名，remote是远程仓库分支名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;origin&gt; &lt;remote&gt;</span><br><span class=\"line\">//如提交本覅origin到远程master分支</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//单个</span><br><span class=\"line\">git rm xxx</span><br><span class=\"line\">//多个</span><br><span class=\"line\">git rm * -r（记得，<span class=\"built_in\">cd</span> 到你要删除的目录下。当然 * 可以换成指定目录）</span><br><span class=\"line\">//接下来就是正常的提交操作了</span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"clear\"</span></span><br><span class=\"line\">$ git push origin branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">//查看远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">//查看所有分支</span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支</span><br><span class=\"line\">//创建与切换分开实现</span><br><span class=\"line\">git branch name    //创建分支</span><br><span class=\"line\">git checkout dev   //切换分支</span><br><span class=\"line\">//创建与切换合并实现</span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除本地分支</span><br><span class=\"line\">git branch -d name</span><br><span class=\"line\">//删除远程分支两种方法</span><br><span class=\"line\">git push origin :name //冒号不能省</span><br><span class=\"line\">git branch -r -d origin/name</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout name //如果分支不存在则创建一个名为name的新分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例如：合并分支dev到master</span><br><span class=\"line\">//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次</span><br><span class=\"line\">//然后切换分支到最终要合并的分支上（此处为master）</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">//执行本地合并（合并dev到master）</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">//推送合并到远程</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"放弃本地修改强制更新\"><a href=\"#放弃本地修改强制更新\" class=\"headerlink\" title=\"放弃本地修改强制更新\"></a>放弃本地修改强制更新</h3><blockquote>\n<p>git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退到某个历史版本\"><a href=\"#回退到某个历史版本\" class=\"headerlink\" title=\"回退到某个历史版本\"></a>回退到某个历史版本</h3><blockquote>\n<p>首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本</span><br><span class=\"line\">git reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66</span><br><span class=\"line\">//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送</span><br><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录一些项目中常用的git命令，方便查阅</p>\n</blockquote>\n<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><p>可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//提交某个文件</span><br><span class=\"line\">git add fileName</span><br><span class=\"line\">//提交所有修改文件的三种写法</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存在本地仓库\"><a href=\"#保存在本地仓库\" class=\"headerlink\" title=\"保存在本地仓库\"></a>保存在本地仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"note text（注释的内容，可为中文）\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h2><p>其中origin是本地仓库名，remote是远程仓库分支名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push &lt;origin&gt; &lt;remote&gt;</span><br><span class=\"line\">//如提交本覅origin到远程master分支</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//单个</span><br><span class=\"line\">git rm xxx</span><br><span class=\"line\">//多个</span><br><span class=\"line\">git rm * -r（记得，<span class=\"built_in\">cd</span> 到你要删除的目录下。当然 * 可以换成指定目录）</span><br><span class=\"line\">//接下来就是正常的提交操作了</span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"clear\"</span></span><br><span class=\"line\">$ git push origin branchName</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">//查看远程分支</span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">//查看所有分支</span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从已有的分支创建新的分支(如从master分支),创建一个dev分支并切换分支</span><br><span class=\"line\">//创建与切换分开实现</span><br><span class=\"line\">git branch name    //创建分支</span><br><span class=\"line\">git checkout dev   //切换分支</span><br><span class=\"line\">//创建与切换合并实现</span><br><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除本地分支</span><br><span class=\"line\">git branch -d name</span><br><span class=\"line\">//删除远程分支两种方法</span><br><span class=\"line\">git push origin :name //冒号不能省</span><br><span class=\"line\">git branch -r -d origin/name</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout name //如果分支不存在则创建一个名为name的新分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例如：合并分支dev到master</span><br><span class=\"line\">//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次</span><br><span class=\"line\">//然后切换分支到最终要合并的分支上（此处为master）</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">//执行本地合并（合并dev到master）</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">//推送合并到远程</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"放弃本地修改强制更新\"><a href=\"#放弃本地修改强制更新\" class=\"headerlink\" title=\"放弃本地修改强制更新\"></a>放弃本地修改强制更新</h3><blockquote>\n<p>git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n<h3 id=\"回退到某个历史版本\"><a href=\"#回退到某个历史版本\" class=\"headerlink\" title=\"回退到某个历史版本\"></a>回退到某个历史版本</h3><blockquote>\n<p>首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本</span><br><span class=\"line\">git reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66</span><br><span class=\"line\">//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送</span><br><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n"},{"title":"git-hexo-next 主题的更改","date":"2018-02-12T10:32:00.000Z","author":"T.stt","_content":"\n>根据自己的需求去将hexo-next的皮肤外观以及需求变得符合自己，创造一个全新不一样的你\n-背景的更改\n-页面展示尺寸的更改\n\n---\n# 背景配置\n\n## 整体的背景配置\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl这个文件的第65行background:进行更改\n```\n## 按钮背景\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_common\\components\\post\\post-button.styl 第七行修 background: ;\n```\n## 站点概况背景\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl\n```\n## 菜单栏背景\n``` bash\n\tnext\\source\\css_schemes\\Pisces\\_layout.styl 文件里.header-inner 这个选择器下的background 就是背景色\n```\n\n---\n# 界面尺寸的更改\n## 右边内容部分\n``` bash\n\tnext\\source\\css_schemes\\Pisces\\_layout.styl 文件里\n\t.content-wrap 这个选择器下的把width: $content-desktop;改成width: calc(100% - 260px);\n\t- 即左边宽度加上margin值\n```\n\n---\n# [Hexo+Next个人博客主题优化](https://www.jianshu.com/p/efbeddc5eb19)","source":"_posts/learn-git-hexo-2.md","raw":"---\ntitle: git-hexo-next 主题的更改\ndate: 2018-02-12 18:32:00\nauthor: T.stt\ntags:\n- git-hexo\ncategories:\n- [工具,hexo]\n---\n\n>根据自己的需求去将hexo-next的皮肤外观以及需求变得符合自己，创造一个全新不一样的你\n-背景的更改\n-页面展示尺寸的更改\n\n---\n# 背景配置\n\n## 整体的背景配置\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl这个文件的第65行background:进行更改\n```\n## 按钮背景\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_common\\components\\post\\post-button.styl 第七行修 background: ;\n```\n## 站点概况背景\n``` bash\n\t博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl\n```\n## 菜单栏背景\n``` bash\n\tnext\\source\\css_schemes\\Pisces\\_layout.styl 文件里.header-inner 这个选择器下的background 就是背景色\n```\n\n---\n# 界面尺寸的更改\n## 右边内容部分\n``` bash\n\tnext\\source\\css_schemes\\Pisces\\_layout.styl 文件里\n\t.content-wrap 这个选择器下的把width: $content-desktop;改成width: calc(100% - 260px);\n\t- 即左边宽度加上margin值\n```\n\n---\n# [Hexo+Next个人博客主题优化](https://www.jianshu.com/p/efbeddc5eb19)","slug":"learn-git-hexo-2","published":1,"updated":"2018-11-01T09:01:08.260Z","_id":"cjny0swgq002f2kv7ahnbe7h3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>根据自己的需求去将hexo-next的皮肤外观以及需求变得符合自己，创造一个全新不一样的你<br>-背景的更改<br>-页面展示尺寸的更改</p>\n</blockquote>\n<hr>\n<h1 id=\"背景配置\"><a href=\"#背景配置\" class=\"headerlink\" title=\"背景配置\"></a>背景配置</h1><h2 id=\"整体的背景配置\"><a href=\"#整体的背景配置\" class=\"headerlink\" title=\"整体的背景配置\"></a>整体的背景配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_schemes\\Pisces\\_layout.styl这个文件的第65行background:进行更改</span><br></pre></td></tr></table></figure>\n<h2 id=\"按钮背景\"><a href=\"#按钮背景\" class=\"headerlink\" title=\"按钮背景\"></a>按钮背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_common\\components\\post\\post-button.styl 第七行修 background: ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"站点概况背景\"><a href=\"#站点概况背景\" class=\"headerlink\" title=\"站点概况背景\"></a>站点概况背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_schemes\\Pisces\\_sidebar.styl</span><br></pre></td></tr></table></figure>\n<h2 id=\"菜单栏背景\"><a href=\"#菜单栏背景\" class=\"headerlink\" title=\"菜单栏背景\"></a>菜单栏背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next\\<span class=\"built_in\">source</span>\\css_schemes\\Pisces\\_layout.styl 文件里.header-inner 这个选择器下的background 就是背景色</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"界面尺寸的更改\"><a href=\"#界面尺寸的更改\" class=\"headerlink\" title=\"界面尺寸的更改\"></a>界面尺寸的更改</h1><h2 id=\"右边内容部分\"><a href=\"#右边内容部分\" class=\"headerlink\" title=\"右边内容部分\"></a>右边内容部分</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next\\<span class=\"built_in\">source</span>\\css_schemes\\Pisces\\_layout.styl 文件里</span><br><span class=\"line\">.content-wrap 这个选择器下的把width: <span class=\"variable\">$content</span>-desktop;改成width: calc(100% - 260px);</span><br><span class=\"line\">- 即左边宽度加上margin值</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Hexo-Next个人博客主题优化\"><a href=\"#Hexo-Next个人博客主题优化\" class=\"headerlink\" title=\"Hexo+Next个人博客主题优化\"></a><a href=\"https://www.jianshu.com/p/efbeddc5eb19\" target=\"_blank\" rel=\"noopener\">Hexo+Next个人博客主题优化</a></h1>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>根据自己的需求去将hexo-next的皮肤外观以及需求变得符合自己，创造一个全新不一样的你<br>-背景的更改<br>-页面展示尺寸的更改</p>\n</blockquote>\n<hr>\n<h1 id=\"背景配置\"><a href=\"#背景配置\" class=\"headerlink\" title=\"背景配置\"></a>背景配置</h1><h2 id=\"整体的背景配置\"><a href=\"#整体的背景配置\" class=\"headerlink\" title=\"整体的背景配置\"></a>整体的背景配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_schemes\\Pisces\\_layout.styl这个文件的第65行background:进行更改</span><br></pre></td></tr></table></figure>\n<h2 id=\"按钮背景\"><a href=\"#按钮背景\" class=\"headerlink\" title=\"按钮背景\"></a>按钮背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_common\\components\\post\\post-button.styl 第七行修 background: ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"站点概况背景\"><a href=\"#站点概况背景\" class=\"headerlink\" title=\"站点概况背景\"></a>站点概况背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">博客根目录 themes\\next\\<span class=\"built_in\">source</span>\\css\\_schemes\\Pisces\\_sidebar.styl</span><br></pre></td></tr></table></figure>\n<h2 id=\"菜单栏背景\"><a href=\"#菜单栏背景\" class=\"headerlink\" title=\"菜单栏背景\"></a>菜单栏背景</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next\\<span class=\"built_in\">source</span>\\css_schemes\\Pisces\\_layout.styl 文件里.header-inner 这个选择器下的background 就是背景色</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"界面尺寸的更改\"><a href=\"#界面尺寸的更改\" class=\"headerlink\" title=\"界面尺寸的更改\"></a>界面尺寸的更改</h1><h2 id=\"右边内容部分\"><a href=\"#右边内容部分\" class=\"headerlink\" title=\"右边内容部分\"></a>右边内容部分</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next\\<span class=\"built_in\">source</span>\\css_schemes\\Pisces\\_layout.styl 文件里</span><br><span class=\"line\">.content-wrap 这个选择器下的把width: <span class=\"variable\">$content</span>-desktop;改成width: calc(100% - 260px);</span><br><span class=\"line\">- 即左边宽度加上margin值</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Hexo-Next个人博客主题优化\"><a href=\"#Hexo-Next个人博客主题优化\" class=\"headerlink\" title=\"Hexo+Next个人博客主题优化\"></a><a href=\"https://www.jianshu.com/p/efbeddc5eb19\" target=\"_blank\" rel=\"noopener\">Hexo+Next个人博客主题优化</a></h1>"},{"title":"git-Hexo搭建填坑","date":"2018-02-12T02:50:01.000Z","author":"T.stt","_content":"\n> 记录hexo的开发操作,包括安装hexo--部署hexo--hexo命令--操作中的报错处理--hexo管理--hexo使用的插件。一步步的积累，一步步的改善，制作自己的一个小博客\n\n## hexo 原理\n``` bash\n\thexo在执行hexo g时会在本地先把博客生成的一套静态站点放到public文件夹中，再执行hexo d时将其复制到.deploy文件夹中。\n\tGithub的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，\n\t它也会在你下一次部署时被删去。在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n```\n\n## 安装Hexo\n命令：`npm install -g hexo`\n``` bash\n\t这里可能安装失败，可能权限不够，在命令前加sudo： sudo npm install -g hexo\n```\n\n## 部署Hexo\n`hexo init`     // 这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。\n\n``` bash\n执行命令,会在当前命令的路径下，生成以下文件：\n.\n    ├── .deploy      //执行hexo deploy命令部署到GitHub上的内容目录\n    ├── public       //执行hexo generate命令，输出的静态网页内容目录\n    ├── scaffolds    //layout模板文件目录，其中的md文件可以添加编辑\n    ├── scripts      //扩展脚本目录，这里可以自定义一些javascript脚本\n    ├── source       //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n    |   ├── _drafts  //草稿文章\n    |   └── _posts   //发布文章\n    ├── themes       //主题文件目录\n    ├── _config.yml  //全局配置文件，大多数的设置都在这里\n    └── package.json //应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n```\n## Hexo命令\nHexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。\n\n### 全局设置\n\n``` bash\n全局设置:_config.yml，打开可以配置信息。\n```\n### 局部页面\n\n``` bash\n局部页面：主题的_config.yml，打开可以配置信息。\n```\n### Hexo常用命令\n\n``` bash\n    hexo new \"postName\"       #新建文章\n    hexo new page \"pageName\"  #新建页面\n    hexo generate             #生成静态页面至public目录\n    hexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    hexo deploy               #将.deploy目录部署到GitHub\n```\n\n### Hexo命令简写\n\n``` bash\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n```\n### 复合命令\n``` bash\n\thexo deploy -g\n\thexo server -g\n```\n\n### 清除res\n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成:\n``` bash\n hexo clean //当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。\n (经常更改css的时候不生效时clean然后删除.deploy_git文件夹，重新编译部署就ok)\n```\n## 一些报错处理\n\n### 1.ERROR Plugin load failed: hexo-server\n原因：Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n``` bash\n解决方法，执行命令：\n   sudo npm install hexo-server\n```\n### 2.执行命令hexo server，有如下提示：\n\tUsage: hexo\n\t….\n\t原因：认为是没有生成本地服务\n``` bash\n解决方法，执行命令：\nnpm install hexo-server --save\n提示：hexo-server@0.1.2 node_modules/hexo-server\n```\n### 3.白板和Cannot GET / 几个字\n\t原因:由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n``` bash\n    npm install hexo-renderer-ejs --save\n    npm install hexo-renderer-stylus --save\n    npm install hexo-renderer-marked --save\n    这个时候再重新生成静态文件，命令：hexo generate （或hexo g）\n    启动本地服务器：hexo server （或hexo s）\n\n```\n## 博客管理\n\n``` bash\n生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：\n    title: Mac提高使用效率的一些方法               #文章的标题，这个才是显示的文章标题，其实文件名不影响\n    date: 2015-09-01 20:33:26     #用命令会自动生成，也可以自己写，所以文章时间可以改\n    categories: technology        #文章的分类，这个可以自己定义\n    tags: [Mac,效率,快捷方式]         #tag，为文章添加标签，方便搜索\n```\n\n## 插件\n\n### 1.安装插件\n\n``` bash\n $ npm install <plugin-name> --save\n```\n\n### 2.添加RSS\n\n``` bash\n - npm install hexo-generator-feed\n - 到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！\n   解决方法：$ npm install hexo-generator-feed --save\n```\n\n### 3.在 Hexo 根目录下的 _config.yml 里配置一下，\n在 hexo generate之后，会发现public文件夹下多了atom.xml！\n\n``` bash\n    feed:\n        type: atom\n        path: atom.xml\n        limit: 20\n    #type 表示类型, 是 atom 还是 rss2.\n    #path 表示 Feed 路径\n    #limit 最多多少篇最近文章\n```\n\n### 4.添加Sitemap\nSitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，\n进而加速网页的收录速度，达到搜寻引擎友好的目的。\n\n\n``` bash\n $ npm install hexo-generator-sitemap --save\n 在 Hexo 根目录下的 _config.yml 里配置一下:\nsitemap:\n    path: sitemap.xml\n    #path 表示 Sitemap 的路径. 默认为 sitemap.xml.\n对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装: $ npm install hexo-generator-baidu-sitemap --save\n 然后在 Hexo 根目录下的 _config.yml 里配置一下:\n    baidusitemap:\n        path: baidusitemap.xml\n```\n\n","source":"_posts/learn-git-hexo-1.md","raw":"---\ntitle: git-Hexo搭建填坑\ndate: 2018-2-12 10:50:01\nauthor: T.stt\ntags:\n- git-hexo\ncategories:\n- [工具,hexo]\n---\n\n> 记录hexo的开发操作,包括安装hexo--部署hexo--hexo命令--操作中的报错处理--hexo管理--hexo使用的插件。一步步的积累，一步步的改善，制作自己的一个小博客\n\n## hexo 原理\n``` bash\n\thexo在执行hexo g时会在本地先把博客生成的一套静态站点放到public文件夹中，再执行hexo d时将其复制到.deploy文件夹中。\n\tGithub的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，\n\t它也会在你下一次部署时被删去。在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n```\n\n## 安装Hexo\n命令：`npm install -g hexo`\n``` bash\n\t这里可能安装失败，可能权限不够，在命令前加sudo： sudo npm install -g hexo\n```\n\n## 部署Hexo\n`hexo init`     // 这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。\n\n``` bash\n执行命令,会在当前命令的路径下，生成以下文件：\n.\n    ├── .deploy      //执行hexo deploy命令部署到GitHub上的内容目录\n    ├── public       //执行hexo generate命令，输出的静态网页内容目录\n    ├── scaffolds    //layout模板文件目录，其中的md文件可以添加编辑\n    ├── scripts      //扩展脚本目录，这里可以自定义一些javascript脚本\n    ├── source       //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n    |   ├── _drafts  //草稿文章\n    |   └── _posts   //发布文章\n    ├── themes       //主题文件目录\n    ├── _config.yml  //全局配置文件，大多数的设置都在这里\n    └── package.json //应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n```\n## Hexo命令\nHexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。\n\n### 全局设置\n\n``` bash\n全局设置:_config.yml，打开可以配置信息。\n```\n### 局部页面\n\n``` bash\n局部页面：主题的_config.yml，打开可以配置信息。\n```\n### Hexo常用命令\n\n``` bash\n    hexo new \"postName\"       #新建文章\n    hexo new page \"pageName\"  #新建页面\n    hexo generate             #生成静态页面至public目录\n    hexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    hexo deploy               #将.deploy目录部署到GitHub\n```\n\n### Hexo命令简写\n\n``` bash\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n```\n### 复合命令\n``` bash\n\thexo deploy -g\n\thexo server -g\n```\n\n### 清除res\n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成:\n``` bash\n hexo clean //当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。\n (经常更改css的时候不生效时clean然后删除.deploy_git文件夹，重新编译部署就ok)\n```\n## 一些报错处理\n\n### 1.ERROR Plugin load failed: hexo-server\n原因：Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n``` bash\n解决方法，执行命令：\n   sudo npm install hexo-server\n```\n### 2.执行命令hexo server，有如下提示：\n\tUsage: hexo\n\t….\n\t原因：认为是没有生成本地服务\n``` bash\n解决方法，执行命令：\nnpm install hexo-server --save\n提示：hexo-server@0.1.2 node_modules/hexo-server\n```\n### 3.白板和Cannot GET / 几个字\n\t原因:由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n``` bash\n    npm install hexo-renderer-ejs --save\n    npm install hexo-renderer-stylus --save\n    npm install hexo-renderer-marked --save\n    这个时候再重新生成静态文件，命令：hexo generate （或hexo g）\n    启动本地服务器：hexo server （或hexo s）\n\n```\n## 博客管理\n\n``` bash\n生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：\n    title: Mac提高使用效率的一些方法               #文章的标题，这个才是显示的文章标题，其实文件名不影响\n    date: 2015-09-01 20:33:26     #用命令会自动生成，也可以自己写，所以文章时间可以改\n    categories: technology        #文章的分类，这个可以自己定义\n    tags: [Mac,效率,快捷方式]         #tag，为文章添加标签，方便搜索\n```\n\n## 插件\n\n### 1.安装插件\n\n``` bash\n $ npm install <plugin-name> --save\n```\n\n### 2.添加RSS\n\n``` bash\n - npm install hexo-generator-feed\n - 到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！\n   解决方法：$ npm install hexo-generator-feed --save\n```\n\n### 3.在 Hexo 根目录下的 _config.yml 里配置一下，\n在 hexo generate之后，会发现public文件夹下多了atom.xml！\n\n``` bash\n    feed:\n        type: atom\n        path: atom.xml\n        limit: 20\n    #type 表示类型, 是 atom 还是 rss2.\n    #path 表示 Feed 路径\n    #limit 最多多少篇最近文章\n```\n\n### 4.添加Sitemap\nSitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，\n进而加速网页的收录速度，达到搜寻引擎友好的目的。\n\n\n``` bash\n $ npm install hexo-generator-sitemap --save\n 在 Hexo 根目录下的 _config.yml 里配置一下:\nsitemap:\n    path: sitemap.xml\n    #path 表示 Sitemap 的路径. 默认为 sitemap.xml.\n对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装: $ npm install hexo-generator-baidu-sitemap --save\n 然后在 Hexo 根目录下的 _config.yml 里配置一下:\n    baidusitemap:\n        path: baidusitemap.xml\n```\n\n","slug":"learn-git-hexo-1","published":1,"updated":"2018-11-01T08:21:39.473Z","_id":"cjny0swgs002j2kv7p3f7ah89","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记录hexo的开发操作,包括安装hexo–部署hexo–hexo命令–操作中的报错处理–hexo管理–hexo使用的插件。一步步的积累，一步步的改善，制作自己的一个小博客</p>\n</blockquote>\n<h2 id=\"hexo-原理\"><a href=\"#hexo-原理\" class=\"headerlink\" title=\"hexo 原理\"></a>hexo 原理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo在执行hexo g时会在本地先把博客生成的一套静态站点放到public文件夹中，再执行hexo d时将其复制到.deploy文件夹中。</span><br><span class=\"line\">Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，</span><br><span class=\"line\">它也会在你下一次部署时被删去。在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>命令：<code>npm install -g hexo</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里可能安装失败，可能权限不够，在命令前加sudo： sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h2><p><code>hexo init</code>     // 这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行命令,会在当前命令的路径下，生成以下文件：</span><br><span class=\"line\">.</span><br><span class=\"line\">    ├── .deploy      //执行hexo deploy命令部署到GitHub上的内容目录</span><br><span class=\"line\">    ├── public       //执行hexo generate命令，输出的静态网页内容目录</span><br><span class=\"line\">    ├── scaffolds    //layout模板文件目录，其中的md文件可以添加编辑</span><br><span class=\"line\">    ├── scripts      //扩展脚本目录，这里可以自定义一些javascript脚本</span><br><span class=\"line\">    ├── <span class=\"built_in\">source</span>       //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</span><br><span class=\"line\">    |   ├── _drafts  //草稿文章</span><br><span class=\"line\">    |   └── _posts   //发布文章</span><br><span class=\"line\">    ├── themes       //主题文件目录</span><br><span class=\"line\">    ├── _config.yml  //全局配置文件，大多数的设置都在这里</span><br><span class=\"line\">    └── package.json //应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo命令\"><a href=\"#Hexo命令\" class=\"headerlink\" title=\"Hexo命令\"></a>Hexo命令</h2><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局设置:_config.yml，打开可以配置信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部页面\"><a href=\"#局部页面\" class=\"headerlink\" title=\"局部页面\"></a>局部页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">局部页面：主题的_config.yml，打开可以配置信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span>       <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span>  <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate             <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server               <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy               <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo命令简写\"><a href=\"#Hexo命令简写\" class=\"headerlink\" title=\"Hexo命令简写\"></a>Hexo命令简写</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"复合命令\"><a href=\"#复合命令\" class=\"headerlink\" title=\"复合命令\"></a>复合命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除res\"><a href=\"#清除res\" class=\"headerlink\" title=\"清除res\"></a>清除res</h3><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean //当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</span><br><span class=\"line\">(经常更改css的时候不生效时clean然后删除.deploy_git文件夹，重新编译部署就ok)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些报错处理\"><a href=\"#一些报错处理\" class=\"headerlink\" title=\"一些报错处理\"></a>一些报错处理</h2><h3 id=\"1-ERROR-Plugin-load-failed-hexo-server\"><a href=\"#1-ERROR-Plugin-load-failed-hexo-server\" class=\"headerlink\" title=\"1.ERROR Plugin load failed: hexo-server\"></a>1.ERROR Plugin load failed: hexo-server</h3><p>原因：Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法，执行命令：</span><br><span class=\"line\">   sudo npm install hexo-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-执行命令hexo-server，有如下提示：\"><a href=\"#2-执行命令hexo-server，有如下提示：\" class=\"headerlink\" title=\"2.执行命令hexo server，有如下提示：\"></a>2.执行命令hexo server，有如下提示：</h3><pre><code>Usage: hexo\n….\n原因：认为是没有生成本地服务\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法，执行命令：</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">提示：hexo-server@0.1.2 node_modules/hexo-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-白板和Cannot-GET-几个字\"><a href=\"#3-白板和Cannot-GET-几个字\" class=\"headerlink\" title=\"3.白板和Cannot GET / 几个字\"></a>3.白板和Cannot GET / 几个字</h3><pre><code>原因:由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">这个时候再重新生成静态文件，命令：hexo generate （或hexo g）</span><br><span class=\"line\">启动本地服务器：hexo server （或hexo s）</span><br></pre></td></tr></table></figure>\n<h2 id=\"博客管理\"><a href=\"#博客管理\" class=\"headerlink\" title=\"博客管理\"></a>博客管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：</span><br><span class=\"line\">    title: Mac提高使用效率的一些方法               <span class=\"comment\">#文章的标题，这个才是显示的文章标题，其实文件名不影响</span></span><br><span class=\"line\">    date: 2015-09-01 20:33:26     <span class=\"comment\">#用命令会自动生成，也可以自己写，所以文章时间可以改</span></span><br><span class=\"line\">    categories: technology        <span class=\"comment\">#文章的分类，这个可以自己定义</span></span><br><span class=\"line\">    tags: [Mac,效率,快捷方式]         <span class=\"comment\">#tag，为文章添加标签，方便搜索</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-添加RSS\"><a href=\"#2-添加RSS\" class=\"headerlink\" title=\"2.添加RSS\"></a>2.添加RSS</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- npm install hexo-generator-feed</span><br><span class=\"line\">- 到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！</span><br><span class=\"line\">  解决方法：$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在-Hexo-根目录下的-config-yml-里配置一下，\"><a href=\"#3-在-Hexo-根目录下的-config-yml-里配置一下，\" class=\"headerlink\" title=\"3.在 Hexo 根目录下的 _config.yml 里配置一下，\"></a>3.在 Hexo 根目录下的 _config.yml 里配置一下，</h3><p>在 hexo generate之后，会发现public文件夹下多了atom.xml！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"><span class=\"comment\">#type 表示类型, 是 atom 还是 rss2.</span></span><br><span class=\"line\"><span class=\"comment\">#path 表示 Feed 路径</span></span><br><span class=\"line\"><span class=\"comment\">#limit 最多多少篇最近文章</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加Sitemap\"><a href=\"#4-添加Sitemap\" class=\"headerlink\" title=\"4.添加Sitemap\"></a>4.添加Sitemap</h3><p>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，<br>进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> 在 Hexo 根目录下的 _config.yml 里配置一下:</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br><span class=\"line\">    <span class=\"comment\">#path 表示 Sitemap 的路径. 默认为 sitemap.xml.</span></span><br><span class=\"line\">对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装: $ npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> 然后在 Hexo 根目录下的 _config.yml 里配置一下:</span><br><span class=\"line\">    baidusitemap:</span><br><span class=\"line\">        path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录hexo的开发操作,包括安装hexo–部署hexo–hexo命令–操作中的报错处理–hexo管理–hexo使用的插件。一步步的积累，一步步的改善，制作自己的一个小博客</p>\n</blockquote>\n<h2 id=\"hexo-原理\"><a href=\"#hexo-原理\" class=\"headerlink\" title=\"hexo 原理\"></a>hexo 原理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo在执行hexo g时会在本地先把博客生成的一套静态站点放到public文件夹中，再执行hexo d时将其复制到.deploy文件夹中。</span><br><span class=\"line\">Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，</span><br><span class=\"line\">它也会在你下一次部署时被删去。在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>命令：<code>npm install -g hexo</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里可能安装失败，可能权限不够，在命令前加sudo： sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h2><p><code>hexo init</code>     // 这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行命令,会在当前命令的路径下，生成以下文件：</span><br><span class=\"line\">.</span><br><span class=\"line\">    ├── .deploy      //执行hexo deploy命令部署到GitHub上的内容目录</span><br><span class=\"line\">    ├── public       //执行hexo generate命令，输出的静态网页内容目录</span><br><span class=\"line\">    ├── scaffolds    //layout模板文件目录，其中的md文件可以添加编辑</span><br><span class=\"line\">    ├── scripts      //扩展脚本目录，这里可以自定义一些javascript脚本</span><br><span class=\"line\">    ├── <span class=\"built_in\">source</span>       //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</span><br><span class=\"line\">    |   ├── _drafts  //草稿文章</span><br><span class=\"line\">    |   └── _posts   //发布文章</span><br><span class=\"line\">    ├── themes       //主题文件目录</span><br><span class=\"line\">    ├── _config.yml  //全局配置文件，大多数的设置都在这里</span><br><span class=\"line\">    └── package.json //应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo命令\"><a href=\"#Hexo命令\" class=\"headerlink\" title=\"Hexo命令\"></a>Hexo命令</h2><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p>\n<h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局设置:_config.yml，打开可以配置信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部页面\"><a href=\"#局部页面\" class=\"headerlink\" title=\"局部页面\"></a>局部页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">局部页面：主题的_config.yml，打开可以配置信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span>       <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span>  <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate             <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server               <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy               <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo命令简写\"><a href=\"#Hexo命令简写\" class=\"headerlink\" title=\"Hexo命令简写\"></a>Hexo命令简写</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"复合命令\"><a href=\"#复合命令\" class=\"headerlink\" title=\"复合命令\"></a>复合命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除res\"><a href=\"#清除res\" class=\"headerlink\" title=\"清除res\"></a>清除res</h3><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，再重新生成:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean //当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</span><br><span class=\"line\">(经常更改css的时候不生效时clean然后删除.deploy_git文件夹，重新编译部署就ok)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一些报错处理\"><a href=\"#一些报错处理\" class=\"headerlink\" title=\"一些报错处理\"></a>一些报错处理</h2><h3 id=\"1-ERROR-Plugin-load-failed-hexo-server\"><a href=\"#1-ERROR-Plugin-load-failed-hexo-server\" class=\"headerlink\" title=\"1.ERROR Plugin load failed: hexo-server\"></a>1.ERROR Plugin load failed: hexo-server</h3><p>原因：Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法，执行命令：</span><br><span class=\"line\">   sudo npm install hexo-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-执行命令hexo-server，有如下提示：\"><a href=\"#2-执行命令hexo-server，有如下提示：\" class=\"headerlink\" title=\"2.执行命令hexo server，有如下提示：\"></a>2.执行命令hexo server，有如下提示：</h3><pre><code>Usage: hexo\n….\n原因：认为是没有生成本地服务\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法，执行命令：</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">提示：hexo-server@0.1.2 node_modules/hexo-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-白板和Cannot-GET-几个字\"><a href=\"#3-白板和Cannot-GET-几个字\" class=\"headerlink\" title=\"3.白板和Cannot GET / 几个字\"></a>3.白板和Cannot GET / 几个字</h3><pre><code>原因:由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-ejs --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">这个时候再重新生成静态文件，命令：hexo generate （或hexo g）</span><br><span class=\"line\">启动本地服务器：hexo server （或hexo s）</span><br></pre></td></tr></table></figure>\n<h2 id=\"博客管理\"><a href=\"#博客管理\" class=\"headerlink\" title=\"博客管理\"></a>博客管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：</span><br><span class=\"line\">    title: Mac提高使用效率的一些方法               <span class=\"comment\">#文章的标题，这个才是显示的文章标题，其实文件名不影响</span></span><br><span class=\"line\">    date: 2015-09-01 20:33:26     <span class=\"comment\">#用命令会自动生成，也可以自己写，所以文章时间可以改</span></span><br><span class=\"line\">    categories: technology        <span class=\"comment\">#文章的分类，这个可以自己定义</span></span><br><span class=\"line\">    tags: [Mac,效率,快捷方式]         <span class=\"comment\">#tag，为文章添加标签，方便搜索</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-添加RSS\"><a href=\"#2-添加RSS\" class=\"headerlink\" title=\"2.添加RSS\"></a>2.添加RSS</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- npm install hexo-generator-feed</span><br><span class=\"line\">- 到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！</span><br><span class=\"line\">  解决方法：$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在-Hexo-根目录下的-config-yml-里配置一下，\"><a href=\"#3-在-Hexo-根目录下的-config-yml-里配置一下，\" class=\"headerlink\" title=\"3.在 Hexo 根目录下的 _config.yml 里配置一下，\"></a>3.在 Hexo 根目录下的 _config.yml 里配置一下，</h3><p>在 hexo generate之后，会发现public文件夹下多了atom.xml！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"><span class=\"comment\">#type 表示类型, 是 atom 还是 rss2.</span></span><br><span class=\"line\"><span class=\"comment\">#path 表示 Feed 路径</span></span><br><span class=\"line\"><span class=\"comment\">#limit 最多多少篇最近文章</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加Sitemap\"><a href=\"#4-添加Sitemap\" class=\"headerlink\" title=\"4.添加Sitemap\"></a>4.添加Sitemap</h3><p>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，<br>进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> 在 Hexo 根目录下的 _config.yml 里配置一下:</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">    path: sitemap.xml</span><br><span class=\"line\">    <span class=\"comment\">#path 表示 Sitemap 的路径. 默认为 sitemap.xml.</span></span><br><span class=\"line\">对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装: $ npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> 然后在 Hexo 根目录下的 _config.yml 里配置一下:</span><br><span class=\"line\">    baidusitemap:</span><br><span class=\"line\">        path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n"},{"title":"markdown编辑器语法——文字","date":"2018-05-06T11:35:06.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是markdown编辑器语法——文字颜色、大小、字体与背景色的设置。\n\n## 控制文字的颜色\n``` bash\n\t浅红色文字：<font color=\"#dd0000\">浅红色文字：</font><br /> \n\t采用的是RGB颜色 \n```\n## 设置文字大小\n``` bash\n\tsize为1：<font size=\"1\">size为1</font><br /> \n```\n## 设置文字字体\n``` bash\n\t<font face=\"黑体\">我是黑体字</font>\n\t<font face=\"宋体\">我是宋体字</font>\n\t<font face=\"微软雅黑\">我是微软雅黑字</font>\n\t<font face=\"fantasy\">我是fantasy字</font>\n\t<font face=\"Helvetica\">我是Helvetica字</font>\n```\n## 背景色\n``` bash\n\t<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n```","source":"_posts/markdown-font.md","raw":"---\ntitle: markdown编辑器语法——文字\ndate: 2018-05-06 19:35:06\nauthor: T.2stt\ncomments: true\ntags:\n- markdown\ncategories:\n- [工具,markdown]\n---\n\n>此章节记载的是markdown编辑器语法——文字颜色、大小、字体与背景色的设置。\n\n## 控制文字的颜色\n``` bash\n\t浅红色文字：<font color=\"#dd0000\">浅红色文字：</font><br /> \n\t采用的是RGB颜色 \n```\n## 设置文字大小\n``` bash\n\tsize为1：<font size=\"1\">size为1</font><br /> \n```\n## 设置文字字体\n``` bash\n\t<font face=\"黑体\">我是黑体字</font>\n\t<font face=\"宋体\">我是宋体字</font>\n\t<font face=\"微软雅黑\">我是微软雅黑字</font>\n\t<font face=\"fantasy\">我是fantasy字</font>\n\t<font face=\"Helvetica\">我是Helvetica字</font>\n```\n## 背景色\n``` bash\n\t<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n```","slug":"markdown-font","published":1,"updated":"2018-11-01T06:54:24.748Z","_id":"cjny0swgz002m2kv7hxl1tznu","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是markdown编辑器语法——文字颜色、大小、字体与背景色的设置。</p>\n</blockquote>\n<h2 id=\"控制文字的颜色\"><a href=\"#控制文字的颜色\" class=\"headerlink\" title=\"控制文字的颜色\"></a>控制文字的颜色</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浅红色文字：&lt;font color=<span class=\"string\">\"#dd0000\"</span>&gt;浅红色文字：&lt;/font&gt;&lt;br /&gt; </span><br><span class=\"line\">采用的是RGB颜色</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置文字大小\"><a href=\"#设置文字大小\" class=\"headerlink\" title=\"设置文字大小\"></a>设置文字大小</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size为1：&lt;font size=<span class=\"string\">\"1\"</span>&gt;size为1&lt;/font&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置文字字体\"><a href=\"#设置文字字体\" class=\"headerlink\" title=\"设置文字字体\"></a>设置文字字体</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font face=<span class=\"string\">\"黑体\"</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"宋体\"</span>&gt;我是宋体字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"微软雅黑\"</span>&gt;我是微软雅黑字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"fantasy\"</span>&gt;我是fantasy字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"Helvetica\"</span>&gt;我是Helvetica字&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=<span class=\"comment\">#FF00FF&gt;背景色的设置是按照十六进制颜色值：#7FFFD4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是markdown编辑器语法——文字颜色、大小、字体与背景色的设置。</p>\n</blockquote>\n<h2 id=\"控制文字的颜色\"><a href=\"#控制文字的颜色\" class=\"headerlink\" title=\"控制文字的颜色\"></a>控制文字的颜色</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浅红色文字：&lt;font color=<span class=\"string\">\"#dd0000\"</span>&gt;浅红色文字：&lt;/font&gt;&lt;br /&gt; </span><br><span class=\"line\">采用的是RGB颜色</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置文字大小\"><a href=\"#设置文字大小\" class=\"headerlink\" title=\"设置文字大小\"></a>设置文字大小</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size为1：&lt;font size=<span class=\"string\">\"1\"</span>&gt;size为1&lt;/font&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置文字字体\"><a href=\"#设置文字字体\" class=\"headerlink\" title=\"设置文字字体\"></a>设置文字字体</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font face=<span class=\"string\">\"黑体\"</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"宋体\"</span>&gt;我是宋体字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"微软雅黑\"</span>&gt;我是微软雅黑字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"fantasy\"</span>&gt;我是fantasy字&lt;/font&gt;</span><br><span class=\"line\">&lt;font face=<span class=\"string\">\"Helvetica\"</span>&gt;我是Helvetica字&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"背景色\"><a href=\"#背景色\" class=\"headerlink\" title=\"背景色\"></a>背景色</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=<span class=\"comment\">#FF00FF&gt;背景色的设置是按照十六进制颜色值：#7FFFD4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"mocha+chai使用记录","date":"2017-10-10T03:06:52.000Z","author":"T.2stt","comments":1,"_content":"\n>`mocha+chai`是比较流行的测试框架‘套装’，能实现一些基本的前端测试如函数功能测试，模拟登陆，异步测试,流程测试等\n\n## 官方文档\n\n### [mocha](http://mochajs.org/)\n### [chai](http://chaijs.com/)\n\n## 基本用法\n\n>`mocha`是一个测试工具库，它只纯粹对测试行为(过程)进行描述；而`chai`是一个断言（推断）库，它可以将测试结果进行各种判断，以此推断是否符合预期，因此两者常常进行组合使用\n### 安装\n\n``` bash\n//全局安装\n$ npm install -g mocha\n```\n\nps: 全局安装之后，`mocha`命令将会在全局注册，可以在任何地方使用`mocha`命令\n\n``` bash\n//安装项目依赖\n$ npm install mocha chai\n```\n\n### 使用\n\n### 目录结构\n\n``` bash\n├── test //测试用例\n│   ├── hooks.js //生命钩子\n│   ├── test.js //入口文件\n│   └── unit //测试单例\n│       ├── add.js\n│       └── ...\n└── src //业务代码\n    ├── add.js\n    └── ...\n```\n\n所有测试代码都在test目录，所有的业务代码都在src目录\n\n### 一个简单的例子\n\n``` javascript\n//src/add.js\nfunction add(a, b){\n    return a + b;\n}\nmodule.exports = add;\n\n```\n\n``` javascript\n//test/unit/add.js\nvar add = require('../../src/add.js');\nvar expect = require('chai').expect;\n\ndescribe('加法函数', function () {\n    it('1 + 3 = 4', function () {\n        expect(add(1, 3)).to.be.equal(4);\n    });\n});\n```\n\n``` bash\n$ mocha mocha/unit/add\n  加法函数\n    √ 1 + 3 = 4\n  1 passing (16ms)\n```\n\n## Expect/Should/Assert\n\n    The Expect / Should API covers the BDD assertion styles.\n    The Assert API covers the TDD assertion style.\n\n## 异步\n\n- 非`promise`异步一定要带上`done()`，用于通知`mocha`该测试已经完成\n- 异步通常和参数`-t`结合一起用\n\n## 通配符\n\n``` bash\n//test/unit目录下add.js和minus.js\n$ mocha test/unit/{add,minus}.js\n//test/unit目录下所有js后缀的文件\n$ mocha test/unit/*.js\n```\n\n`mocha`支持`shell`和`node`的通配符匹配规则，更多通配符规则可以查看各自的文档\n\n## 命令行参数与配置文件mocha.opts\n\n### 常用的命令行\n\n- --recursive\n\n`Mocha`默认不对指定目录的子级目录匹配，如果需要使自己目录的测试用例运行，则需要加上`--recursive`\n\n- --reporter\n\n输出报告的格式，默认是`--reporter spec`,可以用`--reporters`命令查看有哪些输出格式\n\n- --watch\n\n监听变化，每次修改自动执行test\n\n- --timeout -t\n\n`Mocha`默认每个测试用例最多执行`2000`毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用`-t`或`--timeout`参数指定超时门槛\n\n- --hlep,-h\n\n查看有哪些命令\n`mocha.opts`放在`test`目录下，执行`mocha`命令时回去读取里面的配置\n命令行参数可以写在`mocha.opts`文件内,如\n\n``` bash\n$ mocha --reporter tap --recursive -t 3000\n```\n\n等价于\n`test/mocha.opts`文件内容\n\n``` opts\n--reporter tap\n--recursive\n-t 13000\n```\n\n``` bash\n$ mocha\n```\n\n## hooks（钩子）\n\n``` javascript\ndescribe('hooks', function() {\n\n  before(function() {\n    // 在本区块的所有测试用例之前执行\n  });\n\n  after(function() {\n    // 在本区块的所有测试用例之后执行\n  });\n\n  beforeEach(function() {\n    // 在本区块的每个测试用例之前执行\n  });\n\n  afterEach(function() {\n    // 在本区块的每个测试用例之后执行\n  });\n\n  // test cases\n});\n```\n\n可以写在测试用例内（每个`describe`块内），此时只对当前测试用例有效\n也可以写在外部，此时对所有的测试用例有效\n\n## 注意\n\n- 内置`promise`对象\n- `ES6`需要转码\n","source":"_posts/mocha+chai.md","raw":"---\ntitle: mocha+chai使用记录\ndate: 2017-10-10 11:06:52\nauthor: T.2stt\ncomments: true\ntags:\n- javascript\n- test\ncategories:\n- 测试工具\n---\n\n>`mocha+chai`是比较流行的测试框架‘套装’，能实现一些基本的前端测试如函数功能测试，模拟登陆，异步测试,流程测试等\n\n## 官方文档\n\n### [mocha](http://mochajs.org/)\n### [chai](http://chaijs.com/)\n\n## 基本用法\n\n>`mocha`是一个测试工具库，它只纯粹对测试行为(过程)进行描述；而`chai`是一个断言（推断）库，它可以将测试结果进行各种判断，以此推断是否符合预期，因此两者常常进行组合使用\n### 安装\n\n``` bash\n//全局安装\n$ npm install -g mocha\n```\n\nps: 全局安装之后，`mocha`命令将会在全局注册，可以在任何地方使用`mocha`命令\n\n``` bash\n//安装项目依赖\n$ npm install mocha chai\n```\n\n### 使用\n\n### 目录结构\n\n``` bash\n├── test //测试用例\n│   ├── hooks.js //生命钩子\n│   ├── test.js //入口文件\n│   └── unit //测试单例\n│       ├── add.js\n│       └── ...\n└── src //业务代码\n    ├── add.js\n    └── ...\n```\n\n所有测试代码都在test目录，所有的业务代码都在src目录\n\n### 一个简单的例子\n\n``` javascript\n//src/add.js\nfunction add(a, b){\n    return a + b;\n}\nmodule.exports = add;\n\n```\n\n``` javascript\n//test/unit/add.js\nvar add = require('../../src/add.js');\nvar expect = require('chai').expect;\n\ndescribe('加法函数', function () {\n    it('1 + 3 = 4', function () {\n        expect(add(1, 3)).to.be.equal(4);\n    });\n});\n```\n\n``` bash\n$ mocha mocha/unit/add\n  加法函数\n    √ 1 + 3 = 4\n  1 passing (16ms)\n```\n\n## Expect/Should/Assert\n\n    The Expect / Should API covers the BDD assertion styles.\n    The Assert API covers the TDD assertion style.\n\n## 异步\n\n- 非`promise`异步一定要带上`done()`，用于通知`mocha`该测试已经完成\n- 异步通常和参数`-t`结合一起用\n\n## 通配符\n\n``` bash\n//test/unit目录下add.js和minus.js\n$ mocha test/unit/{add,minus}.js\n//test/unit目录下所有js后缀的文件\n$ mocha test/unit/*.js\n```\n\n`mocha`支持`shell`和`node`的通配符匹配规则，更多通配符规则可以查看各自的文档\n\n## 命令行参数与配置文件mocha.opts\n\n### 常用的命令行\n\n- --recursive\n\n`Mocha`默认不对指定目录的子级目录匹配，如果需要使自己目录的测试用例运行，则需要加上`--recursive`\n\n- --reporter\n\n输出报告的格式，默认是`--reporter spec`,可以用`--reporters`命令查看有哪些输出格式\n\n- --watch\n\n监听变化，每次修改自动执行test\n\n- --timeout -t\n\n`Mocha`默认每个测试用例最多执行`2000`毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用`-t`或`--timeout`参数指定超时门槛\n\n- --hlep,-h\n\n查看有哪些命令\n`mocha.opts`放在`test`目录下，执行`mocha`命令时回去读取里面的配置\n命令行参数可以写在`mocha.opts`文件内,如\n\n``` bash\n$ mocha --reporter tap --recursive -t 3000\n```\n\n等价于\n`test/mocha.opts`文件内容\n\n``` opts\n--reporter tap\n--recursive\n-t 13000\n```\n\n``` bash\n$ mocha\n```\n\n## hooks（钩子）\n\n``` javascript\ndescribe('hooks', function() {\n\n  before(function() {\n    // 在本区块的所有测试用例之前执行\n  });\n\n  after(function() {\n    // 在本区块的所有测试用例之后执行\n  });\n\n  beforeEach(function() {\n    // 在本区块的每个测试用例之前执行\n  });\n\n  afterEach(function() {\n    // 在本区块的每个测试用例之后执行\n  });\n\n  // test cases\n});\n```\n\n可以写在测试用例内（每个`describe`块内），此时只对当前测试用例有效\n也可以写在外部，此时对所有的测试用例有效\n\n## 注意\n\n- 内置`promise`对象\n- `ES6`需要转码\n","slug":"mocha+chai","published":1,"updated":"2018-11-01T07:29:59.948Z","_id":"cjny0swh1002p2kv7xrm2gjtd","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><code>mocha+chai</code>是比较流行的测试框架‘套装’，能实现一些基本的前端测试如函数功能测试，模拟登陆，异步测试,流程测试等</p>\n</blockquote>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a></h3><h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a></h3><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><blockquote>\n<p><code>mocha</code>是一个测试工具库，它只纯粹对测试行为(过程)进行描述；而<code>chai</code>是一个断言（推断）库，它可以将测试结果进行各种判断，以此推断是否符合预期，因此两者常常进行组合使用</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">$ npm install -g mocha</span><br></pre></td></tr></table></figure>\n<p>ps: 全局安装之后，<code>mocha</code>命令将会在全局注册，可以在任何地方使用<code>mocha</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装项目依赖</span><br><span class=\"line\">$ npm install mocha chai</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── <span class=\"built_in\">test</span> //测试用例</span><br><span class=\"line\">│   ├── hooks.js //生命钩子</span><br><span class=\"line\">│   ├── test.js //入口文件</span><br><span class=\"line\">│   └── unit //测试单例</span><br><span class=\"line\">│       ├── add.js</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">└── src //业务代码</span><br><span class=\"line\">    ├── add.js</span><br><span class=\"line\">    └── ...</span><br></pre></td></tr></table></figure>\n<p>所有测试代码都在test目录，所有的业务代码都在src目录</p>\n<h3 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//src/add.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = add;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test/unit/add.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'../../src/add.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'1 + 3 = 4'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        expect(add(<span class=\"number\">1</span>, <span class=\"number\">3</span>)).to.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha mocha/unit/add</span><br><span class=\"line\">  加法函数</span><br><span class=\"line\">    √ 1 + 3 = 4</span><br><span class=\"line\">  1 passing (16ms)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expect-Should-Assert\"><a href=\"#Expect-Should-Assert\" class=\"headerlink\" title=\"Expect/Should/Assert\"></a>Expect/Should/Assert</h2><pre><code>The Expect / Should API covers the BDD assertion styles.\nThe Assert API covers the TDD assertion style.\n</code></pre><h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><ul>\n<li>非<code>promise</code>异步一定要带上<code>done()</code>，用于通知<code>mocha</code>该测试已经完成</li>\n<li>异步通常和参数<code>-t</code>结合一起用</li>\n</ul>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"built_in\">test</span>/unit目录下add.js和minus.js</span><br><span class=\"line\">$ mocha <span class=\"built_in\">test</span>/unit/&#123;add,minus&#125;.js</span><br><span class=\"line\">//<span class=\"built_in\">test</span>/unit目录下所有js后缀的文件</span><br><span class=\"line\">$ mocha <span class=\"built_in\">test</span>/unit/*.js</span><br></pre></td></tr></table></figure>\n<p><code>mocha</code>支持<code>shell</code>和<code>node</code>的通配符匹配规则，更多通配符规则可以查看各自的文档</p>\n<h2 id=\"命令行参数与配置文件mocha-opts\"><a href=\"#命令行参数与配置文件mocha-opts\" class=\"headerlink\" title=\"命令行参数与配置文件mocha.opts\"></a>命令行参数与配置文件mocha.opts</h2><h3 id=\"常用的命令行\"><a href=\"#常用的命令行\" class=\"headerlink\" title=\"常用的命令行\"></a>常用的命令行</h3><ul>\n<li>–recursive</li>\n</ul>\n<p><code>Mocha</code>默认不对指定目录的子级目录匹配，如果需要使自己目录的测试用例运行，则需要加上<code>--recursive</code></p>\n<ul>\n<li>–reporter</li>\n</ul>\n<p>输出报告的格式，默认是<code>--reporter spec</code>,可以用<code>--reporters</code>命令查看有哪些输出格式</p>\n<ul>\n<li>–watch</li>\n</ul>\n<p>监听变化，每次修改自动执行test</p>\n<ul>\n<li>–timeout -t</li>\n</ul>\n<p><code>Mocha</code>默认每个测试用例最多执行<code>2000</code>毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用<code>-t</code>或<code>--timeout</code>参数指定超时门槛</p>\n<ul>\n<li>–hlep,-h</li>\n</ul>\n<p>查看有哪些命令<br><code>mocha.opts</code>放在<code>test</code>目录下，执行<code>mocha</code>命令时回去读取里面的配置<br>命令行参数可以写在<code>mocha.opts</code>文件内,如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporter tap --recursive -t 3000</span><br></pre></td></tr></table></figure>\n<p>等价于<br><code>test/mocha.opts</code>文件内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">-t 13000</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<h2 id=\"hooks（钩子）\"><a href=\"#hooks（钩子）\" class=\"headerlink\" title=\"hooks（钩子）\"></a>hooks（钩子）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'hooks'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之前执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之后执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之前执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之后执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// test cases</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以写在测试用例内（每个<code>describe</code>块内），此时只对当前测试用例有效<br>也可以写在外部，此时对所有的测试用例有效</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>内置<code>promise</code>对象</li>\n<li><code>ES6</code>需要转码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>mocha+chai</code>是比较流行的测试框架‘套装’，能实现一些基本的前端测试如函数功能测试，模拟登陆，异步测试,流程测试等</p>\n</blockquote>\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a></h3><h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a></h3><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><blockquote>\n<p><code>mocha</code>是一个测试工具库，它只纯粹对测试行为(过程)进行描述；而<code>chai</code>是一个断言（推断）库，它可以将测试结果进行各种判断，以此推断是否符合预期，因此两者常常进行组合使用</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">$ npm install -g mocha</span><br></pre></td></tr></table></figure>\n<p>ps: 全局安装之后，<code>mocha</code>命令将会在全局注册，可以在任何地方使用<code>mocha</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装项目依赖</span><br><span class=\"line\">$ npm install mocha chai</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── <span class=\"built_in\">test</span> //测试用例</span><br><span class=\"line\">│   ├── hooks.js //生命钩子</span><br><span class=\"line\">│   ├── test.js //入口文件</span><br><span class=\"line\">│   └── unit //测试单例</span><br><span class=\"line\">│       ├── add.js</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">└── src //业务代码</span><br><span class=\"line\">    ├── add.js</span><br><span class=\"line\">    └── ...</span><br></pre></td></tr></table></figure>\n<p>所有测试代码都在test目录，所有的业务代码都在src目录</p>\n<h3 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//src/add.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = add;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test/unit/add.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'../../src/add.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'1 + 3 = 4'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        expect(add(<span class=\"number\">1</span>, <span class=\"number\">3</span>)).to.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha mocha/unit/add</span><br><span class=\"line\">  加法函数</span><br><span class=\"line\">    √ 1 + 3 = 4</span><br><span class=\"line\">  1 passing (16ms)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expect-Should-Assert\"><a href=\"#Expect-Should-Assert\" class=\"headerlink\" title=\"Expect/Should/Assert\"></a>Expect/Should/Assert</h2><pre><code>The Expect / Should API covers the BDD assertion styles.\nThe Assert API covers the TDD assertion style.\n</code></pre><h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><ul>\n<li>非<code>promise</code>异步一定要带上<code>done()</code>，用于通知<code>mocha</code>该测试已经完成</li>\n<li>异步通常和参数<code>-t</code>结合一起用</li>\n</ul>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"built_in\">test</span>/unit目录下add.js和minus.js</span><br><span class=\"line\">$ mocha <span class=\"built_in\">test</span>/unit/&#123;add,minus&#125;.js</span><br><span class=\"line\">//<span class=\"built_in\">test</span>/unit目录下所有js后缀的文件</span><br><span class=\"line\">$ mocha <span class=\"built_in\">test</span>/unit/*.js</span><br></pre></td></tr></table></figure>\n<p><code>mocha</code>支持<code>shell</code>和<code>node</code>的通配符匹配规则，更多通配符规则可以查看各自的文档</p>\n<h2 id=\"命令行参数与配置文件mocha-opts\"><a href=\"#命令行参数与配置文件mocha-opts\" class=\"headerlink\" title=\"命令行参数与配置文件mocha.opts\"></a>命令行参数与配置文件mocha.opts</h2><h3 id=\"常用的命令行\"><a href=\"#常用的命令行\" class=\"headerlink\" title=\"常用的命令行\"></a>常用的命令行</h3><ul>\n<li>–recursive</li>\n</ul>\n<p><code>Mocha</code>默认不对指定目录的子级目录匹配，如果需要使自己目录的测试用例运行，则需要加上<code>--recursive</code></p>\n<ul>\n<li>–reporter</li>\n</ul>\n<p>输出报告的格式，默认是<code>--reporter spec</code>,可以用<code>--reporters</code>命令查看有哪些输出格式</p>\n<ul>\n<li>–watch</li>\n</ul>\n<p>监听变化，每次修改自动执行test</p>\n<ul>\n<li>–timeout -t</li>\n</ul>\n<p><code>Mocha</code>默认每个测试用例最多执行<code>2000</code>毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用<code>-t</code>或<code>--timeout</code>参数指定超时门槛</p>\n<ul>\n<li>–hlep,-h</li>\n</ul>\n<p>查看有哪些命令<br><code>mocha.opts</code>放在<code>test</code>目录下，执行<code>mocha</code>命令时回去读取里面的配置<br>命令行参数可以写在<code>mocha.opts</code>文件内,如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporter tap --recursive -t 3000</span><br></pre></td></tr></table></figure>\n<p>等价于<br><code>test/mocha.opts</code>文件内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">-t 13000</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<h2 id=\"hooks（钩子）\"><a href=\"#hooks（钩子）\" class=\"headerlink\" title=\"hooks（钩子）\"></a>hooks（钩子）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'hooks'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之前执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之后执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之前执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之后执行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// test cases</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以写在测试用例内（每个<code>describe</code>块内），此时只对当前测试用例有效<br>也可以写在外部，此时对所有的测试用例有效</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>内置<code>promise</code>对象</li>\n<li><code>ES6</code>需要转码</li>\n</ul>\n"},{"title":"node-express的搭建","date":"2018-09-17T03:02:07.000Z","author":"T.stt","_content":">node express搭建项目框架初始化搭建，查看文档学习-依据学习记录基础的操作（不断的积累学习）\n\n## 学习地址\n```bash\n    http://www.expressjs.com.cn/\n```\n---\n\n## 创建项目骨架\n### 下载express-generator\n```bash\n    $ npm install express-generator -g\n```\n\n### 项目初始化\n```bash\n    $ express FirstApp -e （在当下目录下建立文件夹FirstApp）\n    $ express -e (则在当下目录建立)\n    或者是（只建package.json）\n    $ mkdir myapp\n    $ cd myapp\n    $ npm init\n```\n\n### 进入项目安装依赖\n```bash\n    npm install\n```\n### 启动项目\n```bash\n    node ./bin/www // 没启动app.js是因为www文件中包含了\n```\n---\n\n## 连接数据库\n### 下载包\n```bash\n    $ cnpm install mysql\n```\n\n### 连接数据库\n```bash\n    var mysql      = require('mysql');\n    var connection = mysql.createConnection({\n    host     : 'localhost',\n    user     : 'root',\n    password : '123456',\n    database : 'test'\n    });\n    \n    connection.connect();\n    \n    connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {\n    if (error) throw error;\n    console.log('The solution is: ', results[0].solution);\n    });\n```\n执行以上命令输出结果为：\n$ node test.js\nThe solution is: 2\n\n---\n\n## 数据库操作\n### 查询数据\n```bash\nvar mysql  = require('mysql');  \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n});\nconnection.connect();\nvar  sql = 'SELECT * FROM websites';\n//查\nconnection.query(sql,function (err, result) {\n    if(err){\n        console.log('[SELECT ERROR] - ',err.message);\n        return;\n    }\n    console.log('--------------------------SELECT----------------------------');\n    console.log(result);\n    console.log('------------------------------------------------------------\\n\\n');  \n});\nconnection.end();\n```\n\n### 插入数据\n```bash\nvar mysql  = require('mysql');\nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \nconnection.connect();\nvar  addSql = 'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)';\nvar  addSqlParams = ['菜鸟工具', 'https://c.runoob.com','23453', 'CN'];\n//增\nconnection.query(addSql,addSqlParams,function (err, result) {\n        if(err){\n         console.log('[INSERT ERROR] - ',err.message);\n         return;\n        }        \n \n       console.log('--------------------------INSERT----------------------------');\n       //console.log('INSERT ID:',result.insertId);        \n       console.log('INSERT ID:',result);        \n       console.log('-----------------------------------------------------------------\\n\\n');  \n});\nconnection.end();\n```\n\n### 更新数据\n```bash\nvar mysql  = require('mysql');  \n \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \nconnection.connect();\nvar modSql = 'UPDATE websites SET name = ?,url = ? WHERE Id = ?';\nvar modSqlParams = ['菜鸟移动站', 'https://m.runoob.com',6];\n//改\nconnection.query(modSql,modSqlParams,function (err, result) {\n   if(err){\n         console.log('[UPDATE ERROR] - ',err.message);\n         return;\n   }        \n  console.log('--------------------------UPDATE----------------------------');\n  console.log('UPDATE affectedRows',result.affectedRows);\n  console.log('-----------------------------------------------------------------\\n\\n');\n});\nconnection.end();\n```\n\n### 删除数据\n```bash\nvar mysql  = require('mysql');  \n \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \n \nconnection.connect();\n \nvar delSql = 'DELETE FROM websites where id=6';\n//删\nconnection.query(delSql,function (err, result) {\n        if(err){\n          console.log('[DELETE ERROR] - ',err.message);\n          return;\n        }        \n \n       console.log('--------------------------DELETE----------------------------');\n       console.log('DELETE affectedRows',result.affectedRows);\n       console.log('-----------------------------------------------------------------\\n\\n');  \n});\n \nconnection.end();\n```","source":"_posts/node-express-start.md","raw":"---\ntitle: node-express的搭建\ndate: 2018-09-17 11:02:07\nauthor: T.stt\ntags:\n- [nodejs-express]\ncategories:\n- [js,nodejs,express]\n---\n>node express搭建项目框架初始化搭建，查看文档学习-依据学习记录基础的操作（不断的积累学习）\n\n## 学习地址\n```bash\n    http://www.expressjs.com.cn/\n```\n---\n\n## 创建项目骨架\n### 下载express-generator\n```bash\n    $ npm install express-generator -g\n```\n\n### 项目初始化\n```bash\n    $ express FirstApp -e （在当下目录下建立文件夹FirstApp）\n    $ express -e (则在当下目录建立)\n    或者是（只建package.json）\n    $ mkdir myapp\n    $ cd myapp\n    $ npm init\n```\n\n### 进入项目安装依赖\n```bash\n    npm install\n```\n### 启动项目\n```bash\n    node ./bin/www // 没启动app.js是因为www文件中包含了\n```\n---\n\n## 连接数据库\n### 下载包\n```bash\n    $ cnpm install mysql\n```\n\n### 连接数据库\n```bash\n    var mysql      = require('mysql');\n    var connection = mysql.createConnection({\n    host     : 'localhost',\n    user     : 'root',\n    password : '123456',\n    database : 'test'\n    });\n    \n    connection.connect();\n    \n    connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {\n    if (error) throw error;\n    console.log('The solution is: ', results[0].solution);\n    });\n```\n执行以上命令输出结果为：\n$ node test.js\nThe solution is: 2\n\n---\n\n## 数据库操作\n### 查询数据\n```bash\nvar mysql  = require('mysql');  \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n});\nconnection.connect();\nvar  sql = 'SELECT * FROM websites';\n//查\nconnection.query(sql,function (err, result) {\n    if(err){\n        console.log('[SELECT ERROR] - ',err.message);\n        return;\n    }\n    console.log('--------------------------SELECT----------------------------');\n    console.log(result);\n    console.log('------------------------------------------------------------\\n\\n');  \n});\nconnection.end();\n```\n\n### 插入数据\n```bash\nvar mysql  = require('mysql');\nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \nconnection.connect();\nvar  addSql = 'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)';\nvar  addSqlParams = ['菜鸟工具', 'https://c.runoob.com','23453', 'CN'];\n//增\nconnection.query(addSql,addSqlParams,function (err, result) {\n        if(err){\n         console.log('[INSERT ERROR] - ',err.message);\n         return;\n        }        \n \n       console.log('--------------------------INSERT----------------------------');\n       //console.log('INSERT ID:',result.insertId);        \n       console.log('INSERT ID:',result);        \n       console.log('-----------------------------------------------------------------\\n\\n');  \n});\nconnection.end();\n```\n\n### 更新数据\n```bash\nvar mysql  = require('mysql');  \n \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \nconnection.connect();\nvar modSql = 'UPDATE websites SET name = ?,url = ? WHERE Id = ?';\nvar modSqlParams = ['菜鸟移动站', 'https://m.runoob.com',6];\n//改\nconnection.query(modSql,modSqlParams,function (err, result) {\n   if(err){\n         console.log('[UPDATE ERROR] - ',err.message);\n         return;\n   }        \n  console.log('--------------------------UPDATE----------------------------');\n  console.log('UPDATE affectedRows',result.affectedRows);\n  console.log('-----------------------------------------------------------------\\n\\n');\n});\nconnection.end();\n```\n\n### 删除数据\n```bash\nvar mysql  = require('mysql');  \n \nvar connection = mysql.createConnection({     \n  host     : 'localhost',       \n  user     : 'root',              \n  password : '123456',       \n  port: '3306',                   \n  database: 'test', \n}); \n \nconnection.connect();\n \nvar delSql = 'DELETE FROM websites where id=6';\n//删\nconnection.query(delSql,function (err, result) {\n        if(err){\n          console.log('[DELETE ERROR] - ',err.message);\n          return;\n        }        \n \n       console.log('--------------------------DELETE----------------------------');\n       console.log('DELETE affectedRows',result.affectedRows);\n       console.log('-----------------------------------------------------------------\\n\\n');  \n});\n \nconnection.end();\n```","slug":"node-express-start","published":1,"updated":"2018-11-01T03:32:18.946Z","_id":"cjny0swh3002r2kv75ylgwyab","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>node express搭建项目框架初始化搭建，查看文档学习-依据学习记录基础的操作（不断的积累学习）</p>\n</blockquote>\n<h2 id=\"学习地址\"><a href=\"#学习地址\" class=\"headerlink\" title=\"学习地址\"></a>学习地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.expressjs.com.cn/</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"创建项目骨架\"><a href=\"#创建项目骨架\" class=\"headerlink\" title=\"创建项目骨架\"></a>创建项目骨架</h2><h3 id=\"下载express-generator\"><a href=\"#下载express-generator\" class=\"headerlink\" title=\"下载express-generator\"></a>下载express-generator</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express FirstApp -e （在当下目录下建立文件夹FirstApp）</span><br><span class=\"line\">$ express -e (则在当下目录建立)</span><br><span class=\"line\">或者是（只建package.json）</span><br><span class=\"line\">$ mkdir myapp</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myapp</span><br><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入项目安装依赖\"><a href=\"#进入项目安装依赖\" class=\"headerlink\" title=\"进入项目安装依赖\"></a>进入项目安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./bin/www // 没启动app.js是因为www文件中包含了</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><h3 id=\"下载包\"><a href=\"#下载包\" class=\"headerlink\" title=\"下载包\"></a>下载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接数据库-1\"><a href=\"#连接数据库-1\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql      = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">host     : <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">user     : <span class=\"string\">'root'</span>,</span><br><span class=\"line\">password : <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">database : <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">connection.query(<span class=\"string\">'SELECT 1 + 1 AS solution'</span>, <span class=\"keyword\">function</span> (error, results, fields) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (error) throw error;</span><br><span class=\"line\">console.log(<span class=\"string\">'The solution is: '</span>, results[0].solution);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行以上命令输出结果为：<br>$ node test.js<br>The solution is: 2</p>\n<hr>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var  sql = <span class=\"string\">'SELECT * FROM websites'</span>;</span><br><span class=\"line\">//查</span><br><span class=\"line\">connection.query(sql,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'[SELECT ERROR] - '</span>,err.message);</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(<span class=\"string\">'--------------------------SELECT----------------------------'</span>);</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">    console.log(<span class=\"string\">'------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var  addSql = <span class=\"string\">'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)'</span>;</span><br><span class=\"line\">var  addSqlParams = [<span class=\"string\">'菜鸟工具'</span>, <span class=\"string\">'https://c.runoob.com'</span>,<span class=\"string\">'23453'</span>, <span class=\"string\">'CN'</span>];</span><br><span class=\"line\">//增</span><br><span class=\"line\">connection.query(addSql,addSqlParams,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">         console.log(<span class=\"string\">'[INSERT ERROR] - '</span>,err.message);</span><br><span class=\"line\">         <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(<span class=\"string\">'--------------------------INSERT----------------------------'</span>);</span><br><span class=\"line\">       //console.log(<span class=\"string\">'INSERT ID:'</span>,result.insertId);        </span><br><span class=\"line\">       console.log(<span class=\"string\">'INSERT ID:'</span>,result);        </span><br><span class=\"line\">       console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\"> </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var modSql = <span class=\"string\">'UPDATE websites SET name = ?,url = ? WHERE Id = ?'</span>;</span><br><span class=\"line\">var modSqlParams = [<span class=\"string\">'菜鸟移动站'</span>, <span class=\"string\">'https://m.runoob.com'</span>,6];</span><br><span class=\"line\">//改</span><br><span class=\"line\">connection.query(modSql,modSqlParams,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">         console.log(<span class=\"string\">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class=\"line\">         <span class=\"built_in\">return</span>;</span><br><span class=\"line\">   &#125;        </span><br><span class=\"line\">  console.log(<span class=\"string\">'--------------------------UPDATE----------------------------'</span>);</span><br><span class=\"line\">  console.log(<span class=\"string\">'UPDATE affectedRows'</span>,result.affectedRows);</span><br><span class=\"line\">  console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\"> </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"> </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\">var delSql = <span class=\"string\">'DELETE FROM websites where id=6'</span>;</span><br><span class=\"line\">//删</span><br><span class=\"line\">connection.query(delSql,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">          console.log(<span class=\"string\">'[DELETE ERROR] - '</span>,err.message);</span><br><span class=\"line\">          <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(<span class=\"string\">'--------------------------DELETE----------------------------'</span>);</span><br><span class=\"line\">       console.log(<span class=\"string\">'DELETE affectedRows'</span>,result.affectedRows);</span><br><span class=\"line\">       console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>node express搭建项目框架初始化搭建，查看文档学习-依据学习记录基础的操作（不断的积累学习）</p>\n</blockquote>\n<h2 id=\"学习地址\"><a href=\"#学习地址\" class=\"headerlink\" title=\"学习地址\"></a>学习地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.expressjs.com.cn/</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"创建项目骨架\"><a href=\"#创建项目骨架\" class=\"headerlink\" title=\"创建项目骨架\"></a>创建项目骨架</h2><h3 id=\"下载express-generator\"><a href=\"#下载express-generator\" class=\"headerlink\" title=\"下载express-generator\"></a>下载express-generator</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express FirstApp -e （在当下目录下建立文件夹FirstApp）</span><br><span class=\"line\">$ express -e (则在当下目录建立)</span><br><span class=\"line\">或者是（只建package.json）</span><br><span class=\"line\">$ mkdir myapp</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myapp</span><br><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入项目安装依赖\"><a href=\"#进入项目安装依赖\" class=\"headerlink\" title=\"进入项目安装依赖\"></a>进入项目安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./bin/www // 没启动app.js是因为www文件中包含了</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><h3 id=\"下载包\"><a href=\"#下载包\" class=\"headerlink\" title=\"下载包\"></a>下载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接数据库-1\"><a href=\"#连接数据库-1\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql      = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">host     : <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">user     : <span class=\"string\">'root'</span>,</span><br><span class=\"line\">password : <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">database : <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">connection.query(<span class=\"string\">'SELECT 1 + 1 AS solution'</span>, <span class=\"keyword\">function</span> (error, results, fields) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (error) throw error;</span><br><span class=\"line\">console.log(<span class=\"string\">'The solution is: '</span>, results[0].solution);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行以上命令输出结果为：<br>$ node test.js<br>The solution is: 2</p>\n<hr>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var  sql = <span class=\"string\">'SELECT * FROM websites'</span>;</span><br><span class=\"line\">//查</span><br><span class=\"line\">connection.query(sql,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">'[SELECT ERROR] - '</span>,err.message);</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(<span class=\"string\">'--------------------------SELECT----------------------------'</span>);</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">    console.log(<span class=\"string\">'------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var  addSql = <span class=\"string\">'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)'</span>;</span><br><span class=\"line\">var  addSqlParams = [<span class=\"string\">'菜鸟工具'</span>, <span class=\"string\">'https://c.runoob.com'</span>,<span class=\"string\">'23453'</span>, <span class=\"string\">'CN'</span>];</span><br><span class=\"line\">//增</span><br><span class=\"line\">connection.query(addSql,addSqlParams,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">         console.log(<span class=\"string\">'[INSERT ERROR] - '</span>,err.message);</span><br><span class=\"line\">         <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(<span class=\"string\">'--------------------------INSERT----------------------------'</span>);</span><br><span class=\"line\">       //console.log(<span class=\"string\">'INSERT ID:'</span>,result.insertId);        </span><br><span class=\"line\">       console.log(<span class=\"string\">'INSERT ID:'</span>,result);        </span><br><span class=\"line\">       console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\"> </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">var modSql = <span class=\"string\">'UPDATE websites SET name = ?,url = ? WHERE Id = ?'</span>;</span><br><span class=\"line\">var modSqlParams = [<span class=\"string\">'菜鸟移动站'</span>, <span class=\"string\">'https://m.runoob.com'</span>,6];</span><br><span class=\"line\">//改</span><br><span class=\"line\">connection.query(modSql,modSqlParams,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">         console.log(<span class=\"string\">'[UPDATE ERROR] - '</span>,err.message);</span><br><span class=\"line\">         <span class=\"built_in\">return</span>;</span><br><span class=\"line\">   &#125;        </span><br><span class=\"line\">  console.log(<span class=\"string\">'--------------------------UPDATE----------------------------'</span>);</span><br><span class=\"line\">  console.log(<span class=\"string\">'UPDATE affectedRows'</span>,result.affectedRows);</span><br><span class=\"line\">  console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(<span class=\"string\">'mysql'</span>);  </span><br><span class=\"line\"> </span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">  host     : <span class=\"string\">'localhost'</span>,       </span><br><span class=\"line\">  user     : <span class=\"string\">'root'</span>,              </span><br><span class=\"line\">  password : <span class=\"string\">'123456'</span>,       </span><br><span class=\"line\">  port: <span class=\"string\">'3306'</span>,                   </span><br><span class=\"line\">  database: <span class=\"string\">'test'</span>, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"> </span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"> </span><br><span class=\"line\">var delSql = <span class=\"string\">'DELETE FROM websites where id=6'</span>;</span><br><span class=\"line\">//删</span><br><span class=\"line\">connection.query(delSql,<span class=\"keyword\">function</span> (err, result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">          console.log(<span class=\"string\">'[DELETE ERROR] - '</span>,err.message);</span><br><span class=\"line\">          <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(<span class=\"string\">'--------------------------DELETE----------------------------'</span>);</span><br><span class=\"line\">       console.log(<span class=\"string\">'DELETE affectedRows'</span>,result.affectedRows);</span><br><span class=\"line\">       console.log(<span class=\"string\">'-----------------------------------------------------------------\\n\\n'</span>);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>"},{"title":"node和npm版本管理器nvm的安装和使用","date":"2017-08-21T06:02:36.000Z","author":"T.2stt","comments":1,"_content":"\n>nvm：一个node和npm的版本管理器（node&npm version manager），能让你快速的在不同版本间切换。\n\n## 安装\n\n下载地址：[官网下载](https://github.com/coreybutler/nvm-windows/releases)\n有两种版本`nvm-noinstall.zip`(便携版)和`nvm-setup.zip`(exe安装版)\n两者唯一区别就是便携版需要手动配置全局变量，而安装版只需要在安装时选定安装目录则会自动配置好。\n\n> 注意：安装之前最好先卸载之前的`node`\n\n### 便携版安装\n\n- 下载最新版的`nvm-noinstall.zip`后解压放到`D:\\devTools`(可以放到任意位置，此处是我安装的目录，注意文件夹名不能存在空格);\n    ``` bash\n    elevate.cmd\n    elevate.vbs\n    install.cmd\n    LICENSE\n    nvm.exe\n    ```\n- 配置`nvm`，生成`settings.txt`，填写配置\n    方法一：双击`install.cmd`，会生成`settings.txt`文件（生成位置就是你输入的地址，一般是在`nvm`目录下，如果不是，需要拷贝过来）\n    方法二：直接在nvm目录下新建`settings.txt`文件\n    ``` bash\n    root: D:\\devTools\\nvm\n    path: D:\\devTools\\nodejsv\n    arch: 64\n    proxy: none\n    node_mirror: http://npm.taobao.org/mirrors/node/\n    npm_mirror: https://npm.taobao.org/mirrors/npm/\n    ```\n    - root ： nvm的存放地址\n    - path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。\n    - arch ： 电脑系统是64位就写64,32位就写32\n    - proxy ： 代理\n    - node_mirror: node镜像源，安装node时会从此镜像源下载。\n    - npm_mirror: 同上，npm镜像源\n- 全局变量配置\n    1.添加变量`NVM_HOME`，值为`D:\\devTools\\nvm`\n    2.添加变量`NVM_SYMLINK`，值为`D:\\devTools\\nodejsv`\n    3.添加变量`NVM_HOME`和`NVM_SYMLINK`到全局变量`path`: 修改`path`的值最后加上`;%NVM_HOME%;%NVM_SYMLINK%;`\n到此便携版nvm安装完成\n\n### exe安装版\n\n直接双击安装，可以使用默认的选项。也可以自己选择安装地址。然后安装过程中会自动把路径写入到全局变量。\n> 注意： 如果安装了杀毒软件，应该先关闭杀毒软件，因为写入全局变量是一个敏感操作，某些杀毒软件会报警（不关闭，报警时需要选择允许操作）\n\n## 使用\n\n### 版本检测\n\n``` bash\n$ nvm version\n1.1.6\n// or\n$ nvm v\n1.1.6\n```\n\n### 安装node&npm\n\n``` bash\n$ nvm install [version]\n// 如果安装最新版的，直接使用\n$ nvm install latest\n```\n\n### 查看安装的node&npm\n\n``` bash\n$ nvm list\n* 8.4.0 (Currently using 64-bit executable)\n6.9.0\n```\n\n### 切换node版本\n\n``` bash\n$ nvm use [version]\nNow using node v8.4.0 (64-bit)\n```\n\n### 卸载某个版本node\n\n``` bash\n$ nvm uninstall [version]\n```\n\n### nvm命令查看\n\n``` bash\n$ nvm\nRunning version 1.1.6.\n\nUsage:\n\n  nvm arch                     : Show if node is running in 32 or 64 bit mode.\n  nvm install <version> [arch] : The version can be a node.js version or \"latest\" for the latest stable version.\n                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).\n                                 Set [arch] to \"all\" to install 32 AND 64 bit versions.\n                                 Add --insecure to the end of this command to bypass SSL validation of the remote download server.\n  nvm list [available]         : List the node.js installations. Type \"available\" at the end to see what can be installed. Aliased as ls.\n  nvm on                       : Enable node.js version management.\n  nvm off                      : Disable node.js version management.\n  nvm proxy [url]              : Set a proxy to use for downloads. Leave [url] blank to see the current proxy.\n                                 Set [url] to \"none\" to remove the proxy.\n  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.\n  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.\n  nvm uninstall <version>      : The version must be a specific version.\n  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32/64bit architecture.\n                                 nvm use <arch> will continue using the selected version, but switch to 32/64 bit mode.\n  nvm root [path]              : Set the directory where nvm should store different versions of node.js.\n                                 If <path> is not set, the current root will be displayed.\n  nvm version                  : Displays the current running version of nvm for Windows. Aliased as v.\n```\n\n## 总结\n\n- `settings.txt`中`root`和`path`文件路径中不能存在空格，否则在使用`nvm use`命令时会报错\n- 在使用`nvm use`命令时，貌似无法再`git-bash`中使用，暂时不知道原因，在自带的`cmd`中可以\n\n## 最后的最后\n\n> 安装nvm比较简单，喜欢折腾的可以使用便携版，反之这直接使用安装版一键安装。最后大家愉快的玩耍吧\n","source":"_posts/nvm-node-version-manager.md","raw":"---\ntitle: node和npm版本管理器nvm的安装和使用\ndate: 2017-8-21 14:02:36\nauthor: T.2stt\ncomments: true\ntags:\n- nvm\n- node\n- npm\ncategories:\n- [工具,操作类]\n---\n\n>nvm：一个node和npm的版本管理器（node&npm version manager），能让你快速的在不同版本间切换。\n\n## 安装\n\n下载地址：[官网下载](https://github.com/coreybutler/nvm-windows/releases)\n有两种版本`nvm-noinstall.zip`(便携版)和`nvm-setup.zip`(exe安装版)\n两者唯一区别就是便携版需要手动配置全局变量，而安装版只需要在安装时选定安装目录则会自动配置好。\n\n> 注意：安装之前最好先卸载之前的`node`\n\n### 便携版安装\n\n- 下载最新版的`nvm-noinstall.zip`后解压放到`D:\\devTools`(可以放到任意位置，此处是我安装的目录，注意文件夹名不能存在空格);\n    ``` bash\n    elevate.cmd\n    elevate.vbs\n    install.cmd\n    LICENSE\n    nvm.exe\n    ```\n- 配置`nvm`，生成`settings.txt`，填写配置\n    方法一：双击`install.cmd`，会生成`settings.txt`文件（生成位置就是你输入的地址，一般是在`nvm`目录下，如果不是，需要拷贝过来）\n    方法二：直接在nvm目录下新建`settings.txt`文件\n    ``` bash\n    root: D:\\devTools\\nvm\n    path: D:\\devTools\\nodejsv\n    arch: 64\n    proxy: none\n    node_mirror: http://npm.taobao.org/mirrors/node/\n    npm_mirror: https://npm.taobao.org/mirrors/npm/\n    ```\n    - root ： nvm的存放地址\n    - path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。\n    - arch ： 电脑系统是64位就写64,32位就写32\n    - proxy ： 代理\n    - node_mirror: node镜像源，安装node时会从此镜像源下载。\n    - npm_mirror: 同上，npm镜像源\n- 全局变量配置\n    1.添加变量`NVM_HOME`，值为`D:\\devTools\\nvm`\n    2.添加变量`NVM_SYMLINK`，值为`D:\\devTools\\nodejsv`\n    3.添加变量`NVM_HOME`和`NVM_SYMLINK`到全局变量`path`: 修改`path`的值最后加上`;%NVM_HOME%;%NVM_SYMLINK%;`\n到此便携版nvm安装完成\n\n### exe安装版\n\n直接双击安装，可以使用默认的选项。也可以自己选择安装地址。然后安装过程中会自动把路径写入到全局变量。\n> 注意： 如果安装了杀毒软件，应该先关闭杀毒软件，因为写入全局变量是一个敏感操作，某些杀毒软件会报警（不关闭，报警时需要选择允许操作）\n\n## 使用\n\n### 版本检测\n\n``` bash\n$ nvm version\n1.1.6\n// or\n$ nvm v\n1.1.6\n```\n\n### 安装node&npm\n\n``` bash\n$ nvm install [version]\n// 如果安装最新版的，直接使用\n$ nvm install latest\n```\n\n### 查看安装的node&npm\n\n``` bash\n$ nvm list\n* 8.4.0 (Currently using 64-bit executable)\n6.9.0\n```\n\n### 切换node版本\n\n``` bash\n$ nvm use [version]\nNow using node v8.4.0 (64-bit)\n```\n\n### 卸载某个版本node\n\n``` bash\n$ nvm uninstall [version]\n```\n\n### nvm命令查看\n\n``` bash\n$ nvm\nRunning version 1.1.6.\n\nUsage:\n\n  nvm arch                     : Show if node is running in 32 or 64 bit mode.\n  nvm install <version> [arch] : The version can be a node.js version or \"latest\" for the latest stable version.\n                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).\n                                 Set [arch] to \"all\" to install 32 AND 64 bit versions.\n                                 Add --insecure to the end of this command to bypass SSL validation of the remote download server.\n  nvm list [available]         : List the node.js installations. Type \"available\" at the end to see what can be installed. Aliased as ls.\n  nvm on                       : Enable node.js version management.\n  nvm off                      : Disable node.js version management.\n  nvm proxy [url]              : Set a proxy to use for downloads. Leave [url] blank to see the current proxy.\n                                 Set [url] to \"none\" to remove the proxy.\n  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.\n  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.\n  nvm uninstall <version>      : The version must be a specific version.\n  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32/64bit architecture.\n                                 nvm use <arch> will continue using the selected version, but switch to 32/64 bit mode.\n  nvm root [path]              : Set the directory where nvm should store different versions of node.js.\n                                 If <path> is not set, the current root will be displayed.\n  nvm version                  : Displays the current running version of nvm for Windows. Aliased as v.\n```\n\n## 总结\n\n- `settings.txt`中`root`和`path`文件路径中不能存在空格，否则在使用`nvm use`命令时会报错\n- 在使用`nvm use`命令时，貌似无法再`git-bash`中使用，暂时不知道原因，在自带的`cmd`中可以\n\n## 最后的最后\n\n> 安装nvm比较简单，喜欢折腾的可以使用便携版，反之这直接使用安装版一键安装。最后大家愉快的玩耍吧\n","slug":"nvm-node-version-manager","published":1,"updated":"2018-11-01T06:50:13.524Z","_id":"cjny0swh5002v2kv7d76pm5ki","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>nvm：一个node和npm的版本管理器（node&amp;npm version manager），能让你快速的在不同版本间切换。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">官网下载</a><br>有两种版本<code>nvm-noinstall.zip</code>(便携版)和<code>nvm-setup.zip</code>(exe安装版)<br>两者唯一区别就是便携版需要手动配置全局变量，而安装版只需要在安装时选定安装目录则会自动配置好。</p>\n<blockquote>\n<p>注意：安装之前最好先卸载之前的<code>node</code></p>\n</blockquote>\n<h3 id=\"便携版安装\"><a href=\"#便携版安装\" class=\"headerlink\" title=\"便携版安装\"></a>便携版安装</h3><ul>\n<li><p>下载最新版的<code>nvm-noinstall.zip</code>后解压放到<code>D:\\devTools</code>(可以放到任意位置，此处是我安装的目录，注意文件夹名不能存在空格);</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elevate.cmd</span><br><span class=\"line\">elevate.vbs</span><br><span class=\"line\">install.cmd</span><br><span class=\"line\">LICENSE</span><br><span class=\"line\">nvm.exe</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>nvm</code>，生成<code>settings.txt</code>，填写配置<br>  方法一：双击<code>install.cmd</code>，会生成<code>settings.txt</code>文件（生成位置就是你输入的地址，一般是在<code>nvm</code>目录下，如果不是，需要拷贝过来）<br>  方法二：直接在nvm目录下新建<code>settings.txt</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root: D:\\devTools\\nvm</span><br><span class=\"line\">path: D:\\devTools\\nodejsv</span><br><span class=\"line\">arch: 64</span><br><span class=\"line\">proxy: none</span><br><span class=\"line\">node_mirror: http://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>root ： nvm的存放地址</li>\n<li>path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。</li>\n<li>arch ： 电脑系统是64位就写64,32位就写32</li>\n<li>proxy ： 代理</li>\n<li>node_mirror: node镜像源，安装node时会从此镜像源下载。</li>\n<li>npm_mirror: 同上，npm镜像源</li>\n</ul>\n</li>\n<li>全局变量配置<br>  1.添加变量<code>NVM_HOME</code>，值为<code>D:\\devTools\\nvm</code><br>  2.添加变量<code>NVM_SYMLINK</code>，值为<code>D:\\devTools\\nodejsv</code><br>  3.添加变量<code>NVM_HOME</code>和<code>NVM_SYMLINK</code>到全局变量<code>path</code>: 修改<code>path</code>的值最后加上<code>;%NVM_HOME%;%NVM_SYMLINK%;</code><br>到此便携版nvm安装完成</li>\n</ul>\n<h3 id=\"exe安装版\"><a href=\"#exe安装版\" class=\"headerlink\" title=\"exe安装版\"></a>exe安装版</h3><p>直接双击安装，可以使用默认的选项。也可以自己选择安装地址。然后安装过程中会自动把路径写入到全局变量。</p>\n<blockquote>\n<p>注意： 如果安装了杀毒软件，应该先关闭杀毒软件，因为写入全局变量是一个敏感操作，某些杀毒软件会报警（不关闭，报警时需要选择允许操作）</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"版本检测\"><a href=\"#版本检测\" class=\"headerlink\" title=\"版本检测\"></a>版本检测</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm version</span><br><span class=\"line\">1.1.6</span><br><span class=\"line\">// or</span><br><span class=\"line\">$ nvm v</span><br><span class=\"line\">1.1.6</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node-amp-npm\"><a href=\"#安装node-amp-npm\" class=\"headerlink\" title=\"安装node&amp;npm\"></a>安装node&amp;npm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install [version]</span><br><span class=\"line\">// 如果安装最新版的，直接使用</span><br><span class=\"line\">$ nvm install latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看安装的node-amp-npm\"><a href=\"#查看安装的node-amp-npm\" class=\"headerlink\" title=\"查看安装的node&amp;npm\"></a>查看安装的node&amp;npm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm list</span><br><span class=\"line\">* 8.4.0 (Currently using 64-bit executable)</span><br><span class=\"line\">6.9.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换node版本\"><a href=\"#切换node版本\" class=\"headerlink\" title=\"切换node版本\"></a>切换node版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm use [version]</span><br><span class=\"line\">Now using node v8.4.0 (64-bit)</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载某个版本node\"><a href=\"#卸载某个版本node\" class=\"headerlink\" title=\"卸载某个版本node\"></a>卸载某个版本node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm uninstall [version]</span><br></pre></td></tr></table></figure>\n<h3 id=\"nvm命令查看\"><a href=\"#nvm命令查看\" class=\"headerlink\" title=\"nvm命令查看\"></a>nvm命令查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm</span><br><span class=\"line\">Running version 1.1.6.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  nvm arch                     : Show <span class=\"keyword\">if</span> node is running <span class=\"keyword\">in</span> 32 or 64 bit mode.</span><br><span class=\"line\">  nvm install &lt;version&gt; [arch] : The version can be a node.js version or <span class=\"string\">\"latest\"</span> <span class=\"keyword\">for</span> the latest stable version.</span><br><span class=\"line\">                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).</span><br><span class=\"line\">                                 Set [arch] to <span class=\"string\">\"all\"</span> to install 32 AND 64 bit versions.</span><br><span class=\"line\">                                 Add --insecure to the end of this <span class=\"built_in\">command</span> to bypass SSL validation of the remote download server.</span><br><span class=\"line\">  nvm list [available]         : List the node.js installations. Type <span class=\"string\">\"available\"</span> at the end to see what can be installed. Aliased as ls.</span><br><span class=\"line\">  nvm on                       : Enable node.js version management.</span><br><span class=\"line\">  nvm off                      : Disable node.js version management.</span><br><span class=\"line\">  nvm proxy [url]              : Set a proxy to use <span class=\"keyword\">for</span> downloads. Leave [url] blank to see the current proxy.</span><br><span class=\"line\">                                 Set [url] to <span class=\"string\">\"none\"</span> to remove the proxy.</span><br><span class=\"line\">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class=\"line\">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.</span><br><span class=\"line\">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class=\"line\">  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32/64bit architecture.</span><br><span class=\"line\">                                 nvm use &lt;arch&gt; will <span class=\"built_in\">continue</span> using the selected version, but switch to 32/64 bit mode.</span><br><span class=\"line\">  nvm root [path]              : Set the directory <span class=\"built_in\">where</span> nvm should store different versions of node.js.</span><br><span class=\"line\">                                 If &lt;path&gt; is not <span class=\"built_in\">set</span>, the current root will be displayed.</span><br><span class=\"line\">  nvm version                  : Displays the current running version of nvm <span class=\"keyword\">for</span> Windows. Aliased as v.</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>settings.txt</code>中<code>root</code>和<code>path</code>文件路径中不能存在空格，否则在使用<code>nvm use</code>命令时会报错</li>\n<li>在使用<code>nvm use</code>命令时，貌似无法再<code>git-bash</code>中使用，暂时不知道原因，在自带的<code>cmd</code>中可以</li>\n</ul>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><blockquote>\n<p>安装nvm比较简单，喜欢折腾的可以使用便携版，反之这直接使用安装版一键安装。最后大家愉快的玩耍吧</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>nvm：一个node和npm的版本管理器（node&amp;npm version manager），能让你快速的在不同版本间切换。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">官网下载</a><br>有两种版本<code>nvm-noinstall.zip</code>(便携版)和<code>nvm-setup.zip</code>(exe安装版)<br>两者唯一区别就是便携版需要手动配置全局变量，而安装版只需要在安装时选定安装目录则会自动配置好。</p>\n<blockquote>\n<p>注意：安装之前最好先卸载之前的<code>node</code></p>\n</blockquote>\n<h3 id=\"便携版安装\"><a href=\"#便携版安装\" class=\"headerlink\" title=\"便携版安装\"></a>便携版安装</h3><ul>\n<li><p>下载最新版的<code>nvm-noinstall.zip</code>后解压放到<code>D:\\devTools</code>(可以放到任意位置，此处是我安装的目录，注意文件夹名不能存在空格);</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elevate.cmd</span><br><span class=\"line\">elevate.vbs</span><br><span class=\"line\">install.cmd</span><br><span class=\"line\">LICENSE</span><br><span class=\"line\">nvm.exe</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>nvm</code>，生成<code>settings.txt</code>，填写配置<br>  方法一：双击<code>install.cmd</code>，会生成<code>settings.txt</code>文件（生成位置就是你输入的地址，一般是在<code>nvm</code>目录下，如果不是，需要拷贝过来）<br>  方法二：直接在nvm目录下新建<code>settings.txt</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root: D:\\devTools\\nvm</span><br><span class=\"line\">path: D:\\devTools\\nodejsv</span><br><span class=\"line\">arch: 64</span><br><span class=\"line\">proxy: none</span><br><span class=\"line\">node_mirror: http://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>root ： nvm的存放地址</li>\n<li>path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。</li>\n<li>arch ： 电脑系统是64位就写64,32位就写32</li>\n<li>proxy ： 代理</li>\n<li>node_mirror: node镜像源，安装node时会从此镜像源下载。</li>\n<li>npm_mirror: 同上，npm镜像源</li>\n</ul>\n</li>\n<li>全局变量配置<br>  1.添加变量<code>NVM_HOME</code>，值为<code>D:\\devTools\\nvm</code><br>  2.添加变量<code>NVM_SYMLINK</code>，值为<code>D:\\devTools\\nodejsv</code><br>  3.添加变量<code>NVM_HOME</code>和<code>NVM_SYMLINK</code>到全局变量<code>path</code>: 修改<code>path</code>的值最后加上<code>;%NVM_HOME%;%NVM_SYMLINK%;</code><br>到此便携版nvm安装完成</li>\n</ul>\n<h3 id=\"exe安装版\"><a href=\"#exe安装版\" class=\"headerlink\" title=\"exe安装版\"></a>exe安装版</h3><p>直接双击安装，可以使用默认的选项。也可以自己选择安装地址。然后安装过程中会自动把路径写入到全局变量。</p>\n<blockquote>\n<p>注意： 如果安装了杀毒软件，应该先关闭杀毒软件，因为写入全局变量是一个敏感操作，某些杀毒软件会报警（不关闭，报警时需要选择允许操作）</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"版本检测\"><a href=\"#版本检测\" class=\"headerlink\" title=\"版本检测\"></a>版本检测</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm version</span><br><span class=\"line\">1.1.6</span><br><span class=\"line\">// or</span><br><span class=\"line\">$ nvm v</span><br><span class=\"line\">1.1.6</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node-amp-npm\"><a href=\"#安装node-amp-npm\" class=\"headerlink\" title=\"安装node&amp;npm\"></a>安装node&amp;npm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install [version]</span><br><span class=\"line\">// 如果安装最新版的，直接使用</span><br><span class=\"line\">$ nvm install latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看安装的node-amp-npm\"><a href=\"#查看安装的node-amp-npm\" class=\"headerlink\" title=\"查看安装的node&amp;npm\"></a>查看安装的node&amp;npm</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm list</span><br><span class=\"line\">* 8.4.0 (Currently using 64-bit executable)</span><br><span class=\"line\">6.9.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换node版本\"><a href=\"#切换node版本\" class=\"headerlink\" title=\"切换node版本\"></a>切换node版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm use [version]</span><br><span class=\"line\">Now using node v8.4.0 (64-bit)</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载某个版本node\"><a href=\"#卸载某个版本node\" class=\"headerlink\" title=\"卸载某个版本node\"></a>卸载某个版本node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm uninstall [version]</span><br></pre></td></tr></table></figure>\n<h3 id=\"nvm命令查看\"><a href=\"#nvm命令查看\" class=\"headerlink\" title=\"nvm命令查看\"></a>nvm命令查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm</span><br><span class=\"line\">Running version 1.1.6.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  nvm arch                     : Show <span class=\"keyword\">if</span> node is running <span class=\"keyword\">in</span> 32 or 64 bit mode.</span><br><span class=\"line\">  nvm install &lt;version&gt; [arch] : The version can be a node.js version or <span class=\"string\">\"latest\"</span> <span class=\"keyword\">for</span> the latest stable version.</span><br><span class=\"line\">                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).</span><br><span class=\"line\">                                 Set [arch] to <span class=\"string\">\"all\"</span> to install 32 AND 64 bit versions.</span><br><span class=\"line\">                                 Add --insecure to the end of this <span class=\"built_in\">command</span> to bypass SSL validation of the remote download server.</span><br><span class=\"line\">  nvm list [available]         : List the node.js installations. Type <span class=\"string\">\"available\"</span> at the end to see what can be installed. Aliased as ls.</span><br><span class=\"line\">  nvm on                       : Enable node.js version management.</span><br><span class=\"line\">  nvm off                      : Disable node.js version management.</span><br><span class=\"line\">  nvm proxy [url]              : Set a proxy to use <span class=\"keyword\">for</span> downloads. Leave [url] blank to see the current proxy.</span><br><span class=\"line\">                                 Set [url] to <span class=\"string\">\"none\"</span> to remove the proxy.</span><br><span class=\"line\">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class=\"line\">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.</span><br><span class=\"line\">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class=\"line\">  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32/64bit architecture.</span><br><span class=\"line\">                                 nvm use &lt;arch&gt; will <span class=\"built_in\">continue</span> using the selected version, but switch to 32/64 bit mode.</span><br><span class=\"line\">  nvm root [path]              : Set the directory <span class=\"built_in\">where</span> nvm should store different versions of node.js.</span><br><span class=\"line\">                                 If &lt;path&gt; is not <span class=\"built_in\">set</span>, the current root will be displayed.</span><br><span class=\"line\">  nvm version                  : Displays the current running version of nvm <span class=\"keyword\">for</span> Windows. Aliased as v.</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>settings.txt</code>中<code>root</code>和<code>path</code>文件路径中不能存在空格，否则在使用<code>nvm use</code>命令时会报错</li>\n<li>在使用<code>nvm use</code>命令时，貌似无法再<code>git-bash</code>中使用，暂时不知道原因，在自带的<code>cmd</code>中可以</li>\n</ul>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><blockquote>\n<p>安装nvm比较简单，喜欢折腾的可以使用便携版，反之这直接使用安装版一键安装。最后大家愉快的玩耍吧</p>\n</blockquote>\n"},{"title":"react初步学习","date":"2018-05-22T13:21:45.000Z","author":"T.2stt","comments":1,"_content":">react的初步介绍了以下相关信息：\nreact的特点、react如何安装、react的JSX语法、react的组件、react的state以及react的props\n\n## React 特点\n1.声明式设计 ———— React采用声明范式，可以轻松描述应用。\n2.高效 ———— React通过对DOM的模拟，最大限度地减少与DOM的交互。\n3.灵活 ———— React可以与已知的库或框架很好地配合。\n4.JSX  ————  JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5.组件  ————  通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6.单向响应的数据流  ————  React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<font color=\"red\">（类似于wxpromise的setData）</font>\n\n## 实例\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n### 实例解析：\n```bash\nreact.min.js - React 的核心库\nreact-dom.min.js - 提供与 DOM 相关的功能\nbabel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。\n以下代码是将一个 h1 标题，插入 id=\"example\" 节点中:\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n);\n```\n## React 安装\n### 1.直接使用 BootCDN 的 React CDN 库\n```bash\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n使用实例\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n#### 注意\n\t如果我们需要使用 JSX，则 <script> 标签的 type 属性需要设置为 text/babel。\n### 2.通过 npm 使用 React\n\tcreate-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\n\tcreate-react-app 自动创建的项目是基于 Webpack + ES6 。\n```bash\n$ cnpm install -g create-react-app\n$ create-react-app my-app\n$ cd my-app/\n$ npm start\n\n项目的目录结构如下：\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  .gitignore\n  public/\n    favicon.ico\n    index.html\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n\n在浏览器中打开 http://localhost:3000/ \n\n```\n#### 尝试修改 src/App.js 文件代码：\n```bash\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>欢迎来到菜鸟教程</h2>\n        </div>\n        <p className=\"App-intro\">\n          你可以在 <code>src/App.js</code> 文件中修改。\n        </p>\n      </div>\n    );\n  }\n}\n \nexport default App;\n```\n\n## React JSX\n\tReact 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n\t我们不需要一定使用 JSX，但它有以下优点：\n\t\t1.JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。\n\t\t2.它是类型安全的，在编译过程中就能发现错误。\n\t\t3.使用 JSX 编写模板更加简单快速。\n\n### 使用 JSX\n```bash\nJSX 看起来类似 HTML ，我们可以看下实例:\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n);\n```\n### 如何嵌入多层元素\n\t我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，\n\t实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。\n```bash\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    <h2>欢迎学习 React</h2>\n    <p data-myattribute = \"somevalue\">这是一个很不错的 JavaScript 库!</p>\n    </div>\n    ,\n    document.getElementById('example')\n);\n```\n### 独立文件\n```bash\nReact JSX 代码可以放在一个独立文件上，例如我们创建一个 helloworld_react.js 文件，代码如下：\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n然后在 HTML 文件中引入该 JS 文件：\n<body>\n  <div id=\"example\"></div>\n<script type=\"text/babel\" src=\"helloworld_react.js\"></script>\n</body>\n```\n### JavaScript 表达式\n```bash\nJSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：\nReactDOM.render(\n    <div>\n      <h1>{1+1}</h1>\n    </div>,\n    document.getElementById('example')\n);\n在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。\n以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.\n<body>\n<div id=\"example\"></div>\n<script type=\"text/babel\">\n  var i = 1;\n  ReactDOM.render(\n  \t<div>\n  \t  <h1>{i == 1 ? 'True!' : 'False'}</h1>\n   </div>,\n  \tdocument.getElementById('example')\n  );\n</script>\n</body>\n```\n### 样式\n```bash\nReact 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。\n以下实例演示了为 h1 元素添加 myStyle 内联样式：\nvar myStyle = {\n     fontSize: 100,\n     color: '#FF0000'\n};\nReactDOM.render(\n  \t<h1 style = {myStyle}>菜鸟教程</h1>,\n  \tdocument.getElementById('example')\n);\n```\n### 注释\n```bash\n注释需要写在花括号中，实例如下：\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n### 关于React注释的问题\n\t关于React注释的问题：\n\t1、在标签内部的注释需要花括号\n\t2、在标签外的的注释不能使用花括号\n```bash\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n\n### 数组\n```bash\nJSX 允许在模板中插入数组，数组会自动展开所有成员：\nvar arr = [\n  <h1>菜鸟教程</h1>,\n  <h2>学的不仅是技术，更是梦想！</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n```\n\n### HTML 标签 vs. React 组件\n```bash\nReact 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。\n\n要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。\nvar myDivElement = <div className=\"foo\" />;\nReactDOM.render(myDivElement, document.getElementById('example'));\n\n要渲染 React 组件，只需创建一个大写字母开头的本地变量。\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = <MyComponent someProperty={true} />;\nReactDOM.render(myElement, document.getElementById('example'));\nReact 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。\n```\n### 注意:\n\t由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。\n\t作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。\n\n## React 组件\n\t封装一个输出 \"Hello World！\" 的组件，组件名为 HelloMessage：\n```bash\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello World！</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage />,\n  document.getElementById('example')\n);\n```\n### 实例解析：\n```bash\nReact.createClass 方法用于生成一个组件类 HelloMessage。\n<HelloMessage /> 实例组件类并输出信息。\n```\n### 注意:\n\t1.原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。\n\t2.组件类只能包含一个顶层标签，否则也会报错。\n### 向组件传递参数，使用 this.props 对象\n```bash\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage name=\"Runoob\" />,\n  document.getElementById('example')\n);\n\n```\n<font color=\"red\">\n注意:在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，\n这是因为 class 和 for 是 JavaScript 的保留字。\n</font>\n\n### 复合组件\n\t我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。\n```bash\n以下实例我们实现了输出网站名字和网址的组件：\nvar WebSite = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <Name name={this.props.name} />\n        <Link site={this.props.site} />\n      </div>\n    );\n  }\n});\n \nvar Name = React.createClass({\n  render: function() {\n    return (\n      <h1>{this.props.name}</h1>\n    );\n  }\n});\n \nvar Link = React.createClass({\n  render: function() {\n    return (\n      <a href={this.props.site}>\n        {this.props.site}\n      </a>\n    );\n  }\n});\n \nReactDOM.render(\n  <WebSite name=\"菜鸟教程\" site=\" http://www.runoob.com\" />,\n  document.getElementById('example')\n);\n```\n\n## React State(状态)\n\tReact 把组件看成是一个状态机（State Machines）。React只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\t以下实例中创建了 LikeButton 组件，getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。\n\t当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n```bash\n<script type=\"text/babel\">\n\t//组件类(首字母大写且只能包含一个顶层标签)\n    var LikeButton = React.createClass({\n        getInitialState: function() {/*这个方法名称是已经定义好的，不能改名称。用于定义初始状态*/\n        \treturn {liked: false};\n        },\n        handleClick: function(event) {\n        \t/*state的值发生变化，自动调用this.render方法渲染*/\n            this.setState({liked: !this.state.liked});\n        },\n        render: function() {\n            var text = this.state.liked ? '喜欢' : '不喜欢';\n            //但是如果有元素内嵌，需要多行展示，则需要 return()，否则报错。\n            return (\n                <p onClick={this.handleClick}>\n            \t你<b>{text}</b>我。点我切换状态。\n            </p>\n          );\n        }\n    });\n    ReactDOM.render(\n    \t<LikeButton />,\n    \tdocument.getElementById('example')\n    );\n</script>\n```\n## React Props\n\tstate 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。\n\t这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n### 使用 Props\n```bash\nvar HelloMessage = React.createClass({\n    render: function() {\n      return <h1>Hello {this.props.name}</h1>;\n    }\n  });\n\n  ReactDOM.render(\n    <HelloMessage name=\"Runoob\" />,\n    document.getElementById('example')\n  );\n```\n### 默认 Props\n\t可以通过 getDefaultProps() 方法为 props 设置默认值，实例如下：\n```bash\nvar HelloMessage = React.createClass({\n  getDefaultProps: function() {\n    return {\n      name: 'Runoob'\n    };\n  },\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage />,\n  document.getElementById('example')\n);\n\n```\n### State 和 Props\n\t以下实例演示了如何在应用中组合使用 state 和 props 。我们可以在父组件中设置 state， \n\t并通过在子组件上使用 props 将其传递到子组件上。在 render 函数中, 我们设置 name 和 site 来获取父组件传递过来的数据。\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>菜鸟教程 React 实例</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n\t<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n\t<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n    var WebSite = React.createClass({\n      getInitialState: function() {\n        return {\n          name: \"菜鸟教程\",\n          site: \"http://www.runoob.com\"\n        };\n      },\n      render: function() {\n        return (\n          <div>\n            <Name name={this.state.name} />\n            <Link site={this.state.site} />\n          </div>\n        );\n      }\n    });\n    var Name = React.createClass({\n      render: function() {\n        return (\n          <h1>{this.props.name}</h1>\n        );\n      }\n    });\n    var Link = React.createClass({\n      render: function() {\n        return (\n          <a href={this.props.site}>\n            {this.props.site}\n          </a>\n        );\n      }\n    });\n    ReactDOM.render(\n      <WebSite />,\n      document.getElementById('example')\n    );\n    </script>\n  </body>\n</html>\n```\n### Props 验证\n\tProps 验证使用 propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes提供很多验证器 (validator) 来验证传入数据是否有效。\n\t当向 props 传入无效数据时，JavaScript 控制台会抛出警告。\n#### 单个\n```bash\n以下实例创建一个 Mytitle 组件，属性 title 是必须的且是字符串，非字符串类型会自动转换为字符串 ：\nvar title = \"菜鸟教程\";\n// var title = 123;\nvar MyTitle = React.createClass({\n  propTypes: {\n    title: React.PropTypes.string.isRequired,\n  },\n \n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(\n    <MyTitle title={title} />,\n    document.getElementById('example')\n);\n```\n#### 多个\n```bash\n\n```","source":"_posts/react-learn-intro-1.md","raw":"---\ntitle: react初步学习\ndate: 2018-05-22 21:21:45\nauthor: T.2stt\ncomments: true\ntags:\n- react\ncategories:\n- react\n---\n>react的初步介绍了以下相关信息：\nreact的特点、react如何安装、react的JSX语法、react的组件、react的state以及react的props\n\n## React 特点\n1.声明式设计 ———— React采用声明范式，可以轻松描述应用。\n2.高效 ———— React通过对DOM的模拟，最大限度地减少与DOM的交互。\n3.灵活 ———— React可以与已知的库或框架很好地配合。\n4.JSX  ————  JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5.组件  ————  通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6.单向响应的数据流  ————  React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<font color=\"red\">（类似于wxpromise的setData）</font>\n\n## 实例\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n### 实例解析：\n```bash\nreact.min.js - React 的核心库\nreact-dom.min.js - 提供与 DOM 相关的功能\nbabel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。\n以下代码是将一个 h1 标题，插入 id=\"example\" 节点中:\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n);\n```\n## React 安装\n### 1.直接使用 BootCDN 的 React CDN 库\n```bash\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n使用实例\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n#### 注意\n\t如果我们需要使用 JSX，则 <script> 标签的 type 属性需要设置为 text/babel。\n### 2.通过 npm 使用 React\n\tcreate-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\n\tcreate-react-app 自动创建的项目是基于 Webpack + ES6 。\n```bash\n$ cnpm install -g create-react-app\n$ create-react-app my-app\n$ cd my-app/\n$ npm start\n\n项目的目录结构如下：\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  .gitignore\n  public/\n    favicon.ico\n    index.html\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n\n在浏览器中打开 http://localhost:3000/ \n\n```\n#### 尝试修改 src/App.js 文件代码：\n```bash\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>欢迎来到菜鸟教程</h2>\n        </div>\n        <p className=\"App-intro\">\n          你可以在 <code>src/App.js</code> 文件中修改。\n        </p>\n      </div>\n    );\n  }\n}\n \nexport default App;\n```\n\n## React JSX\n\tReact 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n\t我们不需要一定使用 JSX，但它有以下优点：\n\t\t1.JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。\n\t\t2.它是类型安全的，在编译过程中就能发现错误。\n\t\t3.使用 JSX 编写模板更加简单快速。\n\n### 使用 JSX\n```bash\nJSX 看起来类似 HTML ，我们可以看下实例:\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('example')\n);\n```\n### 如何嵌入多层元素\n\t我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，\n\t实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。\n```bash\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    <h2>欢迎学习 React</h2>\n    <p data-myattribute = \"somevalue\">这是一个很不错的 JavaScript 库!</p>\n    </div>\n    ,\n    document.getElementById('example')\n);\n```\n### 独立文件\n```bash\nReact JSX 代码可以放在一个独立文件上，例如我们创建一个 helloworld_react.js 文件，代码如下：\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n然后在 HTML 文件中引入该 JS 文件：\n<body>\n  <div id=\"example\"></div>\n<script type=\"text/babel\" src=\"helloworld_react.js\"></script>\n</body>\n```\n### JavaScript 表达式\n```bash\nJSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：\nReactDOM.render(\n    <div>\n      <h1>{1+1}</h1>\n    </div>,\n    document.getElementById('example')\n);\n在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。\n以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.\n<body>\n<div id=\"example\"></div>\n<script type=\"text/babel\">\n  var i = 1;\n  ReactDOM.render(\n  \t<div>\n  \t  <h1>{i == 1 ? 'True!' : 'False'}</h1>\n   </div>,\n  \tdocument.getElementById('example')\n  );\n</script>\n</body>\n```\n### 样式\n```bash\nReact 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。\n以下实例演示了为 h1 元素添加 myStyle 内联样式：\nvar myStyle = {\n     fontSize: 100,\n     color: '#FF0000'\n};\nReactDOM.render(\n  \t<h1 style = {myStyle}>菜鸟教程</h1>,\n  \tdocument.getElementById('example')\n);\n```\n### 注释\n```bash\n注释需要写在花括号中，实例如下：\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n### 关于React注释的问题\n\t关于React注释的问题：\n\t1、在标签内部的注释需要花括号\n\t2、在标签外的的注释不能使用花括号\n```bash\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n\n### 数组\n```bash\nJSX 允许在模板中插入数组，数组会自动展开所有成员：\nvar arr = [\n  <h1>菜鸟教程</h1>,\n  <h2>学的不仅是技术，更是梦想！</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n```\n\n### HTML 标签 vs. React 组件\n```bash\nReact 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。\n\n要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。\nvar myDivElement = <div className=\"foo\" />;\nReactDOM.render(myDivElement, document.getElementById('example'));\n\n要渲染 React 组件，只需创建一个大写字母开头的本地变量。\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = <MyComponent someProperty={true} />;\nReactDOM.render(myElement, document.getElementById('example'));\nReact 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。\n```\n### 注意:\n\t由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。\n\t作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。\n\n## React 组件\n\t封装一个输出 \"Hello World！\" 的组件，组件名为 HelloMessage：\n```bash\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello World！</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage />,\n  document.getElementById('example')\n);\n```\n### 实例解析：\n```bash\nReact.createClass 方法用于生成一个组件类 HelloMessage。\n<HelloMessage /> 实例组件类并输出信息。\n```\n### 注意:\n\t1.原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。\n\t2.组件类只能包含一个顶层标签，否则也会报错。\n### 向组件传递参数，使用 this.props 对象\n```bash\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage name=\"Runoob\" />,\n  document.getElementById('example')\n);\n\n```\n<font color=\"red\">\n注意:在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，\n这是因为 class 和 for 是 JavaScript 的保留字。\n</font>\n\n### 复合组件\n\t我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。\n```bash\n以下实例我们实现了输出网站名字和网址的组件：\nvar WebSite = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <Name name={this.props.name} />\n        <Link site={this.props.site} />\n      </div>\n    );\n  }\n});\n \nvar Name = React.createClass({\n  render: function() {\n    return (\n      <h1>{this.props.name}</h1>\n    );\n  }\n});\n \nvar Link = React.createClass({\n  render: function() {\n    return (\n      <a href={this.props.site}>\n        {this.props.site}\n      </a>\n    );\n  }\n});\n \nReactDOM.render(\n  <WebSite name=\"菜鸟教程\" site=\" http://www.runoob.com\" />,\n  document.getElementById('example')\n);\n```\n\n## React State(状态)\n\tReact 把组件看成是一个状态机（State Machines）。React只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\t以下实例中创建了 LikeButton 组件，getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。\n\t当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n```bash\n<script type=\"text/babel\">\n\t//组件类(首字母大写且只能包含一个顶层标签)\n    var LikeButton = React.createClass({\n        getInitialState: function() {/*这个方法名称是已经定义好的，不能改名称。用于定义初始状态*/\n        \treturn {liked: false};\n        },\n        handleClick: function(event) {\n        \t/*state的值发生变化，自动调用this.render方法渲染*/\n            this.setState({liked: !this.state.liked});\n        },\n        render: function() {\n            var text = this.state.liked ? '喜欢' : '不喜欢';\n            //但是如果有元素内嵌，需要多行展示，则需要 return()，否则报错。\n            return (\n                <p onClick={this.handleClick}>\n            \t你<b>{text}</b>我。点我切换状态。\n            </p>\n          );\n        }\n    });\n    ReactDOM.render(\n    \t<LikeButton />,\n    \tdocument.getElementById('example')\n    );\n</script>\n```\n## React Props\n\tstate 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。\n\t这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n### 使用 Props\n```bash\nvar HelloMessage = React.createClass({\n    render: function() {\n      return <h1>Hello {this.props.name}</h1>;\n    }\n  });\n\n  ReactDOM.render(\n    <HelloMessage name=\"Runoob\" />,\n    document.getElementById('example')\n  );\n```\n### 默认 Props\n\t可以通过 getDefaultProps() 方法为 props 设置默认值，实例如下：\n```bash\nvar HelloMessage = React.createClass({\n  getDefaultProps: function() {\n    return {\n      name: 'Runoob'\n    };\n  },\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n \nReactDOM.render(\n  <HelloMessage />,\n  document.getElementById('example')\n);\n\n```\n### State 和 Props\n\t以下实例演示了如何在应用中组合使用 state 和 props 。我们可以在父组件中设置 state， \n\t并通过在子组件上使用 props 将其传递到子组件上。在 render 函数中, 我们设置 name 和 site 来获取父组件传递过来的数据。\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>菜鸟教程 React 实例</title>\n    <script src=\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"></script>\n\t<script src=\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"></script>\n\t<script src=\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n    var WebSite = React.createClass({\n      getInitialState: function() {\n        return {\n          name: \"菜鸟教程\",\n          site: \"http://www.runoob.com\"\n        };\n      },\n      render: function() {\n        return (\n          <div>\n            <Name name={this.state.name} />\n            <Link site={this.state.site} />\n          </div>\n        );\n      }\n    });\n    var Name = React.createClass({\n      render: function() {\n        return (\n          <h1>{this.props.name}</h1>\n        );\n      }\n    });\n    var Link = React.createClass({\n      render: function() {\n        return (\n          <a href={this.props.site}>\n            {this.props.site}\n          </a>\n        );\n      }\n    });\n    ReactDOM.render(\n      <WebSite />,\n      document.getElementById('example')\n    );\n    </script>\n  </body>\n</html>\n```\n### Props 验证\n\tProps 验证使用 propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes提供很多验证器 (validator) 来验证传入数据是否有效。\n\t当向 props 传入无效数据时，JavaScript 控制台会抛出警告。\n#### 单个\n```bash\n以下实例创建一个 Mytitle 组件，属性 title 是必须的且是字符串，非字符串类型会自动转换为字符串 ：\nvar title = \"菜鸟教程\";\n// var title = 123;\nvar MyTitle = React.createClass({\n  propTypes: {\n    title: React.PropTypes.string.isRequired,\n  },\n \n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(\n    <MyTitle title={title} />,\n    document.getElementById('example')\n);\n```\n#### 多个\n```bash\n\n```","slug":"react-learn-intro-1","published":1,"updated":"2018-11-01T06:47:38.309Z","_id":"cjny0swh7002x2kv7bc9hr93h","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>react的初步介绍了以下相关信息：<br>react的特点、react如何安装、react的JSX语法、react的组件、react的state以及react的props</p>\n</blockquote>\n<h2 id=\"React-特点\"><a href=\"#React-特点\" class=\"headerlink\" title=\"React 特点\"></a>React 特点</h2><p>1.声明式设计 ———— React采用声明范式，可以轻松描述应用。<br>2.高效 ———— React通过对DOM的模拟，最大限度地减少与DOM的交互。<br>3.灵活 ———— React可以与已知的库或框架很好地配合。<br>4.JSX  ————  JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。<br>5.组件  ————  通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。<br>6.单向响应的数据流  ————  React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<font color=\"red\">（类似于wxpromise的setData）</font></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello React!&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例解析：\"><a href=\"#实例解析：\" class=\"headerlink\" title=\"实例解析：\"></a>实例解析：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react.min.js - React 的核心库</span><br><span class=\"line\">react-dom.min.js - 提供与 DOM 相关的功能</span><br><span class=\"line\">babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。</span><br><span class=\"line\">以下代码是将一个 h1 标题，插入 id=<span class=\"string\">\"example\"</span> 节点中:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-安装\"><a href=\"#React-安装\" class=\"headerlink\" title=\"React 安装\"></a>React 安装</h2><h3 id=\"1-直接使用-BootCDN-的-React-CDN-库\"><a href=\"#1-直接使用-BootCDN-的-React-CDN-库\" class=\"headerlink\" title=\"1.直接使用 BootCDN 的 React CDN 库\"></a>1.直接使用 BootCDN 的 React CDN 库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">使用实例</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello React!&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><pre><code>如果我们需要使用 JSX，则 &lt;script&gt; 标签的 type 属性需要设置为 text/babel。\n</code></pre><h3 id=\"2-通过-npm-使用-React\"><a href=\"#2-通过-npm-使用-React\" class=\"headerlink\" title=\"2.通过 npm 使用 React\"></a>2.通过 npm 使用 React</h3><pre><code>create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\ncreate-react-app 自动创建的项目是基于 Webpack + ES6 。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g create-react-app</span><br><span class=\"line\">$ create-react-app my-app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-app/</span><br><span class=\"line\">$ npm start</span><br><span class=\"line\"></span><br><span class=\"line\">项目的目录结构如下：</span><br><span class=\"line\">my-app/</span><br><span class=\"line\">  README.md</span><br><span class=\"line\">  node_modules/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  .gitignore</span><br><span class=\"line\">  public/</span><br><span class=\"line\">    favicon.ico</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">  src/</span><br><span class=\"line\">    App.css</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    App.test.js</span><br><span class=\"line\">    index.css</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    logo.svg</span><br><span class=\"line\"></span><br><span class=\"line\">在浏览器中打开 http://localhost:3000/</span><br></pre></td></tr></table></figure>\n<h4 id=\"尝试修改-src-App-js-文件代码：\"><a href=\"#尝试修改-src-App-js-文件代码：\" class=\"headerlink\" title=\"尝试修改 src/App.js 文件代码：\"></a>尝试修改 src/App.js 文件代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from <span class=\"string\">'react'</span>;</span><br><span class=\"line\">import logo from <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\">import <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;h2&gt;欢迎来到菜鸟教程&lt;/h2&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;p className=<span class=\"string\">\"App-intro\"</span>&gt;</span><br><span class=\"line\">          你可以在 &lt;code&gt;src/App.js&lt;/code&gt; 文件中修改。</span><br><span class=\"line\">        &lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">export</span> default App;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-JSX\"><a href=\"#React-JSX\" class=\"headerlink\" title=\"React JSX\"></a>React JSX</h2><pre><code>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n我们不需要一定使用 JSX，但它有以下优点：\n    1.JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。\n    2.它是类型安全的，在编译过程中就能发现错误。\n    3.使用 JSX 编写模板更加简单快速。\n</code></pre><h3 id=\"使用-JSX\"><a href=\"#使用-JSX\" class=\"headerlink\" title=\"使用 JSX\"></a>使用 JSX</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 看起来类似 HTML ，我们可以看下实例:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何嵌入多层元素\"><a href=\"#如何嵌入多层元素\" class=\"headerlink\" title=\"如何嵌入多层元素\"></a>如何嵌入多层元素</h3><pre><code>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，\n实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;欢迎学习 React&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p data-myattribute = <span class=\"string\">\"somevalue\"</span>&gt;这是一个很不错的 JavaScript 库!&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"独立文件\"><a href=\"#独立文件\" class=\"headerlink\" title=\"独立文件\"></a>独立文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React JSX 代码可以放在一个独立文件上，例如我们创建一个 helloworld_react.js 文件，代码如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">然后在 HTML 文件中引入该 JS 文件：</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"helloworld_react.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript-表达式\"><a href=\"#JavaScript-表达式\" class=\"headerlink\" title=\"JavaScript 表达式\"></a>JavaScript 表达式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 中使用 JavaScript 表达式。表达式写在花括号 &#123;&#125; 中。实例如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;&#123;1+1&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">在 JSX 中不能使用 <span class=\"keyword\">if</span> <span class=\"keyword\">else</span> 语句，但可以使用 conditional (三元运算) 表达式来替代。</span><br><span class=\"line\">以下实例中如果变量 i 等于 1 浏览器将输出 <span class=\"literal\">true</span>, 如果修改 i 的值，则会输出 <span class=\"literal\">false</span>.</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">  var i = 1;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">  \t&lt;div&gt;</span><br><span class=\"line\">  \t  &lt;h1&gt;&#123;i == 1 ? <span class=\"string\">'True!'</span> : <span class=\"string\">'False'</span>&#125;&lt;/h1&gt;</span><br><span class=\"line\">   &lt;/div&gt;,</span><br><span class=\"line\">  \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。</span><br><span class=\"line\">以下实例演示了为 h1 元素添加 myStyle 内联样式：</span><br><span class=\"line\">var myStyle = &#123;</span><br><span class=\"line\">     fontSize: 100,</span><br><span class=\"line\">     color: <span class=\"string\">'#FF0000'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  \t&lt;h1 style = &#123;myStyle&#125;&gt;菜鸟教程&lt;/h1&gt;,</span><br><span class=\"line\">  \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注释需要写在花括号中，实例如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &#123;/*注释...*/&#125;</span><br><span class=\"line\">     &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于React注释的问题\"><a href=\"#关于React注释的问题\" class=\"headerlink\" title=\"关于React注释的问题\"></a>关于React注释的问题</h3><pre><code>关于React注释的问题：\n1、在标签内部的注释需要花括号\n2、在标签外的的注释不能使用花括号\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &#123;/*注释...*/&#125;</span><br><span class=\"line\">     &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 允许在模板中插入数组，数组会自动展开所有成员：</span><br><span class=\"line\">var arr = [</span><br><span class=\"line\">  &lt;h1&gt;菜鸟教程&lt;/h1&gt;,</span><br><span class=\"line\">  &lt;h2&gt;学的不仅是技术，更是梦想！&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML-标签-vs-React-组件\"><a href=\"#HTML-标签-vs-React-组件\" class=\"headerlink\" title=\"HTML 标签 vs. React 组件\"></a>HTML 标签 vs. React 组件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。</span><br><span class=\"line\"></span><br><span class=\"line\">要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。</span><br><span class=\"line\">var myDivElement = &lt;div className=<span class=\"string\">\"foo\"</span> /&gt;;</span><br><span class=\"line\">ReactDOM.render(myDivElement, document.getElementById(<span class=\"string\">'example'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">要渲染 React 组件，只需创建一个大写字母开头的本地变量。</span><br><span class=\"line\">var MyComponent = React.createClass(&#123;/*...*/&#125;);</span><br><span class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;<span class=\"literal\">true</span>&#125; /&gt;;</span><br><span class=\"line\">ReactDOM.render(myElement, document.getElementById(<span class=\"string\">'example'</span>));</span><br><span class=\"line\">React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><pre><code>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。\n作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。\n</code></pre><h2 id=\"React-组件\"><a href=\"#React-组件\" class=\"headerlink\" title=\"React 组件\"></a>React 组件</h2><pre><code>封装一个输出 &quot;Hello World！&quot; 的组件，组件名为 HelloMessage：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello World！&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例解析：-1\"><a href=\"#实例解析：-1\" class=\"headerlink\" title=\"实例解析：\"></a>实例解析：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createClass 方法用于生成一个组件类 HelloMessage。</span><br><span class=\"line\">&lt;HelloMessage /&gt; 实例组件类并输出信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><pre><code>1.原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。\n2.组件类只能包含一个顶层标签，否则也会报错。\n</code></pre><h3 id=\"向组件传递参数，使用-this-props-对象\"><a href=\"#向组件传递参数，使用-this-props-对象\" class=\"headerlink\" title=\"向组件传递参数，使用 this.props 对象\"></a>向组件传递参数，使用 this.props 对象</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage name=<span class=\"string\">\"Runoob\"</span> /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<font color=\"red\"><br>注意:在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，<br>这是因为 class 和 for 是 JavaScript 的保留字。<br></font>\n\n<h3 id=\"复合组件\"><a href=\"#复合组件\" class=\"headerlink\" title=\"复合组件\"></a>复合组件</h3><pre><code>我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下实例我们实现了输出网站名字和网址的组件：</span><br><span class=\"line\">var WebSite = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Name name=&#123;this.props.name&#125; /&gt;</span><br><span class=\"line\">        &lt;Link site=&#123;this.props.site&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var Name = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var Link = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;a href=&#123;this.props.site&#125;&gt;</span><br><span class=\"line\">        &#123;this.props.site&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;WebSite name=<span class=\"string\">\"菜鸟教程\"</span> site=<span class=\"string\">\" http://www.runoob.com\"</span> /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-State-状态\"><a href=\"#React-State-状态\" class=\"headerlink\" title=\"React State(状态)\"></a>React State(状态)</h2><pre><code>React 把组件看成是一个状态机（State Machines）。React只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n以下实例中创建了 LikeButton 组件，getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。\n当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">\t//组件类(首字母大写且只能包含一个顶层标签)</span><br><span class=\"line\">    var LikeButton = React.createClass(&#123;</span><br><span class=\"line\">        getInitialState: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;/*这个方法名称是已经定义好的，不能改名称。用于定义初始状态*/</span><br><span class=\"line\">        \t<span class=\"built_in\">return</span> &#123;liked: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleClick: <span class=\"keyword\">function</span>(event) &#123;</span><br><span class=\"line\">        \t/*state的值发生变化，自动调用this.render方法渲染*/</span><br><span class=\"line\">            this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            var text = this.state.liked ? <span class=\"string\">'喜欢'</span> : <span class=\"string\">'不喜欢'</span>;</span><br><span class=\"line\">            //但是如果有元素内嵌，需要多行展示，则需要 <span class=\"built_in\">return</span>()，否则报错。</span><br><span class=\"line\">            <span class=\"built_in\">return</span> (</span><br><span class=\"line\">                &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">            \t你&lt;b&gt;&#123;text&#125;&lt;/b&gt;我。点我切换状态。</span><br><span class=\"line\">            &lt;/p&gt;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ReactDOM.render(</span><br><span class=\"line\">    \t&lt;LikeButton /&gt;,</span><br><span class=\"line\">    \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Props\"><a href=\"#React-Props\" class=\"headerlink\" title=\"React Props\"></a>React Props</h2><pre><code>state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。\n这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n</code></pre><h3 id=\"使用-Props\"><a href=\"#使用-Props\" class=\"headerlink\" title=\"使用 Props\"></a>使用 Props</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">    render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;HelloMessage name=<span class=\"string\">\"Runoob\"</span> /&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认-Props\"><a href=\"#默认-Props\" class=\"headerlink\" title=\"默认 Props\"></a>默认 Props</h3><pre><code>可以通过 getDefaultProps() 方法为 props 设置默认值，实例如下：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  getDefaultProps: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'Runoob'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"State-和-Props\"><a href=\"#State-和-Props\" class=\"headerlink\" title=\"State 和 Props\"></a>State 和 Props</h3><pre><code>以下实例演示了如何在应用中组合使用 state 和 props 。我们可以在父组件中设置 state， \n并通过在子组件上使用 props 将其传递到子组件上。在 render 函数中, 我们设置 name 和 site 来获取父组件传递过来的数据。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;菜鸟教程 React 实例&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">    var WebSite = React.createClass(&#123;</span><br><span class=\"line\">      getInitialState: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"菜鸟教程\"</span>,</span><br><span class=\"line\">          site: <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;Name name=&#123;this.state.name&#125; /&gt;</span><br><span class=\"line\">            &lt;Link site=&#123;this.state.site&#125; /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var Name = React.createClass(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var Link = React.createClass(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;a href=&#123;this.props.site&#125;&gt;</span><br><span class=\"line\">            &#123;this.props.site&#125;</span><br><span class=\"line\">          &lt;/a&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ReactDOM.render(</span><br><span class=\"line\">      &lt;WebSite /&gt;,</span><br><span class=\"line\">      document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Props-验证\"><a href=\"#Props-验证\" class=\"headerlink\" title=\"Props 验证\"></a>Props 验证</h3><pre><code>Props 验证使用 propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes提供很多验证器 (validator) 来验证传入数据是否有效。\n当向 props 传入无效数据时，JavaScript 控制台会抛出警告。\n</code></pre><h4 id=\"单个\"><a href=\"#单个\" class=\"headerlink\" title=\"单个\"></a>单个</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下实例创建一个 Mytitle 组件，属性 title 是必须的且是字符串，非字符串类型会自动转换为字符串 ：</span><br><span class=\"line\">var title = <span class=\"string\">\"菜鸟教程\"</span>;</span><br><span class=\"line\">// var title = 123;</span><br><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  propTypes: &#123;</span><br><span class=\"line\">    title: React.PropTypes.string.isRequired,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;MyTitle title=&#123;title&#125; /&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"多个\"><a href=\"#多个\" class=\"headerlink\" title=\"多个\"></a>多个</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>react的初步介绍了以下相关信息：<br>react的特点、react如何安装、react的JSX语法、react的组件、react的state以及react的props</p>\n</blockquote>\n<h2 id=\"React-特点\"><a href=\"#React-特点\" class=\"headerlink\" title=\"React 特点\"></a>React 特点</h2><p>1.声明式设计 ———— React采用声明范式，可以轻松描述应用。<br>2.高效 ———— React通过对DOM的模拟，最大限度地减少与DOM的交互。<br>3.灵活 ———— React可以与已知的库或框架很好地配合。<br>4.JSX  ————  JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。<br>5.组件  ————  通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。<br>6.单向响应的数据流  ————  React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<font color=\"red\">（类似于wxpromise的setData）</font></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello React!&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例解析：\"><a href=\"#实例解析：\" class=\"headerlink\" title=\"实例解析：\"></a>实例解析：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react.min.js - React 的核心库</span><br><span class=\"line\">react-dom.min.js - 提供与 DOM 相关的功能</span><br><span class=\"line\">babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。</span><br><span class=\"line\">以下代码是将一个 h1 标题，插入 id=<span class=\"string\">\"example\"</span> 节点中:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-安装\"><a href=\"#React-安装\" class=\"headerlink\" title=\"React 安装\"></a>React 安装</h2><h3 id=\"1-直接使用-BootCDN-的-React-CDN-库\"><a href=\"#1-直接使用-BootCDN-的-React-CDN-库\" class=\"headerlink\" title=\"1.直接使用 BootCDN 的 React CDN 库\"></a>1.直接使用 BootCDN 的 React CDN 库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">使用实例</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello React!&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><pre><code>如果我们需要使用 JSX，则 &lt;script&gt; 标签的 type 属性需要设置为 text/babel。\n</code></pre><h3 id=\"2-通过-npm-使用-React\"><a href=\"#2-通过-npm-使用-React\" class=\"headerlink\" title=\"2.通过 npm 使用 React\"></a>2.通过 npm 使用 React</h3><pre><code>create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。\ncreate-react-app 自动创建的项目是基于 Webpack + ES6 。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g create-react-app</span><br><span class=\"line\">$ create-react-app my-app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-app/</span><br><span class=\"line\">$ npm start</span><br><span class=\"line\"></span><br><span class=\"line\">项目的目录结构如下：</span><br><span class=\"line\">my-app/</span><br><span class=\"line\">  README.md</span><br><span class=\"line\">  node_modules/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  .gitignore</span><br><span class=\"line\">  public/</span><br><span class=\"line\">    favicon.ico</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">  src/</span><br><span class=\"line\">    App.css</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    App.test.js</span><br><span class=\"line\">    index.css</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    logo.svg</span><br><span class=\"line\"></span><br><span class=\"line\">在浏览器中打开 http://localhost:3000/</span><br></pre></td></tr></table></figure>\n<h4 id=\"尝试修改-src-App-js-文件代码：\"><a href=\"#尝试修改-src-App-js-文件代码：\" class=\"headerlink\" title=\"尝试修改 src/App.js 文件代码：\"></a>尝试修改 src/App.js 文件代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from <span class=\"string\">'react'</span>;</span><br><span class=\"line\">import logo from <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\">import <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;h2&gt;欢迎来到菜鸟教程&lt;/h2&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;p className=<span class=\"string\">\"App-intro\"</span>&gt;</span><br><span class=\"line\">          你可以在 &lt;code&gt;src/App.js&lt;/code&gt; 文件中修改。</span><br><span class=\"line\">        &lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">export</span> default App;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-JSX\"><a href=\"#React-JSX\" class=\"headerlink\" title=\"React JSX\"></a>React JSX</h2><pre><code>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。\n我们不需要一定使用 JSX，但它有以下优点：\n    1.JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。\n    2.它是类型安全的，在编译过程中就能发现错误。\n    3.使用 JSX 编写模板更加简单快速。\n</code></pre><h3 id=\"使用-JSX\"><a href=\"#使用-JSX\" class=\"headerlink\" title=\"使用 JSX\"></a>使用 JSX</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 看起来类似 HTML ，我们可以看下实例:</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何嵌入多层元素\"><a href=\"#如何嵌入多层元素\" class=\"headerlink\" title=\"如何嵌入多层元素\"></a>如何嵌入多层元素</h3><pre><code>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，\n实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;欢迎学习 React&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p data-myattribute = <span class=\"string\">\"somevalue\"</span>&gt;这是一个很不错的 JavaScript 库!&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"独立文件\"><a href=\"#独立文件\" class=\"headerlink\" title=\"独立文件\"></a>独立文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React JSX 代码可以放在一个独立文件上，例如我们创建一个 helloworld_react.js 文件，代码如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">然后在 HTML 文件中引入该 JS 文件：</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"helloworld_react.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript-表达式\"><a href=\"#JavaScript-表达式\" class=\"headerlink\" title=\"JavaScript 表达式\"></a>JavaScript 表达式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 中使用 JavaScript 表达式。表达式写在花括号 &#123;&#125; 中。实例如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;&#123;1+1&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">在 JSX 中不能使用 <span class=\"keyword\">if</span> <span class=\"keyword\">else</span> 语句，但可以使用 conditional (三元运算) 表达式来替代。</span><br><span class=\"line\">以下实例中如果变量 i 等于 1 浏览器将输出 <span class=\"literal\">true</span>, 如果修改 i 的值，则会输出 <span class=\"literal\">false</span>.</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">  var i = 1;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">  \t&lt;div&gt;</span><br><span class=\"line\">  \t  &lt;h1&gt;&#123;i == 1 ? <span class=\"string\">'True!'</span> : <span class=\"string\">'False'</span>&#125;&lt;/h1&gt;</span><br><span class=\"line\">   &lt;/div&gt;,</span><br><span class=\"line\">  \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。</span><br><span class=\"line\">以下实例演示了为 h1 元素添加 myStyle 内联样式：</span><br><span class=\"line\">var myStyle = &#123;</span><br><span class=\"line\">     fontSize: 100,</span><br><span class=\"line\">     color: <span class=\"string\">'#FF0000'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  \t&lt;h1 style = &#123;myStyle&#125;&gt;菜鸟教程&lt;/h1&gt;,</span><br><span class=\"line\">  \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注释需要写在花括号中，实例如下：</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &#123;/*注释...*/&#125;</span><br><span class=\"line\">     &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于React注释的问题\"><a href=\"#关于React注释的问题\" class=\"headerlink\" title=\"关于React注释的问题\"></a>关于React注释的问题</h3><pre><code>关于React注释的问题：\n1、在标签内部的注释需要花括号\n2、在标签外的的注释不能使用花括号\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><br><span class=\"line\">    &#123;/*注释...*/&#125;</span><br><span class=\"line\">     &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSX 允许在模板中插入数组，数组会自动展开所有成员：</span><br><span class=\"line\">var arr = [</span><br><span class=\"line\">  &lt;h1&gt;菜鸟教程&lt;/h1&gt;,</span><br><span class=\"line\">  &lt;h2&gt;学的不仅是技术，更是梦想！&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML-标签-vs-React-组件\"><a href=\"#HTML-标签-vs-React-组件\" class=\"headerlink\" title=\"HTML 标签 vs. React 组件\"></a>HTML 标签 vs. React 组件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。</span><br><span class=\"line\"></span><br><span class=\"line\">要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。</span><br><span class=\"line\">var myDivElement = &lt;div className=<span class=\"string\">\"foo\"</span> /&gt;;</span><br><span class=\"line\">ReactDOM.render(myDivElement, document.getElementById(<span class=\"string\">'example'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">要渲染 React 组件，只需创建一个大写字母开头的本地变量。</span><br><span class=\"line\">var MyComponent = React.createClass(&#123;/*...*/&#125;);</span><br><span class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;<span class=\"literal\">true</span>&#125; /&gt;;</span><br><span class=\"line\">ReactDOM.render(myElement, document.getElementById(<span class=\"string\">'example'</span>));</span><br><span class=\"line\">React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><pre><code>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。\n作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。\n</code></pre><h2 id=\"React-组件\"><a href=\"#React-组件\" class=\"headerlink\" title=\"React 组件\"></a>React 组件</h2><pre><code>封装一个输出 &quot;Hello World！&quot; 的组件，组件名为 HelloMessage：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello World！&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例解析：-1\"><a href=\"#实例解析：-1\" class=\"headerlink\" title=\"实例解析：\"></a>实例解析：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.createClass 方法用于生成一个组件类 HelloMessage。</span><br><span class=\"line\">&lt;HelloMessage /&gt; 实例组件类并输出信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><pre><code>1.原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。\n2.组件类只能包含一个顶层标签，否则也会报错。\n</code></pre><h3 id=\"向组件传递参数，使用-this-props-对象\"><a href=\"#向组件传递参数，使用-this-props-对象\" class=\"headerlink\" title=\"向组件传递参数，使用 this.props 对象\"></a>向组件传递参数，使用 this.props 对象</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage name=<span class=\"string\">\"Runoob\"</span> /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<font color=\"red\"><br>注意:在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，<br>这是因为 class 和 for 是 JavaScript 的保留字。<br></font>\n\n<h3 id=\"复合组件\"><a href=\"#复合组件\" class=\"headerlink\" title=\"复合组件\"></a>复合组件</h3><pre><code>我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下实例我们实现了输出网站名字和网址的组件：</span><br><span class=\"line\">var WebSite = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Name name=&#123;this.props.name&#125; /&gt;</span><br><span class=\"line\">        &lt;Link site=&#123;this.props.site&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var Name = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">var Link = React.createClass(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (</span><br><span class=\"line\">      &lt;a href=&#123;this.props.site&#125;&gt;</span><br><span class=\"line\">        &#123;this.props.site&#125;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;WebSite name=<span class=\"string\">\"菜鸟教程\"</span> site=<span class=\"string\">\" http://www.runoob.com\"</span> /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-State-状态\"><a href=\"#React-State-状态\" class=\"headerlink\" title=\"React State(状态)\"></a>React State(状态)</h2><pre><code>React 把组件看成是一个状态机（State Machines）。React只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n以下实例中创建了 LikeButton 组件，getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。\n当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">\t//组件类(首字母大写且只能包含一个顶层标签)</span><br><span class=\"line\">    var LikeButton = React.createClass(&#123;</span><br><span class=\"line\">        getInitialState: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;/*这个方法名称是已经定义好的，不能改名称。用于定义初始状态*/</span><br><span class=\"line\">        \t<span class=\"built_in\">return</span> &#123;liked: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleClick: <span class=\"keyword\">function</span>(event) &#123;</span><br><span class=\"line\">        \t/*state的值发生变化，自动调用this.render方法渲染*/</span><br><span class=\"line\">            this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            var text = this.state.liked ? <span class=\"string\">'喜欢'</span> : <span class=\"string\">'不喜欢'</span>;</span><br><span class=\"line\">            //但是如果有元素内嵌，需要多行展示，则需要 <span class=\"built_in\">return</span>()，否则报错。</span><br><span class=\"line\">            <span class=\"built_in\">return</span> (</span><br><span class=\"line\">                &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">            \t你&lt;b&gt;&#123;text&#125;&lt;/b&gt;我。点我切换状态。</span><br><span class=\"line\">            &lt;/p&gt;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ReactDOM.render(</span><br><span class=\"line\">    \t&lt;LikeButton /&gt;,</span><br><span class=\"line\">    \tdocument.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Props\"><a href=\"#React-Props\" class=\"headerlink\" title=\"React Props\"></a>React Props</h2><pre><code>state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。\n这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n</code></pre><h3 id=\"使用-Props\"><a href=\"#使用-Props\" class=\"headerlink\" title=\"使用 Props\"></a>使用 Props</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">    render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;HelloMessage name=<span class=\"string\">\"Runoob\"</span> /&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认-Props\"><a href=\"#默认-Props\" class=\"headerlink\" title=\"默认 Props\"></a>默认 Props</h3><pre><code>可以通过 getDefaultProps() 方法为 props 设置默认值，实例如下：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  getDefaultProps: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'Runoob'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage /&gt;,</span><br><span class=\"line\">  document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"State-和-Props\"><a href=\"#State-和-Props\" class=\"headerlink\" title=\"State 和 Props\"></a>State 和 Props</h3><pre><code>以下实例演示了如何在应用中组合使用 state 和 props 。我们可以在父组件中设置 state， \n并通过在子组件上使用 props 将其传递到子组件上。在 render 函数中, 我们设置 name 和 site 来获取父组件传递过来的数据。\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">    &lt;title&gt;菜鸟教程 React 实例&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"example\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><br><span class=\"line\">    var WebSite = React.createClass(&#123;</span><br><span class=\"line\">      getInitialState: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"菜鸟教程\"</span>,</span><br><span class=\"line\">          site: <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;Name name=&#123;this.state.name&#125; /&gt;</span><br><span class=\"line\">            &lt;Link site=&#123;this.state.site&#125; /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var Name = React.createClass(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var Link = React.createClass(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (</span><br><span class=\"line\">          &lt;a href=&#123;this.props.site&#125;&gt;</span><br><span class=\"line\">            &#123;this.props.site&#125;</span><br><span class=\"line\">          &lt;/a&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ReactDOM.render(</span><br><span class=\"line\">      &lt;WebSite /&gt;,</span><br><span class=\"line\">      document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Props-验证\"><a href=\"#Props-验证\" class=\"headerlink\" title=\"Props 验证\"></a>Props 验证</h3><pre><code>Props 验证使用 propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes提供很多验证器 (validator) 来验证传入数据是否有效。\n当向 props 传入无效数据时，JavaScript 控制台会抛出警告。\n</code></pre><h4 id=\"单个\"><a href=\"#单个\" class=\"headerlink\" title=\"单个\"></a>单个</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下实例创建一个 Mytitle 组件，属性 title 是必须的且是字符串，非字符串类型会自动转换为字符串 ：</span><br><span class=\"line\">var title = <span class=\"string\">\"菜鸟教程\"</span>;</span><br><span class=\"line\">// var title = 123;</span><br><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  propTypes: &#123;</span><br><span class=\"line\">    title: React.PropTypes.string.isRequired,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;MyTitle title=&#123;title&#125; /&gt;,</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"多个\"><a href=\"#多个\" class=\"headerlink\" title=\"多个\"></a>多个</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"react项目中的统计","date":"2018-07-30T07:41:54.000Z","author":"T.2stt","comments":1,"_content":"> 人类只有不断地总结经验,才会有所 发现,有所发明,有所创造,有所前进。在学习中也一样，需要不断的总结，踩坑。\n此文记载react的项目中踩的坑，以及经验之谈，只有不断的去尝试才能更加的得心应手。包括onClick\n\n## 事件生命\n1.只要是通过onXXX事件调用的都必须是handle开头进行方法生命\n```bash\nonClick={ () => { this.handleNextSameClick(); }}\n```\n2.对于父组件传给子组件的方法需要传递参数this，方法有两种\n```bash\n在父组件\n1. 在构造函数中：this.handleClick = this.handleClick.bind(this);  在调用中使用 onClick={this.handleClick}\n2. 在使用处直接传参用：handleFouceSearchFn={this.handleFouceSearchFn.bind(this)}\n```","source":"_posts/react-learn-intro-2.md","raw":"---\ntitle: react项目中的统计\ndate:  2018-07-30 15:41:54\nauthor: T.2stt\ncomments: true\ntags:\n- react\ncategories:\n- react\n---\n> 人类只有不断地总结经验,才会有所 发现,有所发明,有所创造,有所前进。在学习中也一样，需要不断的总结，踩坑。\n此文记载react的项目中踩的坑，以及经验之谈，只有不断的去尝试才能更加的得心应手。包括onClick\n\n## 事件生命\n1.只要是通过onXXX事件调用的都必须是handle开头进行方法生命\n```bash\nonClick={ () => { this.handleNextSameClick(); }}\n```\n2.对于父组件传给子组件的方法需要传递参数this，方法有两种\n```bash\n在父组件\n1. 在构造函数中：this.handleClick = this.handleClick.bind(this);  在调用中使用 onClick={this.handleClick}\n2. 在使用处直接传参用：handleFouceSearchFn={this.handleFouceSearchFn.bind(this)}\n```","slug":"react-learn-intro-2","published":1,"updated":"2018-11-01T06:49:27.028Z","_id":"cjny0swh900312kv7n22m6024","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>人类只有不断地总结经验,才会有所 发现,有所发明,有所创造,有所前进。在学习中也一样，需要不断的总结，踩坑。<br>此文记载react的项目中踩的坑，以及经验之谈，只有不断的去尝试才能更加的得心应手。包括onClick</p>\n</blockquote>\n<h2 id=\"事件生命\"><a href=\"#事件生命\" class=\"headerlink\" title=\"事件生命\"></a>事件生命</h2><p>1.只要是通过onXXX事件调用的都必须是handle开头进行方法生命<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123; () =&gt; &#123; this.handleNextSameClick(); &#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.对于父组件传给子组件的方法需要传递参数this，方法有两种<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在父组件</span><br><span class=\"line\">1. 在构造函数中：this.handleClick = this.handleClick.bind(this);  在调用中使用 onClick=&#123;this.handleClick&#125;</span><br><span class=\"line\">2. 在使用处直接传参用：handleFouceSearchFn=&#123;this.handleFouceSearchFn.bind(this)&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>人类只有不断地总结经验,才会有所 发现,有所发明,有所创造,有所前进。在学习中也一样，需要不断的总结，踩坑。<br>此文记载react的项目中踩的坑，以及经验之谈，只有不断的去尝试才能更加的得心应手。包括onClick</p>\n</blockquote>\n<h2 id=\"事件生命\"><a href=\"#事件生命\" class=\"headerlink\" title=\"事件生命\"></a>事件生命</h2><p>1.只要是通过onXXX事件调用的都必须是handle开头进行方法生命<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick=&#123; () =&gt; &#123; this.handleNextSameClick(); &#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.对于父组件传给子组件的方法需要传递参数this，方法有两种<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在父组件</span><br><span class=\"line\">1. 在构造函数中：this.handleClick = this.handleClick.bind(this);  在调用中使用 onClick=&#123;this.handleClick&#125;</span><br><span class=\"line\">2. 在使用处直接传参用：handleFouceSearchFn=&#123;this.handleFouceSearchFn.bind(this)&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"一道题目引发对js支持正则表达式相关方法的探讨","date":"2017-11-24T01:57:10.000Z","author":"T.2stt","comments":1,"_content":"\n> 此文说一说关于javascript中关于正则的几个方法中被很多人忽略的地方。\n-工具\n\n# 正则常用工具\n\n- [regexper](https://regexper.com) 我最常用的一个，个人觉得UI做得比其他好\n- [regulex](https://jex.im/regulex/) 备选，他有一个很舒心的功能，可以提供一段js，嵌套到你的网站，生成正则可视化图\n\n---\n\n# 题目\n\n> 写一个方法使得数字末尾的连续0变成9，如1230000变成1239999\n\n一道很简单的题目，直接正则就能搞定，也许你会写：\n\n``` javascript\nfunction zoreToNine(num){\n    return (num + '').replace(/0/g,9);\n}\n//或者\nfunction zoreToNine(num){\n    return (num + '').replace(/[1-9]0+$/,9);\n}\n```\n\n这也是此题的陷阱所在，按照上面的方法，1023000就会被转化成1923999，这样是不符合要求的，所以改进一下：\n\n``` javascript\nfunction zoreToNine(num){\n    return (num + '').replace(/[1-9]0+$/,function($1){\n        return $1.replace(/0/g,9);\n    });\n}\nzoreToNine(1223000); //1223999\nzoreToNine(1023000); //1023999\n```\n\n关于这个问题的解决方案[@微醺岁月](https://segmentfault.com/u/jawil)同学提供了一种，位置匹配的方法，简单了很多，厉害！\n\n``` javascript\n\"12300100000\".replace(/0(?=(0+$)|\\b)/g,9); //12300199999\n```\n`javascript`支持正则表达式相关方法，注意并不是正则对象的方法。上述方法使用了正则，<font color=\"red\">在回调函数里有一个$1</font>，这个$1到底是什么？所有的匹配规则匹配后都有$1这个变量么？...以下进行解释\n\n---\n# 主角\n\n`javascript`中正则对象有三个方法：`test`、`exec`和`compile`，\n但是此次讨论的是能够使用正则表示的相关方法：`search`、`match`、`replace`和`split`，注意它们都是`String`对象的方法，使用它们必须要是<font color=\"red\">String</font>``类型.\n\n## replace\n```javascript\nreplace(rule[regexp/substr], replacement)\n`replace`是一个用于替换字符串的方法，具体分析一下它的特点:\n1. 它接收两个参数\n2. 无副作用不影响原始变量\n3. 返回被改变的字符串(一定是字符串类型)\n```\n\n定义一些变量，方便全文取用。\n\n``` javascript\nlet a = '12309800', b = '12309800[object Object]', b = '12309800{}';\n```\n\n### 参数rule\n\n在一般情况，rule参数一般是正则(如果是正则，则按照正则的规则进行匹配)、字符串(如果是字符串，将会在匹配到第一个符合条件的目标，结束方法)、数字。\n\n\n``` javascript\n//匹配第一个0替换成5\na.replace(0,5); //'12359800'\n//匹配所有的0替换成5\na.replace(/0/g,5); //'12359855'\n```\n\n### 参数replacement\n\n```javascript\n在一般情况，replacement参数是字符串、数字、者回调。\n```\n\n#### 包含$的字符串\n\n当参数rule为正则，并且正则至少包含有一对完整的`()`时，如果`replacement`包含有$的字符串，那么对于`$n`(n为大于0的整数，n的长度取决于正则中括号的对数)，会被解析成一个变量。但是也仅仅只是作为一个变量，无法在字符串中进行计算，此时更类似特别的字符串模板变量。\n\n一般情况下，`$n`中n的长度取决于正则中括号的对数，$1表示第1对括号匹配的结果，$2表示第2对匹配的结果...在正则所有的括号对中，左括号出现在第几个位置（或者说从左往右），则它就是第几对括号，以此类推。姑且我们把这种规则成为`正则匹配分割规则`（ps:这完全是我自己取的一个名字，方便文章后面使用和记忆）。\n\n``` javascript\na.replace(0,'$0'); //'123$09800'\na.replace(/00/g,'$0'); //'123098$0'\na.replace(/[1-9]0+$/,'$1'); //'12309$1'\na.replace(/([1-9](0+$))/,'$1'); //'12309800'，此时$1为[1-9](0+$)匹配到的内容，$2为0+$匹配到的内容\na.replace(/([1-9])(0+$)/,'$1'); //'123098'，此时$1为[1-9]匹配到的内容，$2为0+$匹配到的内容\na.replace(/([1-9])(0+$)/,'$1*$2'); //'123098*00'，此处的$1和$2不会安照期待的情况进行乘法计算，要进行计算可以用回调\n```\n<font color=\"red\">【注意：】</font>\n虽然目前参数replacement中携带有$n仍然能正常使用，但是这种方式已经不被[规范](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties)所推荐，更应该使用回调来完成这个操作如果正则中包含有全局匹配标志(g)，那么每次匹配的都符合上述规则\n\n#### 回调函数\n\ndemo：\n\n``` javascript\na.replace(/[1-9]0+$/,function(){\n    console.log(arguments); //[\"800\",5,\"12309800\"]、\n});\na.replace(/([1-9])0+$/,function(){\n    console.log(arguments); //[\"800\",\"8\",5,\"12309800\"]\n});\na.replace(/([1-9])(0+$)/,function(){\n    console.log(arguments); //[\"800\",\"8\",\"00\",5,\"12309800\"]\n});\na.replace(/(([1-9])(0+$))/,function(){\n    console.log(arguments); //[\"800\",\"800\",\"8\",\"00\",5,\"12309800\"]\n});\n```\n\n回调函数的`arguments`数组部分组成：[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串],`$1...$n`表示每个括号对的匹配，规则和前面的相同。\n所以有一下规律：\n\n``` javascript\nlet arr = [...arguments], len = arr.length;\n(len >= 3) === true;\narr[0] = 完整匹配的字符串;\narr[len-2] = 匹配的开始位置;\narr[len-1] = 原始字符串;\n```\n\n<font color=\"red\">【注意：】</font>\n除了匹配的开始位置是`Number`类型外，其余的都是`String`类型\n\n### 非常规类型参数\n\n如果参数类型不是上述两种情况，会发生什么呢？看看下面的例子：\n\n``` javascript\na.replace(0,null); //123null9800\na.replace(0,undefined); //123null9800\na.replace(0,[]); //1239800\na.replace(0,Array); //1230,3,123098009800\nb.replace({},5); //123098005\nc.replace({},5); //'12309800{}'\na.replace(0,{}); //123[object Object]9800\na.replace(0,Object); //12309800\n```\n\n由上面的例子可以看出，如果非正则也非字符串，则有以下规则:\n    <font color=\"orange\">null</font> 变量，则会转换成`'null'`字符串;\n    <font color=\"orange\">undefined</font> 变量，则会转换成`'undefined'`字符串;\n    <font color=\"orange\">[]</font> 变量，则会调用`join()`方法转换成字符串，默认以`,`分割，值得注意的是空数组将会被转换成空字符串（没有任何字符），通常会被匹配源字符串的开始位置（默认开始位置为空字符串）;\n    <font color=\"orange\">Array</font> 变量，则会先转成成一个匹配的数组，形如`[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串]`,然后对它调用`join()`方法转换成字符串，默认以`,`分割;\n    <font color=\"orange\">{}</font> 变量，则会调用`Object.protype.toString.call()`方法把`{}`转换成`[object Object]`;\n    `Object`变量，则貌似什么都没做\n\n虽然可以传入这些非正常参数，但大多数情况下这些类型的参数对实际是毫无意义的，所以不建议传入以上类型的参数。\n\n## match\n```javascript\nmatch(rule[regex/substr])\n`match`方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n该方法类似`indexOf`和`lastIndexOf`，但是它返回指定的值，而不是字符串的位置；\n```\n\n### 参数rule\n\n参数的传递除了常规的正则和字符串以外，其余所有类型的参数都会按照上述的`正则匹配参数转换规则`转换成字符串形式来匹配。\n\n### 返回值\n\n返回值根据传入的参数类型和规则的不同，返回的内容不同，但总体来说，它是返回一个对象，而不是索引，如果没匹配到任何符合条件的字符串，则返回`null`。\n\n### 非全局匹配正则\n\n如果匹配规则是一个非全局匹配规则，那么，它此时的返回值是一个伪数组对象(likeArr)，形如:[一个展开的匹配到的字符串数组, 匹配到的字符串位置， 原始字符串]，它有如下规律：\n\n``` javascript\nvar likeArr = a.match(regex);\nlikeArr[0] = 匹配到的字符串;\nlikeArr[1...n] = 正则匹配分割规则匹配的字符串;\nlikeArr.index = 匹配到字符串的位置\nlikeArr.inupt = 原始字符串\n```\n\n看例子：\n\n``` javascript\na.match(/[1-9]0+$/); //[0:'800',index:5,input:'12309800']\na.match(/([1-9])0+$/); //[0:'800',1:'8',index:5,input:'12309800']\na.match(/[1-9](0+$)/); //[0:'800',1:'00',index:5,input:'12309800']\na.match(/([1-9])(0+$)/); //[0:'800',1:'8',2:'00',index:5,input:'12309800']\n```\n\n### 全局匹配正则\n\n如果匹配规则是一个全局匹配规则(正在携带有g标志)，那么，它此时的返回值是一个数组对象(arr)，形如:[匹配到的字符串数1,匹配到的字符串数2,匹配到的字符串数3];\n看例子：\n\n``` javascript\na.match(/[1-9]0/); //[0:'30',index:2,input:'12309800']\na.match(/[1-9]0/g); //[0:'30',1:'80']\n```\n\n## search\n```javascript\nsearch(rule[regex/substr])\n`search`方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。\n`stringObject`中第一个与`rule`相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回`-1`。\n\n```\n<font color=\"red\">【注意:】</font>\n-`search`方法不执行全局匹配，它将忽略标志`g`。\n-忽略`regexp`的`lastIndex`属性，总是从字符串的开始进行检索，这意味着它总是返回`stringObject`的第一个匹配的位置\n\n同样，`search`可以传入任何参数类型，它会遵循`正则匹配参数转换规则`进行转换\n\n## split\n```javascript\nsplit(rule[regex/substr],len)\n这个方法就不用多说，很常用的字符串分割方法。\n第二个参数的作用就是限制返回值的长度，表示返回值的最大长度\n\n当然，它依然可以传入任何参数类型，会遵循`正则匹配参数转换规则`进行转换\n```\ndemo:有一段加密的后的密码，我们需要分离出字符串'12a344gg333tt445656ffa6778ii99'中的前三组数字，通过某种计算才能得出正确的密码\n\n``` javascript\n'12a344gg333tt445656ffa6778ii99'.split(/[a-zA-Z]+/g,3); //['12','334','333']\n```\n\n","source":"_posts/regex-to-something.md","raw":"---\ntitle: 一道题目引发对js支持正则表达式相关方法的探讨\ndate: 2017-11-24 9:57:10\nauthor: T.2stt\ncomments: true\ntags:\n- regex\n- javascript\ncategories:\n- [正则,regex]\n---\n\n> 此文说一说关于javascript中关于正则的几个方法中被很多人忽略的地方。\n-工具\n\n# 正则常用工具\n\n- [regexper](https://regexper.com) 我最常用的一个，个人觉得UI做得比其他好\n- [regulex](https://jex.im/regulex/) 备选，他有一个很舒心的功能，可以提供一段js，嵌套到你的网站，生成正则可视化图\n\n---\n\n# 题目\n\n> 写一个方法使得数字末尾的连续0变成9，如1230000变成1239999\n\n一道很简单的题目，直接正则就能搞定，也许你会写：\n\n``` javascript\nfunction zoreToNine(num){\n    return (num + '').replace(/0/g,9);\n}\n//或者\nfunction zoreToNine(num){\n    return (num + '').replace(/[1-9]0+$/,9);\n}\n```\n\n这也是此题的陷阱所在，按照上面的方法，1023000就会被转化成1923999，这样是不符合要求的，所以改进一下：\n\n``` javascript\nfunction zoreToNine(num){\n    return (num + '').replace(/[1-9]0+$/,function($1){\n        return $1.replace(/0/g,9);\n    });\n}\nzoreToNine(1223000); //1223999\nzoreToNine(1023000); //1023999\n```\n\n关于这个问题的解决方案[@微醺岁月](https://segmentfault.com/u/jawil)同学提供了一种，位置匹配的方法，简单了很多，厉害！\n\n``` javascript\n\"12300100000\".replace(/0(?=(0+$)|\\b)/g,9); //12300199999\n```\n`javascript`支持正则表达式相关方法，注意并不是正则对象的方法。上述方法使用了正则，<font color=\"red\">在回调函数里有一个$1</font>，这个$1到底是什么？所有的匹配规则匹配后都有$1这个变量么？...以下进行解释\n\n---\n# 主角\n\n`javascript`中正则对象有三个方法：`test`、`exec`和`compile`，\n但是此次讨论的是能够使用正则表示的相关方法：`search`、`match`、`replace`和`split`，注意它们都是`String`对象的方法，使用它们必须要是<font color=\"red\">String</font>``类型.\n\n## replace\n```javascript\nreplace(rule[regexp/substr], replacement)\n`replace`是一个用于替换字符串的方法，具体分析一下它的特点:\n1. 它接收两个参数\n2. 无副作用不影响原始变量\n3. 返回被改变的字符串(一定是字符串类型)\n```\n\n定义一些变量，方便全文取用。\n\n``` javascript\nlet a = '12309800', b = '12309800[object Object]', b = '12309800{}';\n```\n\n### 参数rule\n\n在一般情况，rule参数一般是正则(如果是正则，则按照正则的规则进行匹配)、字符串(如果是字符串，将会在匹配到第一个符合条件的目标，结束方法)、数字。\n\n\n``` javascript\n//匹配第一个0替换成5\na.replace(0,5); //'12359800'\n//匹配所有的0替换成5\na.replace(/0/g,5); //'12359855'\n```\n\n### 参数replacement\n\n```javascript\n在一般情况，replacement参数是字符串、数字、者回调。\n```\n\n#### 包含$的字符串\n\n当参数rule为正则，并且正则至少包含有一对完整的`()`时，如果`replacement`包含有$的字符串，那么对于`$n`(n为大于0的整数，n的长度取决于正则中括号的对数)，会被解析成一个变量。但是也仅仅只是作为一个变量，无法在字符串中进行计算，此时更类似特别的字符串模板变量。\n\n一般情况下，`$n`中n的长度取决于正则中括号的对数，$1表示第1对括号匹配的结果，$2表示第2对匹配的结果...在正则所有的括号对中，左括号出现在第几个位置（或者说从左往右），则它就是第几对括号，以此类推。姑且我们把这种规则成为`正则匹配分割规则`（ps:这完全是我自己取的一个名字，方便文章后面使用和记忆）。\n\n``` javascript\na.replace(0,'$0'); //'123$09800'\na.replace(/00/g,'$0'); //'123098$0'\na.replace(/[1-9]0+$/,'$1'); //'12309$1'\na.replace(/([1-9](0+$))/,'$1'); //'12309800'，此时$1为[1-9](0+$)匹配到的内容，$2为0+$匹配到的内容\na.replace(/([1-9])(0+$)/,'$1'); //'123098'，此时$1为[1-9]匹配到的内容，$2为0+$匹配到的内容\na.replace(/([1-9])(0+$)/,'$1*$2'); //'123098*00'，此处的$1和$2不会安照期待的情况进行乘法计算，要进行计算可以用回调\n```\n<font color=\"red\">【注意：】</font>\n虽然目前参数replacement中携带有$n仍然能正常使用，但是这种方式已经不被[规范](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties)所推荐，更应该使用回调来完成这个操作如果正则中包含有全局匹配标志(g)，那么每次匹配的都符合上述规则\n\n#### 回调函数\n\ndemo：\n\n``` javascript\na.replace(/[1-9]0+$/,function(){\n    console.log(arguments); //[\"800\",5,\"12309800\"]、\n});\na.replace(/([1-9])0+$/,function(){\n    console.log(arguments); //[\"800\",\"8\",5,\"12309800\"]\n});\na.replace(/([1-9])(0+$)/,function(){\n    console.log(arguments); //[\"800\",\"8\",\"00\",5,\"12309800\"]\n});\na.replace(/(([1-9])(0+$))/,function(){\n    console.log(arguments); //[\"800\",\"800\",\"8\",\"00\",5,\"12309800\"]\n});\n```\n\n回调函数的`arguments`数组部分组成：[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串],`$1...$n`表示每个括号对的匹配，规则和前面的相同。\n所以有一下规律：\n\n``` javascript\nlet arr = [...arguments], len = arr.length;\n(len >= 3) === true;\narr[0] = 完整匹配的字符串;\narr[len-2] = 匹配的开始位置;\narr[len-1] = 原始字符串;\n```\n\n<font color=\"red\">【注意：】</font>\n除了匹配的开始位置是`Number`类型外，其余的都是`String`类型\n\n### 非常规类型参数\n\n如果参数类型不是上述两种情况，会发生什么呢？看看下面的例子：\n\n``` javascript\na.replace(0,null); //123null9800\na.replace(0,undefined); //123null9800\na.replace(0,[]); //1239800\na.replace(0,Array); //1230,3,123098009800\nb.replace({},5); //123098005\nc.replace({},5); //'12309800{}'\na.replace(0,{}); //123[object Object]9800\na.replace(0,Object); //12309800\n```\n\n由上面的例子可以看出，如果非正则也非字符串，则有以下规则:\n    <font color=\"orange\">null</font> 变量，则会转换成`'null'`字符串;\n    <font color=\"orange\">undefined</font> 变量，则会转换成`'undefined'`字符串;\n    <font color=\"orange\">[]</font> 变量，则会调用`join()`方法转换成字符串，默认以`,`分割，值得注意的是空数组将会被转换成空字符串（没有任何字符），通常会被匹配源字符串的开始位置（默认开始位置为空字符串）;\n    <font color=\"orange\">Array</font> 变量，则会先转成成一个匹配的数组，形如`[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串]`,然后对它调用`join()`方法转换成字符串，默认以`,`分割;\n    <font color=\"orange\">{}</font> 变量，则会调用`Object.protype.toString.call()`方法把`{}`转换成`[object Object]`;\n    `Object`变量，则貌似什么都没做\n\n虽然可以传入这些非正常参数，但大多数情况下这些类型的参数对实际是毫无意义的，所以不建议传入以上类型的参数。\n\n## match\n```javascript\nmatch(rule[regex/substr])\n`match`方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n该方法类似`indexOf`和`lastIndexOf`，但是它返回指定的值，而不是字符串的位置；\n```\n\n### 参数rule\n\n参数的传递除了常规的正则和字符串以外，其余所有类型的参数都会按照上述的`正则匹配参数转换规则`转换成字符串形式来匹配。\n\n### 返回值\n\n返回值根据传入的参数类型和规则的不同，返回的内容不同，但总体来说，它是返回一个对象，而不是索引，如果没匹配到任何符合条件的字符串，则返回`null`。\n\n### 非全局匹配正则\n\n如果匹配规则是一个非全局匹配规则，那么，它此时的返回值是一个伪数组对象(likeArr)，形如:[一个展开的匹配到的字符串数组, 匹配到的字符串位置， 原始字符串]，它有如下规律：\n\n``` javascript\nvar likeArr = a.match(regex);\nlikeArr[0] = 匹配到的字符串;\nlikeArr[1...n] = 正则匹配分割规则匹配的字符串;\nlikeArr.index = 匹配到字符串的位置\nlikeArr.inupt = 原始字符串\n```\n\n看例子：\n\n``` javascript\na.match(/[1-9]0+$/); //[0:'800',index:5,input:'12309800']\na.match(/([1-9])0+$/); //[0:'800',1:'8',index:5,input:'12309800']\na.match(/[1-9](0+$)/); //[0:'800',1:'00',index:5,input:'12309800']\na.match(/([1-9])(0+$)/); //[0:'800',1:'8',2:'00',index:5,input:'12309800']\n```\n\n### 全局匹配正则\n\n如果匹配规则是一个全局匹配规则(正在携带有g标志)，那么，它此时的返回值是一个数组对象(arr)，形如:[匹配到的字符串数1,匹配到的字符串数2,匹配到的字符串数3];\n看例子：\n\n``` javascript\na.match(/[1-9]0/); //[0:'30',index:2,input:'12309800']\na.match(/[1-9]0/g); //[0:'30',1:'80']\n```\n\n## search\n```javascript\nsearch(rule[regex/substr])\n`search`方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。\n`stringObject`中第一个与`rule`相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回`-1`。\n\n```\n<font color=\"red\">【注意:】</font>\n-`search`方法不执行全局匹配，它将忽略标志`g`。\n-忽略`regexp`的`lastIndex`属性，总是从字符串的开始进行检索，这意味着它总是返回`stringObject`的第一个匹配的位置\n\n同样，`search`可以传入任何参数类型，它会遵循`正则匹配参数转换规则`进行转换\n\n## split\n```javascript\nsplit(rule[regex/substr],len)\n这个方法就不用多说，很常用的字符串分割方法。\n第二个参数的作用就是限制返回值的长度，表示返回值的最大长度\n\n当然，它依然可以传入任何参数类型，会遵循`正则匹配参数转换规则`进行转换\n```\ndemo:有一段加密的后的密码，我们需要分离出字符串'12a344gg333tt445656ffa6778ii99'中的前三组数字，通过某种计算才能得出正确的密码\n\n``` javascript\n'12a344gg333tt445656ffa6778ii99'.split(/[a-zA-Z]+/g,3); //['12','334','333']\n```\n\n","slug":"regex-to-something","published":1,"updated":"2018-11-01T06:56:00.569Z","_id":"cjny0swhg00332kv7vuyatdwy","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此文说一说关于javascript中关于正则的几个方法中被很多人忽略的地方。<br>-工具</p>\n</blockquote>\n<h1 id=\"正则常用工具\"><a href=\"#正则常用工具\" class=\"headerlink\" title=\"正则常用工具\"></a>正则常用工具</h1><ul>\n<li><a href=\"https://regexper.com\" target=\"_blank\" rel=\"noopener\">regexper</a> 我最常用的一个，个人觉得UI做得比其他好</li>\n<li><a href=\"https://jex.im/regulex/\" target=\"_blank\" rel=\"noopener\">regulex</a> 备选，他有一个很舒心的功能，可以提供一段js，嵌套到你的网站，生成正则可视化图</li>\n</ul>\n<hr>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><blockquote>\n<p>写一个方法使得数字末尾的连续0变成9，如1230000变成1239999</p>\n</blockquote>\n<p>一道很简单的题目，直接正则就能搞定，也许你会写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这也是此题的陷阱所在，按照上面的方法，1023000就会被转化成1923999，这样是不符合要求的，所以改进一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"number\">1.</span>replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">zoreToNine(<span class=\"number\">1223000</span>); <span class=\"comment\">//1223999</span></span><br><span class=\"line\">zoreToNine(<span class=\"number\">1023000</span>); <span class=\"comment\">//1023999</span></span><br></pre></td></tr></table></figure>\n<p>关于这个问题的解决方案<a href=\"https://segmentfault.com/u/jawil\" target=\"_blank\" rel=\"noopener\">@微醺岁月</a>同学提供了一种，位置匹配的方法，简单了很多，厉害！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"12300100000\"</span>.replace(<span class=\"regexp\">/0(?=(0+$)|\\b)/g</span>,<span class=\"number\">9</span>); <span class=\"comment\">//12300199999</span></span><br></pre></td></tr></table></figure>\n<p><code>javascript</code>支持正则表达式相关方法，注意并不是正则对象的方法。上述方法使用了正则，<font color=\"red\">在回调函数里有一个$1</font>，这个$1到底是什么？所有的匹配规则匹配后都有$1这个变量么？…以下进行解释</p>\n<hr>\n<h1 id=\"主角\"><a href=\"#主角\" class=\"headerlink\" title=\"主角\"></a>主角</h1><p><code>javascript</code>中正则对象有三个方法：<code>test</code>、<code>exec</code>和<code>compile</code>，<br>但是此次讨论的是能够使用正则表示的相关方法：<code>search</code>、<code>match</code>、<code>replace</code>和<code>split</code>，注意它们都是<code>String</code>对象的方法，使用它们必须要是<font color=\"red\">String</font><code></code>类型.</p>\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(rule[regexp/substr], replacement)</span><br><span class=\"line\"><span class=\"string\">`replace`</span>是一个用于替换字符串的方法，具体分析一下它的特点:</span><br><span class=\"line\"><span class=\"number\">1.</span> 它接收两个参数</span><br><span class=\"line\"><span class=\"number\">2.</span> 无副作用不影响原始变量</span><br><span class=\"line\"><span class=\"number\">3.</span> 返回被改变的字符串(一定是字符串类型)</span><br></pre></td></tr></table></figure>\n<p>定义一些变量，方便全文取用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'12309800'</span>, b = <span class=\"string\">'12309800[object Object]'</span>, b = <span class=\"string\">'12309800&#123;&#125;'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数rule\"><a href=\"#参数rule\" class=\"headerlink\" title=\"参数rule\"></a>参数rule</h3><p>在一般情况，rule参数一般是正则(如果是正则，则按照正则的规则进行匹配)、字符串(如果是字符串，将会在匹配到第一个符合条件的目标，结束方法)、数字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//匹配第一个0替换成5</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"number\">5</span>); <span class=\"comment\">//'12359800'</span></span><br><span class=\"line\"><span class=\"comment\">//匹配所有的0替换成5</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">5</span>); <span class=\"comment\">//'12359855'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数replacement\"><a href=\"#参数replacement\" class=\"headerlink\" title=\"参数replacement\"></a>参数replacement</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一般情况，replacement参数是字符串、数字、者回调。</span><br></pre></td></tr></table></figure>\n<h4 id=\"包含-的字符串\"><a href=\"#包含-的字符串\" class=\"headerlink\" title=\"包含$的字符串\"></a>包含$的字符串</h4><p>当参数rule为正则，并且正则至少包含有一对完整的<code>()</code>时，如果<code>replacement</code>包含有$的字符串，那么对于<code>$n</code>(n为大于0的整数，n的长度取决于正则中括号的对数)，会被解析成一个变量。但是也仅仅只是作为一个变量，无法在字符串中进行计算，此时更类似特别的字符串模板变量。</p>\n<p>一般情况下，<code>$n</code>中n的长度取决于正则中括号的对数，$1表示第1对括号匹配的结果，$2表示第2对匹配的结果…在正则所有的括号对中，左括号出现在第几个位置（或者说从左往右），则它就是第几对括号，以此类推。姑且我们把这种规则成为<code>正则匹配分割规则</code>（ps:这完全是我自己取的一个名字，方便文章后面使用和记忆）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"string\">'$0'</span>); <span class=\"comment\">//'123$09800'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/00/g</span>,<span class=\"string\">'$0'</span>); <span class=\"comment\">//'123098$0'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'12309$1'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9](0+$))/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'12309800'，此时$1为[1-9](0+$)匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'123098'，此时$1为[1-9]匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"string\">'$1*$2'</span>); <span class=\"comment\">//'123098*00'，此处的$1和$2不会安照期待的情况进行乘法计算，要进行计算可以用回调</span></span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意：】</font><br>虽然目前参数replacement中携带有$n仍然能正常使用，但是这种方式已经不被<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties\" target=\"_blank\" rel=\"noopener\">规范</a>所推荐，更应该使用回调来完成这个操作如果正则中包含有全局匹配标志(g)，那么每次匹配的都符合上述规则</p>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><p>demo：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",5,\"12309800\"]、</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"8\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"8\",\"00\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/(([1-9])(0+$))/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"800\",\"8\",\"00\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>回调函数的<code>arguments</code>数组部分组成：[完整匹配的字符串,$1,$2,…,$n,匹配的开始位置,原始字符串],<code>$1...$n</code>表示每个括号对的匹配，规则和前面的相同。<br>所以有一下规律：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [...arguments], len = arr.length;</span><br><span class=\"line\">(len &gt;= <span class=\"number\">3</span>) === <span class=\"literal\">true</span>;</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = 完整匹配的字符串;</span><br><span class=\"line\">arr[len<span class=\"number\">-2</span>] = 匹配的开始位置;</span><br><span class=\"line\">arr[len<span class=\"number\">-1</span>] = 原始字符串;</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意：】</font><br>除了匹配的开始位置是<code>Number</code>类型外，其余的都是<code>String</code>类型</p>\n<h3 id=\"非常规类型参数\"><a href=\"#非常规类型参数\" class=\"headerlink\" title=\"非常规类型参数\"></a>非常规类型参数</h3><p>如果参数类型不是上述两种情况，会发生什么呢？看看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"literal\">null</span>); <span class=\"comment\">//123null9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"literal\">undefined</span>); <span class=\"comment\">//123null9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,[]); <span class=\"comment\">//1239800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"built_in\">Array</span>); <span class=\"comment\">//1230,3,123098009800</span></span><br><span class=\"line\">b.replace(&#123;&#125;,<span class=\"number\">5</span>); <span class=\"comment\">//123098005</span></span><br><span class=\"line\">c.replace(&#123;&#125;,<span class=\"number\">5</span>); <span class=\"comment\">//'12309800&#123;&#125;'</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,&#123;&#125;); <span class=\"comment\">//123[object Object]9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"built_in\">Object</span>); <span class=\"comment\">//12309800</span></span><br></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，如果非正则也非字符串，则有以下规则:<br>    <font color=\"orange\">null</font> 变量，则会转换成<code>&#39;null&#39;</code>字符串;<br>    <font color=\"orange\">undefined</font> 变量，则会转换成<code>&#39;undefined&#39;</code>字符串;<br>    <font color=\"orange\">[]</font> 变量，则会调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割，值得注意的是空数组将会被转换成空字符串（没有任何字符），通常会被匹配源字符串的开始位置（默认开始位置为空字符串）;<br>    <font color=\"orange\">Array</font> 变量，则会先转成成一个匹配的数组，形如<code>[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串]</code>,然后对它调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割;<br>    <font color=\"orange\">{}</font> 变量，则会调用<code>Object.protype.toString.call()</code>方法把<code>{}</code>转换成<code>[object Object]</code>;<br>    <code>Object</code>变量，则貌似什么都没做</p>\n<p>虽然可以传入这些非正常参数，但大多数情况下这些类型的参数对实际是毫无意义的，所以不建议传入以上类型的参数。</p>\n<h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match(rule[regex/substr])</span><br><span class=\"line\"><span class=\"string\">`match`</span>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span><br><span class=\"line\">该方法类似<span class=\"string\">`indexOf`</span>和<span class=\"string\">`lastIndexOf`</span>，但是它返回指定的值，而不是字符串的位置；</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数rule-1\"><a href=\"#参数rule-1\" class=\"headerlink\" title=\"参数rule\"></a>参数rule</h3><p>参数的传递除了常规的正则和字符串以外，其余所有类型的参数都会按照上述的<code>正则匹配参数转换规则</code>转换成字符串形式来匹配。</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回值根据传入的参数类型和规则的不同，返回的内容不同，但总体来说，它是返回一个对象，而不是索引，如果没匹配到任何符合条件的字符串，则返回<code>null</code>。</p>\n<h3 id=\"非全局匹配正则\"><a href=\"#非全局匹配正则\" class=\"headerlink\" title=\"非全局匹配正则\"></a>非全局匹配正则</h3><p>如果匹配规则是一个非全局匹配规则，那么，它此时的返回值是一个伪数组对象(likeArr)，形如:[一个展开的匹配到的字符串数组, 匹配到的字符串位置， 原始字符串]，它有如下规律：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> likeArr = a.match(regex);</span><br><span class=\"line\">likeArr[<span class=\"number\">0</span>] = 匹配到的字符串;</span><br><span class=\"line\">likeArr[<span class=\"number\">1.</span>..n] = 正则匹配分割规则匹配的字符串;</span><br><span class=\"line\">likeArr.index = 匹配到字符串的位置</span><br><span class=\"line\">likeArr.inupt = 原始字符串</span><br></pre></td></tr></table></figure>\n<p>看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0+$/</span>); <span class=\"comment\">//[0:'800',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/([1-9])0+$/</span>); <span class=\"comment\">//[0:'800',1:'8',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/[1-9](0+$)/</span>); <span class=\"comment\">//[0:'800',1:'00',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/([1-9])(0+$)/</span>); <span class=\"comment\">//[0:'800',1:'8',2:'00',index:5,input:'12309800']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"全局匹配正则\"><a href=\"#全局匹配正则\" class=\"headerlink\" title=\"全局匹配正则\"></a>全局匹配正则</h3><p>如果匹配规则是一个全局匹配规则(正在携带有g标志)，那么，它此时的返回值是一个数组对象(arr)，形如:[匹配到的字符串数1,匹配到的字符串数2,匹配到的字符串数3];<br>看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0/</span>); <span class=\"comment\">//[0:'30',index:2,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0/g</span>); <span class=\"comment\">//[0:'30',1:'80']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search(rule[regex/substr])</span><br><span class=\"line\"><span class=\"string\">`search`</span>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</span><br><span class=\"line\"><span class=\"string\">`stringObject`</span>中第一个与<span class=\"string\">`rule`</span>相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回<span class=\"string\">`-1`</span>。</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意:】</font><br>-<code>search</code>方法不执行全局匹配，它将忽略标志<code>g</code>。<br>-忽略<code>regexp</code>的<code>lastIndex</code>属性，总是从字符串的开始进行检索，这意味着它总是返回<code>stringObject</code>的第一个匹配的位置</p>\n<p>同样，<code>search</code>可以传入任何参数类型，它会遵循<code>正则匹配参数转换规则</code>进行转换</p>\n<h2 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split(rule[regex/substr],len)</span><br><span class=\"line\">这个方法就不用多说，很常用的字符串分割方法。</span><br><span class=\"line\">第二个参数的作用就是限制返回值的长度，表示返回值的最大长度</span><br><span class=\"line\"></span><br><span class=\"line\">当然，它依然可以传入任何参数类型，会遵循<span class=\"string\">`正则匹配参数转换规则`</span>进行转换</span><br></pre></td></tr></table></figure>\n<p>demo:有一段加密的后的密码，我们需要分离出字符串’12a344gg333tt445656ffa6778ii99’中的前三组数字，通过某种计算才能得出正确的密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12a344gg333tt445656ffa6778ii99'</span>.split(<span class=\"regexp\">/[a-zA-Z]+/g</span>,<span class=\"number\">3</span>); <span class=\"comment\">//['12','334','333']</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此文说一说关于javascript中关于正则的几个方法中被很多人忽略的地方。<br>-工具</p>\n</blockquote>\n<h1 id=\"正则常用工具\"><a href=\"#正则常用工具\" class=\"headerlink\" title=\"正则常用工具\"></a>正则常用工具</h1><ul>\n<li><a href=\"https://regexper.com\" target=\"_blank\" rel=\"noopener\">regexper</a> 我最常用的一个，个人觉得UI做得比其他好</li>\n<li><a href=\"https://jex.im/regulex/\" target=\"_blank\" rel=\"noopener\">regulex</a> 备选，他有一个很舒心的功能，可以提供一段js，嵌套到你的网站，生成正则可视化图</li>\n</ul>\n<hr>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><blockquote>\n<p>写一个方法使得数字末尾的连续0变成9，如1230000变成1239999</p>\n</blockquote>\n<p>一道很简单的题目，直接正则就能搞定，也许你会写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这也是此题的陷阱所在，按照上面的方法，1023000就会被转化成1923999，这样是不符合要求的，所以改进一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoreToNine</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"number\">1.</span>replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">zoreToNine(<span class=\"number\">1223000</span>); <span class=\"comment\">//1223999</span></span><br><span class=\"line\">zoreToNine(<span class=\"number\">1023000</span>); <span class=\"comment\">//1023999</span></span><br></pre></td></tr></table></figure>\n<p>关于这个问题的解决方案<a href=\"https://segmentfault.com/u/jawil\" target=\"_blank\" rel=\"noopener\">@微醺岁月</a>同学提供了一种，位置匹配的方法，简单了很多，厉害！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"12300100000\"</span>.replace(<span class=\"regexp\">/0(?=(0+$)|\\b)/g</span>,<span class=\"number\">9</span>); <span class=\"comment\">//12300199999</span></span><br></pre></td></tr></table></figure>\n<p><code>javascript</code>支持正则表达式相关方法，注意并不是正则对象的方法。上述方法使用了正则，<font color=\"red\">在回调函数里有一个$1</font>，这个$1到底是什么？所有的匹配规则匹配后都有$1这个变量么？…以下进行解释</p>\n<hr>\n<h1 id=\"主角\"><a href=\"#主角\" class=\"headerlink\" title=\"主角\"></a>主角</h1><p><code>javascript</code>中正则对象有三个方法：<code>test</code>、<code>exec</code>和<code>compile</code>，<br>但是此次讨论的是能够使用正则表示的相关方法：<code>search</code>、<code>match</code>、<code>replace</code>和<code>split</code>，注意它们都是<code>String</code>对象的方法，使用它们必须要是<font color=\"red\">String</font><code></code>类型.</p>\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(rule[regexp/substr], replacement)</span><br><span class=\"line\"><span class=\"string\">`replace`</span>是一个用于替换字符串的方法，具体分析一下它的特点:</span><br><span class=\"line\"><span class=\"number\">1.</span> 它接收两个参数</span><br><span class=\"line\"><span class=\"number\">2.</span> 无副作用不影响原始变量</span><br><span class=\"line\"><span class=\"number\">3.</span> 返回被改变的字符串(一定是字符串类型)</span><br></pre></td></tr></table></figure>\n<p>定义一些变量，方便全文取用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'12309800'</span>, b = <span class=\"string\">'12309800[object Object]'</span>, b = <span class=\"string\">'12309800&#123;&#125;'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数rule\"><a href=\"#参数rule\" class=\"headerlink\" title=\"参数rule\"></a>参数rule</h3><p>在一般情况，rule参数一般是正则(如果是正则，则按照正则的规则进行匹配)、字符串(如果是字符串，将会在匹配到第一个符合条件的目标，结束方法)、数字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//匹配第一个0替换成5</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"number\">5</span>); <span class=\"comment\">//'12359800'</span></span><br><span class=\"line\"><span class=\"comment\">//匹配所有的0替换成5</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/0/g</span>,<span class=\"number\">5</span>); <span class=\"comment\">//'12359855'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数replacement\"><a href=\"#参数replacement\" class=\"headerlink\" title=\"参数replacement\"></a>参数replacement</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一般情况，replacement参数是字符串、数字、者回调。</span><br></pre></td></tr></table></figure>\n<h4 id=\"包含-的字符串\"><a href=\"#包含-的字符串\" class=\"headerlink\" title=\"包含$的字符串\"></a>包含$的字符串</h4><p>当参数rule为正则，并且正则至少包含有一对完整的<code>()</code>时，如果<code>replacement</code>包含有$的字符串，那么对于<code>$n</code>(n为大于0的整数，n的长度取决于正则中括号的对数)，会被解析成一个变量。但是也仅仅只是作为一个变量，无法在字符串中进行计算，此时更类似特别的字符串模板变量。</p>\n<p>一般情况下，<code>$n</code>中n的长度取决于正则中括号的对数，$1表示第1对括号匹配的结果，$2表示第2对匹配的结果…在正则所有的括号对中，左括号出现在第几个位置（或者说从左往右），则它就是第几对括号，以此类推。姑且我们把这种规则成为<code>正则匹配分割规则</code>（ps:这完全是我自己取的一个名字，方便文章后面使用和记忆）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"string\">'$0'</span>); <span class=\"comment\">//'123$09800'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/00/g</span>,<span class=\"string\">'$0'</span>); <span class=\"comment\">//'123098$0'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'12309$1'</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9](0+$))/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'12309800'，此时$1为[1-9](0+$)匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"string\">'$1'</span>); <span class=\"comment\">//'123098'，此时$1为[1-9]匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"string\">'$1*$2'</span>); <span class=\"comment\">//'123098*00'，此处的$1和$2不会安照期待的情况进行乘法计算，要进行计算可以用回调</span></span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意：】</font><br>虽然目前参数replacement中携带有$n仍然能正常使用，但是这种方式已经不被<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties\" target=\"_blank\" rel=\"noopener\">规范</a>所推荐，更应该使用回调来完成这个操作如果正则中包含有全局匹配标志(g)，那么每次匹配的都符合上述规则</p>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><p>demo：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"regexp\">/[1-9]0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",5,\"12309800\"]、</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])0+$/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"8\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/([1-9])(0+$)/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"8\",\"00\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">a.replace(<span class=\"regexp\">/(([1-9])(0+$))/</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//[\"800\",\"800\",\"8\",\"00\",5,\"12309800\"]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>回调函数的<code>arguments</code>数组部分组成：[完整匹配的字符串,$1,$2,…,$n,匹配的开始位置,原始字符串],<code>$1...$n</code>表示每个括号对的匹配，规则和前面的相同。<br>所以有一下规律：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [...arguments], len = arr.length;</span><br><span class=\"line\">(len &gt;= <span class=\"number\">3</span>) === <span class=\"literal\">true</span>;</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = 完整匹配的字符串;</span><br><span class=\"line\">arr[len<span class=\"number\">-2</span>] = 匹配的开始位置;</span><br><span class=\"line\">arr[len<span class=\"number\">-1</span>] = 原始字符串;</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意：】</font><br>除了匹配的开始位置是<code>Number</code>类型外，其余的都是<code>String</code>类型</p>\n<h3 id=\"非常规类型参数\"><a href=\"#非常规类型参数\" class=\"headerlink\" title=\"非常规类型参数\"></a>非常规类型参数</h3><p>如果参数类型不是上述两种情况，会发生什么呢？看看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"literal\">null</span>); <span class=\"comment\">//123null9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"literal\">undefined</span>); <span class=\"comment\">//123null9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,[]); <span class=\"comment\">//1239800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"built_in\">Array</span>); <span class=\"comment\">//1230,3,123098009800</span></span><br><span class=\"line\">b.replace(&#123;&#125;,<span class=\"number\">5</span>); <span class=\"comment\">//123098005</span></span><br><span class=\"line\">c.replace(&#123;&#125;,<span class=\"number\">5</span>); <span class=\"comment\">//'12309800&#123;&#125;'</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,&#123;&#125;); <span class=\"comment\">//123[object Object]9800</span></span><br><span class=\"line\">a.replace(<span class=\"number\">0</span>,<span class=\"built_in\">Object</span>); <span class=\"comment\">//12309800</span></span><br></pre></td></tr></table></figure>\n<p>由上面的例子可以看出，如果非正则也非字符串，则有以下规则:<br>    <font color=\"orange\">null</font> 变量，则会转换成<code>&#39;null&#39;</code>字符串;<br>    <font color=\"orange\">undefined</font> 变量，则会转换成<code>&#39;undefined&#39;</code>字符串;<br>    <font color=\"orange\">[]</font> 变量，则会调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割，值得注意的是空数组将会被转换成空字符串（没有任何字符），通常会被匹配源字符串的开始位置（默认开始位置为空字符串）;<br>    <font color=\"orange\">Array</font> 变量，则会先转成成一个匹配的数组，形如<code>[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串]</code>,然后对它调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割;<br>    <font color=\"orange\">{}</font> 变量，则会调用<code>Object.protype.toString.call()</code>方法把<code>{}</code>转换成<code>[object Object]</code>;<br>    <code>Object</code>变量，则貌似什么都没做</p>\n<p>虽然可以传入这些非正常参数，但大多数情况下这些类型的参数对实际是毫无意义的，所以不建议传入以上类型的参数。</p>\n<h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match(rule[regex/substr])</span><br><span class=\"line\"><span class=\"string\">`match`</span>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span><br><span class=\"line\">该方法类似<span class=\"string\">`indexOf`</span>和<span class=\"string\">`lastIndexOf`</span>，但是它返回指定的值，而不是字符串的位置；</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数rule-1\"><a href=\"#参数rule-1\" class=\"headerlink\" title=\"参数rule\"></a>参数rule</h3><p>参数的传递除了常规的正则和字符串以外，其余所有类型的参数都会按照上述的<code>正则匹配参数转换规则</code>转换成字符串形式来匹配。</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回值根据传入的参数类型和规则的不同，返回的内容不同，但总体来说，它是返回一个对象，而不是索引，如果没匹配到任何符合条件的字符串，则返回<code>null</code>。</p>\n<h3 id=\"非全局匹配正则\"><a href=\"#非全局匹配正则\" class=\"headerlink\" title=\"非全局匹配正则\"></a>非全局匹配正则</h3><p>如果匹配规则是一个非全局匹配规则，那么，它此时的返回值是一个伪数组对象(likeArr)，形如:[一个展开的匹配到的字符串数组, 匹配到的字符串位置， 原始字符串]，它有如下规律：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> likeArr = a.match(regex);</span><br><span class=\"line\">likeArr[<span class=\"number\">0</span>] = 匹配到的字符串;</span><br><span class=\"line\">likeArr[<span class=\"number\">1.</span>..n] = 正则匹配分割规则匹配的字符串;</span><br><span class=\"line\">likeArr.index = 匹配到字符串的位置</span><br><span class=\"line\">likeArr.inupt = 原始字符串</span><br></pre></td></tr></table></figure>\n<p>看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0+$/</span>); <span class=\"comment\">//[0:'800',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/([1-9])0+$/</span>); <span class=\"comment\">//[0:'800',1:'8',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/[1-9](0+$)/</span>); <span class=\"comment\">//[0:'800',1:'00',index:5,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/([1-9])(0+$)/</span>); <span class=\"comment\">//[0:'800',1:'8',2:'00',index:5,input:'12309800']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"全局匹配正则\"><a href=\"#全局匹配正则\" class=\"headerlink\" title=\"全局匹配正则\"></a>全局匹配正则</h3><p>如果匹配规则是一个全局匹配规则(正在携带有g标志)，那么，它此时的返回值是一个数组对象(arr)，形如:[匹配到的字符串数1,匹配到的字符串数2,匹配到的字符串数3];<br>看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0/</span>); <span class=\"comment\">//[0:'30',index:2,input:'12309800']</span></span><br><span class=\"line\">a.match(<span class=\"regexp\">/[1-9]0/g</span>); <span class=\"comment\">//[0:'30',1:'80']</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search(rule[regex/substr])</span><br><span class=\"line\"><span class=\"string\">`search`</span>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</span><br><span class=\"line\"><span class=\"string\">`stringObject`</span>中第一个与<span class=\"string\">`rule`</span>相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回<span class=\"string\">`-1`</span>。</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">【注意:】</font><br>-<code>search</code>方法不执行全局匹配，它将忽略标志<code>g</code>。<br>-忽略<code>regexp</code>的<code>lastIndex</code>属性，总是从字符串的开始进行检索，这意味着它总是返回<code>stringObject</code>的第一个匹配的位置</p>\n<p>同样，<code>search</code>可以传入任何参数类型，它会遵循<code>正则匹配参数转换规则</code>进行转换</p>\n<h2 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split(rule[regex/substr],len)</span><br><span class=\"line\">这个方法就不用多说，很常用的字符串分割方法。</span><br><span class=\"line\">第二个参数的作用就是限制返回值的长度，表示返回值的最大长度</span><br><span class=\"line\"></span><br><span class=\"line\">当然，它依然可以传入任何参数类型，会遵循<span class=\"string\">`正则匹配参数转换规则`</span>进行转换</span><br></pre></td></tr></table></figure>\n<p>demo:有一段加密的后的密码，我们需要分离出字符串’12a344gg333tt445656ffa6778ii99’中的前三组数字，通过某种计算才能得出正确的密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12a344gg333tt445656ffa6778ii99'</span>.split(<span class=\"regexp\">/[a-zA-Z]+/g</span>,<span class=\"number\">3</span>); <span class=\"comment\">//['12','334','333']</span></span><br></pre></td></tr></table></figure>\n"},{"title":"常用正则整理","date":"2016-09-05T04:12:24.000Z","author":"T.2stt","_content":"\n> 正则的魅力在于使用很简洁的方式解决一些比较复杂的方式，使代码变得更优雅，也使实现的过程变得更简单透明。本文搜集整理一些常用正则，记录以便查阅\n\n```javascript\nvar regex = window.regex || (function (document, $) {\n        var _reg = {};\n        /* 'pwd':/^[\\@A-Za-z0-9\\!\\#\\$\\%\\^\\&\\*\\.\\~]{6,16}$/,//密码 */\n        //验证数字\n        $.extend(_reg, {\n            'num': /^\\d+$/, //数字\n            'znum': /^[1-9](\\d+)?$/, //  大于0的数字\n            'float': /^[-]{0,1}(\\d+)[\\.]+(\\d+)$/, //浮点数\n            'money': /^\\d{1,12}(?:\\.\\d{1,3})?$/, // money\n            'idCard': /^\\d{15}$|^\\d{18}$|^\\d{17}[xX]$/, //身份证\n            'idCardStrict':/^(\\d{6})([1-2])(\\d{3})((?:0[1-9])|(?:1[0-2]))((?:0[0-9])|(?:[1-2][0-9])|(?:3[0-1]))(\\d{3})(\\d{1})$/,\n            'qq': /^[1-9]\\d{4,15}$/, //QQ\n            'pwd': /^[\\@A-Za-z0-9]{6,16}$/, //密码\n            'areacode': /^(0[1,2]{1}\\d{1})$|^(0[3-9]{1}\\d{2})$/, //区号\n            'tel': /^\\d{7,8}$/, // 固话格式\n            'mobile': /^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]{9}$/, //验证手机号码\n            'telephone': /^(((\\+)?86)|(\\(\\+86\\)))?-?((((0)?[1,2]{1}\\d{1})?-?\\d{8})|((0[3-9]{1}\\d{2})?-?\\d{7,12}))-?(\\d{1,8})?$/, //验证固定电话\n            'phone': /^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]{9}$|^((\\+86)|(\\(\\+86\\)))?-?(((0[1,2]{1}\\d{1})?-?\\d{8})|((0[3-9]{1}\\d{2})?-?\\d{7,8}))$/, //手机号码和固定电话\n            'zipcode': /^\\d{6}$/ //验证邮编\n        });\n        //验证字符串\n        $.extend(_reg, {\n            'email': /^\\w{1,16}([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, //邮箱\n            'chinese': /^[\\u4E00-\\u9FA5]+$/, //仅汉字\n            'char': /^[A-Za-z]+$/, //仅仅是字母\n            'charn': /^[A-Za-z0-9]+$/, //数字加字母\n            'nospecial': /^[\\u4E00-\\u9FA5A-Za-z0-9]+$/, // 不包含特殊字符\n            'url': /^((http|https|ftp):\\/\\/)?(\\w(\\:\\w)?@)?([0-9a-z_-]+\\.)*?([a-z0-9-]+\\.[a-z]{2,6}(\\.[a-z]{2})?(\\:[0-9]{2,6})?)((\\/[^?#<>\\/\\\\*\":]*)+(\\?[^#]*)?(#.*)?)?$/,\n            'loginName': /^(13|14|15|18|17)[0-9]{9}$|^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, // 用户名\n            'userName': /^[\\u4e00-\\u9fa5]{2`,4}$|[a-zA-Z]{4,20}$/, //真实姓名\n            'nickName': /^([a-zA-Z\\u4e00-\\u9fa5]{1}[a-zA-Z0-9_\\u4e00-\\u9fa5]{3,19})$/ //昵称\n        });\n        return _reg;\n    })(document, window.jQuery);\nwindow.regex = regex;\n```\n","source":"_posts/regex.md","raw":"---\ntitle: 常用正则整理\ndate: 2016-09-05 12:12:24\nauthor: T.2stt\ntags:\n- regex\n- javascript\ncategories:\n- [正则,regex]\n---\n\n> 正则的魅力在于使用很简洁的方式解决一些比较复杂的方式，使代码变得更优雅，也使实现的过程变得更简单透明。本文搜集整理一些常用正则，记录以便查阅\n\n```javascript\nvar regex = window.regex || (function (document, $) {\n        var _reg = {};\n        /* 'pwd':/^[\\@A-Za-z0-9\\!\\#\\$\\%\\^\\&\\*\\.\\~]{6,16}$/,//密码 */\n        //验证数字\n        $.extend(_reg, {\n            'num': /^\\d+$/, //数字\n            'znum': /^[1-9](\\d+)?$/, //  大于0的数字\n            'float': /^[-]{0,1}(\\d+)[\\.]+(\\d+)$/, //浮点数\n            'money': /^\\d{1,12}(?:\\.\\d{1,3})?$/, // money\n            'idCard': /^\\d{15}$|^\\d{18}$|^\\d{17}[xX]$/, //身份证\n            'idCardStrict':/^(\\d{6})([1-2])(\\d{3})((?:0[1-9])|(?:1[0-2]))((?:0[0-9])|(?:[1-2][0-9])|(?:3[0-1]))(\\d{3})(\\d{1})$/,\n            'qq': /^[1-9]\\d{4,15}$/, //QQ\n            'pwd': /^[\\@A-Za-z0-9]{6,16}$/, //密码\n            'areacode': /^(0[1,2]{1}\\d{1})$|^(0[3-9]{1}\\d{2})$/, //区号\n            'tel': /^\\d{7,8}$/, // 固话格式\n            'mobile': /^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]{9}$/, //验证手机号码\n            'telephone': /^(((\\+)?86)|(\\(\\+86\\)))?-?((((0)?[1,2]{1}\\d{1})?-?\\d{8})|((0[3-9]{1}\\d{2})?-?\\d{7,12}))-?(\\d{1,8})?$/, //验证固定电话\n            'phone': /^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]{9}$|^((\\+86)|(\\(\\+86\\)))?-?(((0[1,2]{1}\\d{1})?-?\\d{8})|((0[3-9]{1}\\d{2})?-?\\d{7,8}))$/, //手机号码和固定电话\n            'zipcode': /^\\d{6}$/ //验证邮编\n        });\n        //验证字符串\n        $.extend(_reg, {\n            'email': /^\\w{1,16}([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, //邮箱\n            'chinese': /^[\\u4E00-\\u9FA5]+$/, //仅汉字\n            'char': /^[A-Za-z]+$/, //仅仅是字母\n            'charn': /^[A-Za-z0-9]+$/, //数字加字母\n            'nospecial': /^[\\u4E00-\\u9FA5A-Za-z0-9]+$/, // 不包含特殊字符\n            'url': /^((http|https|ftp):\\/\\/)?(\\w(\\:\\w)?@)?([0-9a-z_-]+\\.)*?([a-z0-9-]+\\.[a-z]{2,6}(\\.[a-z]{2})?(\\:[0-9]{2,6})?)((\\/[^?#<>\\/\\\\*\":]*)+(\\?[^#]*)?(#.*)?)?$/,\n            'loginName': /^(13|14|15|18|17)[0-9]{9}$|^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, // 用户名\n            'userName': /^[\\u4e00-\\u9fa5]{2`,4}$|[a-zA-Z]{4,20}$/, //真实姓名\n            'nickName': /^([a-zA-Z\\u4e00-\\u9fa5]{1}[a-zA-Z0-9_\\u4e00-\\u9fa5]{3,19})$/ //昵称\n        });\n        return _reg;\n    })(document, window.jQuery);\nwindow.regex = regex;\n```\n","slug":"regex","published":1,"updated":"2018-11-01T06:56:27.192Z","_id":"cjny0swhj00382kv7t8gclyyi","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>正则的魅力在于使用很简洁的方式解决一些比较复杂的方式，使代码变得更优雅，也使实现的过程变得更简单透明。本文搜集整理一些常用正则，记录以便查阅</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"built_in\">window</span>.regex || (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">document, $</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _reg = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">/* 'pwd':/^[\\@A-Za-z0-9\\!\\#\\$\\%\\^\\&amp;\\*\\.\\~]&#123;6,16&#125;$/,//密码 */</span></span><br><span class=\"line\">        <span class=\"comment\">//验证数字</span></span><br><span class=\"line\">        $.extend(_reg, &#123;</span><br><span class=\"line\">            <span class=\"string\">'num'</span>: <span class=\"regexp\">/^\\d+$/</span>, <span class=\"comment\">//数字</span></span><br><span class=\"line\">            <span class=\"string\">'znum'</span>: <span class=\"regexp\">/^[1-9](\\d+)?$/</span>, <span class=\"comment\">//  大于0的数字</span></span><br><span class=\"line\">            <span class=\"string\">'float'</span>: <span class=\"regexp\">/^[-]&#123;0,1&#125;(\\d+)[\\.]+(\\d+)$/</span>, <span class=\"comment\">//浮点数</span></span><br><span class=\"line\">            <span class=\"string\">'money'</span>: <span class=\"regexp\">/^\\d&#123;1,12&#125;(?:\\.\\d&#123;1,3&#125;)?$/</span>, <span class=\"comment\">// money</span></span><br><span class=\"line\">            <span class=\"string\">'idCard'</span>: <span class=\"regexp\">/^\\d&#123;15&#125;$|^\\d&#123;18&#125;$|^\\d&#123;17&#125;[xX]$/</span>, <span class=\"comment\">//身份证</span></span><br><span class=\"line\">            <span class=\"string\">'idCardStrict'</span>:<span class=\"regexp\">/^(\\d&#123;6&#125;)([1-2])(\\d&#123;3&#125;)((?:0[1-9])|(?:1[0-2]))((?:0[0-9])|(?:[1-2][0-9])|(?:3[0-1]))(\\d&#123;3&#125;)(\\d&#123;1&#125;)$/</span>,</span><br><span class=\"line\">            <span class=\"string\">'qq'</span>: <span class=\"regexp\">/^[1-9]\\d&#123;4,15&#125;$/</span>, <span class=\"comment\">//QQ</span></span><br><span class=\"line\">            <span class=\"string\">'pwd'</span>: <span class=\"regexp\">/^[\\@A-Za-z0-9]&#123;6,16&#125;$/</span>, <span class=\"comment\">//密码</span></span><br><span class=\"line\">            <span class=\"string\">'areacode'</span>: <span class=\"regexp\">/^(0[1,2]&#123;1&#125;\\d&#123;1&#125;)$|^(0[3-9]&#123;1&#125;\\d&#123;2&#125;)$/</span>, <span class=\"comment\">//区号</span></span><br><span class=\"line\">            <span class=\"string\">'tel'</span>: <span class=\"regexp\">/^\\d&#123;7,8&#125;$/</span>, <span class=\"comment\">// 固话格式</span></span><br><span class=\"line\">            <span class=\"string\">'mobile'</span>: <span class=\"regexp\">/^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$/</span>, <span class=\"comment\">//验证手机号码</span></span><br><span class=\"line\">            <span class=\"string\">'telephone'</span>: <span class=\"regexp\">/^(((\\+)?86)|(\\(\\+86\\)))?-?((((0)?[1,2]&#123;1&#125;\\d&#123;1&#125;)?-?\\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\\d&#123;2&#125;)?-?\\d&#123;7,12&#125;))-?(\\d&#123;1,8&#125;)?$/</span>, <span class=\"comment\">//验证固定电话</span></span><br><span class=\"line\">            <span class=\"string\">'phone'</span>: <span class=\"regexp\">/^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$|^((\\+86)|(\\(\\+86\\)))?-?(((0[1,2]&#123;1&#125;\\d&#123;1&#125;)?-?\\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\\d&#123;2&#125;)?-?\\d&#123;7,8&#125;))$/</span>, <span class=\"comment\">//手机号码和固定电话</span></span><br><span class=\"line\">            <span class=\"string\">'zipcode'</span>: <span class=\"regexp\">/^\\d&#123;6&#125;$/</span> <span class=\"comment\">//验证邮编</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//验证字符串</span></span><br><span class=\"line\">        $.extend(_reg, &#123;</span><br><span class=\"line\">            <span class=\"string\">'email'</span>: <span class=\"regexp\">/^\\w&#123;1,16&#125;([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/</span>, <span class=\"comment\">//邮箱</span></span><br><span class=\"line\">            <span class=\"string\">'chinese'</span>: <span class=\"regexp\">/^[\\u4E00-\\u9FA5]+$/</span>, <span class=\"comment\">//仅汉字</span></span><br><span class=\"line\">            <span class=\"string\">'char'</span>: <span class=\"regexp\">/^[A-Za-z]+$/</span>, <span class=\"comment\">//仅仅是字母</span></span><br><span class=\"line\">            <span class=\"string\">'charn'</span>: <span class=\"regexp\">/^[A-Za-z0-9]+$/</span>, <span class=\"comment\">//数字加字母</span></span><br><span class=\"line\">            <span class=\"string\">'nospecial'</span>: <span class=\"regexp\">/^[\\u4E00-\\u9FA5A-Za-z0-9]+$/</span>, <span class=\"comment\">// 不包含特殊字符</span></span><br><span class=\"line\">            <span class=\"string\">'url'</span>: <span class=\"regexp\">/^((http|https|ftp):\\/\\/)?(\\w(\\:\\w)?@)?([0-9a-z_-]+\\.)*?([a-z0-9-]+\\.[a-z]&#123;2,6&#125;(\\.[a-z]&#123;2&#125;)?(\\:[0-9]&#123;2,6&#125;)?)((\\/[^?#&lt;&gt;\\/\\\\*\":]*)+(\\?[^#]*)?(#.*)?)?$/</span>,</span><br><span class=\"line\">            <span class=\"string\">'loginName'</span>: <span class=\"regexp\">/^(13|14|15|18|17)[0-9]&#123;9&#125;$|^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/</span>, <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">            <span class=\"string\">'userName'</span>: <span class=\"regexp\">/^[\\u4e00-\\u9fa5]&#123;2`,4&#125;$|[a-zA-Z]&#123;4,20&#125;$/</span>, <span class=\"comment\">//真实姓名</span></span><br><span class=\"line\">            <span class=\"string\">'nickName'</span>: <span class=\"regexp\">/^([a-zA-Z\\u4e00-\\u9fa5]&#123;1&#125;[a-zA-Z0-9_\\u4e00-\\u9fa5]&#123;3,19&#125;)$/</span> <span class=\"comment\">//昵称</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _reg;</span><br><span class=\"line\">    &#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>.jQuery);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.regex = regex;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>正则的魅力在于使用很简洁的方式解决一些比较复杂的方式，使代码变得更优雅，也使实现的过程变得更简单透明。本文搜集整理一些常用正则，记录以便查阅</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"built_in\">window</span>.regex || (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">document, $</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _reg = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">/* 'pwd':/^[\\@A-Za-z0-9\\!\\#\\$\\%\\^\\&amp;\\*\\.\\~]&#123;6,16&#125;$/,//密码 */</span></span><br><span class=\"line\">        <span class=\"comment\">//验证数字</span></span><br><span class=\"line\">        $.extend(_reg, &#123;</span><br><span class=\"line\">            <span class=\"string\">'num'</span>: <span class=\"regexp\">/^\\d+$/</span>, <span class=\"comment\">//数字</span></span><br><span class=\"line\">            <span class=\"string\">'znum'</span>: <span class=\"regexp\">/^[1-9](\\d+)?$/</span>, <span class=\"comment\">//  大于0的数字</span></span><br><span class=\"line\">            <span class=\"string\">'float'</span>: <span class=\"regexp\">/^[-]&#123;0,1&#125;(\\d+)[\\.]+(\\d+)$/</span>, <span class=\"comment\">//浮点数</span></span><br><span class=\"line\">            <span class=\"string\">'money'</span>: <span class=\"regexp\">/^\\d&#123;1,12&#125;(?:\\.\\d&#123;1,3&#125;)?$/</span>, <span class=\"comment\">// money</span></span><br><span class=\"line\">            <span class=\"string\">'idCard'</span>: <span class=\"regexp\">/^\\d&#123;15&#125;$|^\\d&#123;18&#125;$|^\\d&#123;17&#125;[xX]$/</span>, <span class=\"comment\">//身份证</span></span><br><span class=\"line\">            <span class=\"string\">'idCardStrict'</span>:<span class=\"regexp\">/^(\\d&#123;6&#125;)([1-2])(\\d&#123;3&#125;)((?:0[1-9])|(?:1[0-2]))((?:0[0-9])|(?:[1-2][0-9])|(?:3[0-1]))(\\d&#123;3&#125;)(\\d&#123;1&#125;)$/</span>,</span><br><span class=\"line\">            <span class=\"string\">'qq'</span>: <span class=\"regexp\">/^[1-9]\\d&#123;4,15&#125;$/</span>, <span class=\"comment\">//QQ</span></span><br><span class=\"line\">            <span class=\"string\">'pwd'</span>: <span class=\"regexp\">/^[\\@A-Za-z0-9]&#123;6,16&#125;$/</span>, <span class=\"comment\">//密码</span></span><br><span class=\"line\">            <span class=\"string\">'areacode'</span>: <span class=\"regexp\">/^(0[1,2]&#123;1&#125;\\d&#123;1&#125;)$|^(0[3-9]&#123;1&#125;\\d&#123;2&#125;)$/</span>, <span class=\"comment\">//区号</span></span><br><span class=\"line\">            <span class=\"string\">'tel'</span>: <span class=\"regexp\">/^\\d&#123;7,8&#125;$/</span>, <span class=\"comment\">// 固话格式</span></span><br><span class=\"line\">            <span class=\"string\">'mobile'</span>: <span class=\"regexp\">/^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$/</span>, <span class=\"comment\">//验证手机号码</span></span><br><span class=\"line\">            <span class=\"string\">'telephone'</span>: <span class=\"regexp\">/^(((\\+)?86)|(\\(\\+86\\)))?-?((((0)?[1,2]&#123;1&#125;\\d&#123;1&#125;)?-?\\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\\d&#123;2&#125;)?-?\\d&#123;7,12&#125;))-?(\\d&#123;1,8&#125;)?$/</span>, <span class=\"comment\">//验证固定电话</span></span><br><span class=\"line\">            <span class=\"string\">'phone'</span>: <span class=\"regexp\">/^((\\+86)|(\\(\\+86\\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$|^((\\+86)|(\\(\\+86\\)))?-?(((0[1,2]&#123;1&#125;\\d&#123;1&#125;)?-?\\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\\d&#123;2&#125;)?-?\\d&#123;7,8&#125;))$/</span>, <span class=\"comment\">//手机号码和固定电话</span></span><br><span class=\"line\">            <span class=\"string\">'zipcode'</span>: <span class=\"regexp\">/^\\d&#123;6&#125;$/</span> <span class=\"comment\">//验证邮编</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//验证字符串</span></span><br><span class=\"line\">        $.extend(_reg, &#123;</span><br><span class=\"line\">            <span class=\"string\">'email'</span>: <span class=\"regexp\">/^\\w&#123;1,16&#125;([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/</span>, <span class=\"comment\">//邮箱</span></span><br><span class=\"line\">            <span class=\"string\">'chinese'</span>: <span class=\"regexp\">/^[\\u4E00-\\u9FA5]+$/</span>, <span class=\"comment\">//仅汉字</span></span><br><span class=\"line\">            <span class=\"string\">'char'</span>: <span class=\"regexp\">/^[A-Za-z]+$/</span>, <span class=\"comment\">//仅仅是字母</span></span><br><span class=\"line\">            <span class=\"string\">'charn'</span>: <span class=\"regexp\">/^[A-Za-z0-9]+$/</span>, <span class=\"comment\">//数字加字母</span></span><br><span class=\"line\">            <span class=\"string\">'nospecial'</span>: <span class=\"regexp\">/^[\\u4E00-\\u9FA5A-Za-z0-9]+$/</span>, <span class=\"comment\">// 不包含特殊字符</span></span><br><span class=\"line\">            <span class=\"string\">'url'</span>: <span class=\"regexp\">/^((http|https|ftp):\\/\\/)?(\\w(\\:\\w)?@)?([0-9a-z_-]+\\.)*?([a-z0-9-]+\\.[a-z]&#123;2,6&#125;(\\.[a-z]&#123;2&#125;)?(\\:[0-9]&#123;2,6&#125;)?)((\\/[^?#&lt;&gt;\\/\\\\*\":]*)+(\\?[^#]*)?(#.*)?)?$/</span>,</span><br><span class=\"line\">            <span class=\"string\">'loginName'</span>: <span class=\"regexp\">/^(13|14|15|18|17)[0-9]&#123;9&#125;$|^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/</span>, <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">            <span class=\"string\">'userName'</span>: <span class=\"regexp\">/^[\\u4e00-\\u9fa5]&#123;2`,4&#125;$|[a-zA-Z]&#123;4,20&#125;$/</span>, <span class=\"comment\">//真实姓名</span></span><br><span class=\"line\">            <span class=\"string\">'nickName'</span>: <span class=\"regexp\">/^([a-zA-Z\\u4e00-\\u9fa5]&#123;1&#125;[a-zA-Z0-9_\\u4e00-\\u9fa5]&#123;3,19&#125;)$/</span> <span class=\"comment\">//昵称</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _reg;</span><br><span class=\"line\">    &#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>.jQuery);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.regex = regex;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用webpack + gulp构建项目","date":"2018-09-24T12:46:41.000Z","author":"T.2stt","comments":1,"_content":"\n> 有人说为什么会使用webpack+gulp呢？强大的webpack完全可以摒弃gulp了嘛？话虽如此，但个人觉得webpack配置太繁琐复杂，相对来说gulp更简单一点，并且gulp也能很好的完成我期望的任务。所以我想用webpack来处理js任务（因为它支持AMD和CMD，并且可以直接引入模块），用gulp处理images/css/html等资源\n\nps: 平时在项目中使用它们的机会不多，以下都是自己项目之外的折腾，如果有错误之处，请不吝指出。\n## demo\n\n先上[DEMO](https://github.com/2ue/gulp-webpack-template)\n\n## 配置webpack\n\nwebpack的有很强大的配置选项，官方中英文文档都已经很详尽。\n[中文文档](https://doc.webpack-china.org/configuration/)\n[英文文档](https://webpack.js.org/concepts/)\n\n``` javascript\n'use strict';\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js'); //公共部分打包到common.js，输出路径为output中的path\n\nmodule.exports = {\n    // devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项\n    //插件项\n    plugins: [commonsPlugin],\n    //页面入口文件配置\n    entry: {\n        'app' : './src/js/page/app.js',\n    },\n    //入口文件输出配置\n    output: {\n        path: './dist/js/page', //webpack启动时需要\n        filename: '[name].js' //[name]指向entry中'app',对应关系\n    },\n  \tmodule: {\n        //加载器配置，另外还可以添加额外的css/images等加载器\n        loaders: [\n            { test: /\\.js$/, loader: 'jsx-loader?harmony' }\n        ]\n    },\n    //其它解决方案配置\n    resolve: {\n        extensions: ['', '.js', '.json', '.scss']\n    }\n};\n```\n\n上面的配置就是对js进行打包处理，当然webpack肯定也可以处理css和images等资源，webpack的强大毋庸置疑，但为什么不用webpack来处理css等任务呢？\n\n- webpack处理css默认情况下会把css合并到js文件，这点很不爽\n- 如果要把css文件独立处理，则需要额外的配置，有点烦，所以果断用gulp了\n\n执行`webpack`，看看效果，可以正常运行\n\n``` bash\n{ webpackGulpDeom }  » webpack\n  Hash: 4eeaff8e1f7bda682e10\n  Version: webpack 1.13.3\n  Time: 1141ms\n      Asset     Size  Chunks             Chunk Names\n     app.js   367 kB    0, 1  [emitted]  app\n  common.js  3.54 kB       1  [emitted]  common.js\n      + 5 hidden modules\n{ webpackGulpDeom }  »\n```\n\n## 配置gulp\n\ngulpfile.js同样，gulp的配置文档详情参考官方文档，这里以编译less文档并压缩css文档为例\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less');\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n//上线发布：压缩合并css，有less和css，具体看情况\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + 'css/*',['less'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less','watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify']);\n```\n\nps：这里只列举了一个编译less的任务。\n\n## 在gulp里执行webpack任务\n\n到了这一步，gulp和webpack任务都编写完成了，如果单单是这样是没有意思的，因为每次启动都需要单独的执行两次命令：一次webpack，一次gulp命令，这样无疑是非常糟糕的。所以我们必须得想办法把gulp和webpack连接起来。怎么连接呢？具体的有两种办法：\n- 一种是使用gulp-webpack插件。\n- 另一种是使用gulp-util插件。\n\n那么我们来重写gulpfile.js和webpack.config.js吧\n\n### 利用gulp-webpack插件\n\n重写`gulpfile.js`\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less'),\n    webpack = require(\"gulp-webpack\"),\n    webpackConfig = require(\"./webpack.config.js\");\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//上线发布：压缩合并css，有less和css\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//用gulp执行webpack.config.js\ngulp.task('buildJs', function () {\n    var myConfig = Object.create(webpackConfig);\n    return gulp\n        .src([entrySrc + 'js/page/*.js'])\n        .pipe(webpack(myConfig))\n        .pipe(gulp.dest('dist/js/page')); //出口文件目录，此处配置之后在webpack.config.js中就必须去掉，不然会报错\n});\n\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + '*/*',['less', 'buildJs'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less', 'buildJs', 'watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify', 'buildJs']);\n```\n\n`gulpfile.js`的变化：\n- 增加了可以一个buildJs任务来执行webpack.config.js文件的配置\n- 相应的监听对象扩大了\n\n现在来重写`webpack.config.js`，注释掉`output`项中的path就行了\n\n``` javascript\n'use strict';\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js'); //公共部分打包到common.js，输出路径为output中的path\n\nmodule.exports = {\n    // devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项\n    //插件项\n    plugins: [commonsPlugin],\n    //页面入口文件配置\n    entry: {\n        'app' : './src/js/page/app.js',\n    },\n    //入口文件输出配置\n    output: {\n        //path: './dist/js/page', //webpack启动时需要\n        filename: '[name].js' //[name]指向entry中'app',对应关系\n    },\n  \tmodule: {\n        //加载器配置，另外还可以添加额外的css/images等加载器\n        loaders: [\n            { test: /\\.js$/, loader: 'jsx-loader?harmony' }\n        ]\n    },\n    //其它解决方案配置\n    resolve: {\n        extensions: ['', '.js', '.json', '.scss']\n    }\n};\n```\n\n`webpack.config.js`和`gulpfile.js`都配置好了,那么现在只要执行gulp的相关命令就可以了\n\n```shell\n{ webpackGulpDeom }  » gulp\n[14:20:43] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js\n[14:20:43] Starting 'webpack'...\n[14:20:45] Version: webpack 1.13.3\n    Asset     Size  Chunks             Chunk Names\n   app.js   367 kB    0, 1  [emitted]  app\ncommon.js  3.54 kB       1  [emitted]  common.js\n[14:20:45] Finished 'webpack' after 1.37 s\n[14:20:45] Starting 'default'...\n[14:20:45] Finished 'default' after 34 μs\n{ webpackGulpDeom }  »\n```\n\n### 利用gulp-util插件\n\n> 这种方案只需要修改gulpfile.js就行了，webpack.config.js理论上来说不需要任何变化\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less'),\n    gutil = require('gulp-util'),\n    webpackConfig = require(\"./webpack.config.js\"),\n    myDevConfig = Object.create(webpackConfig),\n    devCompiler = webpack(myDevConfig);\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//上线发布：压缩合并css，有less和css，具体看情况\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//引用webpack.config.js对js资源进行打包\ngulp.task(\"buildJs\", function(callback) {\n    devCompiler.run(function(err, stats) {\n        if(err) throw new gutil.PluginError(\"webpack:buildJs\", err);\n        gutil.log(\"[webpack:buildJs]\", stats.toString({\n            colors: true\n        }));\n        callback();\n    });\n});\n\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + '*/*',['less', 'buildJs'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less', 'buildJs', 'watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify', 'buildJs']);\n```\n\n执行结果：\n\n``` bash\n{ webpackGulpDeom }  » gulp\n[14:28:59] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js\n[14:28:59] Starting 'buildJs'...\n[14:29:00] [webpack:buildJs] Hash: 4eeaff8e1f7bda682e10\nVersion: webpack 1.13.3\nTime: 1232ms\n    Asset     Size  Chunks             Chunk Names\n   app.js   367 kB    0, 1  [emitted]  app\ncommon.js  3.54 kB       1  [emitted]  common.js\nchunk    {0} app.js (app) 357 kB {1} [rendered]\n    [0] ./src/js/page/app.js 285 bytes {0} [built]\n    [1] ./src/js/common/jquery-1.9.1.min.js 92.6 kB {0} [built]\n    [2] (webpack)/buildin/amd-options.js 42 bytes {0} [built]\n    [3] ./~/vue/dist/vue.common.js 259 kB {0} [built]\n    [4] ./~/process/browser.js 5.3 kB {0} [built]\nchunk    {1} common.js (common.js) 0 bytes [rendered]\n[14:29:00] Finished 'buildJs' after 1.24 s\n[14:29:00] Starting 'default'...\n[14:29:00] Finished 'default' after 7.21 μs\n{ webpackGulpDeom }  »\n```\n\n## 两种方案对比\n\n从以上输出结果可以看出：\n\n### 使用gulp-webpack\n\n- `gulpfile.js`与`webpack.config.js`都要修改\n- 执行命令打印的信息更少\n- 编译时间更多？\n\n### 使用gulp-util\n\n- 只需要修改`gulpfile.js`,即使以后单独使用其中一个也不需要再做额外修改\n- 打印信息更丰富\n- 编译时间更短？\n\n关于编译时间多少这块，我也没弄太清楚，如果有错误，请读者指出。就个人而言是比较喜欢第二种方案的\n","source":"_posts/use-gulp+webpack-to-bulid-resource.md","raw":"---\ntitle: 使用webpack + gulp构建项目\ndate: 2018-9-24 20:46:41\nauthor: T.2stt\ncomments: true\ntags:\n- gulp\n- webpack\ncategories:\n- [工具,构建工具]\n\n---\n\n> 有人说为什么会使用webpack+gulp呢？强大的webpack完全可以摒弃gulp了嘛？话虽如此，但个人觉得webpack配置太繁琐复杂，相对来说gulp更简单一点，并且gulp也能很好的完成我期望的任务。所以我想用webpack来处理js任务（因为它支持AMD和CMD，并且可以直接引入模块），用gulp处理images/css/html等资源\n\nps: 平时在项目中使用它们的机会不多，以下都是自己项目之外的折腾，如果有错误之处，请不吝指出。\n## demo\n\n先上[DEMO](https://github.com/2ue/gulp-webpack-template)\n\n## 配置webpack\n\nwebpack的有很强大的配置选项，官方中英文文档都已经很详尽。\n[中文文档](https://doc.webpack-china.org/configuration/)\n[英文文档](https://webpack.js.org/concepts/)\n\n``` javascript\n'use strict';\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js'); //公共部分打包到common.js，输出路径为output中的path\n\nmodule.exports = {\n    // devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项\n    //插件项\n    plugins: [commonsPlugin],\n    //页面入口文件配置\n    entry: {\n        'app' : './src/js/page/app.js',\n    },\n    //入口文件输出配置\n    output: {\n        path: './dist/js/page', //webpack启动时需要\n        filename: '[name].js' //[name]指向entry中'app',对应关系\n    },\n  \tmodule: {\n        //加载器配置，另外还可以添加额外的css/images等加载器\n        loaders: [\n            { test: /\\.js$/, loader: 'jsx-loader?harmony' }\n        ]\n    },\n    //其它解决方案配置\n    resolve: {\n        extensions: ['', '.js', '.json', '.scss']\n    }\n};\n```\n\n上面的配置就是对js进行打包处理，当然webpack肯定也可以处理css和images等资源，webpack的强大毋庸置疑，但为什么不用webpack来处理css等任务呢？\n\n- webpack处理css默认情况下会把css合并到js文件，这点很不爽\n- 如果要把css文件独立处理，则需要额外的配置，有点烦，所以果断用gulp了\n\n执行`webpack`，看看效果，可以正常运行\n\n``` bash\n{ webpackGulpDeom }  » webpack\n  Hash: 4eeaff8e1f7bda682e10\n  Version: webpack 1.13.3\n  Time: 1141ms\n      Asset     Size  Chunks             Chunk Names\n     app.js   367 kB    0, 1  [emitted]  app\n  common.js  3.54 kB       1  [emitted]  common.js\n      + 5 hidden modules\n{ webpackGulpDeom }  »\n```\n\n## 配置gulp\n\ngulpfile.js同样，gulp的配置文档详情参考官方文档，这里以编译less文档并压缩css文档为例\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less');\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n//上线发布：压缩合并css，有less和css，具体看情况\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + 'css/*',['less'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less','watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify']);\n```\n\nps：这里只列举了一个编译less的任务。\n\n## 在gulp里执行webpack任务\n\n到了这一步，gulp和webpack任务都编写完成了，如果单单是这样是没有意思的，因为每次启动都需要单独的执行两次命令：一次webpack，一次gulp命令，这样无疑是非常糟糕的。所以我们必须得想办法把gulp和webpack连接起来。怎么连接呢？具体的有两种办法：\n- 一种是使用gulp-webpack插件。\n- 另一种是使用gulp-util插件。\n\n那么我们来重写gulpfile.js和webpack.config.js吧\n\n### 利用gulp-webpack插件\n\n重写`gulpfile.js`\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less'),\n    webpack = require(\"gulp-webpack\"),\n    webpackConfig = require(\"./webpack.config.js\");\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//上线发布：压缩合并css，有less和css\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//用gulp执行webpack.config.js\ngulp.task('buildJs', function () {\n    var myConfig = Object.create(webpackConfig);\n    return gulp\n        .src([entrySrc + 'js/page/*.js'])\n        .pipe(webpack(myConfig))\n        .pipe(gulp.dest('dist/js/page')); //出口文件目录，此处配置之后在webpack.config.js中就必须去掉，不然会报错\n});\n\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + '*/*',['less', 'buildJs'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less', 'buildJs', 'watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify', 'buildJs']);\n```\n\n`gulpfile.js`的变化：\n- 增加了可以一个buildJs任务来执行webpack.config.js文件的配置\n- 相应的监听对象扩大了\n\n现在来重写`webpack.config.js`，注释掉`output`项中的path就行了\n\n``` javascript\n'use strict';\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js'); //公共部分打包到common.js，输出路径为output中的path\n\nmodule.exports = {\n    // devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项\n    //插件项\n    plugins: [commonsPlugin],\n    //页面入口文件配置\n    entry: {\n        'app' : './src/js/page/app.js',\n    },\n    //入口文件输出配置\n    output: {\n        //path: './dist/js/page', //webpack启动时需要\n        filename: '[name].js' //[name]指向entry中'app',对应关系\n    },\n  \tmodule: {\n        //加载器配置，另外还可以添加额外的css/images等加载器\n        loaders: [\n            { test: /\\.js$/, loader: 'jsx-loader?harmony' }\n        ]\n    },\n    //其它解决方案配置\n    resolve: {\n        extensions: ['', '.js', '.json', '.scss']\n    }\n};\n```\n\n`webpack.config.js`和`gulpfile.js`都配置好了,那么现在只要执行gulp的相关命令就可以了\n\n```shell\n{ webpackGulpDeom }  » gulp\n[14:20:43] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js\n[14:20:43] Starting 'webpack'...\n[14:20:45] Version: webpack 1.13.3\n    Asset     Size  Chunks             Chunk Names\n   app.js   367 kB    0, 1  [emitted]  app\ncommon.js  3.54 kB       1  [emitted]  common.js\n[14:20:45] Finished 'webpack' after 1.37 s\n[14:20:45] Starting 'default'...\n[14:20:45] Finished 'default' after 34 μs\n{ webpackGulpDeom }  »\n```\n\n### 利用gulp-util插件\n\n> 这种方案只需要修改gulpfile.js就行了，webpack.config.js理论上来说不需要任何变化\n\n``` javascript\n'use strict';\nvar gulp = require('gulp'),\n    less = require('gulp-less'),\n    gutil = require('gulp-util'),\n    webpackConfig = require(\"./webpack.config.js\"),\n    myDevConfig = Object.create(webpackConfig),\n    devCompiler = webpack(myDevConfig);\n\nvar isDev = true;\nvar entrySrc = 'src/'\nvar pathSrc = isDev ? 'dist/' : 'online/';\n\n//开发环境：编译less和css\ngulp.task('less', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//上线发布：压缩合并css，有less和css，具体看情况\ngulp.task('cssUglify', function (done) {\n    gulp.src([entrySrc + 'css/main.less', entrySrc + 'css/*.css'])\n        .pipe(less())\n        .pipe(concat('style.min.css'))\n        .pipe(gulp.dest(pathSrc + 'css/'))\n        .on('end', done);\n});\n\n//引用webpack.config.js对js资源进行打包\ngulp.task(\"buildJs\", function(callback) {\n    devCompiler.run(function(err, stats) {\n        if(err) throw new gutil.PluginError(\"webpack:buildJs\", err);\n        gutil.log(\"[webpack:buildJs]\", stats.toString({\n            colors: true\n        }));\n        callback();\n    });\n});\n\n//开发环境\ngulp.task('watch', function (done) {\n    gulp.watch(entrySrc + '*/*',['less', 'buildJs'], function(event) {\n        console.log('File' + event.path + ' was ' + event.type + ', running tasks...');\n    }).on('end', done);\n});\n\n//开发，执行gulp\ngulp.task('default', ['less', 'buildJs', 'watch']);\n//发布，执行gulp dev\ngulp.task('dev', ['cssUglify', 'buildJs']);\n```\n\n执行结果：\n\n``` bash\n{ webpackGulpDeom }  » gulp\n[14:28:59] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js\n[14:28:59] Starting 'buildJs'...\n[14:29:00] [webpack:buildJs] Hash: 4eeaff8e1f7bda682e10\nVersion: webpack 1.13.3\nTime: 1232ms\n    Asset     Size  Chunks             Chunk Names\n   app.js   367 kB    0, 1  [emitted]  app\ncommon.js  3.54 kB       1  [emitted]  common.js\nchunk    {0} app.js (app) 357 kB {1} [rendered]\n    [0] ./src/js/page/app.js 285 bytes {0} [built]\n    [1] ./src/js/common/jquery-1.9.1.min.js 92.6 kB {0} [built]\n    [2] (webpack)/buildin/amd-options.js 42 bytes {0} [built]\n    [3] ./~/vue/dist/vue.common.js 259 kB {0} [built]\n    [4] ./~/process/browser.js 5.3 kB {0} [built]\nchunk    {1} common.js (common.js) 0 bytes [rendered]\n[14:29:00] Finished 'buildJs' after 1.24 s\n[14:29:00] Starting 'default'...\n[14:29:00] Finished 'default' after 7.21 μs\n{ webpackGulpDeom }  »\n```\n\n## 两种方案对比\n\n从以上输出结果可以看出：\n\n### 使用gulp-webpack\n\n- `gulpfile.js`与`webpack.config.js`都要修改\n- 执行命令打印的信息更少\n- 编译时间更多？\n\n### 使用gulp-util\n\n- 只需要修改`gulpfile.js`,即使以后单独使用其中一个也不需要再做额外修改\n- 打印信息更丰富\n- 编译时间更短？\n\n关于编译时间多少这块，我也没弄太清楚，如果有错误，请读者指出。就个人而言是比较喜欢第二种方案的\n","slug":"use-gulp+webpack-to-bulid-resource","published":1,"updated":"2018-11-01T06:52:47.807Z","_id":"cjny0swhl003b2kv73jdvpr2k","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>有人说为什么会使用webpack+gulp呢？强大的webpack完全可以摒弃gulp了嘛？话虽如此，但个人觉得webpack配置太繁琐复杂，相对来说gulp更简单一点，并且gulp也能很好的完成我期望的任务。所以我想用webpack来处理js任务（因为它支持AMD和CMD，并且可以直接引入模块），用gulp处理images/css/html等资源</p>\n</blockquote>\n<p>ps: 平时在项目中使用它们的机会不多，以下都是自己项目之外的折腾，如果有错误之处，请不吝指出。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>先上<a href=\"https://github.com/2ue/gulp-webpack-template\" target=\"_blank\" rel=\"noopener\">DEMO</a></p>\n<h2 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h2><p>webpack的有很强大的配置选项，官方中英文文档都已经很详尽。<br><a href=\"https://doc.webpack-china.org/configuration/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>); <span class=\"comment\">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项</span></span><br><span class=\"line\">    <span class=\"comment\">//插件项</span></span><br><span class=\"line\">    plugins: [commonsPlugin],</span><br><span class=\"line\">    <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span> : <span class=\"string\">'./src/js/page/app.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/js/page'</span>, <span class=\"comment\">//webpack启动时需要</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">//[name]指向entry中'app',对应关系</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'jsx-loader?harmony'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//其它解决方案配置</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的配置就是对js进行打包处理，当然webpack肯定也可以处理css和images等资源，webpack的强大毋庸置疑，但为什么不用webpack来处理css等任务呢？</p>\n<ul>\n<li>webpack处理css默认情况下会把css合并到js文件，这点很不爽</li>\n<li>如果要把css文件独立处理，则需要额外的配置，有点烦，所以果断用gulp了</li>\n</ul>\n<p>执行<code>webpack</code>，看看效果，可以正常运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » webpack</span><br><span class=\"line\">  Hash: 4eeaff8e1f7bda682e10</span><br><span class=\"line\">  Version: webpack 1.13.3</span><br><span class=\"line\">  Time: 1141ms</span><br><span class=\"line\">      Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">     app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">  common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">      + 5 hidden modules</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置gulp\"><a href=\"#配置gulp\" class=\"headerlink\" title=\"配置gulp\"></a>配置gulp</h2><p>gulpfile.js同样，gulp的配置文档详情参考官方文档，这里以编译less文档并压缩css文档为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'css/*'</span>,[<span class=\"string\">'less'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>,<span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>]);</span><br></pre></td></tr></table></figure>\n<p>ps：这里只列举了一个编译less的任务。</p>\n<h2 id=\"在gulp里执行webpack任务\"><a href=\"#在gulp里执行webpack任务\" class=\"headerlink\" title=\"在gulp里执行webpack任务\"></a>在gulp里执行webpack任务</h2><p>到了这一步，gulp和webpack任务都编写完成了，如果单单是这样是没有意思的，因为每次启动都需要单独的执行两次命令：一次webpack，一次gulp命令，这样无疑是非常糟糕的。所以我们必须得想办法把gulp和webpack连接起来。怎么连接呢？具体的有两种办法：</p>\n<ul>\n<li>一种是使用gulp-webpack插件。</li>\n<li>另一种是使用gulp-util插件。</li>\n</ul>\n<p>那么我们来重写gulpfile.js和webpack.config.js吧</p>\n<h3 id=\"利用gulp-webpack插件\"><a href=\"#利用gulp-webpack插件\" class=\"headerlink\" title=\"利用gulp-webpack插件\"></a>利用gulp-webpack插件</h3><p>重写<code>gulpfile.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>),</span><br><span class=\"line\">    webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-webpack\"</span>),</span><br><span class=\"line\">    webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用gulp执行webpack.config.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'buildJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myConfig = <span class=\"built_in\">Object</span>.create(webpackConfig);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp</span><br><span class=\"line\">        .src([entrySrc + <span class=\"string\">'js/page/*.js'</span>])</span><br><span class=\"line\">        .pipe(webpack(myConfig))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/page'</span>)); <span class=\"comment\">//出口文件目录，此处配置之后在webpack.config.js中就必须去掉，不然会报错</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'*/*'</span>,[<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>, <span class=\"string\">'buildJs'</span>]);</span><br></pre></td></tr></table></figure>\n<p><code>gulpfile.js</code>的变化：</p>\n<ul>\n<li>增加了可以一个buildJs任务来执行webpack.config.js文件的配置</li>\n<li>相应的监听对象扩大了</li>\n</ul>\n<p>现在来重写<code>webpack.config.js</code>，注释掉<code>output</code>项中的path就行了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>); <span class=\"comment\">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项</span></span><br><span class=\"line\">    <span class=\"comment\">//插件项</span></span><br><span class=\"line\">    plugins: [commonsPlugin],</span><br><span class=\"line\">    <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span> : <span class=\"string\">'./src/js/page/app.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//path: './dist/js/page', //webpack启动时需要</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">//[name]指向entry中'app',对应关系</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'jsx-loader?harmony'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//其它解决方案配置</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>webpack.config.js</code>和<code>gulpfile.js</code>都配置好了,那么现在只要执行gulp的相关命令就可以了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class=\"line\">[14:20:43] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js</span><br><span class=\"line\">[14:20:43] Starting 'webpack'...</span><br><span class=\"line\">[14:20:45] Version: webpack 1.13.3</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">[14:20:45] Finished 'webpack' after 1.37 s</span><br><span class=\"line\">[14:20:45] Starting 'default'...</span><br><span class=\"line\">[14:20:45] Finished 'default' after 34 μs</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用gulp-util插件\"><a href=\"#利用gulp-util插件\" class=\"headerlink\" title=\"利用gulp-util插件\"></a>利用gulp-util插件</h3><blockquote>\n<p>这种方案只需要修改gulpfile.js就行了，webpack.config.js理论上来说不需要任何变化</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>),</span><br><span class=\"line\">    gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>),</span><br><span class=\"line\">    webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>),</span><br><span class=\"line\">    myDevConfig = <span class=\"built_in\">Object</span>.create(webpackConfig),</span><br><span class=\"line\">    devCompiler = webpack(myDevConfig);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用webpack.config.js对js资源进行打包</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"buildJs\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    devCompiler.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> gutil.PluginError(<span class=\"string\">\"webpack:buildJs\"</span>, err);</span><br><span class=\"line\">        gutil.log(<span class=\"string\">\"[webpack:buildJs]\"</span>, stats.toString(&#123;</span><br><span class=\"line\">            colors: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'*/*'</span>,[<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>, <span class=\"string\">'buildJs'</span>]);</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class=\"line\">[14:28:59] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js</span><br><span class=\"line\">[14:28:59] Starting <span class=\"string\">'buildJs'</span>...</span><br><span class=\"line\">[14:29:00] [webpack:buildJs] Hash: 4eeaff8e1f7bda682e10</span><br><span class=\"line\">Version: webpack 1.13.3</span><br><span class=\"line\">Time: 1232ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">chunk    &#123;0&#125; app.js (app) 357 kB &#123;1&#125; [rendered]</span><br><span class=\"line\">    [0] ./src/js/page/app.js 285 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [1] ./src/js/common/jquery-1.9.1.min.js 92.6 kB &#123;0&#125; [built]</span><br><span class=\"line\">    [2] (webpack)/buildin/amd-options.js 42 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [3] ./~/vue/dist/vue.common.js 259 kB &#123;0&#125; [built]</span><br><span class=\"line\">    [4] ./~/process/browser.js 5.3 kB &#123;0&#125; [built]</span><br><span class=\"line\">chunk    &#123;1&#125; common.js (common.js) 0 bytes [rendered]</span><br><span class=\"line\">[14:29:00] Finished <span class=\"string\">'buildJs'</span> after 1.24 s</span><br><span class=\"line\">[14:29:00] Starting <span class=\"string\">'default'</span>...</span><br><span class=\"line\">[14:29:00] Finished <span class=\"string\">'default'</span> after 7.21 μs</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h2 id=\"两种方案对比\"><a href=\"#两种方案对比\" class=\"headerlink\" title=\"两种方案对比\"></a>两种方案对比</h2><p>从以上输出结果可以看出：</p>\n<h3 id=\"使用gulp-webpack\"><a href=\"#使用gulp-webpack\" class=\"headerlink\" title=\"使用gulp-webpack\"></a>使用gulp-webpack</h3><ul>\n<li><code>gulpfile.js</code>与<code>webpack.config.js</code>都要修改</li>\n<li>执行命令打印的信息更少</li>\n<li>编译时间更多？</li>\n</ul>\n<h3 id=\"使用gulp-util\"><a href=\"#使用gulp-util\" class=\"headerlink\" title=\"使用gulp-util\"></a>使用gulp-util</h3><ul>\n<li>只需要修改<code>gulpfile.js</code>,即使以后单独使用其中一个也不需要再做额外修改</li>\n<li>打印信息更丰富</li>\n<li>编译时间更短？</li>\n</ul>\n<p>关于编译时间多少这块，我也没弄太清楚，如果有错误，请读者指出。就个人而言是比较喜欢第二种方案的</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>有人说为什么会使用webpack+gulp呢？强大的webpack完全可以摒弃gulp了嘛？话虽如此，但个人觉得webpack配置太繁琐复杂，相对来说gulp更简单一点，并且gulp也能很好的完成我期望的任务。所以我想用webpack来处理js任务（因为它支持AMD和CMD，并且可以直接引入模块），用gulp处理images/css/html等资源</p>\n</blockquote>\n<p>ps: 平时在项目中使用它们的机会不多，以下都是自己项目之外的折腾，如果有错误之处，请不吝指出。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>先上<a href=\"https://github.com/2ue/gulp-webpack-template\" target=\"_blank\" rel=\"noopener\">DEMO</a></p>\n<h2 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h2><p>webpack的有很强大的配置选项，官方中英文文档都已经很详尽。<br><a href=\"https://doc.webpack-china.org/configuration/\" target=\"_blank\" rel=\"noopener\">中文文档</a><br><a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">英文文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>); <span class=\"comment\">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项</span></span><br><span class=\"line\">    <span class=\"comment\">//插件项</span></span><br><span class=\"line\">    plugins: [commonsPlugin],</span><br><span class=\"line\">    <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span> : <span class=\"string\">'./src/js/page/app.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./dist/js/page'</span>, <span class=\"comment\">//webpack启动时需要</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">//[name]指向entry中'app',对应关系</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'jsx-loader?harmony'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//其它解决方案配置</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的配置就是对js进行打包处理，当然webpack肯定也可以处理css和images等资源，webpack的强大毋庸置疑，但为什么不用webpack来处理css等任务呢？</p>\n<ul>\n<li>webpack处理css默认情况下会把css合并到js文件，这点很不爽</li>\n<li>如果要把css文件独立处理，则需要额外的配置，有点烦，所以果断用gulp了</li>\n</ul>\n<p>执行<code>webpack</code>，看看效果，可以正常运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » webpack</span><br><span class=\"line\">  Hash: 4eeaff8e1f7bda682e10</span><br><span class=\"line\">  Version: webpack 1.13.3</span><br><span class=\"line\">  Time: 1141ms</span><br><span class=\"line\">      Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">     app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">  common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">      + 5 hidden modules</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置gulp\"><a href=\"#配置gulp\" class=\"headerlink\" title=\"配置gulp\"></a>配置gulp</h2><p>gulpfile.js同样，gulp的配置文档详情参考官方文档，这里以编译less文档并压缩css文档为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'css/*'</span>,[<span class=\"string\">'less'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>,<span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>]);</span><br></pre></td></tr></table></figure>\n<p>ps：这里只列举了一个编译less的任务。</p>\n<h2 id=\"在gulp里执行webpack任务\"><a href=\"#在gulp里执行webpack任务\" class=\"headerlink\" title=\"在gulp里执行webpack任务\"></a>在gulp里执行webpack任务</h2><p>到了这一步，gulp和webpack任务都编写完成了，如果单单是这样是没有意思的，因为每次启动都需要单独的执行两次命令：一次webpack，一次gulp命令，这样无疑是非常糟糕的。所以我们必须得想办法把gulp和webpack连接起来。怎么连接呢？具体的有两种办法：</p>\n<ul>\n<li>一种是使用gulp-webpack插件。</li>\n<li>另一种是使用gulp-util插件。</li>\n</ul>\n<p>那么我们来重写gulpfile.js和webpack.config.js吧</p>\n<h3 id=\"利用gulp-webpack插件\"><a href=\"#利用gulp-webpack插件\" class=\"headerlink\" title=\"利用gulp-webpack插件\"></a>利用gulp-webpack插件</h3><p>重写<code>gulpfile.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>),</span><br><span class=\"line\">    webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-webpack\"</span>),</span><br><span class=\"line\">    webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用gulp执行webpack.config.js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'buildJs'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myConfig = <span class=\"built_in\">Object</span>.create(webpackConfig);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp</span><br><span class=\"line\">        .src([entrySrc + <span class=\"string\">'js/page/*.js'</span>])</span><br><span class=\"line\">        .pipe(webpack(myConfig))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js/page'</span>)); <span class=\"comment\">//出口文件目录，此处配置之后在webpack.config.js中就必须去掉，不然会报错</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'*/*'</span>,[<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>, <span class=\"string\">'buildJs'</span>]);</span><br></pre></td></tr></table></figure>\n<p><code>gulpfile.js</code>的变化：</p>\n<ul>\n<li>增加了可以一个buildJs任务来执行webpack.config.js文件的配置</li>\n<li>相应的监听对象扩大了</li>\n</ul>\n<p>现在来重写<code>webpack.config.js</code>，注释掉<code>output</code>项中的path就行了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> commonsPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>); <span class=\"comment\">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// devtool: 'cheap-module-eval-source-map', //配置生成Source Maps，选择合适的选项</span></span><br><span class=\"line\">    <span class=\"comment\">//插件项</span></span><br><span class=\"line\">    plugins: [commonsPlugin],</span><br><span class=\"line\">    <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        <span class=\"string\">'app'</span> : <span class=\"string\">'./src/js/page/app.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//path: './dist/js/page', //webpack启动时需要</span></span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span> <span class=\"comment\">//[name]指向entry中'app',对应关系</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \t<span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'jsx-loader?harmony'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//其它解决方案配置</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>webpack.config.js</code>和<code>gulpfile.js</code>都配置好了,那么现在只要执行gulp的相关命令就可以了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class=\"line\">[14:20:43] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js</span><br><span class=\"line\">[14:20:43] Starting 'webpack'...</span><br><span class=\"line\">[14:20:45] Version: webpack 1.13.3</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">[14:20:45] Finished 'webpack' after 1.37 s</span><br><span class=\"line\">[14:20:45] Starting 'default'...</span><br><span class=\"line\">[14:20:45] Finished 'default' after 34 μs</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用gulp-util插件\"><a href=\"#利用gulp-util插件\" class=\"headerlink\" title=\"利用gulp-util插件\"></a>利用gulp-util插件</h3><blockquote>\n<p>这种方案只需要修改gulpfile.js就行了，webpack.config.js理论上来说不需要任何变化</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>),</span><br><span class=\"line\">    gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>),</span><br><span class=\"line\">    webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>),</span><br><span class=\"line\">    myDevConfig = <span class=\"built_in\">Object</span>.create(webpackConfig),</span><br><span class=\"line\">    devCompiler = webpack(myDevConfig);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isDev = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> entrySrc = <span class=\"string\">'src/'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pathSrc = isDev ? <span class=\"string\">'dist/'</span> : <span class=\"string\">'online/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境：编译less和css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssUglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.src([entrySrc + <span class=\"string\">'css/main.less'</span>, entrySrc + <span class=\"string\">'css/*.css'</span>])</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'style.min.css'</span>))</span><br><span class=\"line\">        .pipe(gulp.dest(pathSrc + <span class=\"string\">'css/'</span>))</span><br><span class=\"line\">        .on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用webpack.config.js对js资源进行打包</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"buildJs\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    devCompiler.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> gutil.PluginError(<span class=\"string\">\"webpack:buildJs\"</span>, err);</span><br><span class=\"line\">        gutil.log(<span class=\"string\">\"[webpack:buildJs]\"</span>, stats.toString(&#123;</span><br><span class=\"line\">            colors: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">    gulp.watch(entrySrc + <span class=\"string\">'*/*'</span>,[<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'File'</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</span><br><span class=\"line\">    &#125;).on(<span class=\"string\">'end'</span>, done);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发，执行gulp</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'less'</span>, <span class=\"string\">'buildJs'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//发布，执行gulp dev</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>, [<span class=\"string\">'cssUglify'</span>, <span class=\"string\">'buildJs'</span>]);</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class=\"line\">[14:28:59] Using gulpfile D:\\wamp64\\www\\webpackGulpDeom\\gulpfile.js</span><br><span class=\"line\">[14:28:59] Starting <span class=\"string\">'buildJs'</span>...</span><br><span class=\"line\">[14:29:00] [webpack:buildJs] Hash: 4eeaff8e1f7bda682e10</span><br><span class=\"line\">Version: webpack 1.13.3</span><br><span class=\"line\">Time: 1232ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class=\"line\">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class=\"line\">chunk    &#123;0&#125; app.js (app) 357 kB &#123;1&#125; [rendered]</span><br><span class=\"line\">    [0] ./src/js/page/app.js 285 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [1] ./src/js/common/jquery-1.9.1.min.js 92.6 kB &#123;0&#125; [built]</span><br><span class=\"line\">    [2] (webpack)/buildin/amd-options.js 42 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [3] ./~/vue/dist/vue.common.js 259 kB &#123;0&#125; [built]</span><br><span class=\"line\">    [4] ./~/process/browser.js 5.3 kB &#123;0&#125; [built]</span><br><span class=\"line\">chunk    &#123;1&#125; common.js (common.js) 0 bytes [rendered]</span><br><span class=\"line\">[14:29:00] Finished <span class=\"string\">'buildJs'</span> after 1.24 s</span><br><span class=\"line\">[14:29:00] Starting <span class=\"string\">'default'</span>...</span><br><span class=\"line\">[14:29:00] Finished <span class=\"string\">'default'</span> after 7.21 μs</span><br><span class=\"line\">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>\n<h2 id=\"两种方案对比\"><a href=\"#两种方案对比\" class=\"headerlink\" title=\"两种方案对比\"></a>两种方案对比</h2><p>从以上输出结果可以看出：</p>\n<h3 id=\"使用gulp-webpack\"><a href=\"#使用gulp-webpack\" class=\"headerlink\" title=\"使用gulp-webpack\"></a>使用gulp-webpack</h3><ul>\n<li><code>gulpfile.js</code>与<code>webpack.config.js</code>都要修改</li>\n<li>执行命令打印的信息更少</li>\n<li>编译时间更多？</li>\n</ul>\n<h3 id=\"使用gulp-util\"><a href=\"#使用gulp-util\" class=\"headerlink\" title=\"使用gulp-util\"></a>使用gulp-util</h3><ul>\n<li>只需要修改<code>gulpfile.js</code>,即使以后单独使用其中一个也不需要再做额外修改</li>\n<li>打印信息更丰富</li>\n<li>编译时间更短？</li>\n</ul>\n<p>关于编译时间多少这块，我也没弄太清楚，如果有错误，请读者指出。就个人而言是比较喜欢第二种方案的</p>\n"},{"title":"vscode的插件使用介绍","date":"2018-05-06T11:51:28.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是 vscode 插件的使用介绍。针对于前端，小程序，css，html，nodejs，ts，es6，es7等使用\n\n## (常)关于HTML\n### HTML Snippets\n\t 回车或tap生成标签\n### HTML CSS Support \n\tCSS的智能补全\n## 图标、代码样式插件\n\n## (常)关于Css\n### stylelint\n\tCSS/SCSS/LESS检查工具 \n\t（首选项-设置-用户设置配置： \n\t\t\"stylelint.enable\": true, \n\t\t\"css.validate\": false, \n\t\t\"scss.validate\": false \n\t\t）\n### HTML CSS Support \n\tCSS的智能补全\n\t\n### Less/Sass 编译\n#### Easy Sass \n\tscss/sass文件保存可自动生成并同步编译成同名css文件\n#### Easy WXLESS\n\t微信小程序WXSS文件专用，保存可自动生成并同步编译成同名css文件\n\n\n## 图标、代码样式插件，语法高亮\n### vscode-icon\n\t让vscode资源目录加上图标、必备\n### 语法高亮\n#### \"files.associations\": { \n\t\"*.vue\": \"vue\", \n\t\"*.wpy\": \"vue\", \n\t\"*.wxml\": \"html\", \n\t\"*.wxss\": \"css\" \n\t}\n#### beautify\n\tjavascript, JSON, CSS, Sass, HTML 代码高亮\n#### Beautify css/sass/scss/less\n\t代码高亮\n\t\n## Vue\n### vetur\n\tVue语法高亮\n### vue\n\t Vue语法高亮（首选项-设置-用户设置配置： \n\t\t\"emmet.syntaxProfiles\": { \n\t\t\"vue-html\": \"html\", \n\t\t\"vue\": \"html\"\n\t\t}）\n### Vue 2 Snippets \n\t基于最新的 Vue 官方语法高亮文件添加了语法高亮，并且依据 Vue 2 的 API 添加了代码补全\n### Vue Peek\n\t查找vue组件文件\n### VueHelper \n\tvue代码提示插件，包括了vue2所有api，vue-router2和vuex2的代码提示\n\t\n## 小程序\n### vscode wxml\n\t识别wxml\n### 小程序组件\n\t识别wxss\n\t+vscode weapp api以及WeApp Snippets插件（但是避免wxml或者wxss之一不能用必须加）\n\n\n\t\n\n\n","source":"_posts/vscode-plug-in.md","raw":"---\ntitle: vscode的插件使用介绍\ndate: 2018-05-06 19:51:28\nauthor: T.2stt\ncomments: true\ntags:\n- [工具-vscode]\ncategories:\n- [工具,开发工具,vscode]\n---\n\n>此章节记载的是 vscode 插件的使用介绍。针对于前端，小程序，css，html，nodejs，ts，es6，es7等使用\n\n## (常)关于HTML\n### HTML Snippets\n\t 回车或tap生成标签\n### HTML CSS Support \n\tCSS的智能补全\n## 图标、代码样式插件\n\n## (常)关于Css\n### stylelint\n\tCSS/SCSS/LESS检查工具 \n\t（首选项-设置-用户设置配置： \n\t\t\"stylelint.enable\": true, \n\t\t\"css.validate\": false, \n\t\t\"scss.validate\": false \n\t\t）\n### HTML CSS Support \n\tCSS的智能补全\n\t\n### Less/Sass 编译\n#### Easy Sass \n\tscss/sass文件保存可自动生成并同步编译成同名css文件\n#### Easy WXLESS\n\t微信小程序WXSS文件专用，保存可自动生成并同步编译成同名css文件\n\n\n## 图标、代码样式插件，语法高亮\n### vscode-icon\n\t让vscode资源目录加上图标、必备\n### 语法高亮\n#### \"files.associations\": { \n\t\"*.vue\": \"vue\", \n\t\"*.wpy\": \"vue\", \n\t\"*.wxml\": \"html\", \n\t\"*.wxss\": \"css\" \n\t}\n#### beautify\n\tjavascript, JSON, CSS, Sass, HTML 代码高亮\n#### Beautify css/sass/scss/less\n\t代码高亮\n\t\n## Vue\n### vetur\n\tVue语法高亮\n### vue\n\t Vue语法高亮（首选项-设置-用户设置配置： \n\t\t\"emmet.syntaxProfiles\": { \n\t\t\"vue-html\": \"html\", \n\t\t\"vue\": \"html\"\n\t\t}）\n### Vue 2 Snippets \n\t基于最新的 Vue 官方语法高亮文件添加了语法高亮，并且依据 Vue 2 的 API 添加了代码补全\n### Vue Peek\n\t查找vue组件文件\n### VueHelper \n\tvue代码提示插件，包括了vue2所有api，vue-router2和vuex2的代码提示\n\t\n## 小程序\n### vscode wxml\n\t识别wxml\n### 小程序组件\n\t识别wxss\n\t+vscode weapp api以及WeApp Snippets插件（但是避免wxml或者wxss之一不能用必须加）\n\n\n\t\n\n\n","slug":"vscode-plug-in","published":1,"updated":"2018-11-01T03:29:30.175Z","_id":"cjny0swhp003g2kv7ku4z9yjv","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是 vscode 插件的使用介绍。针对于前端，小程序，css，html，nodejs，ts，es6，es7等使用</p>\n</blockquote>\n<h2 id=\"常-关于HTML\"><a href=\"#常-关于HTML\" class=\"headerlink\" title=\"(常)关于HTML\"></a>(常)关于HTML</h2><h3 id=\"HTML-Snippets\"><a href=\"#HTML-Snippets\" class=\"headerlink\" title=\"HTML Snippets\"></a>HTML Snippets</h3><pre><code>回车或tap生成标签\n</code></pre><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><pre><code>CSS的智能补全\n</code></pre><h2 id=\"图标、代码样式插件\"><a href=\"#图标、代码样式插件\" class=\"headerlink\" title=\"图标、代码样式插件\"></a>图标、代码样式插件</h2><h2 id=\"常-关于Css\"><a href=\"#常-关于Css\" class=\"headerlink\" title=\"(常)关于Css\"></a>(常)关于Css</h2><h3 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h3><pre><code>CSS/SCSS/LESS检查工具 \n（首选项-设置-用户设置配置： \n    &quot;stylelint.enable&quot;: true, \n    &quot;css.validate&quot;: false, \n    &quot;scss.validate&quot;: false \n    ）\n</code></pre><h3 id=\"HTML-CSS-Support-1\"><a href=\"#HTML-CSS-Support-1\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><pre><code>CSS的智能补全\n</code></pre><h3 id=\"Less-Sass-编译\"><a href=\"#Less-Sass-编译\" class=\"headerlink\" title=\"Less/Sass 编译\"></a>Less/Sass 编译</h3><h4 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h4><pre><code>scss/sass文件保存可自动生成并同步编译成同名css文件\n</code></pre><h4 id=\"Easy-WXLESS\"><a href=\"#Easy-WXLESS\" class=\"headerlink\" title=\"Easy WXLESS\"></a>Easy WXLESS</h4><pre><code>微信小程序WXSS文件专用，保存可自动生成并同步编译成同名css文件\n</code></pre><h2 id=\"图标、代码样式插件，语法高亮\"><a href=\"#图标、代码样式插件，语法高亮\" class=\"headerlink\" title=\"图标、代码样式插件，语法高亮\"></a>图标、代码样式插件，语法高亮</h2><h3 id=\"vscode-icon\"><a href=\"#vscode-icon\" class=\"headerlink\" title=\"vscode-icon\"></a>vscode-icon</h3><pre><code>让vscode资源目录加上图标、必备\n</code></pre><h3 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h3><h4 id=\"“files-associations”\"><a href=\"#“files-associations”\" class=\"headerlink\" title=\"“files.associations”: {\"></a>“files.associations”: {</h4><pre><code>&quot;*.vue&quot;: &quot;vue&quot;, \n&quot;*.wpy&quot;: &quot;vue&quot;, \n&quot;*.wxml&quot;: &quot;html&quot;, \n&quot;*.wxss&quot;: &quot;css&quot; \n}\n</code></pre><h4 id=\"beautify\"><a href=\"#beautify\" class=\"headerlink\" title=\"beautify\"></a>beautify</h4><pre><code>javascript, JSON, CSS, Sass, HTML 代码高亮\n</code></pre><h4 id=\"Beautify-css-sass-scss-less\"><a href=\"#Beautify-css-sass-scss-less\" class=\"headerlink\" title=\"Beautify css/sass/scss/less\"></a>Beautify css/sass/scss/less</h4><pre><code>代码高亮\n</code></pre><h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"vetur\"><a href=\"#vetur\" class=\"headerlink\" title=\"vetur\"></a>vetur</h3><pre><code>Vue语法高亮\n</code></pre><h3 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h3><pre><code>Vue语法高亮（首选项-设置-用户设置配置： \n   &quot;emmet.syntaxProfiles&quot;: { \n   &quot;vue-html&quot;: &quot;html&quot;, \n   &quot;vue&quot;: &quot;html&quot;\n   }）\n</code></pre><h3 id=\"Vue-2-Snippets\"><a href=\"#Vue-2-Snippets\" class=\"headerlink\" title=\"Vue 2 Snippets\"></a>Vue 2 Snippets</h3><pre><code>基于最新的 Vue 官方语法高亮文件添加了语法高亮，并且依据 Vue 2 的 API 添加了代码补全\n</code></pre><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><pre><code>查找vue组件文件\n</code></pre><h3 id=\"VueHelper\"><a href=\"#VueHelper\" class=\"headerlink\" title=\"VueHelper\"></a>VueHelper</h3><pre><code>vue代码提示插件，包括了vue2所有api，vue-router2和vuex2的代码提示\n</code></pre><h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><h3 id=\"vscode-wxml\"><a href=\"#vscode-wxml\" class=\"headerlink\" title=\"vscode wxml\"></a>vscode wxml</h3><pre><code>识别wxml\n</code></pre><h3 id=\"小程序组件\"><a href=\"#小程序组件\" class=\"headerlink\" title=\"小程序组件\"></a>小程序组件</h3><pre><code>识别wxss\n+vscode weapp api以及WeApp Snippets插件（但是避免wxml或者wxss之一不能用必须加）\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是 vscode 插件的使用介绍。针对于前端，小程序，css，html，nodejs，ts，es6，es7等使用</p>\n</blockquote>\n<h2 id=\"常-关于HTML\"><a href=\"#常-关于HTML\" class=\"headerlink\" title=\"(常)关于HTML\"></a>(常)关于HTML</h2><h3 id=\"HTML-Snippets\"><a href=\"#HTML-Snippets\" class=\"headerlink\" title=\"HTML Snippets\"></a>HTML Snippets</h3><pre><code>回车或tap生成标签\n</code></pre><h3 id=\"HTML-CSS-Support\"><a href=\"#HTML-CSS-Support\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><pre><code>CSS的智能补全\n</code></pre><h2 id=\"图标、代码样式插件\"><a href=\"#图标、代码样式插件\" class=\"headerlink\" title=\"图标、代码样式插件\"></a>图标、代码样式插件</h2><h2 id=\"常-关于Css\"><a href=\"#常-关于Css\" class=\"headerlink\" title=\"(常)关于Css\"></a>(常)关于Css</h2><h3 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h3><pre><code>CSS/SCSS/LESS检查工具 \n（首选项-设置-用户设置配置： \n    &quot;stylelint.enable&quot;: true, \n    &quot;css.validate&quot;: false, \n    &quot;scss.validate&quot;: false \n    ）\n</code></pre><h3 id=\"HTML-CSS-Support-1\"><a href=\"#HTML-CSS-Support-1\" class=\"headerlink\" title=\"HTML CSS Support\"></a>HTML CSS Support</h3><pre><code>CSS的智能补全\n</code></pre><h3 id=\"Less-Sass-编译\"><a href=\"#Less-Sass-编译\" class=\"headerlink\" title=\"Less/Sass 编译\"></a>Less/Sass 编译</h3><h4 id=\"Easy-Sass\"><a href=\"#Easy-Sass\" class=\"headerlink\" title=\"Easy Sass\"></a>Easy Sass</h4><pre><code>scss/sass文件保存可自动生成并同步编译成同名css文件\n</code></pre><h4 id=\"Easy-WXLESS\"><a href=\"#Easy-WXLESS\" class=\"headerlink\" title=\"Easy WXLESS\"></a>Easy WXLESS</h4><pre><code>微信小程序WXSS文件专用，保存可自动生成并同步编译成同名css文件\n</code></pre><h2 id=\"图标、代码样式插件，语法高亮\"><a href=\"#图标、代码样式插件，语法高亮\" class=\"headerlink\" title=\"图标、代码样式插件，语法高亮\"></a>图标、代码样式插件，语法高亮</h2><h3 id=\"vscode-icon\"><a href=\"#vscode-icon\" class=\"headerlink\" title=\"vscode-icon\"></a>vscode-icon</h3><pre><code>让vscode资源目录加上图标、必备\n</code></pre><h3 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h3><h4 id=\"“files-associations”\"><a href=\"#“files-associations”\" class=\"headerlink\" title=\"“files.associations”: {\"></a>“files.associations”: {</h4><pre><code>&quot;*.vue&quot;: &quot;vue&quot;, \n&quot;*.wpy&quot;: &quot;vue&quot;, \n&quot;*.wxml&quot;: &quot;html&quot;, \n&quot;*.wxss&quot;: &quot;css&quot; \n}\n</code></pre><h4 id=\"beautify\"><a href=\"#beautify\" class=\"headerlink\" title=\"beautify\"></a>beautify</h4><pre><code>javascript, JSON, CSS, Sass, HTML 代码高亮\n</code></pre><h4 id=\"Beautify-css-sass-scss-less\"><a href=\"#Beautify-css-sass-scss-less\" class=\"headerlink\" title=\"Beautify css/sass/scss/less\"></a>Beautify css/sass/scss/less</h4><pre><code>代码高亮\n</code></pre><h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"vetur\"><a href=\"#vetur\" class=\"headerlink\" title=\"vetur\"></a>vetur</h3><pre><code>Vue语法高亮\n</code></pre><h3 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h3><pre><code>Vue语法高亮（首选项-设置-用户设置配置： \n   &quot;emmet.syntaxProfiles&quot;: { \n   &quot;vue-html&quot;: &quot;html&quot;, \n   &quot;vue&quot;: &quot;html&quot;\n   }）\n</code></pre><h3 id=\"Vue-2-Snippets\"><a href=\"#Vue-2-Snippets\" class=\"headerlink\" title=\"Vue 2 Snippets\"></a>Vue 2 Snippets</h3><pre><code>基于最新的 Vue 官方语法高亮文件添加了语法高亮，并且依据 Vue 2 的 API 添加了代码补全\n</code></pre><h3 id=\"Vue-Peek\"><a href=\"#Vue-Peek\" class=\"headerlink\" title=\"Vue Peek\"></a>Vue Peek</h3><pre><code>查找vue组件文件\n</code></pre><h3 id=\"VueHelper\"><a href=\"#VueHelper\" class=\"headerlink\" title=\"VueHelper\"></a>VueHelper</h3><pre><code>vue代码提示插件，包括了vue2所有api，vue-router2和vuex2的代码提示\n</code></pre><h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><h3 id=\"vscode-wxml\"><a href=\"#vscode-wxml\" class=\"headerlink\" title=\"vscode wxml\"></a>vscode wxml</h3><pre><code>识别wxml\n</code></pre><h3 id=\"小程序组件\"><a href=\"#小程序组件\" class=\"headerlink\" title=\"小程序组件\"></a>小程序组件</h3><pre><code>识别wxss\n+vscode weapp api以及WeApp Snippets插件（但是避免wxml或者wxss之一不能用必须加）\n</code></pre>"},{"title":"vscode的快捷键","date":"2018-05-06T12:30:42.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是 vscode 快捷键，有助于代码的快速编辑（常用的）\n\n| 参数        | 类型    |\n| --------   | :-----:   |\n| Ctrl + Shift + N   | 新窗口      |\n| Ctrl + Shift + W   | 关闭窗口      |\n| Alt+ ↑ / ↓   | 向上/向下移动行      |\n| Shift+Alt + ↓ / ↑   | 向上/向下复制行      |\n| Alt+ ↑ / ↓   | 向上/向下移动行      |\n| Ctrl+Shift+K  | 删除行      |\n| Ctrl+Enter  | 在下面插入行      |\n| Ctrl+Shift+\\  | 跳到匹配的括号      |\n| Ctrl+] / [ | 缩进/缩进行      |\n| Home  | 转到行首      |\n| End  | 转到行尾    |\n| Ctrl+Home  | 转到文件开头      |\n| Ctrl+End  | 转到文件末尾      |\n| Alt+PgUp / PgDown  | 向上/向下滚动页面      |\n| Ctrl+Shift+[  | 折叠      |\n| Ctrl+Shift+]  | 展开      |\n| Ctrl+K Ctrl+[  | 折叠（未折叠）所有子区域       |\n| Ctrl+K Ctrl+]  | 展开（未折叠）所有子区域       |\n| Ctrl + P | 转到文件      |\n| Ctrl + G | 转到行      |\n| F8  | 转到下一个错误或警告      |\n| Shift + F8  | 转到上一个错误或警告      |\n| Ctrl + Shift + Tab  | 导航编辑器组历史记录      |\n| Alt + ←/→  | 返回/前进      |\n| Ctrl + F  | 查找 Find      |\n| Ctrl + H  | 替换 Replace      |\n| F3 / Shift + F3  | 查找下一个/上一个      |\n| Alt + Enter  | 选择查找匹配的所有出现      |\n| F12  | 转到定义       |\n| Ctrl + K F12  | 打开定义到边        |\n| F12  | 转到定义       |\n| F12  | 转到定义       |\n| F12  | 转到定义       |\n\n\n\n\n\n\n\n","source":"_posts/vscode-shortcut-key.md","raw":"---\ntitle: vscode的快捷键\ndate: 2018-05-06 20:30:42\nauthor: T.2stt\ncomments: true\ntags:\n- [工具-vscode]\ncategories:\n- [工具,开发工具,vscode]\n---\n\n>此章节记载的是 vscode 快捷键，有助于代码的快速编辑（常用的）\n\n| 参数        | 类型    |\n| --------   | :-----:   |\n| Ctrl + Shift + N   | 新窗口      |\n| Ctrl + Shift + W   | 关闭窗口      |\n| Alt+ ↑ / ↓   | 向上/向下移动行      |\n| Shift+Alt + ↓ / ↑   | 向上/向下复制行      |\n| Alt+ ↑ / ↓   | 向上/向下移动行      |\n| Ctrl+Shift+K  | 删除行      |\n| Ctrl+Enter  | 在下面插入行      |\n| Ctrl+Shift+\\  | 跳到匹配的括号      |\n| Ctrl+] / [ | 缩进/缩进行      |\n| Home  | 转到行首      |\n| End  | 转到行尾    |\n| Ctrl+Home  | 转到文件开头      |\n| Ctrl+End  | 转到文件末尾      |\n| Alt+PgUp / PgDown  | 向上/向下滚动页面      |\n| Ctrl+Shift+[  | 折叠      |\n| Ctrl+Shift+]  | 展开      |\n| Ctrl+K Ctrl+[  | 折叠（未折叠）所有子区域       |\n| Ctrl+K Ctrl+]  | 展开（未折叠）所有子区域       |\n| Ctrl + P | 转到文件      |\n| Ctrl + G | 转到行      |\n| F8  | 转到下一个错误或警告      |\n| Shift + F8  | 转到上一个错误或警告      |\n| Ctrl + Shift + Tab  | 导航编辑器组历史记录      |\n| Alt + ←/→  | 返回/前进      |\n| Ctrl + F  | 查找 Find      |\n| Ctrl + H  | 替换 Replace      |\n| F3 / Shift + F3  | 查找下一个/上一个      |\n| Alt + Enter  | 选择查找匹配的所有出现      |\n| F12  | 转到定义       |\n| Ctrl + K F12  | 打开定义到边        |\n| F12  | 转到定义       |\n| F12  | 转到定义       |\n| F12  | 转到定义       |\n\n\n\n\n\n\n\n","slug":"vscode-shortcut-key","published":1,"updated":"2018-11-01T05:51:46.889Z","_id":"cjny0swht003k2kv7nypsbwxa","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是 vscode 快捷键，有助于代码的快速编辑（常用的）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + Shift + N</td>\n<td style=\"text-align:center\">新窗口</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + W</td>\n<td style=\"text-align:center\">关闭窗口</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行</td>\n</tr>\n<tr>\n<td>Shift+Alt + ↓ / ↑</td>\n<td style=\"text-align:center\">向上/向下复制行</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+K</td>\n<td style=\"text-align:center\">删除行</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td style=\"text-align:center\">在下面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+\\</td>\n<td style=\"text-align:center\">跳到匹配的括号</td>\n</tr>\n<tr>\n<td>Ctrl+] / [</td>\n<td style=\"text-align:center\">缩进/缩进行</td>\n</tr>\n<tr>\n<td>Home</td>\n<td style=\"text-align:center\">转到行首</td>\n</tr>\n<tr>\n<td>End</td>\n<td style=\"text-align:center\">转到行尾</td>\n</tr>\n<tr>\n<td>Ctrl+Home</td>\n<td style=\"text-align:center\">转到文件开头</td>\n</tr>\n<tr>\n<td>Ctrl+End</td>\n<td style=\"text-align:center\">转到文件末尾</td>\n</tr>\n<tr>\n<td>Alt+PgUp / PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+[</td>\n<td style=\"text-align:center\">折叠</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+]</td>\n<td style=\"text-align:center\">展开</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+[</td>\n<td style=\"text-align:center\">折叠（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+]</td>\n<td style=\"text-align:center\">展开（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td style=\"text-align:center\">转到文件</td>\n</tr>\n<tr>\n<td>Ctrl + G</td>\n<td style=\"text-align:center\">转到行</td>\n</tr>\n<tr>\n<td>F8</td>\n<td style=\"text-align:center\">转到下一个错误或警告</td>\n</tr>\n<tr>\n<td>Shift + F8</td>\n<td style=\"text-align:center\">转到上一个错误或警告</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Tab</td>\n<td style=\"text-align:center\">导航编辑器组历史记录</td>\n</tr>\n<tr>\n<td>Alt + ←/→</td>\n<td style=\"text-align:center\">返回/前进</td>\n</tr>\n<tr>\n<td>Ctrl + F</td>\n<td style=\"text-align:center\">查找 Find</td>\n</tr>\n<tr>\n<td>Ctrl + H</td>\n<td style=\"text-align:center\">替换 Replace</td>\n</tr>\n<tr>\n<td>F3 / Shift + F3</td>\n<td style=\"text-align:center\">查找下一个/上一个</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td style=\"text-align:center\">选择查找匹配的所有出现</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>Ctrl + K F12</td>\n<td style=\"text-align:center\">打开定义到边</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是 vscode 快捷键，有助于代码的快速编辑（常用的）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + Shift + N</td>\n<td style=\"text-align:center\">新窗口</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + W</td>\n<td style=\"text-align:center\">关闭窗口</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行</td>\n</tr>\n<tr>\n<td>Shift+Alt + ↓ / ↑</td>\n<td style=\"text-align:center\">向上/向下复制行</td>\n</tr>\n<tr>\n<td>Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+K</td>\n<td style=\"text-align:center\">删除行</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td style=\"text-align:center\">在下面插入行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+\\</td>\n<td style=\"text-align:center\">跳到匹配的括号</td>\n</tr>\n<tr>\n<td>Ctrl+] / [</td>\n<td style=\"text-align:center\">缩进/缩进行</td>\n</tr>\n<tr>\n<td>Home</td>\n<td style=\"text-align:center\">转到行首</td>\n</tr>\n<tr>\n<td>End</td>\n<td style=\"text-align:center\">转到行尾</td>\n</tr>\n<tr>\n<td>Ctrl+Home</td>\n<td style=\"text-align:center\">转到文件开头</td>\n</tr>\n<tr>\n<td>Ctrl+End</td>\n<td style=\"text-align:center\">转到文件末尾</td>\n</tr>\n<tr>\n<td>Alt+PgUp / PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+[</td>\n<td style=\"text-align:center\">折叠</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+]</td>\n<td style=\"text-align:center\">展开</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+[</td>\n<td style=\"text-align:center\">折叠（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl+K Ctrl+]</td>\n<td style=\"text-align:center\">展开（未折叠）所有子区域</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td style=\"text-align:center\">转到文件</td>\n</tr>\n<tr>\n<td>Ctrl + G</td>\n<td style=\"text-align:center\">转到行</td>\n</tr>\n<tr>\n<td>F8</td>\n<td style=\"text-align:center\">转到下一个错误或警告</td>\n</tr>\n<tr>\n<td>Shift + F8</td>\n<td style=\"text-align:center\">转到上一个错误或警告</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Tab</td>\n<td style=\"text-align:center\">导航编辑器组历史记录</td>\n</tr>\n<tr>\n<td>Alt + ←/→</td>\n<td style=\"text-align:center\">返回/前进</td>\n</tr>\n<tr>\n<td>Ctrl + F</td>\n<td style=\"text-align:center\">查找 Find</td>\n</tr>\n<tr>\n<td>Ctrl + H</td>\n<td style=\"text-align:center\">替换 Replace</td>\n</tr>\n<tr>\n<td>F3 / Shift + F3</td>\n<td style=\"text-align:center\">查找下一个/上一个</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td style=\"text-align:center\">选择查找匹配的所有出现</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>Ctrl + K F12</td>\n<td style=\"text-align:center\">打开定义到边</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n<tr>\n<td>F12</td>\n<td style=\"text-align:center\">转到定义</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vue2.0 基本语法1","date":"2018-02-23T10:16:06.000Z","author":"T.2stt","comments":1,"_content":">vuejs轻量级，MVVM 结构。一下是其基本语法，包括：简单的demo，以及API的描述（配置，公共API），模板渲染的前端框架（数据渲染，组件化/模块化其他功能：路由，ajax，数据流）等的介绍\n\n## 最简单的例子\n### demo\n``` bash \n<body>\n    <div id=\"app\">\n        <h1>姓名：{{ Name }}</h1>\n        <h1>年龄：{{ Age }}</h1>\n        <h1>学校：{{ School }}</h1>\n    </div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School:'光明小学',\n    }\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n### 解释\n``` bash\n1.Model就是data变量\n2.ViewModel就是这里的new Vue()得到的对象\n  2.1 el----表示绑定的Dom元素，此例子中表示的是父级的Dom元素\n  2.2 data----需要绑定的数据Model\n3.展示----{{变量}}--》{{ Name }}，值得一提的是{{变量}}这种写法仅仅只能实现单向绑定\n```\n## API\n### 全局配置 ---- Vue.config\n#### Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：\n属性 | 作用  | 用法\n---|---|---\n<font color=#0099ff size=3 face=\"黑体\">silent</font> | 是否禁止所有 Vue 的日志(log)与警告(warning) | Vue.config.silent = true\n<font color=#0099ff size=3 face=\"黑体\">optionMergeStrategies</font> | 用于定义选项(options)的自定义合并策略,合并策略函数分别接收的参数：定义在父实例上的选项(options)作为第一个参数，定义在子实例上的选项(options)作为第二个参数，Vue 实例上下文作为第三个参数传入。 | Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {<br /> return child + 1<br />}<br />const Profile = Vue.extend({<br />_my_option: 1<br />})<br />// Profile.options._my_option = 2\n<font color=#0099ff size=3 face=\"黑体\">devtools</font> | 是否允许 vue-devtools 审查应用程序。在开发版本的默认值是 true，在生产版本的默认值是 false。可以将生产版本的值设为 true，以启用审查 | Vue.config.devtools = true// 务必在加载 Vue 之后，立即同步设置以下内容\n<font color=#0099ff size=3 face=\"黑体\">errorHandler</font> | 设置一个处理函数，用于在组件渲染函数调用和 watcher 期间捕获错误。这个处理函数被调用时，传入 error 对象和 Vue 实例。 | Vue.config.errorHandler = function (err, vm, info) {<br/>// 处理错误,`info` 是 Vue 特有的错误信息，例如，错误是在哪个生命周期钩子函数中发现的<br/>}\n<font color=#0099ff size=3 face=\"黑体\">warnHandler</font> | 为运行时(runtime)下的 Vue 警告设置一个自定义处理函数。注意，这只会在开发环境下生效，在生产环境下设置会被忽略。 | Vue.config.warnHandler = function (msg, vm, trace) {<br/>// `trace` 是组件层级结构的追踪信息<br/>}\n<font color=#0099ff size=3 face=\"黑体\">ignoredElements</font> | 帮助 Vue 忽略不受 Vue 管理的自定义元素（例如，使用 Web Components API 的那些自定义元素）否则，Vue 会错误地认为你是忘记注册全局组件或将组件名称拼写错误，然后抛出一条Unknown custom element（意思是：未知的自定义元素）的警告 | Vue.config.ignoredElements = ['my-custom-web-component','another-web-component',// 使用`正则表达式(RegExp)`忽略所有以 \"ion-\" 开头的元素, // 仅在 2.5+ 版本中支持表达式用法,/^ion-/]\n<font color=#0099ff size=3 face=\"黑体\">keyCodes</font> | 设置 v-on 自定义按键别名。 |js: Vue.config.keyCodes = {<br/>v: 86,<br/>f1: 112,<br/>// 无法识别驼峰式命名(camelCase)<br/>mediaPlayPause: 179,<br/>// 可以识别的是双引号括起来的串联式命名(kebab-case)<br/>\"media-play-pause\": 179,up: [38, 87]} <br/>html:<<br/>input type=\"text\" @keyup.media-play-pause=\"method\"/<br/>>\n<font color=#0099ff size=3 face=\"黑体\">performance</font> | 设置为 true，以在浏览器开发工具 timeline 中，启用组件初始化(init)、编译(compile)、渲染(render)和修补(patch)的性能追踪。只能在开发模式和支持 performance.mark API 的浏览器中运行。| Vue.config.performance = true\n<font color=#0099ff size=3 face=\"黑体\">productionTip</font> | 设置为 false，以禁止在 Vue 启动时的生产提示。 | Vue.config.productionTip = false\n### 全局API\n\n#### Vue.extend\nVue.extend( options ) :使用 Vue 的基础构造函数，创建一个“子类(subclass)”。参数是一个包含组件选项的对象。\n\n#### Vue.nextTick\nVue.nextTick( [callback, context] )：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n#### Vue.set\nVue.set( target, key, value ):设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。\n\n#### Vue.delete\nVue.delete( target, key )：删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。\n\n#### Vue.directive\nVue.directive( id, [definition] )：注册或获取全局指令\n\n#### Vue.filter\nVue.filter( id, [definition] ):注册或获取全局过滤器。\n\n#### Vue.component\nVue.component( id, [definition] ):注册或获取全局组件。注册还会自动使用给定的id设置组件的名称\n\n#### Vue.use\nVue.use( plugin ):安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法将被作为 Vue 的参数调用。\n当 install 方法被同一个插件多次调用，插件将只会被安装一次。\n\n#### Vue.mixin\nVue.mixin( mixin ):全局注册一个混合，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混合，向组件注入自定义的行为。不推荐在应用代码中使用。\n\n#### Vue.compile\nVue.compile( template ):在render函数中编译模板字符串。只在完整构建时有效\n\n#### Vue.version\n提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。\n\n### 选择\n\n## 模板渲染\n``` bash\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n结果：\nOriginal message: \"Hello\"\nComputed reversed message: \"olleH\"\n```\n\n## 数据的双向绑定\n\n## 组件\n创建一个组件包括如下三个步骤\n### 定义\n\n### 注册\n\n### 创建根实例\n\n## 路由\n\n## ajax\n## 数据流\n","source":"_posts/vue-learn-1.md","raw":"---\ntitle: vue2.0 基本语法1\ndate: 2018-02-23 18:16:06\nauthor: T.2stt\ncomments: true\ntags:\n- vue\ncategories:\n- vue\n---\n>vuejs轻量级，MVVM 结构。一下是其基本语法，包括：简单的demo，以及API的描述（配置，公共API），模板渲染的前端框架（数据渲染，组件化/模块化其他功能：路由，ajax，数据流）等的介绍\n\n## 最简单的例子\n### demo\n``` bash \n<body>\n    <div id=\"app\">\n        <h1>姓名：{{ Name }}</h1>\n        <h1>年龄：{{ Age }}</h1>\n        <h1>学校：{{ School }}</h1>\n    </div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School:'光明小学',\n    }\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n### 解释\n``` bash\n1.Model就是data变量\n2.ViewModel就是这里的new Vue()得到的对象\n  2.1 el----表示绑定的Dom元素，此例子中表示的是父级的Dom元素\n  2.2 data----需要绑定的数据Model\n3.展示----{{变量}}--》{{ Name }}，值得一提的是{{变量}}这种写法仅仅只能实现单向绑定\n```\n## API\n### 全局配置 ---- Vue.config\n#### Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：\n属性 | 作用  | 用法\n---|---|---\n<font color=#0099ff size=3 face=\"黑体\">silent</font> | 是否禁止所有 Vue 的日志(log)与警告(warning) | Vue.config.silent = true\n<font color=#0099ff size=3 face=\"黑体\">optionMergeStrategies</font> | 用于定义选项(options)的自定义合并策略,合并策略函数分别接收的参数：定义在父实例上的选项(options)作为第一个参数，定义在子实例上的选项(options)作为第二个参数，Vue 实例上下文作为第三个参数传入。 | Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {<br /> return child + 1<br />}<br />const Profile = Vue.extend({<br />_my_option: 1<br />})<br />// Profile.options._my_option = 2\n<font color=#0099ff size=3 face=\"黑体\">devtools</font> | 是否允许 vue-devtools 审查应用程序。在开发版本的默认值是 true，在生产版本的默认值是 false。可以将生产版本的值设为 true，以启用审查 | Vue.config.devtools = true// 务必在加载 Vue 之后，立即同步设置以下内容\n<font color=#0099ff size=3 face=\"黑体\">errorHandler</font> | 设置一个处理函数，用于在组件渲染函数调用和 watcher 期间捕获错误。这个处理函数被调用时，传入 error 对象和 Vue 实例。 | Vue.config.errorHandler = function (err, vm, info) {<br/>// 处理错误,`info` 是 Vue 特有的错误信息，例如，错误是在哪个生命周期钩子函数中发现的<br/>}\n<font color=#0099ff size=3 face=\"黑体\">warnHandler</font> | 为运行时(runtime)下的 Vue 警告设置一个自定义处理函数。注意，这只会在开发环境下生效，在生产环境下设置会被忽略。 | Vue.config.warnHandler = function (msg, vm, trace) {<br/>// `trace` 是组件层级结构的追踪信息<br/>}\n<font color=#0099ff size=3 face=\"黑体\">ignoredElements</font> | 帮助 Vue 忽略不受 Vue 管理的自定义元素（例如，使用 Web Components API 的那些自定义元素）否则，Vue 会错误地认为你是忘记注册全局组件或将组件名称拼写错误，然后抛出一条Unknown custom element（意思是：未知的自定义元素）的警告 | Vue.config.ignoredElements = ['my-custom-web-component','another-web-component',// 使用`正则表达式(RegExp)`忽略所有以 \"ion-\" 开头的元素, // 仅在 2.5+ 版本中支持表达式用法,/^ion-/]\n<font color=#0099ff size=3 face=\"黑体\">keyCodes</font> | 设置 v-on 自定义按键别名。 |js: Vue.config.keyCodes = {<br/>v: 86,<br/>f1: 112,<br/>// 无法识别驼峰式命名(camelCase)<br/>mediaPlayPause: 179,<br/>// 可以识别的是双引号括起来的串联式命名(kebab-case)<br/>\"media-play-pause\": 179,up: [38, 87]} <br/>html:<<br/>input type=\"text\" @keyup.media-play-pause=\"method\"/<br/>>\n<font color=#0099ff size=3 face=\"黑体\">performance</font> | 设置为 true，以在浏览器开发工具 timeline 中，启用组件初始化(init)、编译(compile)、渲染(render)和修补(patch)的性能追踪。只能在开发模式和支持 performance.mark API 的浏览器中运行。| Vue.config.performance = true\n<font color=#0099ff size=3 face=\"黑体\">productionTip</font> | 设置为 false，以禁止在 Vue 启动时的生产提示。 | Vue.config.productionTip = false\n### 全局API\n\n#### Vue.extend\nVue.extend( options ) :使用 Vue 的基础构造函数，创建一个“子类(subclass)”。参数是一个包含组件选项的对象。\n\n#### Vue.nextTick\nVue.nextTick( [callback, context] )：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n#### Vue.set\nVue.set( target, key, value ):设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。\n\n#### Vue.delete\nVue.delete( target, key )：删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。\n\n#### Vue.directive\nVue.directive( id, [definition] )：注册或获取全局指令\n\n#### Vue.filter\nVue.filter( id, [definition] ):注册或获取全局过滤器。\n\n#### Vue.component\nVue.component( id, [definition] ):注册或获取全局组件。注册还会自动使用给定的id设置组件的名称\n\n#### Vue.use\nVue.use( plugin ):安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法将被作为 Vue 的参数调用。\n当 install 方法被同一个插件多次调用，插件将只会被安装一次。\n\n#### Vue.mixin\nVue.mixin( mixin ):全局注册一个混合，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混合，向组件注入自定义的行为。不推荐在应用代码中使用。\n\n#### Vue.compile\nVue.compile( template ):在render函数中编译模板字符串。只在完整构建时有效\n\n#### Vue.version\n提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。\n\n### 选择\n\n## 模板渲染\n``` bash\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n结果：\nOriginal message: \"Hello\"\nComputed reversed message: \"olleH\"\n```\n\n## 数据的双向绑定\n\n## 组件\n创建一个组件包括如下三个步骤\n### 定义\n\n### 注册\n\n### 创建根实例\n\n## 路由\n\n## ajax\n## 数据流\n","slug":"vue-learn-1","published":1,"updated":"2018-07-30T01:55:33.675Z","layout":"post","photos":[],"link":"","_id":"cjny0swi0003r2kv7yjd1oe94","content":"<blockquote>\n<p>vuejs轻量级，MVVM 结构。一下是其基本语法，包括：简单的demo，以及API的描述（配置，公共API），模板渲染的前端框架（数据渲染，组件化/模块化其他功能：路由，ajax，数据流）等的介绍</p>\n</blockquote>\n<h2 id=\"最简单的例子\"><a href=\"#最简单的例子\" class=\"headerlink\" title=\"最简单的例子\"></a>最简单的例子</h2><h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"Content/vue/dist/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School:<span class=\"string\">'光明小学'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Model就是data变量</span><br><span class=\"line\">2.ViewModel就是这里的new Vue()得到的对象</span><br><span class=\"line\">  2.1 el----表示绑定的Dom元素，此例子中表示的是父级的Dom元素</span><br><span class=\"line\">  2.2 data----需要绑定的数据Model</span><br><span class=\"line\">3.展示----&#123;&#123;变量&#125;&#125;--》&#123;&#123; Name &#125;&#125;，值得一提的是&#123;&#123;变量&#125;&#125;这种写法仅仅只能实现单向绑定</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"全局配置-—-Vue-config\"><a href=\"#全局配置-—-Vue-config\" class=\"headerlink\" title=\"全局配置 —- Vue.config\"></a>全局配置 —- Vue.config</h3><h4 id=\"Vue-config-是一个对象，包含-Vue-的全局配置。可以在启动应用之前，预先修改下列属性：\"><a href=\"#Vue-config-是一个对象，包含-Vue-的全局配置。可以在启动应用之前，预先修改下列属性：\" class=\"headerlink\" title=\"Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：\"></a>Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">silent</font></td>\n<td>是否禁止所有 Vue 的日志(log)与警告(warning)</td>\n<td>Vue.config.silent = true</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">optionMergeStrategies</font></td>\n<td>用于定义选项(options)的自定义合并策略,合并策略函数分别接收的参数：定义在父实例上的选项(options)作为第一个参数，定义在子实例上的选项(options)作为第二个参数，Vue 实例上下文作为第三个参数传入。</td>\n<td>Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {<br> return child + 1<br>}<br>const Profile = Vue.extend({<br>_my_option: 1<br>})<br>// Profile.options._my_option = 2</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">devtools</font></td>\n<td>是否允许 vue-devtools 审查应用程序。在开发版本的默认值是 true，在生产版本的默认值是 false。可以将生产版本的值设为 true，以启用审查</td>\n<td>Vue.config.devtools = true// 务必在加载 Vue 之后，立即同步设置以下内容</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">errorHandler</font></td>\n<td>设置一个处理函数，用于在组件渲染函数调用和 watcher 期间捕获错误。这个处理函数被调用时，传入 error 对象和 Vue 实例。</td>\n<td>Vue.config.errorHandler = function (err, vm, info) {<br>// 处理错误,<code>info</code> 是 Vue 特有的错误信息，例如，错误是在哪个生命周期钩子函数中发现的<br>}</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">warnHandler</font></td>\n<td>为运行时(runtime)下的 Vue 警告设置一个自定义处理函数。注意，这只会在开发环境下生效，在生产环境下设置会被忽略。</td>\n<td>Vue.config.warnHandler = function (msg, vm, trace) {<br>// <code>trace</code> 是组件层级结构的追踪信息<br>}</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">ignoredElements</font></td>\n<td>帮助 Vue 忽略不受 Vue 管理的自定义元素（例如，使用 Web Components API 的那些自定义元素）否则，Vue 会错误地认为你是忘记注册全局组件或将组件名称拼写错误，然后抛出一条Unknown custom element（意思是：未知的自定义元素）的警告</td>\n<td>Vue.config.ignoredElements = [‘my-custom-web-component’,’another-web-component’,// 使用<code>正则表达式(RegExp)</code>忽略所有以 “ion-“ 开头的元素, // 仅在 2.5+ 版本中支持表达式用法,/^ion-/]</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">keyCodes</font></td>\n<td>设置 v-on 自定义按键别名。</td>\n<td>js: Vue.config.keyCodes = {<br>v: 86,<br>f1: 112,<br>// 无法识别驼峰式命名(camelCase)<br>mediaPlayPause: 179,<br>// 可以识别的是双引号括起来的串联式命名(kebab-case)<br>“media-play-pause”: 179,up: [38, 87]} <br>html:&lt;<br>input type=”text” @keyup.media-play-pause=”method”/<br>&gt;</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">performance</font></td>\n<td>设置为 true，以在浏览器开发工具 timeline 中，启用组件初始化(init)、编译(compile)、渲染(render)和修补(patch)的性能追踪。只能在开发模式和支持 performance.mark API 的浏览器中运行。</td>\n<td>Vue.config.performance = true</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">productionTip</font></td>\n<td>设置为 false，以禁止在 Vue 启动时的生产提示。</td>\n<td>Vue.config.productionTip = false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h3><h4 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h4><p>Vue.extend( options ) :使用 Vue 的基础构造函数，创建一个“子类(subclass)”。参数是一个包含组件选项的对象。</p>\n<h4 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick\"></a>Vue.nextTick</h4><p>Vue.nextTick( [callback, context] )：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n<h4 id=\"Vue-set\"><a href=\"#Vue-set\" class=\"headerlink\" title=\"Vue.set\"></a>Vue.set</h4><p>Vue.set( target, key, value ):设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p>\n<h4 id=\"Vue-delete\"><a href=\"#Vue-delete\" class=\"headerlink\" title=\"Vue.delete\"></a>Vue.delete</h4><p>Vue.delete( target, key )：删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。</p>\n<h4 id=\"Vue-directive\"><a href=\"#Vue-directive\" class=\"headerlink\" title=\"Vue.directive\"></a>Vue.directive</h4><p>Vue.directive( id, [definition] )：注册或获取全局指令</p>\n<h4 id=\"Vue-filter\"><a href=\"#Vue-filter\" class=\"headerlink\" title=\"Vue.filter\"></a>Vue.filter</h4><p>Vue.filter( id, [definition] ):注册或获取全局过滤器。</p>\n<h4 id=\"Vue-component\"><a href=\"#Vue-component\" class=\"headerlink\" title=\"Vue.component\"></a>Vue.component</h4><p>Vue.component( id, [definition] ):注册或获取全局组件。注册还会自动使用给定的id设置组件的名称</p>\n<h4 id=\"Vue-use\"><a href=\"#Vue-use\" class=\"headerlink\" title=\"Vue.use\"></a>Vue.use</h4><p>Vue.use( plugin ):安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法将被作为 Vue 的参数调用。<br>当 install 方法被同一个插件多次调用，插件将只会被安装一次。</p>\n<h4 id=\"Vue-mixin\"><a href=\"#Vue-mixin\" class=\"headerlink\" title=\"Vue.mixin\"></a>Vue.mixin</h4><p>Vue.mixin( mixin ):全局注册一个混合，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混合，向组件注入自定义的行为。不推荐在应用代码中使用。</p>\n<h4 id=\"Vue-compile\"><a href=\"#Vue-compile\" class=\"headerlink\" title=\"Vue.compile\"></a>Vue.compile</h4><p>Vue.compile( template ):在render函数中编译模板字符串。只在完整构建时有效</p>\n<h4 id=\"Vue-version\"><a href=\"#Vue-version\" class=\"headerlink\" title=\"Vue.version\"></a>Vue.version</h4><p>提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。</p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><h2 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;Original message: <span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span>&lt;/p&gt;</span><br><span class=\"line\">  &lt;p&gt;Computed reversed message: <span class=\"string\">\"&#123;&#123; reversedMessage &#125;&#125;\"</span>&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    // a computed getter</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">      // `this` points to the vm instance</span><br><span class=\"line\">      <span class=\"built_in\">return</span> this.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">结果：</span><br><span class=\"line\">Original message: <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">Computed reversed message: <span class=\"string\">\"olleH\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据的双向绑定\"><a href=\"#数据的双向绑定\" class=\"headerlink\" title=\"数据的双向绑定\"></a>数据的双向绑定</h2><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>创建一个组件包括如下三个步骤</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><h3 id=\"创建根实例\"><a href=\"#创建根实例\" class=\"headerlink\" title=\"创建根实例\"></a>创建根实例</h3><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><h2 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>vuejs轻量级，MVVM 结构。一下是其基本语法，包括：简单的demo，以及API的描述（配置，公共API），模板渲染的前端框架（数据渲染，组件化/模块化其他功能：路由，ajax，数据流）等的介绍</p>\n</blockquote>\n<h2 id=\"最简单的例子\"><a href=\"#最简单的例子\" class=\"headerlink\" title=\"最简单的例子\"></a>最简单的例子</h2><h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"Content/vue/dist/vue.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School:<span class=\"string\">'光明小学'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Model就是data变量</span><br><span class=\"line\">2.ViewModel就是这里的new Vue()得到的对象</span><br><span class=\"line\">  2.1 el----表示绑定的Dom元素，此例子中表示的是父级的Dom元素</span><br><span class=\"line\">  2.2 data----需要绑定的数据Model</span><br><span class=\"line\">3.展示----&#123;&#123;变量&#125;&#125;--》&#123;&#123; Name &#125;&#125;，值得一提的是&#123;&#123;变量&#125;&#125;这种写法仅仅只能实现单向绑定</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"全局配置-—-Vue-config\"><a href=\"#全局配置-—-Vue-config\" class=\"headerlink\" title=\"全局配置 —- Vue.config\"></a>全局配置 —- Vue.config</h3><h4 id=\"Vue-config-是一个对象，包含-Vue-的全局配置。可以在启动应用之前，预先修改下列属性：\"><a href=\"#Vue-config-是一个对象，包含-Vue-的全局配置。可以在启动应用之前，预先修改下列属性：\" class=\"headerlink\" title=\"Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：\"></a>Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前，预先修改下列属性：</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">silent</font></td>\n<td>是否禁止所有 Vue 的日志(log)与警告(warning)</td>\n<td>Vue.config.silent = true</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">optionMergeStrategies</font></td>\n<td>用于定义选项(options)的自定义合并策略,合并策略函数分别接收的参数：定义在父实例上的选项(options)作为第一个参数，定义在子实例上的选项(options)作为第二个参数，Vue 实例上下文作为第三个参数传入。</td>\n<td>Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {<br> return child + 1<br>}<br>const Profile = Vue.extend({<br>_my_option: 1<br>})<br>// Profile.options._my_option = 2</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">devtools</font></td>\n<td>是否允许 vue-devtools 审查应用程序。在开发版本的默认值是 true，在生产版本的默认值是 false。可以将生产版本的值设为 true，以启用审查</td>\n<td>Vue.config.devtools = true// 务必在加载 Vue 之后，立即同步设置以下内容</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">errorHandler</font></td>\n<td>设置一个处理函数，用于在组件渲染函数调用和 watcher 期间捕获错误。这个处理函数被调用时，传入 error 对象和 Vue 实例。</td>\n<td>Vue.config.errorHandler = function (err, vm, info) {<br>// 处理错误,<code>info</code> 是 Vue 特有的错误信息，例如，错误是在哪个生命周期钩子函数中发现的<br>}</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">warnHandler</font></td>\n<td>为运行时(runtime)下的 Vue 警告设置一个自定义处理函数。注意，这只会在开发环境下生效，在生产环境下设置会被忽略。</td>\n<td>Vue.config.warnHandler = function (msg, vm, trace) {<br>// <code>trace</code> 是组件层级结构的追踪信息<br>}</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">ignoredElements</font></td>\n<td>帮助 Vue 忽略不受 Vue 管理的自定义元素（例如，使用 Web Components API 的那些自定义元素）否则，Vue 会错误地认为你是忘记注册全局组件或将组件名称拼写错误，然后抛出一条Unknown custom element（意思是：未知的自定义元素）的警告</td>\n<td>Vue.config.ignoredElements = [‘my-custom-web-component’,’another-web-component’,// 使用<code>正则表达式(RegExp)</code>忽略所有以 “ion-“ 开头的元素, // 仅在 2.5+ 版本中支持表达式用法,/^ion-/]</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">keyCodes</font></td>\n<td>设置 v-on 自定义按键别名。</td>\n<td>js: Vue.config.keyCodes = {<br>v: 86,<br>f1: 112,<br>// 无法识别驼峰式命名(camelCase)<br>mediaPlayPause: 179,<br>// 可以识别的是双引号括起来的串联式命名(kebab-case)<br>“media-play-pause”: 179,up: [38, 87]} <br>html:&lt;<br>input type=”text” @keyup.media-play-pause=”method”/<br>&gt;</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">performance</font></td>\n<td>设置为 true，以在浏览器开发工具 timeline 中，启用组件初始化(init)、编译(compile)、渲染(render)和修补(patch)的性能追踪。只能在开发模式和支持 performance.mark API 的浏览器中运行。</td>\n<td>Vue.config.performance = true</td>\n</tr>\n<tr>\n<td><font color=\"#0099ff\" size=\"3\" face=\"黑体\">productionTip</font></td>\n<td>设置为 false，以禁止在 Vue 启动时的生产提示。</td>\n<td>Vue.config.productionTip = false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h3><h4 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h4><p>Vue.extend( options ) :使用 Vue 的基础构造函数，创建一个“子类(subclass)”。参数是一个包含组件选项的对象。</p>\n<h4 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.nextTick\"></a>Vue.nextTick</h4><p>Vue.nextTick( [callback, context] )：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n<h4 id=\"Vue-set\"><a href=\"#Vue-set\" class=\"headerlink\" title=\"Vue.set\"></a>Vue.set</h4><p>Vue.set( target, key, value ):设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p>\n<h4 id=\"Vue-delete\"><a href=\"#Vue-delete\" class=\"headerlink\" title=\"Vue.delete\"></a>Vue.delete</h4><p>Vue.delete( target, key )：删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。</p>\n<h4 id=\"Vue-directive\"><a href=\"#Vue-directive\" class=\"headerlink\" title=\"Vue.directive\"></a>Vue.directive</h4><p>Vue.directive( id, [definition] )：注册或获取全局指令</p>\n<h4 id=\"Vue-filter\"><a href=\"#Vue-filter\" class=\"headerlink\" title=\"Vue.filter\"></a>Vue.filter</h4><p>Vue.filter( id, [definition] ):注册或获取全局过滤器。</p>\n<h4 id=\"Vue-component\"><a href=\"#Vue-component\" class=\"headerlink\" title=\"Vue.component\"></a>Vue.component</h4><p>Vue.component( id, [definition] ):注册或获取全局组件。注册还会自动使用给定的id设置组件的名称</p>\n<h4 id=\"Vue-use\"><a href=\"#Vue-use\" class=\"headerlink\" title=\"Vue.use\"></a>Vue.use</h4><p>Vue.use( plugin ):安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法将被作为 Vue 的参数调用。<br>当 install 方法被同一个插件多次调用，插件将只会被安装一次。</p>\n<h4 id=\"Vue-mixin\"><a href=\"#Vue-mixin\" class=\"headerlink\" title=\"Vue.mixin\"></a>Vue.mixin</h4><p>Vue.mixin( mixin ):全局注册一个混合，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混合，向组件注入自定义的行为。不推荐在应用代码中使用。</p>\n<h4 id=\"Vue-compile\"><a href=\"#Vue-compile\" class=\"headerlink\" title=\"Vue.compile\"></a>Vue.compile</h4><p>Vue.compile( template ):在render函数中编译模板字符串。只在完整构建时有效</p>\n<h4 id=\"Vue-version\"><a href=\"#Vue-version\" class=\"headerlink\" title=\"Vue.version\"></a>Vue.version</h4><p>提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。</p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><h2 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;Original message: <span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span>&lt;/p&gt;</span><br><span class=\"line\">  &lt;p&gt;Computed reversed message: <span class=\"string\">\"&#123;&#123; reversedMessage &#125;&#125;\"</span>&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    // a computed getter</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">      // `this` points to the vm instance</span><br><span class=\"line\">      <span class=\"built_in\">return</span> this.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">结果：</span><br><span class=\"line\">Original message: <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">Computed reversed message: <span class=\"string\">\"olleH\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据的双向绑定\"><a href=\"#数据的双向绑定\" class=\"headerlink\" title=\"数据的双向绑定\"></a>数据的双向绑定</h2><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>创建一个组件包括如下三个步骤</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><h3 id=\"创建根实例\"><a href=\"#创建根实例\" class=\"headerlink\" title=\"创建根实例\"></a>创建根实例</h3><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h2 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h2><h2 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h2>"},{"title":"vue2.0 常用指令","date":"2018-02-28T00:14:50.000Z","author":"T.2stt","comments":1,"_content":"##### [官网](https://vuefe.cn/v2/api/#v-bind)\n##### v-text、v-html\nv-text、v-html这两者分为一组很好理解，一个用于绑定文本，一个用于绑定html。上文使用到的 {{ Name }}这种写法就是v-text的的缩写形式，数据的单向绑定\n```\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>姓名：{{ Name }}</h1>\n        <div style=\"font-size:30px;font-weight:bold;\" v-html=\"Age\">年龄：</div>\n    </div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: \"<label>20</label>\",\n        School:'光明小学',\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n\n注意v-text和v-html绑定都是单向的，只能从Model到View的绑定，不能实现View到Model的更新。\n```\n##### v-model\nvue限定只能对表单控件进行绑定,数据双向绑定\n```\n常见的有<input>、<select>、<textarea>等。\n\n-------------------------------------------修饰符\n.lazy - 取代 input 监听 change 事件\n\t<!-- 在触发 \"change\" 事件后同步，而不是在触发 \"input\" 事件后更新 -->\n\t<input v-model.lazy=\"msg\" >\n.number - 输入字符串转为数字\n\t<input v-model.number=\"age\" type=\"number\">\n\t这通常很有用，因为即使是在 type=\"number\" 时，HTML 中 input 元素也总是返回一个字符串类型的值。\n.trim - 输入首尾空格过滤\n\t<input v-model.trim=\"msg\">\n\t\n-------------------------------------------例子\n<body>\n    <div id=\"app\">\n        <h2>编辑姓名：<input type=\"text\" v-model=\"Name\" /></h2>\n        <h2>姓名：{{Name}}</h2>\n        <hr />\n        <h2>编辑备注：<textarea v-model=\"Remark\"></textarea></h2>\n        <h2>备注：{{Remark}}</h2>\n        <hr />\n        <input type=\"checkbox\" id=\"basketball\" value=\"篮球\" v-model=\"Hobby\">\n        <label for=\"basketball\">篮球</label>\n        <input type=\"checkbox\" id=\"football\" value=\"足球\" v-model=\"Hobby\">\n        <label for=\"football\">足球</label>\n        <input type=\"checkbox\" id=\"running\" value=\"跑步\" v-model=\"Hobby\">\n        <label for=\"running\">跑步</label>\n        <br>\n        <h2>学生爱好： {{ Hobby }}</h2>\n        <hr />\n        <h2>户籍：{{ Huji }}</h2>\n        <select style=\"width:100px;\" class=\"form-control\" v-model=\"Huji\">\n            <option>湖南</option>\n            <option>广东</option>\n            <option>北京</option>\n        </select>\n</div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School: '光明小学',\n        Hobby: [],\n        Remark: '三好学生',\n        Huji:\"\"\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-if、v-else、v-else-if\nv-if可以单独使用，\nv-else的前面必须要有一个v-if的条件或者v-show指令，\n v-else-if前一兄弟元素必须有 v-if 或 v-else-if\n```\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>是否已婚：<span v-if=\"IsMarry\">是</span></h1>\n        <h1>大人or小孩：<span v-if=\"Age>18\">大人</span><span v-else>小屁孩</span></h1>\n        <h1>学校：{{ School }}</h1>\n    </div>\n\t<div v-if=\"type === 'A'\">\n\t  A\n\t</div>\n\t<div v-else-if=\"type === 'B'\">\n\t  B\n\t</div>\n\t<div v-else-if=\"type === 'C'\">\n\t  C\n\t</div>\n\t<div v-else>\n\t  Not A/B/C\n\t</div>\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        IsMarry: true,\n        Age: 20,\n        School:'光明小学',\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-show\n根据表达式之真假值，切换元素的 display CSS 属性。当条件变化时该指令触发过渡效果。\n\n##### v-bind\n对于html标签的text、value等属性，Vue里面提供了v-text、v-model去绑定。但是对于除此之外的其他属性呢，这就要用到接下来要讲的v-bind指令了。\nv-bind的作用是绑定除了text、value之外的其他html标签属性，常见的比如class、style、自定义标签的自定义属性等。\n（动态地绑定一个或多个特性，或一个组件 prop 到表达式）\n它的语法如下：\n```\n <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title></title>\n    <link href=\"Content/bootstrap/css/bootstrap.css\" rel=\"stylesheet\" />\n    <style type=\"text/css\">\n        .class1 {\n            padding:20px;\n        }\n        .backred {\n            background-color:red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>是否红领巾：<span class=\"class1\" v-bind:class=\"{backred:IsBack}\"><label v-if=\"IsBack\">是</label></span></h1>\n        <h1>学校星级：<span v-bind:style=\"{color:SchoolLevel}\">aa</span></h1>\n    </div>\n    \n    <!-- 绑定一个属性 -->\n\t<img v-bind:src=\"imageSrc\">\n\t<!-- 缩写 -->\n\t<img :src=\"imageSrc\">\n\t<!-- 内联字符串拼接 -->\n\t<img :src=\"'/path/to/images/' + fileName\">\n\t\n\t<!-- class 绑定 -->\n\t<div :class=\"{ red: isRed }\"></div>\n\t<div :class=\"[classA, classB]\"></div>\n\t<div :class=\"[classA, { classB: isB, classC: isC }]\">\n\t\n\t<!-- style 绑定 -->\n\t<div :style=\"{ fontSize: size + 'px' }\"></div>\n\t<div :style=\"[styleObjectA, styleObjectB]\"></div>\n\t\n\t<!-- 绑定一个有属性的对象 -->\n\t<div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\t\n\t<!-- 通过 prop 修饰符绑定 DOM 属性 -->\n\t<div v-bind:text-content.prop=\"text\"></div>\n\t\n\t<!-- prop 绑定. “prop” 必须在 my-component 中声明。 -->\n\t<my-component :prop=\"someThing\"></my-component>\n\t\n\t<!-- 通过 $props 将父组件的 props 一起传给子组件 -->\n\t<child-component v-bind=\"$props\"></child-component>\n\t\n\t<!-- XLink -->\n\t<svg><a :xlink:special=\"foo\"></a></svg>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School: '光明小学',\n        SchoolLevel: 'red',\n        IsBack:true\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-on\n在Vue里面，v-on指令用来绑定标签的事件，其语法和v-bind基本类似。\n缩写： @\n```\n<div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>年龄：{{ Age }}</h1>\n        <button class=\"btn btn-primary\" v-on:click=\"Age++;if(Name=='小明')Name='吉姆格林';else Name='小明';\">\n        \t年龄递增\n        </button>\n    </div>\n\t<!-- 方法处理器 -->\n\t<button v-on:click=\"doThis\"></button>\n\t\n\t<!-- 对象语法 (2.4.0+) -->\n\t<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n\t\n\t<!-- 内联语句 -->\n\t<button v-on:click=\"doThat('hello', $event)\"></button>\n\t\n\t<!-- 缩写 -->\n\t<button @click=\"doThis\"></button>\n\t\n\t<!-- 停止冒泡 -->\n\t<button @click.stop=\"doThis\"></button>\n\t\n\t<!-- 阻止默认行为 -->\n\t<button @click.prevent=\"doThis\"></button>\n\t\n\t<!-- 阻止默认行为，没有表达式 -->\n\t<form @submit.prevent></form>\n\t\n\t<!--  串联修饰符 -->\n\t<button @click.stop.prevent=\"doThis\"></button>\n\t\n\t<!-- 键修饰符，键别名 -->\n\t<input @keyup.enter=\"onEnter\">\n\t\n\t<!-- 键修饰符，键代码 -->\n\t<input @keyup.13=\"onEnter\">\n\t\n\t<!-- 点击回调只会触发一次 -->\n\t<button v-on:click.once=\"doThis\"></button>\n\t\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n    }\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n```\n\n##### v-for\n```bash\n\t<div v-for=\"item in items\">\n\t  {{ item.text }}\n\t</div>\n\t另外也可以为数组索引指定别名（或者用于对象的键）：\n\t<div v-for=\"(item, index) in items\"></div>\n\t<div v-for=\"(val, key) in object\"></div>\n\t<div v-for=\"(val, key, index) in object\"></div>\n\t迫使其重新排序的元素,你需要提供一个 key 的特殊属性:类似于ng1中的track-by\n\t<div v-for=\"item in items\" :key=\"item.id\">\n\t  {{ item.text }}\n\t</div>\n```\n\n##### v-pre\n``` bash\n\t<span v-pre>{{ this will not be compiled }}</span\n```\n\n##### v-cloak\n```bash\ncss\n\t[v-cloak] {\n\t  display: none;\n\t}\nhtml\n\t<div v-cloak>\n\t  {{ message }}\n\t</div>\n```\n\n##### v-once\n只渲染元素和组件一次","source":"_posts/vue-learn-2.md","raw":"---\ntitle:  vue2.0 常用指令\ndate: 2018-02-28 08:14:50\nauthor: T.2stt\ncomments: true\ntags:\n- vue\n- js\ncategories:\n- vue\n---\n##### [官网](https://vuefe.cn/v2/api/#v-bind)\n##### v-text、v-html\nv-text、v-html这两者分为一组很好理解，一个用于绑定文本，一个用于绑定html。上文使用到的 {{ Name }}这种写法就是v-text的的缩写形式，数据的单向绑定\n```\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>姓名：{{ Name }}</h1>\n        <div style=\"font-size:30px;font-weight:bold;\" v-html=\"Age\">年龄：</div>\n    </div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: \"<label>20</label>\",\n        School:'光明小学',\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n\n注意v-text和v-html绑定都是单向的，只能从Model到View的绑定，不能实现View到Model的更新。\n```\n##### v-model\nvue限定只能对表单控件进行绑定,数据双向绑定\n```\n常见的有<input>、<select>、<textarea>等。\n\n-------------------------------------------修饰符\n.lazy - 取代 input 监听 change 事件\n\t<!-- 在触发 \"change\" 事件后同步，而不是在触发 \"input\" 事件后更新 -->\n\t<input v-model.lazy=\"msg\" >\n.number - 输入字符串转为数字\n\t<input v-model.number=\"age\" type=\"number\">\n\t这通常很有用，因为即使是在 type=\"number\" 时，HTML 中 input 元素也总是返回一个字符串类型的值。\n.trim - 输入首尾空格过滤\n\t<input v-model.trim=\"msg\">\n\t\n-------------------------------------------例子\n<body>\n    <div id=\"app\">\n        <h2>编辑姓名：<input type=\"text\" v-model=\"Name\" /></h2>\n        <h2>姓名：{{Name}}</h2>\n        <hr />\n        <h2>编辑备注：<textarea v-model=\"Remark\"></textarea></h2>\n        <h2>备注：{{Remark}}</h2>\n        <hr />\n        <input type=\"checkbox\" id=\"basketball\" value=\"篮球\" v-model=\"Hobby\">\n        <label for=\"basketball\">篮球</label>\n        <input type=\"checkbox\" id=\"football\" value=\"足球\" v-model=\"Hobby\">\n        <label for=\"football\">足球</label>\n        <input type=\"checkbox\" id=\"running\" value=\"跑步\" v-model=\"Hobby\">\n        <label for=\"running\">跑步</label>\n        <br>\n        <h2>学生爱好： {{ Hobby }}</h2>\n        <hr />\n        <h2>户籍：{{ Huji }}</h2>\n        <select style=\"width:100px;\" class=\"form-control\" v-model=\"Huji\">\n            <option>湖南</option>\n            <option>广东</option>\n            <option>北京</option>\n        </select>\n</div>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School: '光明小学',\n        Hobby: [],\n        Remark: '三好学生',\n        Huji:\"\"\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-if、v-else、v-else-if\nv-if可以单独使用，\nv-else的前面必须要有一个v-if的条件或者v-show指令，\n v-else-if前一兄弟元素必须有 v-if 或 v-else-if\n```\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>是否已婚：<span v-if=\"IsMarry\">是</span></h1>\n        <h1>大人or小孩：<span v-if=\"Age>18\">大人</span><span v-else>小屁孩</span></h1>\n        <h1>学校：{{ School }}</h1>\n    </div>\n\t<div v-if=\"type === 'A'\">\n\t  A\n\t</div>\n\t<div v-else-if=\"type === 'B'\">\n\t  B\n\t</div>\n\t<div v-else-if=\"type === 'C'\">\n\t  C\n\t</div>\n\t<div v-else>\n\t  Not A/B/C\n\t</div>\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        IsMarry: true,\n        Age: 20,\n        School:'光明小学',\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-show\n根据表达式之真假值，切换元素的 display CSS 属性。当条件变化时该指令触发过渡效果。\n\n##### v-bind\n对于html标签的text、value等属性，Vue里面提供了v-text、v-model去绑定。但是对于除此之外的其他属性呢，这就要用到接下来要讲的v-bind指令了。\nv-bind的作用是绑定除了text、value之外的其他html标签属性，常见的比如class、style、自定义标签的自定义属性等。\n（动态地绑定一个或多个特性，或一个组件 prop 到表达式）\n它的语法如下：\n```\n <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title></title>\n    <link href=\"Content/bootstrap/css/bootstrap.css\" rel=\"stylesheet\" />\n    <style type=\"text/css\">\n        .class1 {\n            padding:20px;\n        }\n        .backred {\n            background-color:red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>是否红领巾：<span class=\"class1\" v-bind:class=\"{backred:IsBack}\"><label v-if=\"IsBack\">是</label></span></h1>\n        <h1>学校星级：<span v-bind:style=\"{color:SchoolLevel}\">aa</span></h1>\n    </div>\n    \n    <!-- 绑定一个属性 -->\n\t<img v-bind:src=\"imageSrc\">\n\t<!-- 缩写 -->\n\t<img :src=\"imageSrc\">\n\t<!-- 内联字符串拼接 -->\n\t<img :src=\"'/path/to/images/' + fileName\">\n\t\n\t<!-- class 绑定 -->\n\t<div :class=\"{ red: isRed }\"></div>\n\t<div :class=\"[classA, classB]\"></div>\n\t<div :class=\"[classA, { classB: isB, classC: isC }]\">\n\t\n\t<!-- style 绑定 -->\n\t<div :style=\"{ fontSize: size + 'px' }\"></div>\n\t<div :style=\"[styleObjectA, styleObjectB]\"></div>\n\t\n\t<!-- 绑定一个有属性的对象 -->\n\t<div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\t\n\t<!-- 通过 prop 修饰符绑定 DOM 属性 -->\n\t<div v-bind:text-content.prop=\"text\"></div>\n\t\n\t<!-- prop 绑定. “prop” 必须在 my-component 中声明。 -->\n\t<my-component :prop=\"someThing\"></my-component>\n\t\n\t<!-- 通过 $props 将父组件的 props 一起传给子组件 -->\n\t<child-component v-bind=\"$props\"></child-component>\n\t\n\t<!-- XLink -->\n\t<svg><a :xlink:special=\"foo\"></a></svg>\n\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n        School: '光明小学',\n        SchoolLevel: 'red',\n        IsBack:true\n    }\n\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n</body>\n```\n##### v-on\n在Vue里面，v-on指令用来绑定标签的事件，其语法和v-bind基本类似。\n缩写： @\n```\n<div id=\"app\">\n        <h1>姓名：<label v-text=\"Name\"></label></h1>\n        <h1>年龄：{{ Age }}</h1>\n        <button class=\"btn btn-primary\" v-on:click=\"Age++;if(Name=='小明')Name='吉姆格林';else Name='小明';\">\n        \t年龄递增\n        </button>\n    </div>\n\t<!-- 方法处理器 -->\n\t<button v-on:click=\"doThis\"></button>\n\t\n\t<!-- 对象语法 (2.4.0+) -->\n\t<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n\t\n\t<!-- 内联语句 -->\n\t<button v-on:click=\"doThat('hello', $event)\"></button>\n\t\n\t<!-- 缩写 -->\n\t<button @click=\"doThis\"></button>\n\t\n\t<!-- 停止冒泡 -->\n\t<button @click.stop=\"doThis\"></button>\n\t\n\t<!-- 阻止默认行为 -->\n\t<button @click.prevent=\"doThis\"></button>\n\t\n\t<!-- 阻止默认行为，没有表达式 -->\n\t<form @submit.prevent></form>\n\t\n\t<!--  串联修饰符 -->\n\t<button @click.stop.prevent=\"doThis\"></button>\n\t\n\t<!-- 键修饰符，键别名 -->\n\t<input @keyup.enter=\"onEnter\">\n\t\n\t<!-- 键修饰符，键代码 -->\n\t<input @keyup.13=\"onEnter\">\n\t\n\t<!-- 点击回调只会触发一次 -->\n\t<button v-on:click.once=\"doThis\"></button>\n\t\n    <script src=\"Content/vue/dist/vue.js\"></script>\n    <script type=\"text/javascript\">\n    //Model\n    var data = {\n        Name: '小明',\n        Age: 18,\n    }\n    //ViewModel\n    var vue = new Vue({\n        el: '#app',\n        data: data,\n    });\n    </script>\n```\n\n##### v-for\n```bash\n\t<div v-for=\"item in items\">\n\t  {{ item.text }}\n\t</div>\n\t另外也可以为数组索引指定别名（或者用于对象的键）：\n\t<div v-for=\"(item, index) in items\"></div>\n\t<div v-for=\"(val, key) in object\"></div>\n\t<div v-for=\"(val, key, index) in object\"></div>\n\t迫使其重新排序的元素,你需要提供一个 key 的特殊属性:类似于ng1中的track-by\n\t<div v-for=\"item in items\" :key=\"item.id\">\n\t  {{ item.text }}\n\t</div>\n```\n\n##### v-pre\n``` bash\n\t<span v-pre>{{ this will not be compiled }}</span\n```\n\n##### v-cloak\n```bash\ncss\n\t[v-cloak] {\n\t  display: none;\n\t}\nhtml\n\t<div v-cloak>\n\t  {{ message }}\n\t</div>\n```\n\n##### v-once\n只渲染元素和组件一次","slug":"vue-learn-2","published":1,"updated":"2018-09-17T00:56:32.600Z","layout":"post","photos":[],"link":"","_id":"cjny0swi2003v2kv7fcu7ix4d","content":"<h5 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a><a href=\"https://vuefe.cn/v2/api/#v-bind\" target=\"_blank\" rel=\"noopener\">官网</a></h5><h5 id=\"v-text、v-html\"><a href=\"#v-text、v-html\" class=\"headerlink\" title=\"v-text、v-html\"></a>v-text、v-html</h5><p>v-text、v-html这两者分为一组很好理解，一个用于绑定文本，一个用于绑定html。上文使用到的 这种写法就是v-text的的缩写形式，数据的单向绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;div style=&quot;font-size:30px;font-weight:bold;&quot; v-html=&quot;Age&quot;&gt;年龄：&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: &quot;&lt;label&gt;20&lt;/label&gt;&quot;,</span><br><span class=\"line\">        School:&apos;光明小学&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">注意v-text和v-html绑定都是单向的，只能从Model到View的绑定，不能实现View到Model的更新。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h5><p>vue限定只能对表单控件进行绑定,数据双向绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的有&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;等。</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------修饰符</span><br><span class=\"line\">.lazy - 取代 input 监听 change 事件</span><br><span class=\"line\">\t&lt;!-- 在触发 &quot;change&quot; 事件后同步，而不是在触发 &quot;input&quot; 事件后更新 --&gt;</span><br><span class=\"line\">\t&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br><span class=\"line\">.number - 输入字符串转为数字</span><br><span class=\"line\">\t&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br><span class=\"line\">\t这通常很有用，因为即使是在 type=&quot;number&quot; 时，HTML 中 input 元素也总是返回一个字符串类型的值。</span><br><span class=\"line\">.trim - 输入首尾空格过滤</span><br><span class=\"line\">\t&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">-------------------------------------------例子</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h2&gt;编辑姓名：&lt;input type=&quot;text&quot; v-model=&quot;Name&quot; /&gt;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;姓名：&#123;&#123;Name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;h2&gt;编辑备注：&lt;textarea v-model=&quot;Remark&quot;&gt;&lt;/textarea&gt;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;备注：&#123;&#123;Remark&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;basketball&quot; value=&quot;篮球&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;basketball&quot;&gt;篮球&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;football&quot; value=&quot;足球&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;football&quot;&gt;足球&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;running&quot; value=&quot;跑步&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;running&quot;&gt;跑步&lt;/label&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;h2&gt;学生爱好： &#123;&#123; Hobby &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;h2&gt;户籍：&#123;&#123; Huji &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;select style=&quot;width:100px;&quot; class=&quot;form-control&quot; v-model=&quot;Huji&quot;&gt;</span><br><span class=\"line\">            &lt;option&gt;湖南&lt;/option&gt;</span><br><span class=\"line\">            &lt;option&gt;广东&lt;/option&gt;</span><br><span class=\"line\">            &lt;option&gt;北京&lt;/option&gt;</span><br><span class=\"line\">        &lt;/select&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School: &apos;光明小学&apos;,</span><br><span class=\"line\">        Hobby: [],</span><br><span class=\"line\">        Remark: &apos;三好学生&apos;,</span><br><span class=\"line\">        Huji:&quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-if、v-else、v-else-if\"><a href=\"#v-if、v-else、v-else-if\" class=\"headerlink\" title=\"v-if、v-else、v-else-if\"></a>v-if、v-else、v-else-if</h5><p>v-if可以单独使用，<br>v-else的前面必须要有一个v-if的条件或者v-show指令，<br> v-else-if前一兄弟元素必须有 v-if 或 v-else-if<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;是否已婚：&lt;span v-if=&quot;IsMarry&quot;&gt;是&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;大人or小孩：&lt;span v-if=&quot;Age&gt;18&quot;&gt;大人&lt;/span&gt;&lt;span v-else&gt;小屁孩&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class=\"line\">\t  A</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class=\"line\">\t  B</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class=\"line\">\t  C</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else&gt;</span><br><span class=\"line\">\t  Not A/B/C</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        IsMarry: true,</span><br><span class=\"line\">        Age: 20,</span><br><span class=\"line\">        School:&apos;光明小学&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h5><p>根据表达式之真假值，切换元素的 display CSS 属性。当条件变化时该指令触发过渡效果。</p>\n<h5 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h5><p>对于html标签的text、value等属性，Vue里面提供了v-text、v-model去绑定。但是对于除此之外的其他属性呢，这就要用到接下来要讲的v-bind指令了。<br>v-bind的作用是绑定除了text、value之外的其他html标签属性，常见的比如class、style、自定义标签的自定义属性等。<br>（动态地绑定一个或多个特性，或一个组件 prop 到表达式）<br>它的语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link href=&quot;Content/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .class1 &#123;</span><br><span class=\"line\">            padding:20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .backred &#123;</span><br><span class=\"line\">            background-color:red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;是否红领巾：&lt;span class=&quot;class1&quot; v-bind:class=&quot;&#123;backred:IsBack&#125;&quot;&gt;&lt;label v-if=&quot;IsBack&quot;&gt;是&lt;/label&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校星级：&lt;span v-bind:style=&quot;&#123;color:SchoolLevel&#125;&quot;&gt;aa&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 绑定一个属性 --&gt;</span><br><span class=\"line\">\t&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">\t&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 内联字符串拼接 --&gt;</span><br><span class=\"line\">\t&lt;img :src=&quot;&apos;/path/to/images/&apos; + fileName&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- class 绑定 --&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- style 绑定 --&gt;</span><br><span class=\"line\">\t&lt;div :style=&quot;&#123; fontSize: size + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 绑定一个有属性的对象 --&gt;</span><br><span class=\"line\">\t&lt;div v-bind=&quot;&#123; id: someProp, &apos;other-attr&apos;: otherProp &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span><br><span class=\"line\">\t&lt;div v-bind:text-content.prop=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- prop 绑定. “prop” 必须在 my-component 中声明。 --&gt;</span><br><span class=\"line\">\t&lt;my-component :prop=&quot;someThing&quot;&gt;&lt;/my-component&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class=\"line\">\t&lt;child-component v-bind=&quot;$props&quot;&gt;&lt;/child-component&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- XLink --&gt;</span><br><span class=\"line\">\t&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School: &apos;光明小学&apos;,</span><br><span class=\"line\">        SchoolLevel: &apos;red&apos;,</span><br><span class=\"line\">        IsBack:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h5><p>在Vue里面，v-on指令用来绑定标签的事件，其语法和v-bind基本类似。<br>缩写： @<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-primary&quot; v-on:click=&quot;Age++;if(Name==&apos;小明&apos;)Name=&apos;吉姆格林&apos;;else Name=&apos;小明&apos;;&quot;&gt;</span><br><span class=\"line\">        \t年龄递增</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;!-- 方法处理器 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class=\"line\">\t&lt;button v-on=&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 内联语句 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click=&quot;doThat(&apos;hello&apos;, $event)&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 停止冒泡 --&gt;</span><br><span class=\"line\">\t&lt;button @click.stop=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 阻止默认行为 --&gt;</span><br><span class=\"line\">\t&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class=\"line\">\t&lt;form @submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!--  串联修饰符 --&gt;</span><br><span class=\"line\">\t&lt;button @click.stop.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class=\"line\">\t&lt;input @keyup.enter=&quot;onEnter&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class=\"line\">\t&lt;input @keyup.13=&quot;onEnter&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click.once=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=<span class=\"string\">\"item in items\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">另外也可以为数组索引指定别名（或者用于对象的键）：</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(item, index) in items\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(val, key) in object\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">迫使其重新排序的元素,你需要提供一个 key 的特殊属性:类似于ng1中的track-by</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"item in items\"</span> :key=<span class=\"string\">\"item.id\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/span</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css</span><br><span class=\"line\">\t[v-cloak] &#123;</span><br><span class=\"line\">\t  display: none;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">html</span><br><span class=\"line\">\t&lt;div v-cloak&gt;</span><br><span class=\"line\">\t  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h5><p>只渲染元素和组件一次</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a><a href=\"https://vuefe.cn/v2/api/#v-bind\" target=\"_blank\" rel=\"noopener\">官网</a></h5><h5 id=\"v-text、v-html\"><a href=\"#v-text、v-html\" class=\"headerlink\" title=\"v-text、v-html\"></a>v-text、v-html</h5><p>v-text、v-html这两者分为一组很好理解，一个用于绑定文本，一个用于绑定html。上文使用到的 这种写法就是v-text的的缩写形式，数据的单向绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&#123;&#123; Name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;div style=&quot;font-size:30px;font-weight:bold;&quot; v-html=&quot;Age&quot;&gt;年龄：&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: &quot;&lt;label&gt;20&lt;/label&gt;&quot;,</span><br><span class=\"line\">        School:&apos;光明小学&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">注意v-text和v-html绑定都是单向的，只能从Model到View的绑定，不能实现View到Model的更新。</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h5><p>vue限定只能对表单控件进行绑定,数据双向绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的有&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;等。</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------修饰符</span><br><span class=\"line\">.lazy - 取代 input 监听 change 事件</span><br><span class=\"line\">\t&lt;!-- 在触发 &quot;change&quot; 事件后同步，而不是在触发 &quot;input&quot; 事件后更新 --&gt;</span><br><span class=\"line\">\t&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br><span class=\"line\">.number - 输入字符串转为数字</span><br><span class=\"line\">\t&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br><span class=\"line\">\t这通常很有用，因为即使是在 type=&quot;number&quot; 时，HTML 中 input 元素也总是返回一个字符串类型的值。</span><br><span class=\"line\">.trim - 输入首尾空格过滤</span><br><span class=\"line\">\t&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">-------------------------------------------例子</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h2&gt;编辑姓名：&lt;input type=&quot;text&quot; v-model=&quot;Name&quot; /&gt;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;姓名：&#123;&#123;Name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;h2&gt;编辑备注：&lt;textarea v-model=&quot;Remark&quot;&gt;&lt;/textarea&gt;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;备注：&#123;&#123;Remark&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;basketball&quot; value=&quot;篮球&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;basketball&quot;&gt;篮球&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;football&quot; value=&quot;足球&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;football&quot;&gt;足球&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;checkbox&quot; id=&quot;running&quot; value=&quot;跑步&quot; v-model=&quot;Hobby&quot;&gt;</span><br><span class=\"line\">        &lt;label for=&quot;running&quot;&gt;跑步&lt;/label&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;h2&gt;学生爱好： &#123;&#123; Hobby &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;hr /&gt;</span><br><span class=\"line\">        &lt;h2&gt;户籍：&#123;&#123; Huji &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;select style=&quot;width:100px;&quot; class=&quot;form-control&quot; v-model=&quot;Huji&quot;&gt;</span><br><span class=\"line\">            &lt;option&gt;湖南&lt;/option&gt;</span><br><span class=\"line\">            &lt;option&gt;广东&lt;/option&gt;</span><br><span class=\"line\">            &lt;option&gt;北京&lt;/option&gt;</span><br><span class=\"line\">        &lt;/select&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School: &apos;光明小学&apos;,</span><br><span class=\"line\">        Hobby: [],</span><br><span class=\"line\">        Remark: &apos;三好学生&apos;,</span><br><span class=\"line\">        Huji:&quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-if、v-else、v-else-if\"><a href=\"#v-if、v-else、v-else-if\" class=\"headerlink\" title=\"v-if、v-else、v-else-if\"></a>v-if、v-else、v-else-if</h5><p>v-if可以单独使用，<br>v-else的前面必须要有一个v-if的条件或者v-show指令，<br> v-else-if前一兄弟元素必须有 v-if 或 v-else-if<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;是否已婚：&lt;span v-if=&quot;IsMarry&quot;&gt;是&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;大人or小孩：&lt;span v-if=&quot;Age&gt;18&quot;&gt;大人&lt;/span&gt;&lt;span v-else&gt;小屁孩&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校：&#123;&#123; School &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class=\"line\">\t  A</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class=\"line\">\t  B</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class=\"line\">\t  C</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div v-else&gt;</span><br><span class=\"line\">\t  Not A/B/C</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        IsMarry: true,</span><br><span class=\"line\">        Age: 20,</span><br><span class=\"line\">        School:&apos;光明小学&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h5><p>根据表达式之真假值，切换元素的 display CSS 属性。当条件变化时该指令触发过渡效果。</p>\n<h5 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h5><p>对于html标签的text、value等属性，Vue里面提供了v-text、v-model去绑定。但是对于除此之外的其他属性呢，这就要用到接下来要讲的v-bind指令了。<br>v-bind的作用是绑定除了text、value之外的其他html标签属性，常见的比如class、style、自定义标签的自定义属性等。<br>（动态地绑定一个或多个特性，或一个组件 prop 到表达式）<br>它的语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link href=&quot;Content/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .class1 &#123;</span><br><span class=\"line\">            padding:20px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .backred &#123;</span><br><span class=\"line\">            background-color:red;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;是否红领巾：&lt;span class=&quot;class1&quot; v-bind:class=&quot;&#123;backred:IsBack&#125;&quot;&gt;&lt;label v-if=&quot;IsBack&quot;&gt;是&lt;/label&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;学校星级：&lt;span v-bind:style=&quot;&#123;color:SchoolLevel&#125;&quot;&gt;aa&lt;/span&gt;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 绑定一个属性 --&gt;</span><br><span class=\"line\">\t&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">\t&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 内联字符串拼接 --&gt;</span><br><span class=\"line\">\t&lt;img :src=&quot;&apos;/path/to/images/&apos; + fileName&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- class 绑定 --&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- style 绑定 --&gt;</span><br><span class=\"line\">\t&lt;div :style=&quot;&#123; fontSize: size + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 绑定一个有属性的对象 --&gt;</span><br><span class=\"line\">\t&lt;div v-bind=&quot;&#123; id: someProp, &apos;other-attr&apos;: otherProp &#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span><br><span class=\"line\">\t&lt;div v-bind:text-content.prop=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- prop 绑定. “prop” 必须在 my-component 中声明。 --&gt;</span><br><span class=\"line\">\t&lt;my-component :prop=&quot;someThing&quot;&gt;&lt;/my-component&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class=\"line\">\t&lt;child-component v-bind=&quot;$props&quot;&gt;&lt;/child-component&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- XLink --&gt;</span><br><span class=\"line\">\t&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">        School: &apos;光明小学&apos;,</span><br><span class=\"line\">        SchoolLevel: &apos;red&apos;,</span><br><span class=\"line\">        IsBack:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h5><p>在Vue里面，v-on指令用来绑定标签的事件，其语法和v-bind基本类似。<br>缩写： @<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;姓名：&lt;label v-text=&quot;Name&quot;&gt;&lt;/label&gt;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;年龄：&#123;&#123; Age &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-primary&quot; v-on:click=&quot;Age++;if(Name==&apos;小明&apos;)Name=&apos;吉姆格林&apos;;else Name=&apos;小明&apos;;&quot;&gt;</span><br><span class=\"line\">        \t年龄递增</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;!-- 方法处理器 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class=\"line\">\t&lt;button v-on=&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 内联语句 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click=&quot;doThat(&apos;hello&apos;, $event)&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">\t&lt;button @click=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 停止冒泡 --&gt;</span><br><span class=\"line\">\t&lt;button @click.stop=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 阻止默认行为 --&gt;</span><br><span class=\"line\">\t&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class=\"line\">\t&lt;form @submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!--  串联修饰符 --&gt;</span><br><span class=\"line\">\t&lt;button @click.stop.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class=\"line\">\t&lt;input @keyup.enter=&quot;onEnter&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class=\"line\">\t&lt;input @keyup.13=&quot;onEnter&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class=\"line\">\t&lt;button v-on:click.once=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &lt;script src=&quot;Content/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    //Model</span><br><span class=\"line\">    var data = &#123;</span><br><span class=\"line\">        Name: &apos;小明&apos;,</span><br><span class=\"line\">        Age: 18,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //ViewModel</span><br><span class=\"line\">    var vue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#app&apos;,</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=<span class=\"string\">\"item in items\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">另外也可以为数组索引指定别名（或者用于对象的键）：</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(item, index) in items\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(val, key) in object\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">迫使其重新排序的元素,你需要提供一个 key 的特殊属性:类似于ng1中的track-by</span><br><span class=\"line\">&lt;div v-for=<span class=\"string\">\"item in items\"</span> :key=<span class=\"string\">\"item.id\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/span</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css</span><br><span class=\"line\">\t[v-cloak] &#123;</span><br><span class=\"line\">\t  display: none;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">html</span><br><span class=\"line\">\t&lt;div v-cloak&gt;</span><br><span class=\"line\">\t  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h5><p>只渲染元素和组件一次</p>\n"},{"title":"vue的style的scoped属性","date":"2018-02-28T00:14:50.000Z","author":"T.2stt","_content":"\n> 在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是要慎用,在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。\n\n## scoped有作用域的 CSS\n`scoped`肯定是解决了样式私有化的问题，但同时也引入了新的问题---样式不易修改，而很多时候，我们是需要对公共组件的样式做微调的。所以该属性的使用需要谨慎考虑\n### demo\n```javascript\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n转换结果：（以达到私有的效果）\n```javascript\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```\n### 渲染规则\n总结一下`scoped`三条渲染规则\n- 给`HTML`的`DOM`节点加一个不重复`data`属性(形如：data-v-2311c06a)来表示他的唯一性\n- 在每句`css`选择器的末尾（编译后的生成的css语句）加一个当前组件的`data`属性选择器（如[data-v-2311c06a]）来私有化样式\n- 如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性\n\n## 注意\n### 可混用本地和全局样式\n我们可以在一个组件中同时使用有作用域和无作用域的样式：\n```bash\n<style>\n/* 全局样式 */\n</style>\n\n<style scoped>\n/* 本地样式 */\n</style>\n```\n### 子组件的根元素\n使用 `scoped` 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件有作用域的 CSS 和子组件有作用域的 CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。\n\n### 深度作用选择器\n如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 >>> 操作符：\n```bash\n<style scoped>\n.a >>> .b { /* ... */ }\n</style>\n```\n上述代码将会编译成：\n```bash\n.a[data-v-f3f3eg9] .b { /* ... */ }\n```\n有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 操作符取而代之——这是一个 >>> 的别名，同样可以正常工作。","source":"_posts/vue-style-scoped.md","raw":"---\ntitle: vue的style的scoped属性\ndate: 2018-02-28 08:14:50\nauthor: T.2stt\ntags:\n- vue\n- vue-css\ncategories:\n- vue\n---\n\n> 在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是要慎用,在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。\n\n## scoped有作用域的 CSS\n`scoped`肯定是解决了样式私有化的问题，但同时也引入了新的问题---样式不易修改，而很多时候，我们是需要对公共组件的样式做微调的。所以该属性的使用需要谨慎考虑\n### demo\n```javascript\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n转换结果：（以达到私有的效果）\n```javascript\n<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>\n```\n### 渲染规则\n总结一下`scoped`三条渲染规则\n- 给`HTML`的`DOM`节点加一个不重复`data`属性(形如：data-v-2311c06a)来表示他的唯一性\n- 在每句`css`选择器的末尾（编译后的生成的css语句）加一个当前组件的`data`属性选择器（如[data-v-2311c06a]）来私有化样式\n- 如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性\n\n## 注意\n### 可混用本地和全局样式\n我们可以在一个组件中同时使用有作用域和无作用域的样式：\n```bash\n<style>\n/* 全局样式 */\n</style>\n\n<style scoped>\n/* 本地样式 */\n</style>\n```\n### 子组件的根元素\n使用 `scoped` 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件有作用域的 CSS 和子组件有作用域的 CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。\n\n### 深度作用选择器\n如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 >>> 操作符：\n```bash\n<style scoped>\n.a >>> .b { /* ... */ }\n</style>\n```\n上述代码将会编译成：\n```bash\n.a[data-v-f3f3eg9] .b { /* ... */ }\n```\n有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 操作符取而代之——这是一个 >>> 的别名，同样可以正常工作。","slug":"vue-style-scoped","published":1,"updated":"2018-11-01T07:21:27.442Z","_id":"cjny0swi3003y2kv7kd15t344","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是要慎用,在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。</p>\n</blockquote>\n<h2 id=\"scoped有作用域的-CSS\"><a href=\"#scoped有作用域的-CSS\" class=\"headerlink\" title=\"scoped有作用域的 CSS\"></a>scoped有作用域的 CSS</h2><p><code>scoped</code>肯定是解决了样式私有化的问题，但同时也引入了新的问题—样式不易修改，而很多时候，我们是需要对公共组件的样式做微调的。所以该属性的使用需要谨慎考虑</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.example &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"example\"&gt;hi&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br></pre></td></tr></table></figure>\n<p>转换结果：（以达到私有的效果）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.example[data-v-f3f3eg9] &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"example\" data-v-f3f3eg9&gt;hi&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"渲染规则\"><a href=\"#渲染规则\" class=\"headerlink\" title=\"渲染规则\"></a>渲染规则</h3><p>总结一下<code>scoped</code>三条渲染规则</p>\n<ul>\n<li>给<code>HTML</code>的<code>DOM</code>节点加一个不重复<code>data</code>属性(形如：data-v-2311c06a)来表示他的唯一性</li>\n<li>在每句<code>css</code>选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如[data-v-2311c06a]）来私有化样式</li>\n<li>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><h3 id=\"可混用本地和全局样式\"><a href=\"#可混用本地和全局样式\" class=\"headerlink\" title=\"可混用本地和全局样式\"></a>可混用本地和全局样式</h3><p>我们可以在一个组件中同时使用有作用域和无作用域的样式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/* 全局样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">/* 本地样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"子组件的根元素\"><a href=\"#子组件的根元素\" class=\"headerlink\" title=\"子组件的根元素\"></a>子组件的根元素</h3><p>使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件有作用域的 CSS 和子组件有作用域的 CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p>\n<h3 id=\"深度作用选择器\"><a href=\"#深度作用选择器\" class=\"headerlink\" title=\"深度作用选择器\"></a>深度作用选择器</h3><p>如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码将会编译成：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.a[data-v-f3f3eg9] .b &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure></p>\n<p>有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 /deep/ 操作符取而代之——这是一个 &gt;&gt;&gt; 的别名，同样可以正常工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是要慎用,在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。</p>\n</blockquote>\n<h2 id=\"scoped有作用域的-CSS\"><a href=\"#scoped有作用域的-CSS\" class=\"headerlink\" title=\"scoped有作用域的 CSS\"></a>scoped有作用域的 CSS</h2><p><code>scoped</code>肯定是解决了样式私有化的问题，但同时也引入了新的问题—样式不易修改，而很多时候，我们是需要对公共组件的样式做微调的。所以该属性的使用需要谨慎考虑</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.example &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"example\"&gt;hi&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br></pre></td></tr></table></figure>\n<p>转换结果：（以达到私有的效果）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.example[data-v-f3f3eg9] &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"example\" data-v-f3f3eg9&gt;hi&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"渲染规则\"><a href=\"#渲染规则\" class=\"headerlink\" title=\"渲染规则\"></a>渲染规则</h3><p>总结一下<code>scoped</code>三条渲染规则</p>\n<ul>\n<li>给<code>HTML</code>的<code>DOM</code>节点加一个不重复<code>data</code>属性(形如：data-v-2311c06a)来表示他的唯一性</li>\n<li>在每句<code>css</code>选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如[data-v-2311c06a]）来私有化样式</li>\n<li>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><h3 id=\"可混用本地和全局样式\"><a href=\"#可混用本地和全局样式\" class=\"headerlink\" title=\"可混用本地和全局样式\"></a>可混用本地和全局样式</h3><p>我们可以在一个组件中同时使用有作用域和无作用域的样式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/* 全局样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">/* 本地样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"子组件的根元素\"><a href=\"#子组件的根元素\" class=\"headerlink\" title=\"子组件的根元素\"></a>子组件的根元素</h3><p>使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件有作用域的 CSS 和子组件有作用域的 CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p>\n<h3 id=\"深度作用选择器\"><a href=\"#深度作用选择器\" class=\"headerlink\" title=\"深度作用选择器\"></a>深度作用选择器</h3><p>如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码将会编译成：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.a[data-v-f3f3eg9] .b &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure></p>\n<p>有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 /deep/ 操作符取而代之——这是一个 &gt;&gt;&gt; 的别名，同样可以正常工作。</p>\n"},{"title":"wxpromise的图片选择获取","date":"2018-05-06T05:54:43.000Z","author":"T.2stt","comments":1,"_content":">此章节记载的是微信小程序关于图片的一些功能。\nwx.chooseImage(OBJECT),从本地相册选择图片或使用相机拍照。\nwx.previewImage(OBJECT),图片的预览。\nwx.getImageInfo(OBJECT),获取图片信息。\nwx.saveImageToPhotosAlbum(OBJECT),保存图片到系统相册。需要用户授权 scope.writePhotosAlbum\n\n## wx.chooseImage\n\tchooseImage只是选择图片，限制图片选择张数+图片选择是否压缩等名获取到文件信息（路劲，大小），如果需要上传则选择别的API。\n\twx.previewImage(OBJECT),预览图片。\n\n### 示例代码\n``` bash\n\twx.chooseImage({\n\t  count: 1, // 默认9\n\t  sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n\t  sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n\t  success: function (res) {\n\t    // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片\n\t    var tempFilePaths = res.tempFilePaths\n\t  }\n\t})\n```\n\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">count</font>      | Number      |   否    |   最多可以选择的图片张数，默认9    |\n| <font face=\"fantasy\">sizeType</font>   | StringArray |   否    |   original 原图，compressed 压缩图，默认二者都有    |\n| <font face=\"fantasy\">sourceType</font> | StringArray |   否    |   album 从相册选图，camera 使用相机，默认二者都有    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   成功则返回图片的本地文件路径列表 tempFilePaths    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n\n## wx.previewImage\n\t预览图片。\n\n### 示例代码\n```bash\n\twx.previewImage({\n\t  current: '', // 当前显示图片的http链接\n\t  urls: [] // 需要预览的图片http链接列表\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">current</font>      | String      |   否    |   当前显示图片的链接，不填则默认为 urls 的第一张    |\n| <font face=\"fantasy\">urls</font>   | StringArray |   是    |   需要预览的图片链接列表    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n## wx.getImageInfo\n\t获取图片信息。\n\n### 示例代码\n```bash\n\twx.getImageInfo({\n\t  src: 'images/a.jpg',\n\t  success: function (res) {\n\t    console.log(res.width)\n\t    console.log(res.height)\n\t  }\n\t})\n\t\n\twx.chooseImage({\n\t  success: function (res) {\n\t    wx.getImageInfo({\n\t      src: res.tempFilePaths[0],\n\t      success: function (res) {\n\t        console.log(res.width)\n\t        console.log(res.height)\n\t      }\n\t    })\n\t  }\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">src</font>      | String      |   否    |   图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n#### 解释\n``` bash\n1.success返回参数说明：\n  1.1 width----StringArra类型，图片的本地文件路径列表\n  1.2 height----ObjectArray类型，图片的本地文件列表，每一项是一个 File 对象\n4.File 对象结构如下:\n  4.1 path----Number类型，图片宽度，单位px\n  4.2 size----Number类型，图片宽度，单位px\n  4.3 path----String类型，返回图片的本地路径\n  4.4 orientation----String类型，返回图片的方向，有效值见下表\n  4.5 type----String类型，返回图片的格式\n```\n#### orientation参数说明：\n| 参数        | 枚举值    |\n| --------   | :-----:   |\n| <font face=\"fantasy\">up</font>            | 默认      |\n| <font face=\"fantasy\">down</font>          | 180度旋转 |\n| <font face=\"fantasy\">left</font>          | 逆时针旋转90度 |\n| <font face=\"fantasy\">right</font>         | 顺时针旋转90度    |\n| <font face=\"fantasy\">up-mirrored</font>   | 同up，但水平翻转    |\n| <font face=\"fantasy\">down-mirrored</font> | 同down，但水平翻转    |\n| <font face=\"fantasy\">left-mirrored</font> | 同left，但垂直翻转    |\n| <font face=\"fantasy\">right-mirrored</font>| 同right，但垂直翻转    |\n\n## wx.saveImageToPhotosAlbum\n\t保存图片到系统相册。需要用户授权 scope.writePhotosAlbum。\n\n### 示例代码\n```bash\n\twx.saveImageToPhotosAlbum({\n\t    success(res) {\n\t    }\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">filePath</font>      | String      |   是    |   图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径    |\n| <font face=\"fantasy\">success</font>    | Function    |   否    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n#### 解释\n```bash\n\t1.success返回参数说明：\n\t\terrMsg----String类型，调用结果\n```","source":"_posts/wxprogram-image.md","raw":"---\ntitle: wxpromise的图片选择获取\ndate: 2018-05-06 13:54:43\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n>此章节记载的是微信小程序关于图片的一些功能。\nwx.chooseImage(OBJECT),从本地相册选择图片或使用相机拍照。\nwx.previewImage(OBJECT),图片的预览。\nwx.getImageInfo(OBJECT),获取图片信息。\nwx.saveImageToPhotosAlbum(OBJECT),保存图片到系统相册。需要用户授权 scope.writePhotosAlbum\n\n## wx.chooseImage\n\tchooseImage只是选择图片，限制图片选择张数+图片选择是否压缩等名获取到文件信息（路劲，大小），如果需要上传则选择别的API。\n\twx.previewImage(OBJECT),预览图片。\n\n### 示例代码\n``` bash\n\twx.chooseImage({\n\t  count: 1, // 默认9\n\t  sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n\t  sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n\t  success: function (res) {\n\t    // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片\n\t    var tempFilePaths = res.tempFilePaths\n\t  }\n\t})\n```\n\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">count</font>      | Number      |   否    |   最多可以选择的图片张数，默认9    |\n| <font face=\"fantasy\">sizeType</font>   | StringArray |   否    |   original 原图，compressed 压缩图，默认二者都有    |\n| <font face=\"fantasy\">sourceType</font> | StringArray |   否    |   album 从相册选图，camera 使用相机，默认二者都有    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   成功则返回图片的本地文件路径列表 tempFilePaths    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n\n## wx.previewImage\n\t预览图片。\n\n### 示例代码\n```bash\n\twx.previewImage({\n\t  current: '', // 当前显示图片的http链接\n\t  urls: [] // 需要预览的图片http链接列表\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">current</font>      | String      |   否    |   当前显示图片的链接，不填则默认为 urls 的第一张    |\n| <font face=\"fantasy\">urls</font>   | StringArray |   是    |   需要预览的图片链接列表    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n## wx.getImageInfo\n\t获取图片信息。\n\n### 示例代码\n```bash\n\twx.getImageInfo({\n\t  src: 'images/a.jpg',\n\t  success: function (res) {\n\t    console.log(res.width)\n\t    console.log(res.height)\n\t  }\n\t})\n\t\n\twx.chooseImage({\n\t  success: function (res) {\n\t    wx.getImageInfo({\n\t      src: res.tempFilePaths[0],\n\t      success: function (res) {\n\t        console.log(res.width)\n\t        console.log(res.height)\n\t      }\n\t    })\n\t  }\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">src</font>      | String      |   否    |   图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径    |\n| <font face=\"fantasy\">success</font>    | Function    |   是    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n#### 解释\n``` bash\n1.success返回参数说明：\n  1.1 width----StringArra类型，图片的本地文件路径列表\n  1.2 height----ObjectArray类型，图片的本地文件列表，每一项是一个 File 对象\n4.File 对象结构如下:\n  4.1 path----Number类型，图片宽度，单位px\n  4.2 size----Number类型，图片宽度，单位px\n  4.3 path----String类型，返回图片的本地路径\n  4.4 orientation----String类型，返回图片的方向，有效值见下表\n  4.5 type----String类型，返回图片的格式\n```\n#### orientation参数说明：\n| 参数        | 枚举值    |\n| --------   | :-----:   |\n| <font face=\"fantasy\">up</font>            | 默认      |\n| <font face=\"fantasy\">down</font>          | 180度旋转 |\n| <font face=\"fantasy\">left</font>          | 逆时针旋转90度 |\n| <font face=\"fantasy\">right</font>         | 顺时针旋转90度    |\n| <font face=\"fantasy\">up-mirrored</font>   | 同up，但水平翻转    |\n| <font face=\"fantasy\">down-mirrored</font> | 同down，但水平翻转    |\n| <font face=\"fantasy\">left-mirrored</font> | 同left，但垂直翻转    |\n| <font face=\"fantasy\">right-mirrored</font>| 同right，但垂直翻转    |\n\n## wx.saveImageToPhotosAlbum\n\t保存图片到系统相册。需要用户授权 scope.writePhotosAlbum。\n\n### 示例代码\n```bash\n\twx.saveImageToPhotosAlbum({\n\t    success(res) {\n\t    }\n\t})\n```\n### OBJECT参数说明\n| 参数        | 类型    |  必填  | 说明  |\n| --------   | :-----:   | :----: | :----: |\n| <font face=\"fantasy\">filePath</font>      | String      |   是    |   图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径    |\n| <font face=\"fantasy\">success</font>    | Function    |   否    |   接口调用成功的回调函数    |\n| <font face=\"fantasy\">fail</font>       | Function    |   否    |   接口调用失败的回调函数    |\n| <font face=\"fantasy\">complete</font>   | Function    |   否    |   接口调用结束的回调函数（调用成功、失败都会执行）    |\n\n#### 解释\n```bash\n\t1.success返回参数说明：\n\t\terrMsg----String类型，调用结果\n```","slug":"wxprogram-image","published":1,"updated":"2018-11-01T07:30:12.027Z","_id":"cjny0swi500422kv7y65qmrka","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是微信小程序关于图片的一些功能。<br>wx.chooseImage(OBJECT),从本地相册选择图片或使用相机拍照。<br>wx.previewImage(OBJECT),图片的预览。<br>wx.getImageInfo(OBJECT),获取图片信息。<br>wx.saveImageToPhotosAlbum(OBJECT),保存图片到系统相册。需要用户授权 scope.writePhotosAlbum</p>\n</blockquote>\n<h2 id=\"wx-chooseImage\"><a href=\"#wx-chooseImage\" class=\"headerlink\" title=\"wx.chooseImage\"></a>wx.chooseImage</h2><pre><code>chooseImage只是选择图片，限制图片选择张数+图片选择是否压缩等名获取到文件信息（路劲，大小），如果需要上传则选择别的API。\nwx.previewImage(OBJECT),预览图片。\n</code></pre><h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  count: 1, // 默认9</span><br><span class=\"line\">  sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], // 可以指定是原图还是压缩图，默认二者都有</span><br><span class=\"line\">  sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], // 可以指定来源是相册还是相机，默认二者都有</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span><br><span class=\"line\">    var tempFilePaths = res.tempFilePaths</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明\"><a href=\"#OBJECT参数说明\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">count</font></td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">最多可以选择的图片张数，默认9</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">sizeType</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">original 原图，compressed 压缩图，默认二者都有</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">sourceType</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">album 从相册选图，camera 使用相机，默认二者都有</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">成功则返回图片的本地文件路径列表 tempFilePaths</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-previewImage\"><a href=\"#wx-previewImage\" class=\"headerlink\" title=\"wx.previewImage\"></a>wx.previewImage</h2><pre><code>预览图片。\n</code></pre><h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.previewImage(&#123;</span><br><span class=\"line\">  current: <span class=\"string\">''</span>, // 当前显示图片的http链接</span><br><span class=\"line\">  urls: [] // 需要预览的图片http链接列表</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-1\"><a href=\"#OBJECT参数说明-1\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">current</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">当前显示图片的链接，不填则默认为 urls 的第一张</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">urls</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">需要预览的图片链接列表</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-getImageInfo\"><a href=\"#wx-getImageInfo\" class=\"headerlink\" title=\"wx.getImageInfo\"></a>wx.getImageInfo</h2><pre><code>获取图片信息。\n</code></pre><h3 id=\"示例代码-2\"><a href=\"#示例代码-2\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.getImageInfo(&#123;</span><br><span class=\"line\">  src: <span class=\"string\">'images/a.jpg'</span>,</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    console.log(res.width)</span><br><span class=\"line\">    console.log(res.height)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    wx.getImageInfo(&#123;</span><br><span class=\"line\">      src: res.tempFilePaths[0],</span><br><span class=\"line\">      success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">        console.log(res.width)</span><br><span class=\"line\">        console.log(res.height)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-2\"><a href=\"#OBJECT参数说明-2\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">src</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.success返回参数说明：</span><br><span class=\"line\">  1.1 width----StringArra类型，图片的本地文件路径列表</span><br><span class=\"line\">  1.2 height----ObjectArray类型，图片的本地文件列表，每一项是一个 File 对象</span><br><span class=\"line\">4.File 对象结构如下:</span><br><span class=\"line\">  4.1 path----Number类型，图片宽度，单位px</span><br><span class=\"line\">  4.2 size----Number类型，图片宽度，单位px</span><br><span class=\"line\">  4.3 path----String类型，返回图片的本地路径</span><br><span class=\"line\">  4.4 orientation----String类型，返回图片的方向，有效值见下表</span><br><span class=\"line\">  4.5 <span class=\"built_in\">type</span>----String类型，返回图片的格式</span><br></pre></td></tr></table></figure>\n<h4 id=\"orientation参数说明：\"><a href=\"#orientation参数说明：\" class=\"headerlink\" title=\"orientation参数说明：\"></a>orientation参数说明：</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">枚举值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">up</font></td>\n<td style=\"text-align:center\">默认</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">down</font></td>\n<td style=\"text-align:center\">180度旋转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">left</font></td>\n<td style=\"text-align:center\">逆时针旋转90度</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">right</font></td>\n<td style=\"text-align:center\">顺时针旋转90度</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">up-mirrored</font></td>\n<td style=\"text-align:center\">同up，但水平翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">down-mirrored</font></td>\n<td style=\"text-align:center\">同down，但水平翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">left-mirrored</font></td>\n<td style=\"text-align:center\">同left，但垂直翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">right-mirrored</font></td>\n<td style=\"text-align:center\">同right，但垂直翻转</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-saveImageToPhotosAlbum\"><a href=\"#wx-saveImageToPhotosAlbum\" class=\"headerlink\" title=\"wx.saveImageToPhotosAlbum\"></a>wx.saveImageToPhotosAlbum</h2><pre><code>保存图片到系统相册。需要用户授权 scope.writePhotosAlbum。\n</code></pre><h3 id=\"示例代码-3\"><a href=\"#示例代码-3\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">    success(res) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-3\"><a href=\"#OBJECT参数说明-3\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">filePath</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释\"></a>解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.success返回参数说明：</span><br><span class=\"line\">\terrMsg----String类型，调用结果</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是微信小程序关于图片的一些功能。<br>wx.chooseImage(OBJECT),从本地相册选择图片或使用相机拍照。<br>wx.previewImage(OBJECT),图片的预览。<br>wx.getImageInfo(OBJECT),获取图片信息。<br>wx.saveImageToPhotosAlbum(OBJECT),保存图片到系统相册。需要用户授权 scope.writePhotosAlbum</p>\n</blockquote>\n<h2 id=\"wx-chooseImage\"><a href=\"#wx-chooseImage\" class=\"headerlink\" title=\"wx.chooseImage\"></a>wx.chooseImage</h2><pre><code>chooseImage只是选择图片，限制图片选择张数+图片选择是否压缩等名获取到文件信息（路劲，大小），如果需要上传则选择别的API。\nwx.previewImage(OBJECT),预览图片。\n</code></pre><h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  count: 1, // 默认9</span><br><span class=\"line\">  sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], // 可以指定是原图还是压缩图，默认二者都有</span><br><span class=\"line\">  sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], // 可以指定来源是相册还是相机，默认二者都有</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span><br><span class=\"line\">    var tempFilePaths = res.tempFilePaths</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明\"><a href=\"#OBJECT参数说明\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">count</font></td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">最多可以选择的图片张数，默认9</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">sizeType</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">original 原图，compressed 压缩图，默认二者都有</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">sourceType</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">album 从相册选图，camera 使用相机，默认二者都有</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">成功则返回图片的本地文件路径列表 tempFilePaths</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-previewImage\"><a href=\"#wx-previewImage\" class=\"headerlink\" title=\"wx.previewImage\"></a>wx.previewImage</h2><pre><code>预览图片。\n</code></pre><h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.previewImage(&#123;</span><br><span class=\"line\">  current: <span class=\"string\">''</span>, // 当前显示图片的http链接</span><br><span class=\"line\">  urls: [] // 需要预览的图片http链接列表</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-1\"><a href=\"#OBJECT参数说明-1\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">current</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">当前显示图片的链接，不填则默认为 urls 的第一张</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">urls</font></td>\n<td style=\"text-align:center\">StringArray</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">需要预览的图片链接列表</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-getImageInfo\"><a href=\"#wx-getImageInfo\" class=\"headerlink\" title=\"wx.getImageInfo\"></a>wx.getImageInfo</h2><pre><code>获取图片信息。\n</code></pre><h3 id=\"示例代码-2\"><a href=\"#示例代码-2\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.getImageInfo(&#123;</span><br><span class=\"line\">  src: <span class=\"string\">'images/a.jpg'</span>,</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    console.log(res.width)</span><br><span class=\"line\">    console.log(res.height)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">    wx.getImageInfo(&#123;</span><br><span class=\"line\">      src: res.tempFilePaths[0],</span><br><span class=\"line\">      success: <span class=\"keyword\">function</span> (res) &#123;</span><br><span class=\"line\">        console.log(res.width)</span><br><span class=\"line\">        console.log(res.height)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-2\"><a href=\"#OBJECT参数说明-2\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">src</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.success返回参数说明：</span><br><span class=\"line\">  1.1 width----StringArra类型，图片的本地文件路径列表</span><br><span class=\"line\">  1.2 height----ObjectArray类型，图片的本地文件列表，每一项是一个 File 对象</span><br><span class=\"line\">4.File 对象结构如下:</span><br><span class=\"line\">  4.1 path----Number类型，图片宽度，单位px</span><br><span class=\"line\">  4.2 size----Number类型，图片宽度，单位px</span><br><span class=\"line\">  4.3 path----String类型，返回图片的本地路径</span><br><span class=\"line\">  4.4 orientation----String类型，返回图片的方向，有效值见下表</span><br><span class=\"line\">  4.5 <span class=\"built_in\">type</span>----String类型，返回图片的格式</span><br></pre></td></tr></table></figure>\n<h4 id=\"orientation参数说明：\"><a href=\"#orientation参数说明：\" class=\"headerlink\" title=\"orientation参数说明：\"></a>orientation参数说明：</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">枚举值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">up</font></td>\n<td style=\"text-align:center\">默认</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">down</font></td>\n<td style=\"text-align:center\">180度旋转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">left</font></td>\n<td style=\"text-align:center\">逆时针旋转90度</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">right</font></td>\n<td style=\"text-align:center\">顺时针旋转90度</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">up-mirrored</font></td>\n<td style=\"text-align:center\">同up，但水平翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">down-mirrored</font></td>\n<td style=\"text-align:center\">同down，但水平翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">left-mirrored</font></td>\n<td style=\"text-align:center\">同left，但垂直翻转</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">right-mirrored</font></td>\n<td style=\"text-align:center\">同right，但垂直翻转</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wx-saveImageToPhotosAlbum\"><a href=\"#wx-saveImageToPhotosAlbum\" class=\"headerlink\" title=\"wx.saveImageToPhotosAlbum\"></a>wx.saveImageToPhotosAlbum</h2><pre><code>保存图片到系统相册。需要用户授权 scope.writePhotosAlbum。\n</code></pre><h3 id=\"示例代码-3\"><a href=\"#示例代码-3\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">    success(res) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"OBJECT参数说明-3\"><a href=\"#OBJECT参数说明-3\" class=\"headerlink\" title=\"OBJECT参数说明\"></a>OBJECT参数说明</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必填</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font face=\"fantasy\">filePath</font></td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">success</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">fail</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td><font face=\"fantasy\">complete</font></td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释\"></a>解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.success返回参数说明：</span><br><span class=\"line\">\terrMsg----String类型，调用结果</span><br></pre></td></tr></table></figure>"},{"title":"wxpromise-config基本配置","date":"2018-10-31T02:33:14.000Z","author":"T.2stt","comments":1,"_content":">小程序的配置包括全局配置和界面配置\n[全局配置](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE)app.json：pages、window、tabBar、networkTimeout、debug、functionalPages、subpackages、workers、requiredBackgroundModes、plugins、preloadRule、resizable、navigateToMiniProgramAppIdList\n[页面配置](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE)xxx.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键\n\n# 全局配置\n## pages\n\n    数组的第一项代表小程序的初始页面（首页）。小程序中新增/减少页面，都需要对 pages 数组进行修改。\n---\n\n## window\n\n    用于设置小程序的状态栏、导航条、标题、窗口背景色。\n    ![例如](https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009)\n---\n\n## tabBar\n\n    如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n    ![例子](https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009)\n---\n\n## networkTimeout\n    各类网络请求的超时时间，单位均为毫秒。(request,connectSocket,uploadFile,downloadFile)\n---\n\n## debug\n    调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发等。可以帮助开发者快速定位一些常见的问题。\n---\n\n## functionalPages\n支持某些接口不能在插件中直接调用\n- 获取用户信息\n- 支付\n[插件功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html)\n\n---\n## subpackages\n在构建时打包成不同的分包，用户在使用时<font color=\"red\">按需进行加载</font>。\n[分包加载的使用](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n[使用分包](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html)\n[独立分包,特殊类型的分包,独立分包不依赖主包即可运行](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html)\n[分包预下载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html)\n\n---\n## worker\n使用 Worker 处理多线程任务时，设置 Worker 代码放置的目录\n[多线程 Worker](https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html)\n\n---\n## requiredBackgroundModes\n申明需要后台运行的能力，类型为数组。目前支持以下项目：\n- audio: 后台音乐播放\n```bash\n{\n  \"pages\": [\"pages/index/index\"],\n  \"requiredBackgroundModes\": [\"audio\"]\n}\n```\n\n---\n\n## plugins\n声明小程序需要[使用的插件。](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html)\n\n---\n\n## preloadRule\n[声明分包预下载的规则。](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html)\n\n---\n\n## resizable\n在 iPad 上运行的小程序可以设置支持屏幕旋转。[屏幕响应显示区域变化](https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html)\n\n---\n## navigateToMiniProgramAppIdList\n当小程序需要使用 wx.navigateToMiniProgram 接口跳转到其他小程序时，需要先在配置文件中声明需要跳转的小程序 appId 列表，最多允许填写 10 个。\n[wx.navigateToMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html)\n\n# 页面配置\n    每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。\n    页面的配置只能设置 app.json 中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。以决定本页面的窗口表现，所以无需写 window 这个键。\n[demo](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE)\n\n## navigationBarBackgroundColor\n导航栏背景颜色\n\n---\n\n## navigationBarTextStyle\n    导航栏标题颜色，仅支持 black / white\n---\n## navigationBarTitleText\n    导航栏标题文字内容\n---\n## backgroundColor\n    窗口的背景色\n---\n\n## backgroundTextStyle\n    下拉 loading 的样式，仅支持 dark / light\n---\n\n## enablePullDownRefresh\n    是否全局开启下拉刷新。\n---\n## onReachBottomDistance\n    页面上拉触底事件触发时距页面底部距离，单位为px。\n---\n## backgroundColor\n    窗口的背景色\n---\n## disableScroll\n    设置为 true 则页面整体不能上下滚动；只在页面配置中有效，无法在 app.json 中设置该项\n---\n## 组件化的使用 usingComponents\n该字段是对引入的组件进行导入\n<font color=\"red\">【优点】</font>\n将其js、wxml、wxss都进行使用（demo模仿拼多多）\n```bash\n\"usingComponents\": {\n    \"slideTab\": \"../../components/navigator/index\",\n    \"productBox\":\"../../components/product_box/index\",\n    \"swiperImg\":\"../../components/swiper_img/index\",\n    \"loadmore\":\"../../components/loadmore/index\"\n},\n```","source":"_posts/wxpromise-config.md","raw":"---\ntitle: wxpromise-config基本配置\ndate: 2018-10-31 10:33:14\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n>小程序的配置包括全局配置和界面配置\n[全局配置](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE)app.json：pages、window、tabBar、networkTimeout、debug、functionalPages、subpackages、workers、requiredBackgroundModes、plugins、preloadRule、resizable、navigateToMiniProgramAppIdList\n[页面配置](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE)xxx.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键\n\n# 全局配置\n## pages\n\n    数组的第一项代表小程序的初始页面（首页）。小程序中新增/减少页面，都需要对 pages 数组进行修改。\n---\n\n## window\n\n    用于设置小程序的状态栏、导航条、标题、窗口背景色。\n    ![例如](https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009)\n---\n\n## tabBar\n\n    如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n    ![例子](https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009)\n---\n\n## networkTimeout\n    各类网络请求的超时时间，单位均为毫秒。(request,connectSocket,uploadFile,downloadFile)\n---\n\n## debug\n    调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发等。可以帮助开发者快速定位一些常见的问题。\n---\n\n## functionalPages\n支持某些接口不能在插件中直接调用\n- 获取用户信息\n- 支付\n[插件功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html)\n\n---\n## subpackages\n在构建时打包成不同的分包，用户在使用时<font color=\"red\">按需进行加载</font>。\n[分包加载的使用](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html)\n[使用分包](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html)\n[独立分包,特殊类型的分包,独立分包不依赖主包即可运行](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html)\n[分包预下载](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html)\n\n---\n## worker\n使用 Worker 处理多线程任务时，设置 Worker 代码放置的目录\n[多线程 Worker](https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html)\n\n---\n## requiredBackgroundModes\n申明需要后台运行的能力，类型为数组。目前支持以下项目：\n- audio: 后台音乐播放\n```bash\n{\n  \"pages\": [\"pages/index/index\"],\n  \"requiredBackgroundModes\": [\"audio\"]\n}\n```\n\n---\n\n## plugins\n声明小程序需要[使用的插件。](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html)\n\n---\n\n## preloadRule\n[声明分包预下载的规则。](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html)\n\n---\n\n## resizable\n在 iPad 上运行的小程序可以设置支持屏幕旋转。[屏幕响应显示区域变化](https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html)\n\n---\n## navigateToMiniProgramAppIdList\n当小程序需要使用 wx.navigateToMiniProgram 接口跳转到其他小程序时，需要先在配置文件中声明需要跳转的小程序 appId 列表，最多允许填写 10 个。\n[wx.navigateToMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html)\n\n# 页面配置\n    每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。\n    页面的配置只能设置 app.json 中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。以决定本页面的窗口表现，所以无需写 window 这个键。\n[demo](https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE)\n\n## navigationBarBackgroundColor\n导航栏背景颜色\n\n---\n\n## navigationBarTextStyle\n    导航栏标题颜色，仅支持 black / white\n---\n## navigationBarTitleText\n    导航栏标题文字内容\n---\n## backgroundColor\n    窗口的背景色\n---\n\n## backgroundTextStyle\n    下拉 loading 的样式，仅支持 dark / light\n---\n\n## enablePullDownRefresh\n    是否全局开启下拉刷新。\n---\n## onReachBottomDistance\n    页面上拉触底事件触发时距页面底部距离，单位为px。\n---\n## backgroundColor\n    窗口的背景色\n---\n## disableScroll\n    设置为 true 则页面整体不能上下滚动；只在页面配置中有效，无法在 app.json 中设置该项\n---\n## 组件化的使用 usingComponents\n该字段是对引入的组件进行导入\n<font color=\"red\">【优点】</font>\n将其js、wxml、wxss都进行使用（demo模仿拼多多）\n```bash\n\"usingComponents\": {\n    \"slideTab\": \"../../components/navigator/index\",\n    \"productBox\":\"../../components/product_box/index\",\n    \"swiperImg\":\"../../components/swiper_img/index\",\n    \"loadmore\":\"../../components/loadmore/index\"\n},\n```","slug":"wxpromise-config","published":1,"updated":"2018-11-01T07:30:54.000Z","_id":"cjny0swi600442kv767sobt5y","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>小程序的配置包括全局配置和界面配置<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">全局配置</a>app.json：pages、window、tabBar、networkTimeout、debug、functionalPages、subpackages、workers、requiredBackgroundModes、plugins、preloadRule、resizable、navigateToMiniProgramAppIdList<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">页面配置</a>xxx.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键</p>\n</blockquote>\n<h1 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h1><h2 id=\"pages\"><a href=\"#pages\" class=\"headerlink\" title=\"pages\"></a>pages</h2><pre><code>数组的第一项代表小程序的初始页面（首页）。小程序中新增/减少页面，都需要对 pages 数组进行修改。\n</code></pre><hr>\n<h2 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h2><pre><code>用于设置小程序的状态栏、导航条、标题、窗口背景色。\n![例如](https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009)\n</code></pre><hr>\n<h2 id=\"tabBar\"><a href=\"#tabBar\" class=\"headerlink\" title=\"tabBar\"></a>tabBar</h2><pre><code>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n![例子](https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009)\n</code></pre><hr>\n<h2 id=\"networkTimeout\"><a href=\"#networkTimeout\" class=\"headerlink\" title=\"networkTimeout\"></a>networkTimeout</h2><pre><code>各类网络请求的超时时间，单位均为毫秒。(request,connectSocket,uploadFile,downloadFile)\n</code></pre><hr>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><pre><code>调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发等。可以帮助开发者快速定位一些常见的问题。\n</code></pre><hr>\n<h2 id=\"functionalPages\"><a href=\"#functionalPages\" class=\"headerlink\" title=\"functionalPages\"></a>functionalPages</h2><p>支持某些接口不能在插件中直接调用</p>\n<ul>\n<li>获取用户信息</li>\n<li>支付<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html\" target=\"_blank\" rel=\"noopener\">插件功能页</a></li>\n</ul>\n<hr>\n<h2 id=\"subpackages\"><a href=\"#subpackages\" class=\"headerlink\" title=\"subpackages\"></a>subpackages</h2><p>在构建时打包成不同的分包，用户在使用时<font color=\"red\">按需进行加载</font>。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\" target=\"_blank\" rel=\"noopener\">分包加载的使用</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html\" target=\"_blank\" rel=\"noopener\">使用分包</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html\" target=\"_blank\" rel=\"noopener\">独立分包,特殊类型的分包,独立分包不依赖主包即可运行</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html\" target=\"_blank\" rel=\"noopener\">分包预下载</a></p>\n<hr>\n<h2 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h2><p>使用 Worker 处理多线程任务时，设置 Worker 代码放置的目录<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html\" target=\"_blank\" rel=\"noopener\">多线程 Worker</a></p>\n<hr>\n<h2 id=\"requiredBackgroundModes\"><a href=\"#requiredBackgroundModes\" class=\"headerlink\" title=\"requiredBackgroundModes\"></a>requiredBackgroundModes</h2><p>申明需要后台运行的能力，类型为数组。目前支持以下项目：</p>\n<ul>\n<li>audio: 后台音乐播放<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"pages\"</span>: [<span class=\"string\">\"pages/index/index\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"requiredBackgroundModes\"</span>: [<span class=\"string\">\"audio\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>声明小程序需要<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html\" target=\"_blank\" rel=\"noopener\">使用的插件。</a></p>\n<hr>\n<h2 id=\"preloadRule\"><a href=\"#preloadRule\" class=\"headerlink\" title=\"preloadRule\"></a>preloadRule</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html\" target=\"_blank\" rel=\"noopener\">声明分包预下载的规则。</a></p>\n<hr>\n<h2 id=\"resizable\"><a href=\"#resizable\" class=\"headerlink\" title=\"resizable\"></a>resizable</h2><p>在 iPad 上运行的小程序可以设置支持屏幕旋转。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html\" target=\"_blank\" rel=\"noopener\">屏幕响应显示区域变化</a></p>\n<hr>\n<h2 id=\"navigateToMiniProgramAppIdList\"><a href=\"#navigateToMiniProgramAppIdList\" class=\"headerlink\" title=\"navigateToMiniProgramAppIdList\"></a>navigateToMiniProgramAppIdList</h2><p>当小程序需要使用 wx.navigateToMiniProgram 接口跳转到其他小程序时，需要先在配置文件中声明需要跳转的小程序 appId 列表，最多允许填写 10 个。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html\" target=\"_blank\" rel=\"noopener\">wx.navigateToMiniProgram(Object object)</a></p>\n<h1 id=\"页面配置\"><a href=\"#页面配置\" class=\"headerlink\" title=\"页面配置\"></a>页面配置</h1><pre><code>每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。\n页面的配置只能设置 app.json 中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。以决定本页面的窗口表现，所以无需写 window 这个键。\n</code></pre><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"navigationBarBackgroundColor\"><a href=\"#navigationBarBackgroundColor\" class=\"headerlink\" title=\"navigationBarBackgroundColor\"></a>navigationBarBackgroundColor</h2><p>导航栏背景颜色</p>\n<hr>\n<h2 id=\"navigationBarTextStyle\"><a href=\"#navigationBarTextStyle\" class=\"headerlink\" title=\"navigationBarTextStyle\"></a>navigationBarTextStyle</h2><pre><code>导航栏标题颜色，仅支持 black / white\n</code></pre><hr>\n<h2 id=\"navigationBarTitleText\"><a href=\"#navigationBarTitleText\" class=\"headerlink\" title=\"navigationBarTitleText\"></a>navigationBarTitleText</h2><pre><code>导航栏标题文字内容\n</code></pre><hr>\n<h2 id=\"backgroundColor\"><a href=\"#backgroundColor\" class=\"headerlink\" title=\"backgroundColor\"></a>backgroundColor</h2><pre><code>窗口的背景色\n</code></pre><hr>\n<h2 id=\"backgroundTextStyle\"><a href=\"#backgroundTextStyle\" class=\"headerlink\" title=\"backgroundTextStyle\"></a>backgroundTextStyle</h2><pre><code>下拉 loading 的样式，仅支持 dark / light\n</code></pre><hr>\n<h2 id=\"enablePullDownRefresh\"><a href=\"#enablePullDownRefresh\" class=\"headerlink\" title=\"enablePullDownRefresh\"></a>enablePullDownRefresh</h2><pre><code>是否全局开启下拉刷新。\n</code></pre><hr>\n<h2 id=\"onReachBottomDistance\"><a href=\"#onReachBottomDistance\" class=\"headerlink\" title=\"onReachBottomDistance\"></a>onReachBottomDistance</h2><pre><code>页面上拉触底事件触发时距页面底部距离，单位为px。\n</code></pre><hr>\n<h2 id=\"backgroundColor-1\"><a href=\"#backgroundColor-1\" class=\"headerlink\" title=\"backgroundColor\"></a>backgroundColor</h2><pre><code>窗口的背景色\n</code></pre><hr>\n<h2 id=\"disableScroll\"><a href=\"#disableScroll\" class=\"headerlink\" title=\"disableScroll\"></a>disableScroll</h2><pre><code>设置为 true 则页面整体不能上下滚动；只在页面配置中有效，无法在 app.json 中设置该项\n</code></pre><hr>\n<h2 id=\"组件化的使用-usingComponents\"><a href=\"#组件化的使用-usingComponents\" class=\"headerlink\" title=\"组件化的使用 usingComponents\"></a>组件化的使用 usingComponents</h2><p>该字段是对引入的组件进行导入</p>\n<p><font color=\"red\">【优点】</font><br>将其js、wxml、wxss都进行使用（demo模仿拼多多）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"usingComponents\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"slideTab\"</span>: <span class=\"string\">\"../../components/navigator/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"productBox\"</span>:<span class=\"string\">\"../../components/product_box/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"swiperImg\"</span>:<span class=\"string\">\"../../components/swiper_img/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"loadmore\"</span>:<span class=\"string\">\"../../components/loadmore/index\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>小程序的配置包括全局配置和界面配置<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">全局配置</a>app.json：pages、window、tabBar、networkTimeout、debug、functionalPages、subpackages、workers、requiredBackgroundModes、plugins、preloadRule、resizable、navigateToMiniProgramAppIdList<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">页面配置</a>xxx.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键</p>\n</blockquote>\n<h1 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h1><h2 id=\"pages\"><a href=\"#pages\" class=\"headerlink\" title=\"pages\"></a>pages</h2><pre><code>数组的第一项代表小程序的初始页面（首页）。小程序中新增/减少页面，都需要对 pages 数组进行修改。\n</code></pre><hr>\n<h2 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h2><pre><code>用于设置小程序的状态栏、导航条、标题、窗口背景色。\n![例如](https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009)\n</code></pre><hr>\n<h2 id=\"tabBar\"><a href=\"#tabBar\" class=\"headerlink\" title=\"tabBar\"></a>tabBar</h2><pre><code>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n![例子](https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009)\n</code></pre><hr>\n<h2 id=\"networkTimeout\"><a href=\"#networkTimeout\" class=\"headerlink\" title=\"networkTimeout\"></a>networkTimeout</h2><pre><code>各类网络请求的超时时间，单位均为毫秒。(request,connectSocket,uploadFile,downloadFile)\n</code></pre><hr>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><pre><code>调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发等。可以帮助开发者快速定位一些常见的问题。\n</code></pre><hr>\n<h2 id=\"functionalPages\"><a href=\"#functionalPages\" class=\"headerlink\" title=\"functionalPages\"></a>functionalPages</h2><p>支持某些接口不能在插件中直接调用</p>\n<ul>\n<li>获取用户信息</li>\n<li>支付<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html\" target=\"_blank\" rel=\"noopener\">插件功能页</a></li>\n</ul>\n<hr>\n<h2 id=\"subpackages\"><a href=\"#subpackages\" class=\"headerlink\" title=\"subpackages\"></a>subpackages</h2><p>在构建时打包成不同的分包，用户在使用时<font color=\"red\">按需进行加载</font>。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html\" target=\"_blank\" rel=\"noopener\">分包加载的使用</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html\" target=\"_blank\" rel=\"noopener\">使用分包</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html\" target=\"_blank\" rel=\"noopener\">独立分包,特殊类型的分包,独立分包不依赖主包即可运行</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html\" target=\"_blank\" rel=\"noopener\">分包预下载</a></p>\n<hr>\n<h2 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h2><p>使用 Worker 处理多线程任务时，设置 Worker 代码放置的目录<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html\" target=\"_blank\" rel=\"noopener\">多线程 Worker</a></p>\n<hr>\n<h2 id=\"requiredBackgroundModes\"><a href=\"#requiredBackgroundModes\" class=\"headerlink\" title=\"requiredBackgroundModes\"></a>requiredBackgroundModes</h2><p>申明需要后台运行的能力，类型为数组。目前支持以下项目：</p>\n<ul>\n<li>audio: 后台音乐播放<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"pages\"</span>: [<span class=\"string\">\"pages/index/index\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"requiredBackgroundModes\"</span>: [<span class=\"string\">\"audio\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>声明小程序需要<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html\" target=\"_blank\" rel=\"noopener\">使用的插件。</a></p>\n<hr>\n<h2 id=\"preloadRule\"><a href=\"#preloadRule\" class=\"headerlink\" title=\"preloadRule\"></a>preloadRule</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html\" target=\"_blank\" rel=\"noopener\">声明分包预下载的规则。</a></p>\n<hr>\n<h2 id=\"resizable\"><a href=\"#resizable\" class=\"headerlink\" title=\"resizable\"></a>resizable</h2><p>在 iPad 上运行的小程序可以设置支持屏幕旋转。<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html\" target=\"_blank\" rel=\"noopener\">屏幕响应显示区域变化</a></p>\n<hr>\n<h2 id=\"navigateToMiniProgramAppIdList\"><a href=\"#navigateToMiniProgramAppIdList\" class=\"headerlink\" title=\"navigateToMiniProgramAppIdList\"></a>navigateToMiniProgramAppIdList</h2><p>当小程序需要使用 wx.navigateToMiniProgram 接口跳转到其他小程序时，需要先在配置文件中声明需要跳转的小程序 appId 列表，最多允许填写 10 个。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html\" target=\"_blank\" rel=\"noopener\">wx.navigateToMiniProgram(Object object)</a></p>\n<h1 id=\"页面配置\"><a href=\"#页面配置\" class=\"headerlink\" title=\"页面配置\"></a>页面配置</h1><pre><code>每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。\n页面的配置只能设置 app.json 中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。以决定本页面的窗口表现，所以无需写 window 这个键。\n</code></pre><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"navigationBarBackgroundColor\"><a href=\"#navigationBarBackgroundColor\" class=\"headerlink\" title=\"navigationBarBackgroundColor\"></a>navigationBarBackgroundColor</h2><p>导航栏背景颜色</p>\n<hr>\n<h2 id=\"navigationBarTextStyle\"><a href=\"#navigationBarTextStyle\" class=\"headerlink\" title=\"navigationBarTextStyle\"></a>navigationBarTextStyle</h2><pre><code>导航栏标题颜色，仅支持 black / white\n</code></pre><hr>\n<h2 id=\"navigationBarTitleText\"><a href=\"#navigationBarTitleText\" class=\"headerlink\" title=\"navigationBarTitleText\"></a>navigationBarTitleText</h2><pre><code>导航栏标题文字内容\n</code></pre><hr>\n<h2 id=\"backgroundColor\"><a href=\"#backgroundColor\" class=\"headerlink\" title=\"backgroundColor\"></a>backgroundColor</h2><pre><code>窗口的背景色\n</code></pre><hr>\n<h2 id=\"backgroundTextStyle\"><a href=\"#backgroundTextStyle\" class=\"headerlink\" title=\"backgroundTextStyle\"></a>backgroundTextStyle</h2><pre><code>下拉 loading 的样式，仅支持 dark / light\n</code></pre><hr>\n<h2 id=\"enablePullDownRefresh\"><a href=\"#enablePullDownRefresh\" class=\"headerlink\" title=\"enablePullDownRefresh\"></a>enablePullDownRefresh</h2><pre><code>是否全局开启下拉刷新。\n</code></pre><hr>\n<h2 id=\"onReachBottomDistance\"><a href=\"#onReachBottomDistance\" class=\"headerlink\" title=\"onReachBottomDistance\"></a>onReachBottomDistance</h2><pre><code>页面上拉触底事件触发时距页面底部距离，单位为px。\n</code></pre><hr>\n<h2 id=\"backgroundColor-1\"><a href=\"#backgroundColor-1\" class=\"headerlink\" title=\"backgroundColor\"></a>backgroundColor</h2><pre><code>窗口的背景色\n</code></pre><hr>\n<h2 id=\"disableScroll\"><a href=\"#disableScroll\" class=\"headerlink\" title=\"disableScroll\"></a>disableScroll</h2><pre><code>设置为 true 则页面整体不能上下滚动；只在页面配置中有效，无法在 app.json 中设置该项\n</code></pre><hr>\n<h2 id=\"组件化的使用-usingComponents\"><a href=\"#组件化的使用-usingComponents\" class=\"headerlink\" title=\"组件化的使用 usingComponents\"></a>组件化的使用 usingComponents</h2><p>该字段是对引入的组件进行导入</p>\n<p><font color=\"red\">【优点】</font><br>将其js、wxml、wxss都进行使用（demo模仿拼多多）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"usingComponents\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"slideTab\"</span>: <span class=\"string\">\"../../components/navigator/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"productBox\"</span>:<span class=\"string\">\"../../components/product_box/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"swiperImg\"</span>:<span class=\"string\">\"../../components/swiper_img/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"loadmore\"</span>:<span class=\"string\">\"../../components/loadmore/index\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n"},{"title":"wxpromise的元素（试图容器）","date":"2018-05-07T12:26:31.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是 wxpromise的元素与html的差别,通过对比的方式进行学习\nnavigator-进行界面的跳转、小程序的跳转、tab的跳转\n\n# 基本元素\n\n## view\n\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/view.html)\n###  项目总结\n```bash\n\t1.属于块级元素（div）;\n\t2.如果需要使用滚动视图，请使用 scroll-view;\n```\n\n---\n\n## scroll-view\n可滚动视图区域。\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)\n\n<font color=\"red\">【注意：】</font>\n\n1. 使用竖向滚动时，需要给<scroll-view/>一个固定高度，通过 WXSS 设置 height。\n2. 请勿在 scroll-view 中使用 textarea、map、canvas、video 组件\n3. scroll-into-view 的优先级高于 scroll-top\n4. 在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh\n5. 若要使用下拉刷新，请使用页面的滚动，而不是 scroll-view ，这样也能通过点击顶部状态栏回到页面顶部\n6. 如何实现相应的滚动（点击分类，滚动商品到对应的分类处）\n```bash\n<scroll-view class=\"list_box\" scroll-y=\"true\" scroll-into-view=\"currentType_{{selected}}\" bindscroll=\"goodsScrollFn\" bindtouchstart=\"touchstartFn\">\n    <view style=\"position: relative;\" id=\"currentType_{{index}}\" wx:for=\"{{menu}}\" wx:key=\"\" wx:for-item=\"info\">\n        <view class=\"title_\">{{info.typeName}}</view>\n        <view class=\"info_box\">\n            <block wx:for=\"{{info.menuContent}}\" wx:key=\"\">\n                商品的内容块\n            </block>\n        </view>\n    </view>\n</scroll-view>\n```\n    <font color=\"red\">【解析其实现原理以及注意事项】</font>\n    1. 商品信息分类以及商品要全部给出，不要用v-if进行部分展示；\n    2. scroll-into-view=\"currentType_{{selected}}\"要与要被滚动到的商品的id=\"currentType_{{index}}\"一致对应上；\n    3. 设置滚动事件\n    ```bash\n    goodsScrollFn: function (e){\n        let _top = e.detail.scrollTop;\n        let progress = parseInt(_top / this.data.ht); // 计算出 当前的下标\n        if (progress > this.data.selected) { // 向上拉动屏幕\n            this.setData({ selected: progress });\n            this.turnMenu(this.data.selected);\n        } else if (progress == this.data.selected) {\n        return false;\n        } else { // 向下拉动屏幕\n            if (this.data.isTouch) {\n                this.setData({\n                    selected: progress == 0 ? 0 : progress--\n                });\n                this.turnMenu(progress);\n            }\n        }\n    },\n    ```\n    其中ht是在onload的时候获得\n    ```bash\n    onLoad: function (options) {\n        // 框架尺寸设置\n        wx.getSystemInfo({\n            success: (options) => {\n            var wd = options.screenWidth; // 页面宽度\n            var ht = options.windowHeight; // 页面高度\n            this.setData({ wd: wd, ht: ht })\n            }\n        });\n    },\n    ```\n    会发现问题，当点击分类的时候也会出发滚动事件（progress为0的时候）\n    所以需要去阻止：bindtouchstart=\"touchstartFn\"   \n    ```bash\n<!-- 点击的时候标志开始滚动 -->\ntouchstartFn: function(e) {\n    this.setData({\n        isTouch:true\n    })\n},\n在isTouch的时候才让其执行滚动事件，否则执行turnMenu事件，其中turnMenu事件中\nturnMenu: function (e) {\n    let index_= '';\n    if (e.currentTarget){// 点击的时候\n        this.setData({\n            isTouch:false // 非touch事件\n        })\n        index_ = e.currentTarget.dataset.index\n    } else {\n        index_ = e\n    }\n    this.setData({\n        selected: index_\n    })\n},\n```\n---\n\n## swiper\n滑块视图容器。\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html)\n\n<font color=\"red\">【注意：】</font>\n\n1.  如果在 bindchange 的事件回调函数中使用 setData 改变 current 值，则有可能导致 setData 被不停地调用，因而通常情况下请在改变 current 值前检测 source 字段来判断是否是由于用户触摸引起。\n2. swiper的小点点的样式更改通过.wx-swiper-dots进行更改\n```bash\n<swiper class=\"swiper-box\" indicator-dots=\"{{ indicatordots }}\" autoplay=\"{{ autoplay }}\">\n    <block wx:for=\"{{ swiperItem }}\">\n        <swiper-item>\n            <navigator url=\"{{ item.linkUrl }}\">\n                <image class=\"slide-image\" src=\"{{ item.imgUrl }}\"></image>\n            </navigator>\n        </swiper-item>\n    </block>\n</swiper>\n.swiper-box .wx-swiper-dots.wx-swiper-dots-horizontal{\n     margin-bottom: 2rpx;\n}\n.swiper-box .wx-swiper-dot{\n    width:40rpx;\n    display: inline-flex;\n    height: 10rpx;\n    margin-left: 20rpx;\n    justify-content:space-between;\n}\n.swiper-box .wx-swiper-dot::before{\n    content: '';\n    flex-grow: 1; \n    background: rgba(255,255,255,0.8);\n    border-radius: 8rpx\n}\n.swiper-box .wx-swiper-dot-active::before{\n    background:rgba(244,0,0,0.8);   \n}\n```\n---\n\n# 基础内容\n\n## text\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/text.html)\n\n<font color=\"red\">Tips</font>\n\n```bash\n1.decode可以解析的有 &nbsp; &lt; &gt; &amp; &apos; &ensp; &emsp;\n2.各个操作系统的空格标准并不一致。\n3.<text/> 组件内只支持 <text/> 嵌套。\n4.除了文本节点以外的其他节点都无法长按选中。\n```\n\n### 项目总结\n```bash\n\t1.属于行内元素（span）;\n\t2.低版本的<text/> 组件内嵌的 <text/> style 设置可能不会生效；\n```\n---\n\n\n# 媒体组建\n\n## image\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n<font color=\"red\">【注意：】</font>\n```bash\n1.image组件默认宽度300px、高度225px;\n2.image组件中二维码/小程序码图片不支持长按识别。仅在wx.previewImage中支持长按识别。\n```\n---\n\n# 导航\n\n## navigator\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n<font color=\"red\">【注意：】</font>\n1. navigator-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}, <navigator/> 的子节点背景色应为透明色","source":"_posts/wxpromise-element.md","raw":"---\ntitle: wxpromise的元素（试图容器）\ndate: 2018-05-07 20:26:31\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序，image元素]\ncategories:\n- [wx小程序]\n---\n\n>此章节记载的是 wxpromise的元素与html的差别,通过对比的方式进行学习\nnavigator-进行界面的跳转、小程序的跳转、tab的跳转\n\n# 基本元素\n\n## view\n\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/view.html)\n###  项目总结\n```bash\n\t1.属于块级元素（div）;\n\t2.如果需要使用滚动视图，请使用 scroll-view;\n```\n\n---\n\n## scroll-view\n可滚动视图区域。\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)\n\n<font color=\"red\">【注意：】</font>\n\n1. 使用竖向滚动时，需要给<scroll-view/>一个固定高度，通过 WXSS 设置 height。\n2. 请勿在 scroll-view 中使用 textarea、map、canvas、video 组件\n3. scroll-into-view 的优先级高于 scroll-top\n4. 在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh\n5. 若要使用下拉刷新，请使用页面的滚动，而不是 scroll-view ，这样也能通过点击顶部状态栏回到页面顶部\n6. 如何实现相应的滚动（点击分类，滚动商品到对应的分类处）\n```bash\n<scroll-view class=\"list_box\" scroll-y=\"true\" scroll-into-view=\"currentType_{{selected}}\" bindscroll=\"goodsScrollFn\" bindtouchstart=\"touchstartFn\">\n    <view style=\"position: relative;\" id=\"currentType_{{index}}\" wx:for=\"{{menu}}\" wx:key=\"\" wx:for-item=\"info\">\n        <view class=\"title_\">{{info.typeName}}</view>\n        <view class=\"info_box\">\n            <block wx:for=\"{{info.menuContent}}\" wx:key=\"\">\n                商品的内容块\n            </block>\n        </view>\n    </view>\n</scroll-view>\n```\n    <font color=\"red\">【解析其实现原理以及注意事项】</font>\n    1. 商品信息分类以及商品要全部给出，不要用v-if进行部分展示；\n    2. scroll-into-view=\"currentType_{{selected}}\"要与要被滚动到的商品的id=\"currentType_{{index}}\"一致对应上；\n    3. 设置滚动事件\n    ```bash\n    goodsScrollFn: function (e){\n        let _top = e.detail.scrollTop;\n        let progress = parseInt(_top / this.data.ht); // 计算出 当前的下标\n        if (progress > this.data.selected) { // 向上拉动屏幕\n            this.setData({ selected: progress });\n            this.turnMenu(this.data.selected);\n        } else if (progress == this.data.selected) {\n        return false;\n        } else { // 向下拉动屏幕\n            if (this.data.isTouch) {\n                this.setData({\n                    selected: progress == 0 ? 0 : progress--\n                });\n                this.turnMenu(progress);\n            }\n        }\n    },\n    ```\n    其中ht是在onload的时候获得\n    ```bash\n    onLoad: function (options) {\n        // 框架尺寸设置\n        wx.getSystemInfo({\n            success: (options) => {\n            var wd = options.screenWidth; // 页面宽度\n            var ht = options.windowHeight; // 页面高度\n            this.setData({ wd: wd, ht: ht })\n            }\n        });\n    },\n    ```\n    会发现问题，当点击分类的时候也会出发滚动事件（progress为0的时候）\n    所以需要去阻止：bindtouchstart=\"touchstartFn\"   \n    ```bash\n<!-- 点击的时候标志开始滚动 -->\ntouchstartFn: function(e) {\n    this.setData({\n        isTouch:true\n    })\n},\n在isTouch的时候才让其执行滚动事件，否则执行turnMenu事件，其中turnMenu事件中\nturnMenu: function (e) {\n    let index_= '';\n    if (e.currentTarget){// 点击的时候\n        this.setData({\n            isTouch:false // 非touch事件\n        })\n        index_ = e.currentTarget.dataset.index\n    } else {\n        index_ = e\n    }\n    this.setData({\n        selected: index_\n    })\n},\n```\n---\n\n## swiper\n滑块视图容器。\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html)\n\n<font color=\"red\">【注意：】</font>\n\n1.  如果在 bindchange 的事件回调函数中使用 setData 改变 current 值，则有可能导致 setData 被不停地调用，因而通常情况下请在改变 current 值前检测 source 字段来判断是否是由于用户触摸引起。\n2. swiper的小点点的样式更改通过.wx-swiper-dots进行更改\n```bash\n<swiper class=\"swiper-box\" indicator-dots=\"{{ indicatordots }}\" autoplay=\"{{ autoplay }}\">\n    <block wx:for=\"{{ swiperItem }}\">\n        <swiper-item>\n            <navigator url=\"{{ item.linkUrl }}\">\n                <image class=\"slide-image\" src=\"{{ item.imgUrl }}\"></image>\n            </navigator>\n        </swiper-item>\n    </block>\n</swiper>\n.swiper-box .wx-swiper-dots.wx-swiper-dots-horizontal{\n     margin-bottom: 2rpx;\n}\n.swiper-box .wx-swiper-dot{\n    width:40rpx;\n    display: inline-flex;\n    height: 10rpx;\n    margin-left: 20rpx;\n    justify-content:space-between;\n}\n.swiper-box .wx-swiper-dot::before{\n    content: '';\n    flex-grow: 1; \n    background: rgba(255,255,255,0.8);\n    border-radius: 8rpx\n}\n.swiper-box .wx-swiper-dot-active::before{\n    background:rgba(244,0,0,0.8);   \n}\n```\n---\n\n# 基础内容\n\n## text\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/text.html)\n\n<font color=\"red\">Tips</font>\n\n```bash\n1.decode可以解析的有 &nbsp; &lt; &gt; &amp; &apos; &ensp; &emsp;\n2.各个操作系统的空格标准并不一致。\n3.<text/> 组件内只支持 <text/> 嵌套。\n4.除了文本节点以外的其他节点都无法长按选中。\n```\n\n### 项目总结\n```bash\n\t1.属于行内元素（span）;\n\t2.低版本的<text/> 组件内嵌的 <text/> style 设置可能不会生效；\n```\n---\n\n\n# 媒体组建\n\n## image\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n<font color=\"red\">【注意：】</font>\n```bash\n1.image组件默认宽度300px、高度225px;\n2.image组件中二维码/小程序码图片不支持长按识别。仅在wx.previewImage中支持长按识别。\n```\n---\n\n# 导航\n\n## navigator\n[官网](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n<font color=\"red\">【注意：】</font>\n1. navigator-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}, <navigator/> 的子节点背景色应为透明色","slug":"wxpromise-element","published":1,"updated":"2018-11-01T07:30:20.484Z","_id":"cjny0swie004a2kv7wmoqoodj","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是 wxpromise的元素与html的差别,通过对比的方式进行学习<br>navigator-进行界面的跳转、小程序的跳转、tab的跳转</p>\n</blockquote>\n<h1 id=\"基本元素\"><a href=\"#基本元素\" class=\"headerlink\" title=\"基本元素\"></a>基本元素</h1><h2 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/view.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.属于块级元素（div）;</span><br><span class=\"line\">2.如果需要使用滚动视图，请使用 scroll-view;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a>scroll-view</h2><p>可滚动视图区域。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">【注意：】</font>\n\n<ol>\n<li>使用竖向滚动时，需要给<scroll-view>一个固定高度，通过 WXSS 设置 height。</scroll-view></li>\n<li>请勿在 scroll-view 中使用 textarea、map、canvas、video 组件</li>\n<li>scroll-into-view 的优先级高于 scroll-top</li>\n<li>在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh</li>\n<li>若要使用下拉刷新，请使用页面的滚动，而不是 scroll-view ，这样也能通过点击顶部状态栏回到页面顶部</li>\n<li><p>如何实现相应的滚动（点击分类，滚动商品到对应的分类处）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll-view class=<span class=\"string\">\"list_box\"</span> scroll-y=<span class=\"string\">\"true\"</span> scroll-into-view=<span class=\"string\">\"currentType_&#123;&#123;selected&#125;&#125;\"</span> bindscroll=<span class=\"string\">\"goodsScrollFn\"</span> bindtouchstart=<span class=\"string\">\"touchstartFn\"</span>&gt;</span><br><span class=\"line\">    &lt;view style=<span class=\"string\">\"position: relative;\"</span> id=<span class=\"string\">\"currentType_&#123;&#123;index&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;menu&#125;&#125;\"</span> wx:key=<span class=\"string\">\"\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"info\"</span>&gt;</span><br><span class=\"line\">        &lt;view class=<span class=\"string\">\"title_\"</span>&gt;&#123;&#123;info.typeName&#125;&#125;&lt;/view&gt;</span><br><span class=\"line\">        &lt;view class=<span class=\"string\">\"info_box\"</span>&gt;</span><br><span class=\"line\">            &lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;info.menuContent&#125;&#125;\"</span> wx:key=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">                商品的内容块</span><br><span class=\"line\">            &lt;/block&gt;</span><br><span class=\"line\">        &lt;/view&gt;</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>\n<p> <font color=\"red\">【解析其实现原理以及注意事项】</font></p>\n<ol>\n<li>商品信息分类以及商品要全部给出，不要用v-if进行部分展示；</li>\n<li>scroll-into-view=”currentType_“要与要被滚动到的商品的id=”currentType_“一致对应上；</li>\n<li><p>设置滚动事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goodsScrollFn: <span class=\"keyword\">function</span> (e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> _top = e.detail.scrollTop;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> progress = parseInt(_top / this.data.ht); // 计算出 当前的下标</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (progress &gt; this.data.selected) &#123; // 向上拉动屏幕</span><br><span class=\"line\">        this.setData(&#123; selected: progress &#125;);</span><br><span class=\"line\">        this.turnMenu(this.data.selected);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (progress == this.data.selected) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; // 向下拉动屏幕</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this.data.isTouch) &#123;</span><br><span class=\"line\">            this.setData(&#123;</span><br><span class=\"line\">                selected: progress == 0 ? 0 : progress--</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.turnMenu(progress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>其中ht是在onload的时候获得</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLoad: <span class=\"keyword\">function</span> (options) &#123;</span><br><span class=\"line\">    // 框架尺寸设置</span><br><span class=\"line\">    wx.getSystemInfo(&#123;</span><br><span class=\"line\">        success: (options) =&gt; &#123;</span><br><span class=\"line\">        var wd = options.screenWidth; // 页面宽度</span><br><span class=\"line\">        var ht = options.windowHeight; // 页面高度</span><br><span class=\"line\">        this.setData(&#123; wd: wd, ht: ht &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>会发现问题，当点击分类的时候也会出发滚动事件（progress为0的时候）<br>所以需要去阻止：bindtouchstart=”touchstartFn”   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 点击的时候标志开始滚动 --&gt;</span><br><span class=\"line\">touchstartFn: <span class=\"keyword\">function</span>(e) &#123;</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">        isTouch:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">在isTouch的时候才让其执行滚动事件，否则执行turnMenu事件，其中turnMenu事件中</span><br><span class=\"line\">turnMenu: <span class=\"keyword\">function</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> index_= <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.currentTarget)&#123;// 点击的时候</span><br><span class=\"line\">        this.setData(&#123;</span><br><span class=\"line\">            isTouch:<span class=\"literal\">false</span> // 非touch事件</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        index_ = e.currentTarget.dataset.index</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        index_ = e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">        selected: index_</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a>swiper</h2><p>滑块视图容器。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">【注意：】</font>\n\n<ol>\n<li>如果在 bindchange 的事件回调函数中使用 setData 改变 current 值，则有可能导致 setData 被不停地调用，因而通常情况下请在改变 current 值前检测 source 字段来判断是否是由于用户触摸引起。</li>\n<li>swiper的小点点的样式更改通过.wx-swiper-dots进行更改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;swiper class=<span class=\"string\">\"swiper-box\"</span> indicator-dots=<span class=\"string\">\"&#123;&#123; indicatordots &#125;&#125;\"</span> autoplay=<span class=\"string\">\"&#123;&#123; autoplay &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">    &lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123; swiperItem &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">        &lt;swiper-item&gt;</span><br><span class=\"line\">            &lt;navigator url=<span class=\"string\">\"&#123;&#123; item.linkUrl &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">                &lt;image class=<span class=\"string\">\"slide-image\"</span> src=<span class=\"string\">\"&#123;&#123; item.imgUrl &#125;&#125;\"</span>&gt;&lt;/image&gt;</span><br><span class=\"line\">            &lt;/navigator&gt;</span><br><span class=\"line\">        &lt;/swiper-item&gt;</span><br><span class=\"line\">    &lt;/block&gt;</span><br><span class=\"line\">&lt;/swiper&gt;</span><br><span class=\"line\">.swiper-box .wx-swiper-dots.wx-swiper-dots-horizontal&#123;</span><br><span class=\"line\">     margin-bottom: 2rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot&#123;</span><br><span class=\"line\">    width:40rpx;</span><br><span class=\"line\">    display: inline-flex;</span><br><span class=\"line\">    height: 10rpx;</span><br><span class=\"line\">    margin-left: 20rpx;</span><br><span class=\"line\">    justify-content:space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot::before&#123;</span><br><span class=\"line\">    content: <span class=\"string\">''</span>;</span><br><span class=\"line\">    flex-grow: 1; </span><br><span class=\"line\">    background: rgba(255,255,255,0.8);</span><br><span class=\"line\">    border-radius: 8rpx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot-active::before&#123;</span><br><span class=\"line\">    background:rgba(244,0,0,0.8);   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h1 id=\"基础内容\"><a href=\"#基础内容\" class=\"headerlink\" title=\"基础内容\"></a>基础内容</h1><h2 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text\"></a>text</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/text.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">Tips</font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.decode可以解析的有 &amp;nbsp; &amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp;</span><br><span class=\"line\">2.各个操作系统的空格标准并不一致。</span><br><span class=\"line\">3.&lt;text/&gt; 组件内只支持 &lt;text/&gt; 嵌套。</span><br><span class=\"line\">4.除了文本节点以外的其他节点都无法长按选中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目总结-1\"><a href=\"#项目总结-1\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.属于行内元素（span）;</span><br><span class=\"line\">2.低版本的&lt;text/&gt; 组件内嵌的 &lt;text/&gt; style 设置可能不会生效；</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"媒体组建\"><a href=\"#媒体组建\" class=\"headerlink\" title=\"媒体组建\"></a>媒体组建</h1><h2 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p><font color=\"red\">【注意：】</font><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.image组件默认宽度300px、高度225px;</span><br><span class=\"line\">2.image组件中二维码/小程序码图片不支持长按识别。仅在wx.previewImage中支持长按识别。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><h2 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p><font color=\"red\">【注意：】</font></p>\n<ol>\n<li>navigator-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}, <navigator> 的子节点背景色应为透明色</navigator></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是 wxpromise的元素与html的差别,通过对比的方式进行学习<br>navigator-进行界面的跳转、小程序的跳转、tab的跳转</p>\n</blockquote>\n<h1 id=\"基本元素\"><a href=\"#基本元素\" class=\"headerlink\" title=\"基本元素\"></a>基本元素</h1><h2 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/view.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.属于块级元素（div）;</span><br><span class=\"line\">2.如果需要使用滚动视图，请使用 scroll-view;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"scroll-view\"><a href=\"#scroll-view\" class=\"headerlink\" title=\"scroll-view\"></a>scroll-view</h2><p>可滚动视图区域。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">【注意：】</font>\n\n<ol>\n<li>使用竖向滚动时，需要给<scroll-view>一个固定高度，通过 WXSS 设置 height。</scroll-view></li>\n<li>请勿在 scroll-view 中使用 textarea、map、canvas、video 组件</li>\n<li>scroll-into-view 的优先级高于 scroll-top</li>\n<li>在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh</li>\n<li>若要使用下拉刷新，请使用页面的滚动，而不是 scroll-view ，这样也能通过点击顶部状态栏回到页面顶部</li>\n<li><p>如何实现相应的滚动（点击分类，滚动商品到对应的分类处）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll-view class=<span class=\"string\">\"list_box\"</span> scroll-y=<span class=\"string\">\"true\"</span> scroll-into-view=<span class=\"string\">\"currentType_&#123;&#123;selected&#125;&#125;\"</span> bindscroll=<span class=\"string\">\"goodsScrollFn\"</span> bindtouchstart=<span class=\"string\">\"touchstartFn\"</span>&gt;</span><br><span class=\"line\">    &lt;view style=<span class=\"string\">\"position: relative;\"</span> id=<span class=\"string\">\"currentType_&#123;&#123;index&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;menu&#125;&#125;\"</span> wx:key=<span class=\"string\">\"\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"info\"</span>&gt;</span><br><span class=\"line\">        &lt;view class=<span class=\"string\">\"title_\"</span>&gt;&#123;&#123;info.typeName&#125;&#125;&lt;/view&gt;</span><br><span class=\"line\">        &lt;view class=<span class=\"string\">\"info_box\"</span>&gt;</span><br><span class=\"line\">            &lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;info.menuContent&#125;&#125;\"</span> wx:key=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">                商品的内容块</span><br><span class=\"line\">            &lt;/block&gt;</span><br><span class=\"line\">        &lt;/view&gt;</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>\n<p> <font color=\"red\">【解析其实现原理以及注意事项】</font></p>\n<ol>\n<li>商品信息分类以及商品要全部给出，不要用v-if进行部分展示；</li>\n<li>scroll-into-view=”currentType_“要与要被滚动到的商品的id=”currentType_“一致对应上；</li>\n<li><p>设置滚动事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goodsScrollFn: <span class=\"keyword\">function</span> (e)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> _top = e.detail.scrollTop;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> progress = parseInt(_top / this.data.ht); // 计算出 当前的下标</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (progress &gt; this.data.selected) &#123; // 向上拉动屏幕</span><br><span class=\"line\">        this.setData(&#123; selected: progress &#125;);</span><br><span class=\"line\">        this.turnMenu(this.data.selected);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (progress == this.data.selected) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; // 向下拉动屏幕</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this.data.isTouch) &#123;</span><br><span class=\"line\">            this.setData(&#123;</span><br><span class=\"line\">                selected: progress == 0 ? 0 : progress--</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.turnMenu(progress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>其中ht是在onload的时候获得</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLoad: <span class=\"keyword\">function</span> (options) &#123;</span><br><span class=\"line\">    // 框架尺寸设置</span><br><span class=\"line\">    wx.getSystemInfo(&#123;</span><br><span class=\"line\">        success: (options) =&gt; &#123;</span><br><span class=\"line\">        var wd = options.screenWidth; // 页面宽度</span><br><span class=\"line\">        var ht = options.windowHeight; // 页面高度</span><br><span class=\"line\">        this.setData(&#123; wd: wd, ht: ht &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>会发现问题，当点击分类的时候也会出发滚动事件（progress为0的时候）<br>所以需要去阻止：bindtouchstart=”touchstartFn”   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 点击的时候标志开始滚动 --&gt;</span><br><span class=\"line\">touchstartFn: <span class=\"keyword\">function</span>(e) &#123;</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">        isTouch:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">在isTouch的时候才让其执行滚动事件，否则执行turnMenu事件，其中turnMenu事件中</span><br><span class=\"line\">turnMenu: <span class=\"keyword\">function</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> index_= <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.currentTarget)&#123;// 点击的时候</span><br><span class=\"line\">        this.setData(&#123;</span><br><span class=\"line\">            isTouch:<span class=\"literal\">false</span> // 非touch事件</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        index_ = e.currentTarget.dataset.index</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        index_ = e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">        selected: index_</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"swiper\"><a href=\"#swiper\" class=\"headerlink\" title=\"swiper\"></a>swiper</h2><p>滑块视图容器。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">【注意：】</font>\n\n<ol>\n<li>如果在 bindchange 的事件回调函数中使用 setData 改变 current 值，则有可能导致 setData 被不停地调用，因而通常情况下请在改变 current 值前检测 source 字段来判断是否是由于用户触摸引起。</li>\n<li>swiper的小点点的样式更改通过.wx-swiper-dots进行更改<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;swiper class=<span class=\"string\">\"swiper-box\"</span> indicator-dots=<span class=\"string\">\"&#123;&#123; indicatordots &#125;&#125;\"</span> autoplay=<span class=\"string\">\"&#123;&#123; autoplay &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">    &lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123; swiperItem &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">        &lt;swiper-item&gt;</span><br><span class=\"line\">            &lt;navigator url=<span class=\"string\">\"&#123;&#123; item.linkUrl &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">                &lt;image class=<span class=\"string\">\"slide-image\"</span> src=<span class=\"string\">\"&#123;&#123; item.imgUrl &#125;&#125;\"</span>&gt;&lt;/image&gt;</span><br><span class=\"line\">            &lt;/navigator&gt;</span><br><span class=\"line\">        &lt;/swiper-item&gt;</span><br><span class=\"line\">    &lt;/block&gt;</span><br><span class=\"line\">&lt;/swiper&gt;</span><br><span class=\"line\">.swiper-box .wx-swiper-dots.wx-swiper-dots-horizontal&#123;</span><br><span class=\"line\">     margin-bottom: 2rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot&#123;</span><br><span class=\"line\">    width:40rpx;</span><br><span class=\"line\">    display: inline-flex;</span><br><span class=\"line\">    height: 10rpx;</span><br><span class=\"line\">    margin-left: 20rpx;</span><br><span class=\"line\">    justify-content:space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot::before&#123;</span><br><span class=\"line\">    content: <span class=\"string\">''</span>;</span><br><span class=\"line\">    flex-grow: 1; </span><br><span class=\"line\">    background: rgba(255,255,255,0.8);</span><br><span class=\"line\">    border-radius: 8rpx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.swiper-box .wx-swiper-dot-active::before&#123;</span><br><span class=\"line\">    background:rgba(244,0,0,0.8);   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h1 id=\"基础内容\"><a href=\"#基础内容\" class=\"headerlink\" title=\"基础内容\"></a>基础内容</h1><h2 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text\"></a>text</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/text.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<font color=\"red\">Tips</font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.decode可以解析的有 &amp;nbsp; &amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp;</span><br><span class=\"line\">2.各个操作系统的空格标准并不一致。</span><br><span class=\"line\">3.&lt;text/&gt; 组件内只支持 &lt;text/&gt; 嵌套。</span><br><span class=\"line\">4.除了文本节点以外的其他节点都无法长按选中。</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目总结-1\"><a href=\"#项目总结-1\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.属于行内元素（span）;</span><br><span class=\"line\">2.低版本的&lt;text/&gt; 组件内嵌的 &lt;text/&gt; style 设置可能不会生效；</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"媒体组建\"><a href=\"#媒体组建\" class=\"headerlink\" title=\"媒体组建\"></a>媒体组建</h1><h2 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p><font color=\"red\">【注意：】</font><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.image组件默认宽度300px、高度225px;</span><br><span class=\"line\">2.image组件中二维码/小程序码图片不支持长按识别。仅在wx.previewImage中支持长按识别。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><h2 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h2><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p><font color=\"red\">【注意：】</font></p>\n<ol>\n<li>navigator-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}, <navigator> 的子节点背景色应为透明色</navigator></li>\n</ol>\n"},{"title":"wxpromise-常见bug","date":"2018-10-17T03:49:06.000Z","author":"T.2stt","comments":1,"_content":"\n>记下踩过的坑1.宽度100%超过界面；2.传boolean类型的值\n\n# wxss\n## width：100%，界面显示不全\n盒模型选择错误,进行盒模型初始化\n```bash\n在app.wxss\nview,text{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n```\n\n# js\n## 方法中Boolean参数的传递\n关键字(需要在双引号之内)\ntrue：boolean 类型的 true，代表真值。\nfalse： boolean 类型的 false，代表假值。\n```bash\n<checkbox checked=\"{{false}}\"> </checkbox>\n特别注意：不要直接写 checked=\"false\"，其计算结果是一个字符串，转成 boolean 类型后代表真值。\n```","source":"_posts/wxpromise-error.md","raw":"---\ntitle: wxpromise-常见bug\ndate: 2018-10-17 11:49:06\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n\n>记下踩过的坑1.宽度100%超过界面；2.传boolean类型的值\n\n# wxss\n## width：100%，界面显示不全\n盒模型选择错误,进行盒模型初始化\n```bash\n在app.wxss\nview,text{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n```\n\n# js\n## 方法中Boolean参数的传递\n关键字(需要在双引号之内)\ntrue：boolean 类型的 true，代表真值。\nfalse： boolean 类型的 false，代表假值。\n```bash\n<checkbox checked=\"{{false}}\"> </checkbox>\n特别注意：不要直接写 checked=\"false\"，其计算结果是一个字符串，转成 boolean 类型后代表真值。\n```","slug":"wxpromise-error","published":1,"updated":"2018-11-01T07:31:04.204Z","_id":"cjny0swif004e2kv7sg2ijizi","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记下踩过的坑1.宽度100%超过界面；2.传boolean类型的值</p>\n</blockquote>\n<h1 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h1><h2 id=\"width：100-，界面显示不全\"><a href=\"#width：100-，界面显示不全\" class=\"headerlink\" title=\"width：100%，界面显示不全\"></a>width：100%，界面显示不全</h2><p>盒模型选择错误,进行盒模型初始化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在app.wxss</span><br><span class=\"line\">view,text&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><h2 id=\"方法中Boolean参数的传递\"><a href=\"#方法中Boolean参数的传递\" class=\"headerlink\" title=\"方法中Boolean参数的传递\"></a>方法中Boolean参数的传递</h2><p>关键字(需要在双引号之内)<br>true：boolean 类型的 true，代表真值。<br>false： boolean 类型的 false，代表假值。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;checkbox checked=<span class=\"string\">\"&#123;&#123;false&#125;&#125;\"</span>&gt; &lt;/checkbox&gt;</span><br><span class=\"line\">特别注意：不要直接写 checked=<span class=\"string\">\"false\"</span>，其计算结果是一个字符串，转成 boolean 类型后代表真值。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记下踩过的坑1.宽度100%超过界面；2.传boolean类型的值</p>\n</blockquote>\n<h1 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h1><h2 id=\"width：100-，界面显示不全\"><a href=\"#width：100-，界面显示不全\" class=\"headerlink\" title=\"width：100%，界面显示不全\"></a>width：100%，界面显示不全</h2><p>盒模型选择错误,进行盒模型初始化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在app.wxss</span><br><span class=\"line\">view,text&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><h2 id=\"方法中Boolean参数的传递\"><a href=\"#方法中Boolean参数的传递\" class=\"headerlink\" title=\"方法中Boolean参数的传递\"></a>方法中Boolean参数的传递</h2><p>关键字(需要在双引号之内)<br>true：boolean 类型的 true，代表真值。<br>false： boolean 类型的 false，代表假值。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;checkbox checked=<span class=\"string\">\"&#123;&#123;false&#125;&#125;\"</span>&gt; &lt;/checkbox&gt;</span><br><span class=\"line\">特别注意：不要直接写 checked=<span class=\"string\">\"false\"</span>，其计算结果是一个字符串，转成 boolean 类型后代表真值。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"wxpromise-style","date":"2018-05-07T12:26:20.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是 wxpromise的style与css的差别(rpx、样式导入、内联样式、选择器)\n\n## 尺寸单位rpx\n```bash\nrpx：可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。\n如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。\n【建议】： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。\n【注意】： 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。\n```\n---\n## 样式导入\n```bash\n    /** common.wxss **/\n    .small-p {\n    padding:5px;\n    }\n\n    /** app.wxss **/\n    @import \"common.wxss\";\n    .middle-p {\n    padding:15px;\n    }\n```\n---\n## 内联样式\n框架组件上支持使用 style、class 属性来控制组件的样式。\n- style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。\n```bash\n    <view style=\"color:{{color}};\" />\n```\n- class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。\n```bash\n    <view class=\"normal_view\" />\n```\n---\n## 选择器\n| 选择器        | 样例    |样例描述|\n| ---- | :-----:   | :-----: |\n| .class   | .intro      |选择所有拥有 class=\"intro\" 的组件   |\n| #id   | #firstname |选择拥有 id=\"firstname\" 的组件   |\n| element   | view      |选择所有 view 组件|\n| element, element   | view, checkbox      |选择所有文档的 view 组件和所有的 checkbox 组件|\n| ::after   | view::after      | 在 view 组件后边插入内容  |\n| ::before  | view::before     | 在 view 组件前边插入内容      |","source":"_posts/wxpromise-style.md","raw":"---\ntitle: wxpromise-style\ndate: 2018-05-07 20:26:20\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n\n>此章节记载的是 wxpromise的style与css的差别(rpx、样式导入、内联样式、选择器)\n\n## 尺寸单位rpx\n```bash\nrpx：可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。\n如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。\n【建议】： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。\n【注意】： 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。\n```\n---\n## 样式导入\n```bash\n    /** common.wxss **/\n    .small-p {\n    padding:5px;\n    }\n\n    /** app.wxss **/\n    @import \"common.wxss\";\n    .middle-p {\n    padding:15px;\n    }\n```\n---\n## 内联样式\n框架组件上支持使用 style、class 属性来控制组件的样式。\n- style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。\n```bash\n    <view style=\"color:{{color}};\" />\n```\n- class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。\n```bash\n    <view class=\"normal_view\" />\n```\n---\n## 选择器\n| 选择器        | 样例    |样例描述|\n| ---- | :-----:   | :-----: |\n| .class   | .intro      |选择所有拥有 class=\"intro\" 的组件   |\n| #id   | #firstname |选择拥有 id=\"firstname\" 的组件   |\n| element   | view      |选择所有 view 组件|\n| element, element   | view, checkbox      |选择所有文档的 view 组件和所有的 checkbox 组件|\n| ::after   | view::after      | 在 view 组件后边插入内容  |\n| ::before  | view::before     | 在 view 组件前边插入内容      |","slug":"wxpromise-style","published":1,"updated":"2018-11-01T07:31:07.050Z","_id":"cjny0swij004j2kv7jr2ulafc","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>此章节记载的是 wxpromise的style与css的差别(rpx、样式导入、内联样式、选择器)</p>\n</blockquote>\n<h2 id=\"尺寸单位rpx\"><a href=\"#尺寸单位rpx\" class=\"headerlink\" title=\"尺寸单位rpx\"></a>尺寸单位rpx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpx：可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。</span><br><span class=\"line\">如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</span><br><span class=\"line\">【建议】： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。</span><br><span class=\"line\">【注意】： 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"样式导入\"><a href=\"#样式导入\" class=\"headerlink\" title=\"样式导入\"></a>样式导入</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** common.wxss **/</span><br><span class=\"line\">.small-p &#123;</span><br><span class=\"line\">padding:5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** app.wxss **/</span><br><span class=\"line\">@import <span class=\"string\">\"common.wxss\"</span>;</span><br><span class=\"line\">.middle-p &#123;</span><br><span class=\"line\">padding:15px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p>\n<ul>\n<li><p>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view style=<span class=\"string\">\"color:&#123;&#123;color&#125;&#125;;\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=<span class=\"string\">\"normal_view\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th style=\"text-align:center\">样例</th>\n<th style=\"text-align:center\">样例描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.class</td>\n<td style=\"text-align:center\">.intro</td>\n<td style=\"text-align:center\">选择所有拥有 class=”intro” 的组件</td>\n</tr>\n<tr>\n<td>#id</td>\n<td style=\"text-align:center\">#firstname</td>\n<td style=\"text-align:center\">选择拥有 id=”firstname” 的组件</td>\n</tr>\n<tr>\n<td>element</td>\n<td style=\"text-align:center\">view</td>\n<td style=\"text-align:center\">选择所有 view 组件</td>\n</tr>\n<tr>\n<td>element, element</td>\n<td style=\"text-align:center\">view, checkbox</td>\n<td style=\"text-align:center\">选择所有文档的 view 组件和所有的 checkbox 组件</td>\n</tr>\n<tr>\n<td>::after</td>\n<td style=\"text-align:center\">view::after</td>\n<td style=\"text-align:center\">在 view 组件后边插入内容</td>\n</tr>\n<tr>\n<td>::before</td>\n<td style=\"text-align:center\">view::before</td>\n<td style=\"text-align:center\">在 view 组件前边插入内容</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是 wxpromise的style与css的差别(rpx、样式导入、内联样式、选择器)</p>\n</blockquote>\n<h2 id=\"尺寸单位rpx\"><a href=\"#尺寸单位rpx\" class=\"headerlink\" title=\"尺寸单位rpx\"></a>尺寸单位rpx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpx：可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。</span><br><span class=\"line\">如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</span><br><span class=\"line\">【建议】： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。</span><br><span class=\"line\">【注意】： 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"样式导入\"><a href=\"#样式导入\" class=\"headerlink\" title=\"样式导入\"></a>样式导入</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** common.wxss **/</span><br><span class=\"line\">.small-p &#123;</span><br><span class=\"line\">padding:5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** app.wxss **/</span><br><span class=\"line\">@import <span class=\"string\">\"common.wxss\"</span>;</span><br><span class=\"line\">.middle-p &#123;</span><br><span class=\"line\">padding:15px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p>\n<ul>\n<li><p>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view style=<span class=\"string\">\"color:&#123;&#123;color&#125;&#125;;\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=<span class=\"string\">\"normal_view\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th style=\"text-align:center\">样例</th>\n<th style=\"text-align:center\">样例描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.class</td>\n<td style=\"text-align:center\">.intro</td>\n<td style=\"text-align:center\">选择所有拥有 class=”intro” 的组件</td>\n</tr>\n<tr>\n<td>#id</td>\n<td style=\"text-align:center\">#firstname</td>\n<td style=\"text-align:center\">选择拥有 id=”firstname” 的组件</td>\n</tr>\n<tr>\n<td>element</td>\n<td style=\"text-align:center\">view</td>\n<td style=\"text-align:center\">选择所有 view 组件</td>\n</tr>\n<tr>\n<td>element, element</td>\n<td style=\"text-align:center\">view, checkbox</td>\n<td style=\"text-align:center\">选择所有文档的 view 组件和所有的 checkbox 组件</td>\n</tr>\n<tr>\n<td>::after</td>\n<td style=\"text-align:center\">view::after</td>\n<td style=\"text-align:center\">在 view 组件后边插入内容</td>\n</tr>\n<tr>\n<td>::before</td>\n<td style=\"text-align:center\">view::before</td>\n<td style=\"text-align:center\">在 view 组件前边插入内容</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"wxpromise-wxml模板和组件","date":"2018-10-16T08:05:04.000Z","author":"T.2stt","comments":1,"_content":"\n>WXML\nWXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。\n\n\n## 模板\nWXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。\n\n### 定义模板\n使用 name 属性，作为模板的名字。然后在template内定义代码片段\n```bash\n<!--\n  index: int\n  msg: string\n  time: string\n-->\n<template name=\"msgItem\">\n  <view>\n    <text> {{index}}: {{msg}} </text>\n    <text> Time: {{time}} </text>\n  </view>\n</template>\n```\n\n\n### 使用模板\n1.先引入\n```bash\n<import src=\"../../utils/comment/noData/noData.wxml\" />\n```\n2.引入wxss\n```bash\n在界面中wxss\n@import src=\"../../utils/comment/noData/noData.wxss\"\n```\n\n3.使用 <font color=\"red\">is</font> 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：\n```bash\n<template is=\"msgItem\" data=\"{{...item}}\"/>\nPage({\n  data: {\n    item: {\n      index: 0,\n      msg: 'this is a template',\n      time: '2016-09-15'\n    }\n  }\n})\n```\nis 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：\n```bash\n<template name=\"odd\">\n  <view> odd </view>\n</template>\n<template name=\"even\">\n  <view> even </view>\n</template>\n\n<block wx:for=\"{{[1, 2, 3, 4, 5]}}\">\n\t<template is=\"{{item % 2 == 0 ? 'even' : 'odd'}}\"/>\n</block>\n```\n\n### 模板的作用域\n模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。","source":"_posts/wxpromise-wxml.md","raw":"---\ntitle: wxpromise-wxml模板和组件\ndate: 2018-10-16 16:05:04\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n\n>WXML\nWXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。\n\n\n## 模板\nWXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。\n\n### 定义模板\n使用 name 属性，作为模板的名字。然后在template内定义代码片段\n```bash\n<!--\n  index: int\n  msg: string\n  time: string\n-->\n<template name=\"msgItem\">\n  <view>\n    <text> {{index}}: {{msg}} </text>\n    <text> Time: {{time}} </text>\n  </view>\n</template>\n```\n\n\n### 使用模板\n1.先引入\n```bash\n<import src=\"../../utils/comment/noData/noData.wxml\" />\n```\n2.引入wxss\n```bash\n在界面中wxss\n@import src=\"../../utils/comment/noData/noData.wxss\"\n```\n\n3.使用 <font color=\"red\">is</font> 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：\n```bash\n<template is=\"msgItem\" data=\"{{...item}}\"/>\nPage({\n  data: {\n    item: {\n      index: 0,\n      msg: 'this is a template',\n      time: '2016-09-15'\n    }\n  }\n})\n```\nis 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：\n```bash\n<template name=\"odd\">\n  <view> odd </view>\n</template>\n<template name=\"even\">\n  <view> even </view>\n</template>\n\n<block wx:for=\"{{[1, 2, 3, 4, 5]}}\">\n\t<template is=\"{{item % 2 == 0 ? 'even' : 'odd'}}\"/>\n</block>\n```\n\n### 模板的作用域\n模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。","slug":"wxpromise-wxml","published":1,"updated":"2018-11-01T07:31:28.798Z","_id":"cjny0swim004n2kv7viayvhmd","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>WXML<br>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。</p>\n</blockquote>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p>\n<h3 id=\"定义模板\"><a href=\"#定义模板\" class=\"headerlink\" title=\"定义模板\"></a>定义模板</h3><p>使用 name 属性，作为模板的名字。然后在template内定义代码片段<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">  index: int</span><br><span class=\"line\">  msg: string</span><br><span class=\"line\">  time: string</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template name=<span class=\"string\">\"msgItem\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt;</span><br><span class=\"line\">    &lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class=\"line\">    &lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h3><p>1.先引入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;import src=<span class=\"string\">\"../../utils/comment/noData/noData.wxml\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.引入wxss<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在界面中wxss</span><br><span class=\"line\">@import src=<span class=\"string\">\"../../utils/comment/noData/noData.wxss\"</span></span><br></pre></td></tr></table></figure></p>\n<p>3.使用 <font color=\"red\">is</font> 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template is=<span class=\"string\">\"msgItem\"</span> data=<span class=\"string\">\"&#123;&#123;...item&#125;&#125;\"</span>/&gt;</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    item: &#123;</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      msg: <span class=\"string\">'this is a template'</span>,</span><br><span class=\"line\">      time: <span class=\"string\">'2016-09-15'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template name=<span class=\"string\">\"odd\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; odd &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template name=<span class=\"string\">\"even\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; even &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">\t&lt;template is=<span class=\"string\">\"&#123;&#123;item % 2 == 0 ? 'even' : 'odd'&#125;&#125;\"</span>/&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模板的作用域\"><a href=\"#模板的作用域\" class=\"headerlink\" title=\"模板的作用域\"></a>模板的作用域</h3><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs> 模块。</wxs></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>WXML<br>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。</p>\n</blockquote>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p>\n<h3 id=\"定义模板\"><a href=\"#定义模板\" class=\"headerlink\" title=\"定义模板\"></a>定义模板</h3><p>使用 name 属性，作为模板的名字。然后在template内定义代码片段<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">  index: int</span><br><span class=\"line\">  msg: string</span><br><span class=\"line\">  time: string</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template name=<span class=\"string\">\"msgItem\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt;</span><br><span class=\"line\">    &lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class=\"line\">    &lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h3><p>1.先引入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;import src=<span class=\"string\">\"../../utils/comment/noData/noData.wxml\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.引入wxss<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在界面中wxss</span><br><span class=\"line\">@import src=<span class=\"string\">\"../../utils/comment/noData/noData.wxss\"</span></span><br></pre></td></tr></table></figure></p>\n<p>3.使用 <font color=\"red\">is</font> 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template is=<span class=\"string\">\"msgItem\"</span> data=<span class=\"string\">\"&#123;&#123;...item&#125;&#125;\"</span>/&gt;</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    item: &#123;</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      msg: <span class=\"string\">'this is a template'</span>,</span><br><span class=\"line\">      time: <span class=\"string\">'2016-09-15'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template name=<span class=\"string\">\"odd\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; odd &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template name=<span class=\"string\">\"even\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; even &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">\t&lt;template is=<span class=\"string\">\"&#123;&#123;item % 2 == 0 ? 'even' : 'odd'&#125;&#125;\"</span>/&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模板的作用域\"><a href=\"#模板的作用域\" class=\"headerlink\" title=\"模板的作用域\"></a>模板的作用域</h3><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs> 模块。</wxs></p>\n"},{"title":"Hexo+Next主题优化","showcopyright":true,"showdonate":true,"date":"2017-11-07T07:00:38.000Z","type":null,"top":null,"comments":1,"_content":"\n\n\n###  置主题风格\n\n打开 `themes/next/_config.yml` 文件，搜索  `scheme` 关键字，将你需用启用的 `scheme` 前面注释 # 去除即可。\n```css\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观\nscheme: Pisces # 双栏 Scheme，小家碧玉似的清新\n#scheme: Gemini # 类似 Pisces\n```\n<!--more-->\n### 设置菜单项的显示文本和图标\n\nNexT 使用的是 [Font Awesome](http://fontawesome.dashgame.com/)  提供的图标， [Font Awesome](http://fontawesome.dashgame.com/) 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。\n\n#### 设置菜单项的显示中文文本：\n\n打开 `themes/next/languages/zh-Hans.yml` 文件,搜索 `menu` 关键字，修改对应中文或者新增。\n```css\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n  # 新增menu\n  catalogue: 目录\n ```\n\n#### 设定菜单项的文件目录和对应图标（新版两项合并）\n\n打开 `themes/next/_config.yml` 文件，搜索    `menu_icons` 关键字，修改对应图标名称或者新增对应 `menu` 的图标。\n```css\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.\n# Value before `||` delimeter is the target link.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\nmenu:\n  home: / || home\n  archives: /archives/ || history\n  categories: /categories/ || list\n  tags: /tags/ || tags\n  tools: /categories/工具资源/ || briefcase\n  about: /about/ || user\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n\n# Enable/Disable menu icons.\n# Icon Mapping:\n#   Map a menu item to a specific FontAwesome icon name.\n#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.\n#   When an question mask icon presenting up means that the item has no mapping icon.\nmenu_icons:\n  enable: true\n ```\n 除了 `home`， `archives` , `/`后面都需要手动创建这个页面\n\n#### 创建菜单项对应文件目录,以分类为例\n\n在终端窗口下，定位到 `Hexo` 站点目录下。使用 `hexo new page` 新建一个页面，命名为 categories ：\n```sh\n$ cd your-hexo-site\n$ hexo new page categories\n```\n\n编辑刚新建的页面,设置分类\n```css\n---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ncategories: Testing #分类名\ntype: \"categories\"\n---\n```\n### 头像设置\n\n#### 添加头像\n\n打开 `themes/next/_config.yml` 文件，搜索  `Sidebar Avatar` 关键字，去掉 `avatar` 前面的`#`：\n```JavaScript\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: http://example.com/avatar.png\n```\n或者使用本地图片,把图片放入 `themes/next/source/images` 下,修改 `avatar`：\n```\navatar: /images/avatar.gif\n```\n#### 设置头像边框为圆形框\n\n打开位于 `themes/next/source/css/_common/components/sidebar/sidebar-author.syl` 文件,修改如下:\n```css\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n // 修改头像边框\n  border-radius: 50%;\n  -webkit-border-radius: 50%;\n  -moz-border-radius: 50%;\n}\n```\n\n#### 特效：鼠标放置头像上旋转\n\n```css\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n // 修改头像边框\n  border-radius: 50%;\n  -webkit-border-radius: 50%;\n  -moz-border-radius: 50%;\n  // 设置旋转\n  transition: 1.4s all;\n}\n// 可旋转的圆形头像,`hover`动作\n.site-author-image:hover {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -transform: rotate(360deg);\n}\n```\n\n###  浏览页面的时候显示当前浏览进度\n\n打开 `themes/next/_config.yml` ,搜索关键字 `scrollpercent` ,把 `false` 改为 `true`。\n```css\n  # Scroll percent label in b2t button\n  scrollpercent: true\n```\n如果想把 `top`按钮放在侧边栏,打开 `themes/next/_config.yml` ,搜索关键字 `b2t` ,把 `false` 改为 `true`。\n```css\n # Back to top in sidebar\n  b2t: true\n\n  # Scroll percent label in b2t button\n  scrollpercent: true\n```\n\n### 侧边栏设置\n\n#### 设置侧边栏社交链接\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `social` ,然后添加社交站点名称与地址即可。\n\n```css\n# ---------------------------------------------------------------\n# Sidebar Settings\n# ---------------------------------------------------------------\n\n# Social Links.\n# Usage: `Key: permalink || icon`\n# Key is the link label showing to end users.\n# Value before `||` delimeter is the target permalink.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.\nsocial:\n  E-Mail: mailto:yourname@gmail.com || envelope\n  Google: https://plus.google.com/yourname || google\n  Twitter: https://twitter.com/yourname || twitter\n  FB Page: https://www.facebook.com/yourname || facebook\n  # 等等\n```\n\n#### 设置侧边栏社交图标\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `social_icons` ，添加社交站点名称（注意大小写）图标，[Font Awesome](http://fontawesome.dashgame.com)图标地。\n\n#### RSS\n\n在你 `Hexo` 站点目录下：\n```sh\n$ npm install hexo-generator-feed --save\n```\n打开 `Hexo` 站点下的 `_config.yml` ,添加如下配置：\n```JavaScript\n# feed\n# Dependencies: https://github.com/hexojs/hexo-generator-feed\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n ```\n\n#### 友情链接\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `Blog rolls`：\n```JavaScript\n# Blog rolls\nlinks_title: 友情链接 #标题\nlinks_layout: block #布局，一行一个连接\n#links_layout: inline\nlinks: #连接\n  baidu: http://example.com/\n  google: http://example.com/\n```\n\n### 主页文章添加边框阴影效果\n\n\n打开 `themes/next/source/css/_custom/custom.styl` ,向里面加代码:\n```JavaScript\n// 主页文章添加阴影效果\n.post {\n   margin-top: 0px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n### 修改文章间分割线\n\n打开 `themes/next/source/css/_common/components/post/post-eof.styl` ,修改：\n```JavaScript\n.posts-expand {\n  .post-eof {\n    display: block;\n  //  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  \n    width: 0%; //分割线长度\n    height: 0px; // 分割线高度\n    background: $grey-light;\n    text-align: center;\n  }\n}\n```\n\n### 代码块自定义样式\n\n```JavaScript\n// Custom styles.\ncode {\n    color: #ff7600;\n    background: #fbf7f8;\n    margin: 2px;\n}\n// 边框的自定义样式\n.highlight, pre {\n    margin: 5px 0;\n    padding: 5px;\n    border-radius: 3px;\n}\n.highlight, code, pre {\n    border: 1px solid #d6d6d6;\n}\n```\n\n### 开启版权声明\n\n主题配置文件下,搜索关键字 `post_copyright` , `enable` 改为 `true`：\n```JavaScript\n# Declare license on posts\npost_copyright:\n  enable: true\n  license: CC BY-NC-SA 4.0\n  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/\n```\n\n### 自定义文章底部版权声明\n\n效果：\n```JavaScript\n作者：Dragonstyle\n链接：http://www.dragonstyle.win/2017/09/06/Android-Studio个人设置/\n來源：简书\n版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！\n```\n\n在目录 `themes/next/layout/_macro/` 下添加 `my-copyright.swig` ,内容如下:\n```JavaScript\n{% if page.copyright %}\n<div class=\"my_post_copyright\">\n  <script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n  <!-- JS库 sweetalert 可修改路径 -->\n  <script type=\"text/javascript\" src=\"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js\"></script>\n  <script src=\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css\">\n\n  <p><span>本文标题:</span>{{ page.title }}</a></p>\n  <p><span>文章作者:</span>{{ theme.author }}</a></p>\n  <p><span>发布时间:</span>{{ page.date.format(\"YYYY年MM月DD日 - HH:mm:ss\") }}</p>\n  <p><span>最后更新:</span>{{ page.updated.format(\"YYYY年MM月DD日 - HH:mm:ss\") }}</p>\n  <p><span>原始链接:</span><a href=\"{{ url_for(page.path) }}\" title=\"{{ page.title }}\">{{ page.permalink }}</a>\n    <span class=\"copy-path\"  title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\" data-clipboard-text=\"{{ page.permalink }}\"  aria-label=\"复制成功！\"></i></span>\n  </p>\n  <p><span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>  \n</div>\n<script>\n    var clipboard = new Clipboard('.fa-clipboard');\n    clipboard.on('success', $(function(){\n      $(\".fa-clipboard\").click(function(){\n        swal({   \n          title: \"\",   \n          text: '复制成功',   \n          html: false,\n          timer: 500,   \n          showConfirmButton: false\n        });\n      });\n    }));  \n</script>\n{% endif %}\n```\n\n在目录 `themes/next/source/css/_common/components/post/` 下添加 `my-post-copyright.styl`,内容如下:\n```JavaScript\n.my_post_copyright {\n  width: 85%;\n  max-width: 45em;\n  margin: 2.8em auto 0;\n  padding: 0.5em 1.0em;\n  border: 1px solid #d3d3d3;\n  font-size: 0.93rem;\n  line-height: 1.6em;\n  word-break: break-all;\n  background: rgba(255,255,255,0.4);\n}\n.my_post_copyright p{margin:0;}\n.my_post_copyright span {\n  display: inline-block;\n  width: 5.2em;\n  color: #333333; // title color\n  font-weight: bold;\n}\n.my_post_copyright .raw {\n  margin-left: 1em;\n  width: 5em;\n}\n.my_post_copyright a {\n  color: #808080;\n  border-bottom:0;\n}\n.my_post_copyright a:hover {\n  color: #0593d3; // link color\n  text-decoration: underline;\n}\n.my_post_copyright:hover .fa-clipboard {\n  color: #000;\n}\n.my_post_copyright .post-url:hover {\n  font-weight: normal;\n}\n.my_post_copyright .copy-path {\n  margin-left: 1em;\n  width: 1em;\n  +mobile(){display:none;}\n}\n.my_post_copyright .copy-path:hover {\n  color: #808080;\n  cursor: pointer;\n}\n```\n修改 `themes/next/layout/_macro/post.swig` ,在代码如下：\n```JavaScript\n{% if theme.wechat_subscriber.enabled and not is_index %}\n      <div>\n        {% include 'wechat-subscriber.swig' %}\n      </div>\n {% endif %}\n```\n之前添加增加如下代码：\n```JavaScript\n<div>\n      {% if not is_index %}\n        {% include 'my-copyright.swig' %}\n      {% endif %}\n</div>\n```\n修改 `themes/next/source/css/_common/components/post/post.styl` 文件，在最后一行增加代码：\n```JavaScript\n@import \"my-post-copyright\"\n```\n\n设置新建文章自动开启\n\n`copyright`,即新建文章自动显示自定义的版权声明,设置 `your site/scaffolds/post.md`文件\n```JavaScript\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ntype: \"categories\"\ncategories:\ncopyright: true #新增,开启\n---\n```\n\n### 在右上角或者左上角实现fork me on github\n\n选择样式[GitHub Ribbons](https://github.com/blog/273-github-ribbons),修改图片跳转链接,并复制文本框中的代码,将如下地方代码换为自己Github主页：\n![](http://ov11eqxw3.bkt.clouddn.com/20171107Github.jpg/water.jpg)\n打开 `themes/next/layout/_layout.swig` 文件，把代码复制到`<div class=\"headband\"></div>`下面。\n\n### 修改文章底部的那个带#号的标签\n\n打开 `themes/next/layout/_macro/post.swig` 文件,搜索 `rel=\"tag\">#` ,将 `#` 换成 `<i class=\"fa fa-tag\"></i>`\n```JavaScript\n<div class=\"post-tags\">\n    {% for tag in post.tags %}\n       <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"><i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n    {% endfor %}\n</div>\n```\n\n### 添加顶部加载条\n\n打开 `themes/next/_config.yml` ，搜索关键字 `pace` ,设置为 `true` ,可以更换加载样式：\n```css\n# Progress bar in the top during page loading.\npace: true\n# Themes list:\n#pace-theme-big-counter\n#pace-theme-bounce\n#pace-theme-barber-shop\n#pace-theme-center-atom\n#pace-theme-center-circle\n#pace-theme-center-radar\n#pace-theme-center-simple\n#pace-theme-corner-indicator\n#pace-theme-fill-left\n#pace-theme-flash\n#pace-theme-loading-bar\n#pace-theme-mac-osx\n#pace-theme-minimal\n# For example\n# pace_theme: pace-theme-center-simple\npace_theme: pace-theme-flash #替换更换样式\n```\n### 本地搜索\n\n在你站点的根目录下\n```\n$ npm install hexo-generator-searchdb --save\n```\n打开 `Hexo` 站点的 `_config.yml`,添加配置\n```JavaScript\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n打开 `themes/next/_config.yml` ,搜索关键字 `local_search` ,设置为 `true`：\n```JavaScript\n# Local search\n# Dependencies: https://github.com/flashlab/hexo-generator-search\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### 修改网页底部\n\n1. 在图标库中找到你自己喜欢的图标, 修改桃心,打开 `themes/next_config.yml` ,搜索关键字 `authoricon`,替换图标名\n```\n# icon between year and author @Footer\nauthoricon: id-card\n```\n2. 隐藏网页底部 `Hexo 强力驱动`\n\n打开主题配置文件,搜索关键字 `copyright` ，如下:\n```\n# Footer `powered-by` and `theme-info` copyright\ncopyright: false\n```\n### 博文置顶\n~~打开 `Hexo` 站点下 `node_modules/hexo-generator-index/lib/generator.js` 文件。代码全部替换为：~~(next 5.1以后主题已自带此功能)\n```JavaScript\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n打开文章添加top字段,设置数值，数值越大文章越靠前：\n```JavaScript\n---\nlayout: layout\ntitle: 标签1\ndate: 2017-08-18 15:41:18\ntags: 标签1\ntop: 100\n---\n```\n\n###  统计功能，统计功能,显示文章字数统计,阅读时长,总字数\n\n在站点的根目录下：\n```\n$ npm i --save hexo-wordcount\n```\n打开 `themes/next/_config.yml` ，搜索关键字 `post_wordcount`：\n```JavaScript\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  #字数统计\n  wordcount: true\n  #预览时间\n  min2read: true\n  #总字数,显示在页面底部\n  totalcount: true\n  separated_meta: true\n```\n\n### 修改文章内文本连接样式\n\n打开 `themes/next/source/css/_custom/custom.styl`,添加代码：\n```JavaScript\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 每篇文章末尾统一添加“本文结束”标记\n\n在路径 `/themes/next/layout/_macro` 中新建  `passage-end-tag.swig` 文件,并添加以下内容：\n```JavaScript\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">------ 本文结束------</div>\n    {% endif %}\n</div>\n```\n打开 `themes/next/layout/_macro/post.swig` 文件,添加：\n```JavaScript\n<div>\n    {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n    {% endif %}\n </div>\n```\n然后打开主题配置文件 `_config.yml`,在末尾添加：\n```JavaScript\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\nenabled: true\n```\n\n### 文章顶部显示更新时间\n\n打开主题配置文件 `_config.yml` ,搜索关键字 `updated_at` 设置为 `true` ：\n```JavaScript\n# Post meta display settings\npost_meta:\n  item_text: true\n  created_at: true\n  updated_at: true\n  categories: true\n```\n~~编辑文章,增加关键字`updated`~~（next可以根据文章改变时间自动更改）\n```JavaScript\n---\nlayout: layout\ntitle: 关于\ndate: 2017-08-18 15:41:18\nupdated: 2017-09-05 20:18:54 #手动添加更新时间\n```\n\n### 修改访问URL路径\n\n默认情况下访问URL路径为：`domain/2017/08/18/关于本站`,修改为 `domain/About/关于本站`。\n编辑 `Hexo` 站点下的 `_config.yml` 文件，修改其中的 `permalink` 字段：\n```JavaScript\npermalink: :category/:title/\n```\n\n### 给代码块添加复制功能\n\n- 下载插件[clipboard.js](https://github.com/zenorocha/clipboard.js) 。\n- 打开 `themes/next/source/lib/` ,新建文件夹 `clipboard`。\n- 把下载 `clipboard.js`下的 `src` 文件夹下的文件拖动到 `clipboard`文件夹下。\n- 打开 `themes/next/source/js/src/` ,新建文件 `custom.js` ,代码如下:\n```JavaScript\n//此函数用于创建复制按钮\nfunction createCopyBtns() {\n    var $codeArea = $(\"figure table\");\n    //查看页面是否具有代码区域，没有代码块则不创建 复制按钮\n    if ($codeArea.length > 0) {\n        //复制成功后将要干的事情\n        function changeToSuccess(item) {\n             $imgOK = $(\"#copyBtn\").find(\"#imgSuccess\");\n                if ($imgOK.css(\"display\") == \"none\") {\n                    $imgOK.css({\n                        opacity: 0,\n                        display: \"block\"\n                    });\n                    $imgOK.animate({\n                        opacity: 1\n                    }, 1000);\n                    setTimeout(function() {\n                        $imgOK.animate({\n                            opacity: 0\n                        }, 2000);\n                    }, 2000);\n                    setTimeout(function() {\n                        $imgOK.css(\"display\", \"none\");\n                    }, 4000);\n                };\n        };\n        //创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮\n        //值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)\n        $(\".post-body\").before('<div id=\"copyBtn\" style=\"opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em\"><span id=\"imgCopy\" ><i class=\"fa fa-paste fa-fw\"></i></span><span id=\"imgSuccess\" style=\"display: none;\"><i class=\"fa fa-check-circle fa-fw\" aria-hidden=\"true\"></i></span>');\n        //创建 复制 插件，绑定单机时间到 指定元素，支持JQuery\n        var clipboard = new Clipboard('#copyBtn', {\n            target: function() {\n                //返回需要复制的元素内容\n                return document.querySelector(\"[copyFlag]\");\n            },\n            isSupported: function() {\n                //支持复制内容\n                return document.querySelector(\"[copyFlag]\");\n            }\n        });\n        //复制成功事件绑定\n        clipboard.on('success',\n            function(e) {\n                //清除内容被选择状态\n                e.clearSelection();\n                changeToSuccess(e);\n            });\n        //复制失败绑定事件\n        clipboard.on('error',\n            function(e) {\n                console.error('Action:', e.action);\n                console.error('Trigger:', e.trigger);\n            });\n        //鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果\n        $(\"#copyBtn\").hover(\n            function() {\n                $(this).stop();\n                $(this).css(\"opacity\", 1);\n            },\n            function() {\n                $(this).animate({\n                    opacity: 0\n                }, 2000);\n            }\n        );\n    }\n}\n//感应鼠标是否在代码区\n$(\"figure\").hover(\n    function() {\n        //-------鼠标活动在代码块内\n        //移除之前含有复制标志代码块的 copyFlag\n        $(\"[copyFlag]\").removeAttr(\"copyFlag\");\n        //在新的（当前鼠标所在代码区）代码块插入标志：copyFlag\n        $(this).find(\".code\").attr(\"copyFlag\", 1);\n        //获取复制按钮\n        $copyBtn = $(\"#copyBtn\");\n        if ($copyBtn.lenght != 0) {\n            //获取到按钮的前提下进行一下操作\n            //停止按钮动画效果\n            //设置为 显示状态\n            //修改 复制按钮 位置到 当前代码块开始部位\n            //设置代码块 左侧位置\n            $copyBtn.stop();\n            $copyBtn.css(\"opacity\", 0.8);\n            $copyBtn.css(\"display\", \"block\");\n            $copyBtn.css(\"top\", parseInt($copyBtn.css(\"top\")) + $(this).offset().top - $copyBtn.offset().top + 3);\n            $copyBtn.css(\"left\", -$copyBtn.width() - 3);\n        }\n    },\n    function() {\n        //-------鼠标离开代码块\n        //设置复制按钮可见度 2秒内到 0\n        $(\"#copyBtn\").animate({\n            opacity: 0\n        }, 2000);\n    }\n);\n//页面载入完成后，创建复制按钮\n$(document).ready(function() {\n  createCopyBtns();\n});\n```\n- 打开 `themes/next/layout/_custom/` ,新建文件 `custom.swig` ，代码如下:\n```JavaScript\n<script type=\"text/javascript\" src=\"/lib/clipboard/clipboard.js\"></script>\n<script type=\"text/javascript\" src=\"/js/src/custom.js\"></script>\n```\n- 修改文件 `themes/next/layout/_layout.swig` ,在标签 `</body>`上面插入代码:\n```JavaScript\n{% include '_custom/custom.swig' %}\n```\n\n### 新建404界面\n\n在站点根目录下,输入 `hexo new page 404` ,默认在 `Hexo` 站点下`/source/404/index.md`\n打开新建的404界面，在顶部插入一行，写上 `permalink: /404` ，这表示指定该页固定链接为 ` http://\"主页\"/404.html`。\n```JavaScript\n---\ntitle: #404 Not Found：该页无法显示\ndate: 2017-09-06 15:37:18\ncomments: false\npermalink: /404\n---\n```\n如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下：\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n```\n### 静态资源压缩\n\n在站点目录下：\n```\n$ npm install gulp -g\n```\n安装gulp插件：\n```\nnpm install gulp-minify-css --save\nnpm install gulp-uglify --save\nnpm install gulp-htmlmin --save\nnpm install gulp-htmlclean --save\nnpm install gulp-imagemin --save\n```\n在 `Hexo` 站点下添加 `gulpfile.js`文件，文件内容如下：\n```JavaScript\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\n// 压缩css文件\ngulp.task('minify-css', function() {\n  return gulp.src('./public/**/*.css')\n  .pipe(minifycss())\n  .pipe(gulp.dest('./public'));\n});\n// 压缩html文件\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n  .pipe(htmlclean())\n  .pipe(htmlmin({\n    removeComments: true,\n    minifyJS: true,\n    minifyCSS: true,\n    minifyURLs: true,\n  }))\n  .pipe(gulp.dest('./public'))\n});\n// 压缩js文件\ngulp.task('minify-js', function() {\n    return gulp.src(['./public/**/.js','!./public/js/**/*min.js'])\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public/demo 目录内图片\ngulp.task('minify-images', function() {\n    gulp.src('./public/demo/**/*.*')\n        .pipe(imagemin({\n           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest('./public/uploads'));\n});\n// 默认任务\ngulp.task('default', [\n  'minify-html','minify-css','minify-js','minify-images'\n]);\n```\n只需要每次在执行 `generate` 命令后执行 `gulp ` 就可以实现对静态资源的压缩，压缩完成后执行 `deploy` 命令同步到服务器：\n```\nhexo g\ngulp\nhexo d\n```\n\n### 本地站点推送到GitHub上\n\n在站点更目录下：\n```\n$ npm install hexo-deployer-git --save\n```\n在 `Hexo` 站点的 `_config.yml` 中配置 `deploy`：\n```JavaScript\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <repository url> #your github.io.git\n  branch: master\n```\n```\n$ hexo clean\n```\n```\n$ hexo d --g\n```\nhexo g  # 生成本地 public 静态文件,\nhexo d  # 部署到 Github 上,\n也可以缩写成：hexo g --d 。\n\n### 添加文章书写样式\n\n#### 文字增加背景色块\n\n打开 `themes/next/source/css/_custom` 下的 ` custom.styl` 文件,添加属性样式：\n```css\n// 颜色块-黄\nspan#inline-yellow {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #f0ad4e;\n}\n// 颜色块-绿\nspan#inline-green {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #5cb85c;\n}\n// 颜色块-蓝\nspan#inline-blue {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #2780e3;\n}\n// 颜色块-紫\nspan#inline-purple {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #9954bb;\n}\n```\n在你需要编辑的文章地方。放置如下代码：\n```css\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n```\n\n#### 下载样式\n\n打开 `themes/next/source/css/_custom/custom.styl` 文件,添加属性样式：\n```css\na#download {\ndisplay: inline-block;\npadding: 0 10px;\ncolor: #000;\nbackground: transparent;\nborder: 2px solid #000;\nborder-radius: 2px;\ntransition: all .5s ease;\nfont-weight: bold;\n&:hover {\nbackground: #000;\ncolor: #fff;\n}\n}\n```\n在你需要编辑的文章地方。放置如下代码：\n```css\n<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span> </a>\n```\n#### 在文档中增加图标, [Font Awesome](http://fontawesome.dashgame.com/) 提供图标\n```\n<i class=\"fa fa-pencil\"></i>支持Markdown\n```\n\n### 实现点击出现桃心效果\n\n- 复制[网页](http://7u2ss1.com1.z0.glb.clouddn.com/love.js)代码\n- 新建 `love.js` 文件并且将代码复制进去，然后保存。\n- 将 `love.js`文件放到路径 `/themes/next/source/js/src` 里面\n- 然后打开 `\\themes\\next\\layout\\_layout.swig` 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 添加热度\n\n\n![](http://ov11eqxw3.bkt.clouddn.com/20171107redu.jpg/water.jpg)\n\nnext主题集成leanCloud,根据[next官方文档](http://theme-next.iissnan.com/third-party-services.html)设置阅读次数统计（LeanCloud) ，然后打开  `/themes/next/layout/_macro/post.swig` ,在画红线的区域添加 `℃`：\n![](http://ov11eqxw3.bkt.clouddn.com/20171107redu2.jpg/water.jpg)\n\n然后打开 `/themes/next/languages/zh-Hans.yml` ,将 `visitors` 汉化为热度就可以了：\n\n```JavaScript\npost:\n  created: 创建于\n  modified: 更新于\n  sticky: 置顶\n  posted: 发表于\n  in: 分类于\n  read_more: 阅读全文\n  untitled: 未命名\n  toc_empty: 此文章未包含目录\n  visitors: 热度\n  wordcount: 字数统计\n  min2read: 阅读时长\n  totalcount: 博客全站字数\n```\n\n### 添加 README.md 文件\n\n每个项目下一般都有一个 `README.md` 文件，但是使用 `hexo` 部署到仓库后，项目下是没有 README.md 文件的。\n\n在 `Hexo` 目录下的 `source` 根目录下添加一个 `README.m`d 文件，修改站点配置文件 `_config.yml` ，将 `skip_render` 参数的值设置为：\n```\nskip_render: README.md\n```\n保存退出即可。再次使用 `hexo d` 命令部署博客的时候就不会在渲染 `README.md` 这个文件了。\n\n### 文章加密访问\n\n打开 `themes/next/layout/_partials/head.swig`文件,在 `{% if theme.pace %}` 标签下的 `{% endif %}` 之前插入代码：\n\n```JavaScript\n  <script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入文章密码') !== '{{ page.password }}'){\n                alert('密码错误');\n                history.back();\n            }\n        }\n    })();\n</script>\n```\n在文章上应用：\n```\n---\ntitle: 2017观看影视\ndate: 2017-09-25 16:10:03\ntype:\ntop:\ncomments:\ncategories: [影音, 影视]\ntags: [影音, 电影, 电视剧, 动画]\npassword: 123456\n---\n```\n\n### 添加jiathis分享\n\n在主题配置文件中,做如下配置：\n```\n# Share\n# This plugin is more useful in China, make sure you known how to use it.\n# And you can find the use guide at official webiste: http://www.jiathis.com/.\n# Warning: JiaThis does not support https.\njiathis: true\n  ##uid: Get this uid from http://www.jiathis.com/\n#add_this_id:\n```\n如果你想自定义话，打开 `themes/next/layout/_partials/share/jiathis.swig` 根据[官网](http://www.jiathis.com/)代码修改。\n\n### 修改打赏字体不闪动\n\n修改文件 `next/source/css/_common/components/post/post-reward.styl`，然后注释其中的函数 `wechat:hover` 和 `alipay:hover` ，如下：\n```css\n* 注释文字闪动函数\n #wechat:hover p{\n    animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n #alipay:hover p{\n   animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n*/\n```\n\n### 自定义鼠标样式\n\n打开 `themes/next/source/css/_custom/custom.styl` ,在里面写下如下代码：\n```css\n// 鼠标样式\n  * {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"),auto!important\n  }\n  :active {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"),auto!important\n  }\n```\n其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了。\n\n### 网站标题栏背景颜色\n\n当使用Pisces主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在 `source/css/_schemes/Pisces/_brand.styl` 中修改：\n```css\n.site-meta {\n  padding: 20px 0;\n  color: white;\n  background: $blue-dodger; //修改为自己喜欢的颜色\n\n  +tablet() {\n    box-shadow: 0 0 16px rgba(0,0,0,0.5);\n  }\n  +mobile() {\n    box-shadow: 0 0 16px rgba(0,0,0,0.5);\n  }\n}\n```\n但是，我们一般不主张这样修改源码的，在 `next/source/css/_custom` 目录下面专门提供了 `custom.styl` 供我们自定义样式的，因此也可以在 `custom.styl` 里面添加：\n```css\n// Custom styles.\n.site-meta {\n  background: $blue; //修改为自己喜欢的颜色\n}\n```\n\n### 修改内容区域的宽度\n\n我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。\nNexT 对于内容的宽度的设定如下：\n\n- 700px，当屏幕宽度 < 1600px\n- 900px，当屏幕宽度 >= 1600px\n- 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。\n在Mist和Muse风格可以用下面的方法：\n\n编辑主题的 ` source/css/_variables/custom.styl` 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n当你使用Pisces风格时可以用下面的方法：\n```\nheader{ width: 90%; }\n.container .main-inner { width: 90%; }\n.content-wrap { width: calc(100% - 260px); }\n```\n\n### 修改Logo字体\n\n在 `themes/next/source/css/_custom/custom.styl`  中添加如下代码：\n```css\n@font-face {\n    font-family: Zitiming;\n    src: url('/fonts/Zitiming.ttf');\n}\n.site-title {\n    font-size: 40px !important;\n\tfont-family: 'Zitiming' !important;\n}\n```\n其中字体文件在 `themes/next/source/fonts` 目录下，里面有个 `.gitkeep` 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 `Zitiming.ttf` ，具体字库自己从网上下载即可。\n\n### 添加背景图\n\n在 themes/next/source/css/_custom/custom.styl 中添加如下代码：\n```css\nbody{\n    background:url(/images/bg.jpg);\n    background-size:cover;\n    background-repeat:no-repeat;\n    background-attachment:fixed;\n    background-position:center;\n}\n```\n\n### 各版块透明度修改\n\n#### 内容板块透明\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 ` .content-wrap` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 菜单栏背景\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 `.header-inner` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 站点概况背景\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl` 文件 `.sidebar-inner` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n然后修改博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 ` .sidebar` 标签下 `background: $body-bg-color`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 按钮背景\n\n博客根目录 `themes\\next\\source\\css\\_common\\components\\post\\post-button.styl` 同上修改对应位置为 `background: transparent;`\n\n### 添加网易云音乐\n\n在网易云音乐（网页版）中搜索我们想要插入的音乐，然后点击生成外链播放器\n![](http://ov11eqxw3.bkt.clouddn.com/20171109wangyiyun.jpg/water.jpg)\n然后根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置。\n\n我放在了侧边栏，在 `themes/next/layout/_custom/sidebar.swig` 文件中增加生成的HTML代码：\n```html\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n可以根据自己实际情况修改宽高等样式。\n\n参考自：\n\nhttp://www.jianshu.com/p/3ff20be857\nhttp://blog.csdn.net/qq_33699981/article/details/72716951\nhttp://blog.csdn.net/heqiangflytosky/article/details/54863185\n","source":"_posts/Hexo-Next主题优化.md","raw":"---\ntitle: Hexo+Next主题优化\nshowcopyright: true\nshowdonate: true\ndate: 2017-11-07 15:00:38\ntype:\ntop:\ncomments:\ncategories: [工具,hexo]\ntags: [工具,hexo]\n# password: qwertyuiop\n---\n\n\n\n###  置主题风格\n\n打开 `themes/next/_config.yml` 文件，搜索  `scheme` 关键字，将你需用启用的 `scheme` 前面注释 # 去除即可。\n```css\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观\nscheme: Pisces # 双栏 Scheme，小家碧玉似的清新\n#scheme: Gemini # 类似 Pisces\n```\n<!--more-->\n### 设置菜单项的显示文本和图标\n\nNexT 使用的是 [Font Awesome](http://fontawesome.dashgame.com/)  提供的图标， [Font Awesome](http://fontawesome.dashgame.com/) 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。\n\n#### 设置菜单项的显示中文文本：\n\n打开 `themes/next/languages/zh-Hans.yml` 文件,搜索 `menu` 关键字，修改对应中文或者新增。\n```css\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n  # 新增menu\n  catalogue: 目录\n ```\n\n#### 设定菜单项的文件目录和对应图标（新版两项合并）\n\n打开 `themes/next/_config.yml` 文件，搜索    `menu_icons` 关键字，修改对应图标名称或者新增对应 `menu` 的图标。\n```css\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -> archives).\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.\n# Value before `||` delimeter is the target link.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.\nmenu:\n  home: / || home\n  archives: /archives/ || history\n  categories: /categories/ || list\n  tags: /tags/ || tags\n  tools: /categories/工具资源/ || briefcase\n  about: /about/ || user\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n\n# Enable/Disable menu icons.\n# Icon Mapping:\n#   Map a menu item to a specific FontAwesome icon name.\n#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.\n#   When an question mask icon presenting up means that the item has no mapping icon.\nmenu_icons:\n  enable: true\n ```\n 除了 `home`， `archives` , `/`后面都需要手动创建这个页面\n\n#### 创建菜单项对应文件目录,以分类为例\n\n在终端窗口下，定位到 `Hexo` 站点目录下。使用 `hexo new page` 新建一个页面，命名为 categories ：\n```sh\n$ cd your-hexo-site\n$ hexo new page categories\n```\n\n编辑刚新建的页面,设置分类\n```css\n---\ntitle: 分类\ndate: 2014-12-22 12:39:04\ncategories: Testing #分类名\ntype: \"categories\"\n---\n```\n### 头像设置\n\n#### 添加头像\n\n打开 `themes/next/_config.yml` 文件，搜索  `Sidebar Avatar` 关键字，去掉 `avatar` 前面的`#`：\n```JavaScript\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: http://example.com/avatar.png\n```\n或者使用本地图片,把图片放入 `themes/next/source/images` 下,修改 `avatar`：\n```\navatar: /images/avatar.gif\n```\n#### 设置头像边框为圆形框\n\n打开位于 `themes/next/source/css/_common/components/sidebar/sidebar-author.syl` 文件,修改如下:\n```css\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n // 修改头像边框\n  border-radius: 50%;\n  -webkit-border-radius: 50%;\n  -moz-border-radius: 50%;\n}\n```\n\n#### 特效：鼠标放置头像上旋转\n\n```css\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n // 修改头像边框\n  border-radius: 50%;\n  -webkit-border-radius: 50%;\n  -moz-border-radius: 50%;\n  // 设置旋转\n  transition: 1.4s all;\n}\n// 可旋转的圆形头像,`hover`动作\n.site-author-image:hover {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -transform: rotate(360deg);\n}\n```\n\n###  浏览页面的时候显示当前浏览进度\n\n打开 `themes/next/_config.yml` ,搜索关键字 `scrollpercent` ,把 `false` 改为 `true`。\n```css\n  # Scroll percent label in b2t button\n  scrollpercent: true\n```\n如果想把 `top`按钮放在侧边栏,打开 `themes/next/_config.yml` ,搜索关键字 `b2t` ,把 `false` 改为 `true`。\n```css\n # Back to top in sidebar\n  b2t: true\n\n  # Scroll percent label in b2t button\n  scrollpercent: true\n```\n\n### 侧边栏设置\n\n#### 设置侧边栏社交链接\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `social` ,然后添加社交站点名称与地址即可。\n\n```css\n# ---------------------------------------------------------------\n# Sidebar Settings\n# ---------------------------------------------------------------\n\n# Social Links.\n# Usage: `Key: permalink || icon`\n# Key is the link label showing to end users.\n# Value before `||` delimeter is the target permalink.\n# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.\nsocial:\n  E-Mail: mailto:yourname@gmail.com || envelope\n  Google: https://plus.google.com/yourname || google\n  Twitter: https://twitter.com/yourname || twitter\n  FB Page: https://www.facebook.com/yourname || facebook\n  # 等等\n```\n\n#### 设置侧边栏社交图标\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `social_icons` ，添加社交站点名称（注意大小写）图标，[Font Awesome](http://fontawesome.dashgame.com)图标地。\n\n#### RSS\n\n在你 `Hexo` 站点目录下：\n```sh\n$ npm install hexo-generator-feed --save\n```\n打开 `Hexo` 站点下的 `_config.yml` ,添加如下配置：\n```JavaScript\n# feed\n# Dependencies: https://github.com/hexojs/hexo-generator-feed\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n ```\n\n#### 友情链接\n\n打开 `themes/next/_config.yml` 文件,搜索关键字 `Blog rolls`：\n```JavaScript\n# Blog rolls\nlinks_title: 友情链接 #标题\nlinks_layout: block #布局，一行一个连接\n#links_layout: inline\nlinks: #连接\n  baidu: http://example.com/\n  google: http://example.com/\n```\n\n### 主页文章添加边框阴影效果\n\n\n打开 `themes/next/source/css/_custom/custom.styl` ,向里面加代码:\n```JavaScript\n// 主页文章添加阴影效果\n.post {\n   margin-top: 0px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n### 修改文章间分割线\n\n打开 `themes/next/source/css/_common/components/post/post-eof.styl` ,修改：\n```JavaScript\n.posts-expand {\n  .post-eof {\n    display: block;\n  //  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  \n    width: 0%; //分割线长度\n    height: 0px; // 分割线高度\n    background: $grey-light;\n    text-align: center;\n  }\n}\n```\n\n### 代码块自定义样式\n\n```JavaScript\n// Custom styles.\ncode {\n    color: #ff7600;\n    background: #fbf7f8;\n    margin: 2px;\n}\n// 边框的自定义样式\n.highlight, pre {\n    margin: 5px 0;\n    padding: 5px;\n    border-radius: 3px;\n}\n.highlight, code, pre {\n    border: 1px solid #d6d6d6;\n}\n```\n\n### 开启版权声明\n\n主题配置文件下,搜索关键字 `post_copyright` , `enable` 改为 `true`：\n```JavaScript\n# Declare license on posts\npost_copyright:\n  enable: true\n  license: CC BY-NC-SA 4.0\n  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/\n```\n\n### 自定义文章底部版权声明\n\n效果：\n```JavaScript\n作者：Dragonstyle\n链接：http://www.dragonstyle.win/2017/09/06/Android-Studio个人设置/\n來源：简书\n版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！\n```\n\n在目录 `themes/next/layout/_macro/` 下添加 `my-copyright.swig` ,内容如下:\n```JavaScript\n{% if page.copyright %}\n<div class=\"my_post_copyright\">\n  <script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n  <!-- JS库 sweetalert 可修改路径 -->\n  <script type=\"text/javascript\" src=\"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js\"></script>\n  <script src=\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css\">\n\n  <p><span>本文标题:</span>{{ page.title }}</a></p>\n  <p><span>文章作者:</span>{{ theme.author }}</a></p>\n  <p><span>发布时间:</span>{{ page.date.format(\"YYYY年MM月DD日 - HH:mm:ss\") }}</p>\n  <p><span>最后更新:</span>{{ page.updated.format(\"YYYY年MM月DD日 - HH:mm:ss\") }}</p>\n  <p><span>原始链接:</span><a href=\"{{ url_for(page.path) }}\" title=\"{{ page.title }}\">{{ page.permalink }}</a>\n    <span class=\"copy-path\"  title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\" data-clipboard-text=\"{{ page.permalink }}\"  aria-label=\"复制成功！\"></i></span>\n  </p>\n  <p><span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>  \n</div>\n<script>\n    var clipboard = new Clipboard('.fa-clipboard');\n    clipboard.on('success', $(function(){\n      $(\".fa-clipboard\").click(function(){\n        swal({   \n          title: \"\",   \n          text: '复制成功',   \n          html: false,\n          timer: 500,   \n          showConfirmButton: false\n        });\n      });\n    }));  \n</script>\n{% endif %}\n```\n\n在目录 `themes/next/source/css/_common/components/post/` 下添加 `my-post-copyright.styl`,内容如下:\n```JavaScript\n.my_post_copyright {\n  width: 85%;\n  max-width: 45em;\n  margin: 2.8em auto 0;\n  padding: 0.5em 1.0em;\n  border: 1px solid #d3d3d3;\n  font-size: 0.93rem;\n  line-height: 1.6em;\n  word-break: break-all;\n  background: rgba(255,255,255,0.4);\n}\n.my_post_copyright p{margin:0;}\n.my_post_copyright span {\n  display: inline-block;\n  width: 5.2em;\n  color: #333333; // title color\n  font-weight: bold;\n}\n.my_post_copyright .raw {\n  margin-left: 1em;\n  width: 5em;\n}\n.my_post_copyright a {\n  color: #808080;\n  border-bottom:0;\n}\n.my_post_copyright a:hover {\n  color: #0593d3; // link color\n  text-decoration: underline;\n}\n.my_post_copyright:hover .fa-clipboard {\n  color: #000;\n}\n.my_post_copyright .post-url:hover {\n  font-weight: normal;\n}\n.my_post_copyright .copy-path {\n  margin-left: 1em;\n  width: 1em;\n  +mobile(){display:none;}\n}\n.my_post_copyright .copy-path:hover {\n  color: #808080;\n  cursor: pointer;\n}\n```\n修改 `themes/next/layout/_macro/post.swig` ,在代码如下：\n```JavaScript\n{% if theme.wechat_subscriber.enabled and not is_index %}\n      <div>\n        {% include 'wechat-subscriber.swig' %}\n      </div>\n {% endif %}\n```\n之前添加增加如下代码：\n```JavaScript\n<div>\n      {% if not is_index %}\n        {% include 'my-copyright.swig' %}\n      {% endif %}\n</div>\n```\n修改 `themes/next/source/css/_common/components/post/post.styl` 文件，在最后一行增加代码：\n```JavaScript\n@import \"my-post-copyright\"\n```\n\n设置新建文章自动开启\n\n`copyright`,即新建文章自动显示自定义的版权声明,设置 `your site/scaffolds/post.md`文件\n```JavaScript\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ntype: \"categories\"\ncategories:\ncopyright: true #新增,开启\n---\n```\n\n### 在右上角或者左上角实现fork me on github\n\n选择样式[GitHub Ribbons](https://github.com/blog/273-github-ribbons),修改图片跳转链接,并复制文本框中的代码,将如下地方代码换为自己Github主页：\n![](http://ov11eqxw3.bkt.clouddn.com/20171107Github.jpg/water.jpg)\n打开 `themes/next/layout/_layout.swig` 文件，把代码复制到`<div class=\"headband\"></div>`下面。\n\n### 修改文章底部的那个带#号的标签\n\n打开 `themes/next/layout/_macro/post.swig` 文件,搜索 `rel=\"tag\">#` ,将 `#` 换成 `<i class=\"fa fa-tag\"></i>`\n```JavaScript\n<div class=\"post-tags\">\n    {% for tag in post.tags %}\n       <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"><i class=\"fa fa-tag\"></i> {{ tag.name }}</a>\n    {% endfor %}\n</div>\n```\n\n### 添加顶部加载条\n\n打开 `themes/next/_config.yml` ，搜索关键字 `pace` ,设置为 `true` ,可以更换加载样式：\n```css\n# Progress bar in the top during page loading.\npace: true\n# Themes list:\n#pace-theme-big-counter\n#pace-theme-bounce\n#pace-theme-barber-shop\n#pace-theme-center-atom\n#pace-theme-center-circle\n#pace-theme-center-radar\n#pace-theme-center-simple\n#pace-theme-corner-indicator\n#pace-theme-fill-left\n#pace-theme-flash\n#pace-theme-loading-bar\n#pace-theme-mac-osx\n#pace-theme-minimal\n# For example\n# pace_theme: pace-theme-center-simple\npace_theme: pace-theme-flash #替换更换样式\n```\n### 本地搜索\n\n在你站点的根目录下\n```\n$ npm install hexo-generator-searchdb --save\n```\n打开 `Hexo` 站点的 `_config.yml`,添加配置\n```JavaScript\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n打开 `themes/next/_config.yml` ,搜索关键字 `local_search` ,设置为 `true`：\n```JavaScript\n# Local search\n# Dependencies: https://github.com/flashlab/hexo-generator-search\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### 修改网页底部\n\n1. 在图标库中找到你自己喜欢的图标, 修改桃心,打开 `themes/next_config.yml` ,搜索关键字 `authoricon`,替换图标名\n```\n# icon between year and author @Footer\nauthoricon: id-card\n```\n2. 隐藏网页底部 `Hexo 强力驱动`\n\n打开主题配置文件,搜索关键字 `copyright` ，如下:\n```\n# Footer `powered-by` and `theme-info` copyright\ncopyright: false\n```\n### 博文置顶\n~~打开 `Hexo` 站点下 `node_modules/hexo-generator-index/lib/generator.js` 文件。代码全部替换为：~~(next 5.1以后主题已自带此功能)\n```JavaScript\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n打开文章添加top字段,设置数值，数值越大文章越靠前：\n```JavaScript\n---\nlayout: layout\ntitle: 标签1\ndate: 2017-08-18 15:41:18\ntags: 标签1\ntop: 100\n---\n```\n\n###  统计功能，统计功能,显示文章字数统计,阅读时长,总字数\n\n在站点的根目录下：\n```\n$ npm i --save hexo-wordcount\n```\n打开 `themes/next/_config.yml` ，搜索关键字 `post_wordcount`：\n```JavaScript\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  #字数统计\n  wordcount: true\n  #预览时间\n  min2read: true\n  #总字数,显示在页面底部\n  totalcount: true\n  separated_meta: true\n```\n\n### 修改文章内文本连接样式\n\n打开 `themes/next/source/css/_custom/custom.styl`,添加代码：\n```JavaScript\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n### 每篇文章末尾统一添加“本文结束”标记\n\n在路径 `/themes/next/layout/_macro` 中新建  `passage-end-tag.swig` 文件,并添加以下内容：\n```JavaScript\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">------ 本文结束------</div>\n    {% endif %}\n</div>\n```\n打开 `themes/next/layout/_macro/post.swig` 文件,添加：\n```JavaScript\n<div>\n    {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n    {% endif %}\n </div>\n```\n然后打开主题配置文件 `_config.yml`,在末尾添加：\n```JavaScript\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\nenabled: true\n```\n\n### 文章顶部显示更新时间\n\n打开主题配置文件 `_config.yml` ,搜索关键字 `updated_at` 设置为 `true` ：\n```JavaScript\n# Post meta display settings\npost_meta:\n  item_text: true\n  created_at: true\n  updated_at: true\n  categories: true\n```\n~~编辑文章,增加关键字`updated`~~（next可以根据文章改变时间自动更改）\n```JavaScript\n---\nlayout: layout\ntitle: 关于\ndate: 2017-08-18 15:41:18\nupdated: 2017-09-05 20:18:54 #手动添加更新时间\n```\n\n### 修改访问URL路径\n\n默认情况下访问URL路径为：`domain/2017/08/18/关于本站`,修改为 `domain/About/关于本站`。\n编辑 `Hexo` 站点下的 `_config.yml` 文件，修改其中的 `permalink` 字段：\n```JavaScript\npermalink: :category/:title/\n```\n\n### 给代码块添加复制功能\n\n- 下载插件[clipboard.js](https://github.com/zenorocha/clipboard.js) 。\n- 打开 `themes/next/source/lib/` ,新建文件夹 `clipboard`。\n- 把下载 `clipboard.js`下的 `src` 文件夹下的文件拖动到 `clipboard`文件夹下。\n- 打开 `themes/next/source/js/src/` ,新建文件 `custom.js` ,代码如下:\n```JavaScript\n//此函数用于创建复制按钮\nfunction createCopyBtns() {\n    var $codeArea = $(\"figure table\");\n    //查看页面是否具有代码区域，没有代码块则不创建 复制按钮\n    if ($codeArea.length > 0) {\n        //复制成功后将要干的事情\n        function changeToSuccess(item) {\n             $imgOK = $(\"#copyBtn\").find(\"#imgSuccess\");\n                if ($imgOK.css(\"display\") == \"none\") {\n                    $imgOK.css({\n                        opacity: 0,\n                        display: \"block\"\n                    });\n                    $imgOK.animate({\n                        opacity: 1\n                    }, 1000);\n                    setTimeout(function() {\n                        $imgOK.animate({\n                            opacity: 0\n                        }, 2000);\n                    }, 2000);\n                    setTimeout(function() {\n                        $imgOK.css(\"display\", \"none\");\n                    }, 4000);\n                };\n        };\n        //创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮\n        //值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)\n        $(\".post-body\").before('<div id=\"copyBtn\" style=\"opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em\"><span id=\"imgCopy\" ><i class=\"fa fa-paste fa-fw\"></i></span><span id=\"imgSuccess\" style=\"display: none;\"><i class=\"fa fa-check-circle fa-fw\" aria-hidden=\"true\"></i></span>');\n        //创建 复制 插件，绑定单机时间到 指定元素，支持JQuery\n        var clipboard = new Clipboard('#copyBtn', {\n            target: function() {\n                //返回需要复制的元素内容\n                return document.querySelector(\"[copyFlag]\");\n            },\n            isSupported: function() {\n                //支持复制内容\n                return document.querySelector(\"[copyFlag]\");\n            }\n        });\n        //复制成功事件绑定\n        clipboard.on('success',\n            function(e) {\n                //清除内容被选择状态\n                e.clearSelection();\n                changeToSuccess(e);\n            });\n        //复制失败绑定事件\n        clipboard.on('error',\n            function(e) {\n                console.error('Action:', e.action);\n                console.error('Trigger:', e.trigger);\n            });\n        //鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果\n        $(\"#copyBtn\").hover(\n            function() {\n                $(this).stop();\n                $(this).css(\"opacity\", 1);\n            },\n            function() {\n                $(this).animate({\n                    opacity: 0\n                }, 2000);\n            }\n        );\n    }\n}\n//感应鼠标是否在代码区\n$(\"figure\").hover(\n    function() {\n        //-------鼠标活动在代码块内\n        //移除之前含有复制标志代码块的 copyFlag\n        $(\"[copyFlag]\").removeAttr(\"copyFlag\");\n        //在新的（当前鼠标所在代码区）代码块插入标志：copyFlag\n        $(this).find(\".code\").attr(\"copyFlag\", 1);\n        //获取复制按钮\n        $copyBtn = $(\"#copyBtn\");\n        if ($copyBtn.lenght != 0) {\n            //获取到按钮的前提下进行一下操作\n            //停止按钮动画效果\n            //设置为 显示状态\n            //修改 复制按钮 位置到 当前代码块开始部位\n            //设置代码块 左侧位置\n            $copyBtn.stop();\n            $copyBtn.css(\"opacity\", 0.8);\n            $copyBtn.css(\"display\", \"block\");\n            $copyBtn.css(\"top\", parseInt($copyBtn.css(\"top\")) + $(this).offset().top - $copyBtn.offset().top + 3);\n            $copyBtn.css(\"left\", -$copyBtn.width() - 3);\n        }\n    },\n    function() {\n        //-------鼠标离开代码块\n        //设置复制按钮可见度 2秒内到 0\n        $(\"#copyBtn\").animate({\n            opacity: 0\n        }, 2000);\n    }\n);\n//页面载入完成后，创建复制按钮\n$(document).ready(function() {\n  createCopyBtns();\n});\n```\n- 打开 `themes/next/layout/_custom/` ,新建文件 `custom.swig` ，代码如下:\n```JavaScript\n<script type=\"text/javascript\" src=\"/lib/clipboard/clipboard.js\"></script>\n<script type=\"text/javascript\" src=\"/js/src/custom.js\"></script>\n```\n- 修改文件 `themes/next/layout/_layout.swig` ,在标签 `</body>`上面插入代码:\n```JavaScript\n{% include '_custom/custom.swig' %}\n```\n\n### 新建404界面\n\n在站点根目录下,输入 `hexo new page 404` ,默认在 `Hexo` 站点下`/source/404/index.md`\n打开新建的404界面，在顶部插入一行，写上 `permalink: /404` ，这表示指定该页固定链接为 ` http://\"主页\"/404.html`。\n```JavaScript\n---\ntitle: #404 Not Found：该页无法显示\ndate: 2017-09-06 15:37:18\ncomments: false\npermalink: /404\n---\n```\n如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下：\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n```\n### 静态资源压缩\n\n在站点目录下：\n```\n$ npm install gulp -g\n```\n安装gulp插件：\n```\nnpm install gulp-minify-css --save\nnpm install gulp-uglify --save\nnpm install gulp-htmlmin --save\nnpm install gulp-htmlclean --save\nnpm install gulp-imagemin --save\n```\n在 `Hexo` 站点下添加 `gulpfile.js`文件，文件内容如下：\n```JavaScript\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\n// 压缩css文件\ngulp.task('minify-css', function() {\n  return gulp.src('./public/**/*.css')\n  .pipe(minifycss())\n  .pipe(gulp.dest('./public'));\n});\n// 压缩html文件\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n  .pipe(htmlclean())\n  .pipe(htmlmin({\n    removeComments: true,\n    minifyJS: true,\n    minifyCSS: true,\n    minifyURLs: true,\n  }))\n  .pipe(gulp.dest('./public'))\n});\n// 压缩js文件\ngulp.task('minify-js', function() {\n    return gulp.src(['./public/**/.js','!./public/js/**/*min.js'])\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public/demo 目录内图片\ngulp.task('minify-images', function() {\n    gulp.src('./public/demo/**/*.*')\n        .pipe(imagemin({\n           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest('./public/uploads'));\n});\n// 默认任务\ngulp.task('default', [\n  'minify-html','minify-css','minify-js','minify-images'\n]);\n```\n只需要每次在执行 `generate` 命令后执行 `gulp ` 就可以实现对静态资源的压缩，压缩完成后执行 `deploy` 命令同步到服务器：\n```\nhexo g\ngulp\nhexo d\n```\n\n### 本地站点推送到GitHub上\n\n在站点更目录下：\n```\n$ npm install hexo-deployer-git --save\n```\n在 `Hexo` 站点的 `_config.yml` 中配置 `deploy`：\n```JavaScript\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <repository url> #your github.io.git\n  branch: master\n```\n```\n$ hexo clean\n```\n```\n$ hexo d --g\n```\nhexo g  # 生成本地 public 静态文件,\nhexo d  # 部署到 Github 上,\n也可以缩写成：hexo g --d 。\n\n### 添加文章书写样式\n\n#### 文字增加背景色块\n\n打开 `themes/next/source/css/_custom` 下的 ` custom.styl` 文件,添加属性样式：\n```css\n// 颜色块-黄\nspan#inline-yellow {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #f0ad4e;\n}\n// 颜色块-绿\nspan#inline-green {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #5cb85c;\n}\n// 颜色块-蓝\nspan#inline-blue {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #2780e3;\n}\n// 颜色块-紫\nspan#inline-purple {\ndisplay:inline;\npadding:.2em .6em .3em;\nfont-size:80%;\nfont-weight:bold;\nline-height:1;\ncolor:#fff;\ntext-align:center;\nwhite-space:nowrap;\nvertical-align:baseline;\nborder-radius:0;\nbackground-color: #9954bb;\n}\n```\n在你需要编辑的文章地方。放置如下代码：\n```css\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n```\n\n#### 下载样式\n\n打开 `themes/next/source/css/_custom/custom.styl` 文件,添加属性样式：\n```css\na#download {\ndisplay: inline-block;\npadding: 0 10px;\ncolor: #000;\nbackground: transparent;\nborder: 2px solid #000;\nborder-radius: 2px;\ntransition: all .5s ease;\nfont-weight: bold;\n&:hover {\nbackground: #000;\ncolor: #fff;\n}\n}\n```\n在你需要编辑的文章地方。放置如下代码：\n```css\n<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span> </a>\n```\n#### 在文档中增加图标, [Font Awesome](http://fontawesome.dashgame.com/) 提供图标\n```\n<i class=\"fa fa-pencil\"></i>支持Markdown\n```\n\n### 实现点击出现桃心效果\n\n- 复制[网页](http://7u2ss1.com1.z0.glb.clouddn.com/love.js)代码\n- 新建 `love.js` 文件并且将代码复制进去，然后保存。\n- 将 `love.js`文件放到路径 `/themes/next/source/js/src` 里面\n- 然后打开 `\\themes\\next\\layout\\_layout.swig` 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n```\n\n### 添加热度\n\n\n![](http://ov11eqxw3.bkt.clouddn.com/20171107redu.jpg/water.jpg)\n\nnext主题集成leanCloud,根据[next官方文档](http://theme-next.iissnan.com/third-party-services.html)设置阅读次数统计（LeanCloud) ，然后打开  `/themes/next/layout/_macro/post.swig` ,在画红线的区域添加 `℃`：\n![](http://ov11eqxw3.bkt.clouddn.com/20171107redu2.jpg/water.jpg)\n\n然后打开 `/themes/next/languages/zh-Hans.yml` ,将 `visitors` 汉化为热度就可以了：\n\n```JavaScript\npost:\n  created: 创建于\n  modified: 更新于\n  sticky: 置顶\n  posted: 发表于\n  in: 分类于\n  read_more: 阅读全文\n  untitled: 未命名\n  toc_empty: 此文章未包含目录\n  visitors: 热度\n  wordcount: 字数统计\n  min2read: 阅读时长\n  totalcount: 博客全站字数\n```\n\n### 添加 README.md 文件\n\n每个项目下一般都有一个 `README.md` 文件，但是使用 `hexo` 部署到仓库后，项目下是没有 README.md 文件的。\n\n在 `Hexo` 目录下的 `source` 根目录下添加一个 `README.m`d 文件，修改站点配置文件 `_config.yml` ，将 `skip_render` 参数的值设置为：\n```\nskip_render: README.md\n```\n保存退出即可。再次使用 `hexo d` 命令部署博客的时候就不会在渲染 `README.md` 这个文件了。\n\n### 文章加密访问\n\n打开 `themes/next/layout/_partials/head.swig`文件,在 `{% if theme.pace %}` 标签下的 `{% endif %}` 之前插入代码：\n\n```JavaScript\n  <script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入文章密码') !== '{{ page.password }}'){\n                alert('密码错误');\n                history.back();\n            }\n        }\n    })();\n</script>\n```\n在文章上应用：\n```\n---\ntitle: 2017观看影视\ndate: 2017-09-25 16:10:03\ntype:\ntop:\ncomments:\ncategories: [影音, 影视]\ntags: [影音, 电影, 电视剧, 动画]\npassword: 123456\n---\n```\n\n### 添加jiathis分享\n\n在主题配置文件中,做如下配置：\n```\n# Share\n# This plugin is more useful in China, make sure you known how to use it.\n# And you can find the use guide at official webiste: http://www.jiathis.com/.\n# Warning: JiaThis does not support https.\njiathis: true\n  ##uid: Get this uid from http://www.jiathis.com/\n#add_this_id:\n```\n如果你想自定义话，打开 `themes/next/layout/_partials/share/jiathis.swig` 根据[官网](http://www.jiathis.com/)代码修改。\n\n### 修改打赏字体不闪动\n\n修改文件 `next/source/css/_common/components/post/post-reward.styl`，然后注释其中的函数 `wechat:hover` 和 `alipay:hover` ，如下：\n```css\n* 注释文字闪动函数\n #wechat:hover p{\n    animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n #alipay:hover p{\n   animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n*/\n```\n\n### 自定义鼠标样式\n\n打开 `themes/next/source/css/_custom/custom.styl` ,在里面写下如下代码：\n```css\n// 鼠标样式\n  * {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"),auto!important\n  }\n  :active {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"),auto!important\n  }\n```\n其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了。\n\n### 网站标题栏背景颜色\n\n当使用Pisces主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在 `source/css/_schemes/Pisces/_brand.styl` 中修改：\n```css\n.site-meta {\n  padding: 20px 0;\n  color: white;\n  background: $blue-dodger; //修改为自己喜欢的颜色\n\n  +tablet() {\n    box-shadow: 0 0 16px rgba(0,0,0,0.5);\n  }\n  +mobile() {\n    box-shadow: 0 0 16px rgba(0,0,0,0.5);\n  }\n}\n```\n但是，我们一般不主张这样修改源码的，在 `next/source/css/_custom` 目录下面专门提供了 `custom.styl` 供我们自定义样式的，因此也可以在 `custom.styl` 里面添加：\n```css\n// Custom styles.\n.site-meta {\n  background: $blue; //修改为自己喜欢的颜色\n}\n```\n\n### 修改内容区域的宽度\n\n我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。\nNexT 对于内容的宽度的设定如下：\n\n- 700px，当屏幕宽度 < 1600px\n- 900px，当屏幕宽度 >= 1600px\n- 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。\n在Mist和Muse风格可以用下面的方法：\n\n编辑主题的 ` source/css/_variables/custom.styl` 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n当你使用Pisces风格时可以用下面的方法：\n```\nheader{ width: 90%; }\n.container .main-inner { width: 90%; }\n.content-wrap { width: calc(100% - 260px); }\n```\n\n### 修改Logo字体\n\n在 `themes/next/source/css/_custom/custom.styl`  中添加如下代码：\n```css\n@font-face {\n    font-family: Zitiming;\n    src: url('/fonts/Zitiming.ttf');\n}\n.site-title {\n    font-size: 40px !important;\n\tfont-family: 'Zitiming' !important;\n}\n```\n其中字体文件在 `themes/next/source/fonts` 目录下，里面有个 `.gitkeep` 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 `Zitiming.ttf` ，具体字库自己从网上下载即可。\n\n### 添加背景图\n\n在 themes/next/source/css/_custom/custom.styl 中添加如下代码：\n```css\nbody{\n    background:url(/images/bg.jpg);\n    background-size:cover;\n    background-repeat:no-repeat;\n    background-attachment:fixed;\n    background-position:center;\n}\n```\n\n### 各版块透明度修改\n\n#### 内容板块透明\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 ` .content-wrap` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 菜单栏背景\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 `.header-inner` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 站点概况背景\n\n博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl` 文件 `.sidebar-inner` 标签下 `background: white`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n然后修改博客根目录 `themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl` 文件 ` .sidebar` 标签下 `background: $body-bg-color`修改为：\n```\nbackground: rgba(255,255,255,0.7); //0.7是透明度\n```\n\n#### 按钮背景\n\n博客根目录 `themes\\next\\source\\css\\_common\\components\\post\\post-button.styl` 同上修改对应位置为 `background: transparent;`\n\n### 添加网易云音乐\n\n在网易云音乐（网页版）中搜索我们想要插入的音乐，然后点击生成外链播放器\n![](http://ov11eqxw3.bkt.clouddn.com/20171109wangyiyun.jpg/water.jpg)\n然后根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置。\n\n我放在了侧边栏，在 `themes/next/layout/_custom/sidebar.swig` 文件中增加生成的HTML代码：\n```html\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n可以根据自己实际情况修改宽高等样式。\n\n参考自：\n\nhttp://www.jianshu.com/p/3ff20be857\nhttp://blog.csdn.net/qq_33699981/article/details/72716951\nhttp://blog.csdn.net/heqiangflytosky/article/details/54863185\n","slug":"Hexo-Next主题优化","published":1,"updated":"2018-11-01T09:12:42.288Z","layout":"post","photos":[],"link":"","_id":"cjnydngf10000z8v7hywd273x","content":"<h3 id=\"置主题风格\"><a href=\"#置主题风格\" class=\"headerlink\" title=\"置主题风格\"></a>置主题风格</h3><p>打开 <code>themes/next/_config.yml</code> 文件，搜索  <code>scheme</code> 关键字，将你需用启用的 <code>scheme</code> 前面注释 # 去除即可。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Scheme</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"selector-tag\">Schemes</span></span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Muse</span> # 默认 <span class=\"selector-tag\">Scheme</span>，这是 <span class=\"selector-tag\">NexT</span> 最初的版本，黑白主调，大量留白</span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Mist</span> # <span class=\"selector-tag\">Muse</span> 的紧凑版本，整洁有序的单栏外观</span><br><span class=\"line\"><span class=\"selector-tag\">scheme</span>: <span class=\"selector-tag\">Pisces</span> # 双栏 <span class=\"selector-tag\">Scheme</span>，小家碧玉似的清新</span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Gemini</span> # 类似 <span class=\"selector-tag\">Pisces</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"设置菜单项的显示文本和图标\"><a href=\"#设置菜单项的显示文本和图标\" class=\"headerlink\" title=\"设置菜单项的显示文本和图标\"></a>设置菜单项的显示文本和图标</h3><p>NexT 使用的是 <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>  提供的图标， <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。</p>\n<h4 id=\"设置菜单项的显示中文文本：\"><a href=\"#设置菜单项的显示中文文本：\" class=\"headerlink\" title=\"设置菜单项的显示中文文本：\"></a>设置菜单项的显示中文文本：</h4><p>打开 <code>themes/next/languages/zh-Hans.yml</code> 文件,搜索 <code>menu</code> 关键字，修改对应中文或者新增。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">menu</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">home</span>: 首页</span><br><span class=\"line\">  <span class=\"selector-tag\">archives</span>: 归档</span><br><span class=\"line\">  <span class=\"selector-tag\">categories</span>: 分类</span><br><span class=\"line\">  <span class=\"selector-tag\">tags</span>: 标签</span><br><span class=\"line\">  <span class=\"selector-tag\">about</span>: 关于</span><br><span class=\"line\">  <span class=\"selector-tag\">search</span>: 搜索</span><br><span class=\"line\">  <span class=\"selector-tag\">schedule</span>: 日程表</span><br><span class=\"line\">  <span class=\"selector-tag\">sitemap</span>: 站点地图</span><br><span class=\"line\">  <span class=\"selector-tag\">commonweal</span>: 公益404</span><br><span class=\"line\">  # 新增<span class=\"selector-tag\">menu</span></span><br><span class=\"line\">  <span class=\"selector-tag\">catalogue</span>: 目录</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设定菜单项的文件目录和对应图标（新版两项合并）\"><a href=\"#设定菜单项的文件目录和对应图标（新版两项合并）\" class=\"headerlink\" title=\"设定菜单项的文件目录和对应图标（新版两项合并）\"></a>设定菜单项的文件目录和对应图标（新版两项合并）</h4><p>打开 <code>themes/next/_config.yml</code> 文件，搜索    <code>menu_icons</code> 关键字，修改对应图标名称或者新增对应 <code>menu</code> 的图标。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Menu</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class=\"line\"># Usage: `Key: /link/ || icon`</span><br><span class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span>. <span class=\"selector-tag\">If</span> <span class=\"selector-tag\">translate</span> <span class=\"selector-tag\">for</span> <span class=\"selector-tag\">this</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">find</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">languages</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">this</span> <span class=\"selector-tag\">translate</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">be</span> <span class=\"selector-tag\">loaded</span>; <span class=\"selector-tag\">if</span> <span class=\"selector-tag\">not</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">be</span> <span class=\"selector-tag\">used</span>. <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">case-senstive</span>.</span><br><span class=\"line\"># Value before `||` delimeter is the target link.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class=\"line\"><span class=\"selector-tag\">menu</span>:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  archives: /archives/ || history</span><br><span class=\"line\">  categories: /categories/ || list</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  tools: /categories/工具资源/ || briefcase</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable/Disable menu icons.</span><br><span class=\"line\"># <span class=\"selector-tag\">Icon</span> <span class=\"selector-tag\">Mapping</span>:</span><br><span class=\"line\">#   <span class=\"selector-tag\">Map</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">specific</span> <span class=\"selector-tag\">FontAwesome</span> <span class=\"selector-tag\">icon</span> <span class=\"selector-tag\">name</span>.</span><br><span class=\"line\">#   <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">FontAwesome</span> <span class=\"selector-tag\">icon</span>. <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">case-senstive</span>.</span><br><span class=\"line\">#   <span class=\"selector-tag\">When</span> <span class=\"selector-tag\">an</span> <span class=\"selector-tag\">question</span> <span class=\"selector-tag\">mask</span> <span class=\"selector-tag\">icon</span> <span class=\"selector-tag\">presenting</span> <span class=\"selector-tag\">up</span> <span class=\"selector-tag\">means</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">has</span> <span class=\"selector-tag\">no</span> <span class=\"selector-tag\">mapping</span> <span class=\"selector-tag\">icon</span>.</span><br><span class=\"line\"><span class=\"selector-tag\">menu_icons</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">enable</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<p> 除了 <code>home</code>， <code>archives</code> , <code>/</code>后面都需要手动创建这个页面</p>\n<h4 id=\"创建菜单项对应文件目录-以分类为例\"><a href=\"#创建菜单项对应文件目录-以分类为例\" class=\"headerlink\" title=\"创建菜单项对应文件目录,以分类为例\"></a>创建菜单项对应文件目录,以分类为例</h4><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 categories ：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>编辑刚新建的页面,设置分类<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">---</span></span><br><span class=\"line\"><span class=\"selector-tag\">title</span>: 分类</span><br><span class=\"line\"><span class=\"selector-tag\">date</span>: 2014<span class=\"selector-tag\">-12-22</span> 12<span class=\"selector-pseudo\">:39</span><span class=\"selector-pseudo\">:04</span></span><br><span class=\"line\"><span class=\"selector-tag\">categories</span>: <span class=\"selector-tag\">Testing</span> #分类名</span><br><span class=\"line\"><span class=\"selector-tag\">type</span>: \"<span class=\"selector-tag\">categories</span>\"</span><br><span class=\"line\"><span class=\"selector-tag\">---</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><h4 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h4><p>打开 <code>themes/next/_config.yml</code> 文件，搜索  <code>Sidebar Avatar</code> 关键字，去掉 <code>avatar</code> 前面的<code>#</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.jpg</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class=\"line\">avatar: http:<span class=\"comment\">//example.com/avatar.png</span></span><br></pre></td></tr></table></figure></p>\n<p>或者使用本地图片,把图片放入 <code>themes/next/source/images</code> 下,修改 <code>avatar</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: /images/avatar.gif</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设置头像边框为圆形框\"><a href=\"#设置头像边框为圆形框\" class=\"headerlink\" title=\"设置头像边框为圆形框\"></a>设置头像边框为圆形框</h4><p>打开位于 <code>themes/next/source/css/_common/components/sidebar/sidebar-author.syl</code> 文件,修改如下:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $site-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: $site-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $site-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class=\"line\"> // 修改头像边框</span><br><span class=\"line\">  <span class=\"selector-tag\">border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-border-radius</span>: 50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特效：鼠标放置头像上旋转\"><a href=\"#特效：鼠标放置头像上旋转\" class=\"headerlink\" title=\"特效：鼠标放置头像上旋转\"></a>特效：鼠标放置头像上旋转</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $site-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: $site-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $site-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class=\"line\"> // 修改头像边框</span><br><span class=\"line\">  <span class=\"selector-tag\">border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-border-radius</span>: 50%;</span><br><span class=\"line\">  // 设置旋转</span><br><span class=\"line\">  <span class=\"selector-tag\">transition</span>: 1<span class=\"selector-class\">.4s</span> <span class=\"selector-tag\">all</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 可旋转的圆形头像,`hover`动作</span><br><span class=\"line\"><span class=\"selector-class\">.site-author-image</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览页面的时候显示当前浏览进度\"><a href=\"#浏览页面的时候显示当前浏览进度\" class=\"headerlink\" title=\"浏览页面的时候显示当前浏览进度\"></a>浏览页面的时候显示当前浏览进度</h3><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span></span><br><span class=\"line\"><span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Back</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">sidebar</span></span><br><span class=\"line\"> <span class=\"selector-tag\">b2t</span>: <span class=\"selector-tag\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"> # <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span></span><br><span class=\"line\"> <span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"侧边栏设置\"><a href=\"#侧边栏设置\" class=\"headerlink\" title=\"侧边栏设置\"></a>侧边栏设置</h3><h4 id=\"设置侧边栏社交链接\"><a href=\"#设置侧边栏社交链接\" class=\"headerlink\" title=\"设置侧边栏社交链接\"></a>设置侧边栏社交链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social</code> ,然后添加社交站点名称与地址即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Sidebar</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span>.</span><br><span class=\"line\"># Usage: `Key: permalink || icon`</span><br><span class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</span><br><span class=\"line\"># Value before `||` delimeter is the target permalink.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class=\"line\"><span class=\"selector-tag\">social</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">E-Mail</span>: <span class=\"selector-tag\">mailto</span><span class=\"selector-pseudo\">:yourname</span>@<span class=\"keyword\">gmail</span>.<span class=\"keyword\">com</span> || envelope</span><br><span class=\"line\">  Google: https://plus.google.com/yourname || google</span><br><span class=\"line\">  Twitter: https://twitter.com/yourname || twitter</span><br><span class=\"line\">  FB Page: https://www.facebook.com/yourname || facebook</span><br><span class=\"line\">  # 等等</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置侧边栏社交图标\"><a href=\"#设置侧边栏社交图标\" class=\"headerlink\" title=\"设置侧边栏社交图标\"></a>设置侧边栏社交图标</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href=\"http://fontawesome.dashgame.com\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>图标地。</p>\n<h4 id=\"RSS\"><a href=\"#RSS\" class=\"headerlink\" title=\"RSS\"></a>RSS</h4><p>在你 <code>Hexo</code> 站点目录下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>Hexo</code> 站点下的 <code>_config.yml</code> ,添加如下配置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feed</span><br><span class=\"line\"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: <span class=\"number\">20</span></span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>Blog rolls</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_title: 友情链接 #标题</span><br><span class=\"line\">links_layout: block #布局，一行一个连接</span><br><span class=\"line\">#links_layout: inline</span><br><span class=\"line\">links: #连接</span><br><span class=\"line\">  baidu: http:<span class=\"comment\">//example.com/</span></span><br><span class=\"line\">  google: http:<span class=\"comment\">//example.com/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"主页文章添加边框阴影效果\"><a href=\"#主页文章添加边框阴影效果\" class=\"headerlink\" title=\"主页文章添加边框阴影效果\"></a>主页文章添加边框阴影效果</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,向里面加代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\">.post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">0</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改文章间分割线\"><a href=\"#修改文章间分割线\" class=\"headerlink\" title=\"修改文章间分割线\"></a>修改文章间分割线</h3><p>打开 <code>themes/next/source/css/_common/components/post/post-eof.styl</code> ,修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.posts-expand &#123;</span><br><span class=\"line\">  .post-eof &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">  <span class=\"comment\">//  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  </span></span><br><span class=\"line\">    width: <span class=\"number\">0</span>%; <span class=\"comment\">//分割线长度</span></span><br><span class=\"line\">    height: <span class=\"number\">0</span>px; <span class=\"comment\">// 分割线高度</span></span><br><span class=\"line\">    background: $grey-light;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码块自定义样式\"><a href=\"#代码块自定义样式\" class=\"headerlink\" title=\"代码块自定义样式\"></a>代码块自定义样式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom styles.</span></span><br><span class=\"line\">code &#123;</span><br><span class=\"line\">    color: #ff7600;</span><br><span class=\"line\">    background: #fbf7f8;</span><br><span class=\"line\">    margin: <span class=\"number\">2</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 边框的自定义样式</span></span><br><span class=\"line\">.highlight, pre &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">5</span>px <span class=\"number\">0</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">5</span>px;</span><br><span class=\"line\">    border-radius: <span class=\"number\">3</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.highlight, code, pre &#123;</span><br><span class=\"line\">    border: 1px solid #d6d6d6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启版权声明\"><a href=\"#开启版权声明\" class=\"headerlink\" title=\"开启版权声明\"></a>开启版权声明</h3><p>主题配置文件下,搜索关键字 <code>post_copyright</code> , <code>enable</code> 改为 <code>true</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Declare license on posts</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  license: CC BY-NC-SA <span class=\"number\">4.0</span></span><br><span class=\"line\">  license_url: https:<span class=\"comment\">//creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义文章底部版权声明\"><a href=\"#自定义文章底部版权声明\" class=\"headerlink\" title=\"自定义文章底部版权声明\"></a>自定义文章底部版权声明</h3><p>效果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：Dragonstyle</span><br><span class=\"line\">链接：http:<span class=\"comment\">//www.dragonstyle.win/2017/09/06/Android-Studio个人设置/</span></span><br><span class=\"line\">來源：简书</span><br><span class=\"line\">版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA <span class=\"number\">4.0</span> 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure></p>\n<p>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ,内容如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.copyright %&#125;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"my_post_copyright\"</span>&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  &lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>本文标题:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; page.title &#125;&#125;&lt;<span class=\"regexp\">/a&gt;&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文章作者:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; theme.author &#125;&#125;&lt;<span class=\"regexp\">/a&gt;&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>发布时间:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; page.date.format(<span class=\"string\">\"YYYY年MM月DD日 - HH:mm:ss\"</span>) &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/</span>span&gt;&#123;&#123; page.updated.format(<span class=\"string\">\"YYYY年MM月DD日 - HH:mm:ss\"</span>) &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(page.path) &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">    &lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"copy-path\"</span>  title=<span class=\"string\">\"点击复制文章链接\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-clipboard\"</span> <span class=\"attr\">data-clipboard-text</span>=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span>  <span class=\"attr\">aria-label</span>=<span class=\"string\">\"复制成功！\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-creative-commons\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> &lt;a rel=<span class=\"string\">\"license\"</span> href=<span class=\"string\">\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> target=<span class=\"string\">\"_blank\"</span> title=<span class=\"string\">\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"</span>&gt;署名-非商业性使用-禁止演绎 <span class=\"number\">4.0</span> 国际&lt;<span class=\"regexp\">/a&gt; 转载请保留原文链接及作者。&lt;/</span>p&gt;  </span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class=\"line\"><span class=\"regexp\">    clipboard.on('success', $(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      $(\".fa-clipboard\").click(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        swal(&#123;   </span></span><br><span class=\"line\"><span class=\"regexp\">          title: \"\",   </span></span><br><span class=\"line\"><span class=\"regexp\">          text: '复制成功',   </span></span><br><span class=\"line\"><span class=\"regexp\">          html: false,</span></span><br><span class=\"line\"><span class=\"regexp\">          timer: 500,   </span></span><br><span class=\"line\"><span class=\"regexp\">          showConfirmButton: false</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;));  </span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在目录 <code>themes/next/source/css/_common/components/post/</code> 下添加 <code>my-post-copyright.styl</code>,内容如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.my_post_copyright &#123;</span><br><span class=\"line\">  width: <span class=\"number\">85</span>%;</span><br><span class=\"line\">  max-width: <span class=\"number\">45</span>em;</span><br><span class=\"line\">  margin: <span class=\"number\">2.8</span>em auto <span class=\"number\">0</span>;</span><br><span class=\"line\">  padding: <span class=\"number\">0.5</span>em <span class=\"number\">1.0</span>em;</span><br><span class=\"line\">  border: 1px solid #d3d3d3;</span><br><span class=\"line\">  font-size: <span class=\"number\">0.93</span>rem;</span><br><span class=\"line\">  line-height: <span class=\"number\">1.6</span>em;</span><br><span class=\"line\">  word-<span class=\"keyword\">break</span>: <span class=\"keyword\">break</span>-all;</span><br><span class=\"line\">  background: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright p&#123;<span class=\"attr\">margin</span>:<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">.my_post_copyright span &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: <span class=\"number\">5.2</span>em;</span><br><span class=\"line\">  color: #333333; // title color</span><br><span class=\"line\">  font-weight: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .raw &#123;</span><br><span class=\"line\">  margin-left: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  width: <span class=\"number\">5</span>em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright a &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  border-bottom:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright a:hover &#123;</span><br><span class=\"line\">  color: #0593d3; // link color</span><br><span class=\"line\">  text-decoration: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class=\"line\">  color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .post-url:hover &#123;</span><br><span class=\"line\">  font-weight: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .copy-path &#123;</span><br><span class=\"line\">  margin-left: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  width: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  +mobile()&#123;<span class=\"attr\">display</span>:none;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .copy-path:hover &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  cursor: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>themes/next/layout/_macro/post.swig</code> ,在代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;% include <span class=\"string\">'wechat-subscriber.swig'</span> %&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>之前添加增加如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">      &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">        &#123;% include <span class=\"string\">'my-copyright.swig'</span> %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>themes/next/source/css/_common/components/post/post.styl</code> 文件，在最后一行增加代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"my-post-copyright\"</span></span><br></pre></td></tr></table></figure></p>\n<p>设置新建文章自动开启</p>\n<p><code>copyright</code>,即新建文章自动显示自定义的版权声明,设置 <code>your site/scaffolds/post.md</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">type: <span class=\"string\">\"categories\"</span></span><br><span class=\"line\">categories:</span><br><span class=\"line\">copyright: true #新增,开启</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在右上角或者左上角实现fork-me-on-github\"><a href=\"#在右上角或者左上角实现fork-me-on-github\" class=\"headerlink\" title=\"在右上角或者左上角实现fork me on github\"></a>在右上角或者左上角实现fork me on github</h3><p>选择样式<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\">GitHub Ribbons</a>,修改图片跳转链接,并复制文本框中的代码,将如下地方代码换为自己Github主页：<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107Github.jpg/water.jpg\" alt=\"\"><br>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</p>\n<h3 id=\"修改文章底部的那个带-号的标签\"><a href=\"#修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"修改文章底部的那个带#号的标签\"></a>修改文章底部的那个带#号的标签</h3><p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,搜索 <code>rel=&quot;tag&quot;&gt;#</code> ,将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post-tags\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> post.tags %&#125;</span><br><span class=\"line\">       &lt;a href=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> rel=<span class=\"string\">\"tag\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> &#123;&#123; tag.name &#125;&#125;&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;% endfor %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加顶部加载条\"><a href=\"#添加顶部加载条\" class=\"headerlink\" title=\"添加顶部加载条\"></a>添加顶部加载条</h3><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code> ,设置为 <code>true</code> ,可以更换加载样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Progress</span> <span class=\"selector-tag\">bar</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">during</span> <span class=\"selector-tag\">page</span> <span class=\"selector-tag\">loading</span>.</span><br><span class=\"line\"><span class=\"selector-tag\">pace</span>: <span class=\"selector-tag\">true</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Themes</span> <span class=\"selector-tag\">list</span>:</span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-big-counter</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-bounce</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-barber-shop</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-atom</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-circle</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-radar</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-simple</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-corner-indicator</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-fill-left</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-flash</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-loading-bar</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-mac-osx</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-minimal</span></span><br><span class=\"line\"># <span class=\"selector-tag\">For</span> <span class=\"selector-tag\">example</span></span><br><span class=\"line\"># <span class=\"selector-tag\">pace_theme</span>: <span class=\"selector-tag\">pace-theme-center-simple</span></span><br><span class=\"line\"><span class=\"selector-tag\">pace_theme</span>: <span class=\"selector-tag\">pace-theme-flash</span> #替换更换样式</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>在你站点的根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>Hexo</code> 站点的 <code>_config.yml</code>,添加配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>local_search</code> ,设置为 <code>true</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  # if auto, trigger search by changing input</span><br><span class=\"line\">  # if manual, trigger search by pressing enter key or search button</span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  # show top n results per article, show all results by setting to -1</span><br><span class=\"line\">  top_n_per_article: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改网页底部\"><a href=\"#修改网页底部\" class=\"headerlink\" title=\"修改网页底部\"></a>修改网页底部</h3><ol>\n<li><p>在图标库中找到你自己喜欢的图标, 修改桃心,打开 <code>themes/next_config.yml</code> ,搜索关键字 <code>authoricon</code>,替换图标名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># icon between year and author @Footer</span><br><span class=\"line\">authoricon: id-card</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐藏网页底部 <code>Hexo 强力驱动</code></p>\n</li>\n</ol>\n<p>打开主题配置文件,搜索关键字 <code>copyright</code> ，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Footer `powered-by` and `theme-info` copyright</span><br><span class=\"line\">copyright: false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h3><p><del>打开 <code>Hexo</code> 站点下 <code>node_modules/hexo-generator-index/lib/generator.js</code> 文件。代码全部替换为：</del>(next 5.1以后主题已自带此功能)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>打开文章添加top字段,设置数值，数值越大文章越靠前：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: layout</span><br><span class=\"line\">title: 标签<span class=\"number\">1</span></span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-08</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">41</span>:<span class=\"number\">18</span></span><br><span class=\"line\">tags: 标签<span class=\"number\">1</span></span><br><span class=\"line\">top: <span class=\"number\">100</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"统计功能，统计功能-显示文章字数统计-阅读时长-总字数\"><a href=\"#统计功能，统计功能-显示文章字数统计-阅读时长-总字数\" class=\"headerlink\" title=\"统计功能，统计功能,显示文章字数统计,阅读时长,总字数\"></a>统计功能，统计功能,显示文章字数统计,阅读时长,总字数</h3><p>在站点的根目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>post_wordcount</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  #字数统计</span><br><span class=\"line\">  wordcount: <span class=\"literal\">true</span></span><br><span class=\"line\">  #预览时间</span><br><span class=\"line\">  min2read: <span class=\"literal\">true</span></span><br><span class=\"line\">  #总字数,显示在页面底部</span><br><span class=\"line\">  totalcount: <span class=\"literal\">true</span></span><br><span class=\"line\">  separated_meta: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改文章内文本连接样式\"><a href=\"#修改文章内文本连接样式\" class=\"headerlink\" title=\"修改文章内文本连接样式\"></a>修改文章内文本连接样式</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code>,添加代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文章内链接文本样式</span></span><br><span class=\"line\">.post-body p a&#123;</span><br><span class=\"line\">  color: #0593d3;</span><br><span class=\"line\">  border-bottom: none;</span><br><span class=\"line\">  border-bottom: 1px solid #0593d3;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    color: #fc6423;</span><br><span class=\"line\">    border-bottom: none;</span><br><span class=\"line\">    border-bottom: 1px solid #fc6423;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"每篇文章末尾统一添加“本文结束”标记\"><a href=\"#每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"每篇文章末尾统一添加“本文结束”标记\"></a>每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>/themes/next/layout/_macro</code> 中新建  <code>passage-end-tag.swig</code> 文件,并添加以下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=<span class=\"string\">\"text-align:center;color: #ccc;font-size:14px;\"</span>&gt;------ 本文结束------<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">    &#123;% include <span class=\"string\">'passage-end-tag.swig'</span> %&#125;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后打开主题配置文件 <code>_config.yml</code>,在末尾添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">enabled: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文章顶部显示更新时间\"><a href=\"#文章顶部显示更新时间\" class=\"headerlink\" title=\"文章顶部显示更新时间\"></a>文章顶部显示更新时间</h3><p>打开主题配置文件 <code>_config.yml</code> ,搜索关键字 <code>updated_at</code> 设置为 <code>true</code> ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post meta display settings</span><br><span class=\"line\">post_meta:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  created_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  updated_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  categories: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><del>编辑文章,增加关键字<code>updated</code></del>（next可以根据文章改变时间自动更改）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: layout</span><br><span class=\"line\">title: 关于</span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-08</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">41</span>:<span class=\"number\">18</span></span><br><span class=\"line\">updated: 2017-09-05 20:18:54 #手动添加更新时间</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改访问URL路径\"><a href=\"#修改访问URL路径\" class=\"headerlink\" title=\"修改访问URL路径\"></a>修改访问URL路径</h3><p>默认情况下访问URL路径为：<code>domain/2017/08/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。<br>编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code> 字段：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: :category/:title/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"给代码块添加复制功能\"><a href=\"#给代码块添加复制功能\" class=\"headerlink\" title=\"给代码块添加复制功能\"></a>给代码块添加复制功能</h3><ul>\n<li>下载插件<a href=\"https://github.com/zenorocha/clipboard.js\" target=\"_blank\" rel=\"noopener\">clipboard.js</a> 。</li>\n<li>打开 <code>themes/next/source/lib/</code> ,新建文件夹 <code>clipboard</code>。</li>\n<li>把下载 <code>clipboard.js</code>下的 <code>src</code> 文件夹下的文件拖动到 <code>clipboard</code>文件夹下。</li>\n<li><p>打开 <code>themes/next/source/js/src/</code> ,新建文件 <code>custom.js</code> ,代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此函数用于创建复制按钮</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCopyBtns</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $codeArea = $(<span class=\"string\">\"figure table\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($codeArea.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//复制成功后将要干的事情</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeToSuccess</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">             $imgOK = $(<span class=\"string\">\"#copyBtn\"</span>).find(<span class=\"string\">\"#imgSuccess\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($imgOK.css(<span class=\"string\">\"display\"</span>) == <span class=\"string\">\"none\"</span>) &#123;</span><br><span class=\"line\">                    $imgOK.css(&#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">0</span>,</span><br><span class=\"line\">                        display: <span class=\"string\">\"block\"</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    $imgOK.animate(&#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                        $imgOK.animate(&#123;</span><br><span class=\"line\">                            opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                        $imgOK.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\">                    &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮</span></span><br><span class=\"line\">        <span class=\"comment\">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class=\"line\">        $(<span class=\"string\">\".post-body\"</span>).before(<span class=\"string\">'&lt;div id=\"copyBtn\" style=\"opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em\"&gt;&lt;span id=\"imgCopy\" &gt;&lt;i class=\"fa fa-paste fa-fw\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id=\"imgSuccess\" style=\"display: none;\"&gt;&lt;i class=\"fa fa-check-circle fa-fw\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建 复制 插件，绑定单机时间到 指定元素，支持JQuery</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> clipboard = <span class=\"keyword\">new</span> Clipboard(<span class=\"string\">'#copyBtn'</span>, &#123;</span><br><span class=\"line\">            target: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//返回需要复制的元素内容</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"[copyFlag]\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            isSupported: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//支持复制内容</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"[copyFlag]\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//复制成功事件绑定</span></span><br><span class=\"line\">        clipboard.on(<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//清除内容被选择状态</span></span><br><span class=\"line\">                e.clearSelection();</span><br><span class=\"line\">                changeToSuccess(e);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//复制失败绑定事件</span></span><br><span class=\"line\">        clipboard.on(<span class=\"string\">'error'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Action:'</span>, e.action);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Trigger:'</span>, e.trigger);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#copyBtn\"</span>).hover(</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).stop();</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).css(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).animate(&#123;</span><br><span class=\"line\">                    opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//感应鼠标是否在代码区</span></span><br><span class=\"line\">$(<span class=\"string\">\"figure\"</span>).hover(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//-------鼠标活动在代码块内</span></span><br><span class=\"line\">        <span class=\"comment\">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class=\"line\">        $(<span class=\"string\">\"[copyFlag]\"</span>).removeAttr(<span class=\"string\">\"copyFlag\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).find(<span class=\"string\">\".code\"</span>).attr(<span class=\"string\">\"copyFlag\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取复制按钮</span></span><br><span class=\"line\">        $copyBtn = $(<span class=\"string\">\"#copyBtn\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($copyBtn.lenght != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到按钮的前提下进行一下操作</span></span><br><span class=\"line\">            <span class=\"comment\">//停止按钮动画效果</span></span><br><span class=\"line\">            <span class=\"comment\">//设置为 显示状态</span></span><br><span class=\"line\">            <span class=\"comment\">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class=\"line\">            <span class=\"comment\">//设置代码块 左侧位置</span></span><br><span class=\"line\">            $copyBtn.stop();</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0.8</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"block\"</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"top\"</span>, <span class=\"built_in\">parseInt</span>($copyBtn.css(<span class=\"string\">\"top\"</span>)) + $(<span class=\"keyword\">this</span>).offset().top - $copyBtn.offset().top + <span class=\"number\">3</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"left\"</span>, -$copyBtn.width() - <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//-------鼠标离开代码块</span></span><br><span class=\"line\">        <span class=\"comment\">//设置复制按钮可见度 2秒内到 0</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#copyBtn\"</span>).animate(&#123;</span><br><span class=\"line\">            opacity: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//页面载入完成后，创建复制按钮</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  createCopyBtns();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开 <code>themes/next/layout/_custom/</code> ,新建文件 <code>custom.swig</code> ，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/lib/clipboard/clipboard.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/src/custom.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件 <code>themes/next/layout/_layout.swig</code> ,在标签 <code>&lt;/body&gt;</code>上面插入代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include <span class=\"string\">'_custom/custom.swig'</span> %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新建404界面\"><a href=\"#新建404界面\" class=\"headerlink\" title=\"新建404界面\"></a>新建404界面</h3><p>在站点根目录下,输入 <code>hexo new page 404</code> ,默认在 <code>Hexo</code> 站点下<code>/source/404/index.md</code><br>打开新建的404界面，在顶部插入一行，写上 <code>permalink: /404</code> ，这表示指定该页固定链接为 <code>http://&quot;主页&quot;/404.html</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: #404 Not Found：该页无法显示</span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-06</span> <span class=\"number\">15</span>:<span class=\"number\">37</span>:<span class=\"number\">18</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">permalink: <span class=\"regexp\">/404</span></span><br><span class=\"line\"><span class=\"regexp\">---</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/style/404style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/plain\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/data.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/page.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"静态资源压缩\"><a href=\"#静态资源压缩\" class=\"headerlink\" title=\"静态资源压缩\"></a>静态资源压缩</h3><p>在站点目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br></pre></td></tr></table></figure></p>\n<p>安装gulp插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Hexo</code> 站点下添加 <code>gulpfile.js</code>文件，文件内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 压缩css文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">  .pipe(minifycss())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩html文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">  .pipe(htmlclean())</span><br><span class=\"line\">  .pipe(htmlmin(&#123;</span><br><span class=\"line\">    removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./public/**/.js'</span>,<span class=\"string\">'!./public/js/**/*min.js'</span>])</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/demo 目录内图片</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./public/demo/**/*.*'</span>)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">           optimizationLevel: <span class=\"number\">5</span>, <span class=\"comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class=\"line\">           progressive: <span class=\"literal\">true</span>, <span class=\"comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class=\"line\">           interlaced: <span class=\"literal\">false</span>, <span class=\"comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class=\"line\">           multipass: <span class=\"literal\">false</span>, <span class=\"comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public/uploads'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 默认任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">  <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span>,<span class=\"string\">'minify-images'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"本地站点推送到GitHub上\"><a href=\"#本地站点推送到GitHub上\" class=\"headerlink\" title=\"本地站点推送到GitHub上\"></a>本地站点推送到GitHub上</h3><p>在站点更目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Hexo</code> 站点的 <code>_config.yml</code> 中配置 <code>deploy</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">repository</span> <span class=\"attr\">url</span>&gt;</span> #your github.io.git</span></span><br><span class=\"line\"><span class=\"xml\">  branch: master</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d --g</span><br></pre></td></tr></table></figure>\n<p>hexo g  # 生成本地 public 静态文件,<br>hexo d  # 部署到 Github 上,<br>也可以缩写成：hexo g –d 。</p>\n<h3 id=\"添加文章书写样式\"><a href=\"#添加文章书写样式\" class=\"headerlink\" title=\"添加文章书写样式\"></a>添加文章书写样式</h3><h4 id=\"文字增加背景色块\"><a href=\"#文字增加背景色块\" class=\"headerlink\" title=\"文字增加背景色块\"></a>文字增加背景色块</h4><p>打开 <code>themes/next/source/css/_custom</code> 下的 <code>custom.styl</code> 文件,添加属性样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 颜色块-黄</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-yellow</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#f0ad4e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-绿</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-green</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#5cb85c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-蓝</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-blue</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#2780e3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-紫</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-purple</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#9954bb</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在你需要编辑的文章地方。放置如下代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=\"inline-blue\"&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-purple\"&gt; 主题配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-yellow\"&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-green\"&gt; 主题配置文件 &lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载样式\"><a href=\"#下载样式\" class=\"headerlink\" title=\"下载样式\"></a>下载样式</h4><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> 文件,添加属性样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-id\">#download</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">background</span>: transparent;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span> ease;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&amp;:hover &#123;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在你需要编辑的文章地方。放置如下代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=\"download\" href=\"https://git-scm.com/download/win\"&gt;&lt;i class=\"fa fa-download\"&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt; &lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在文档中增加图标-Font-Awesome-提供图标\"><a href=\"#在文档中增加图标-Font-Awesome-提供图标\" class=\"headerlink\" title=\"在文档中增加图标, Font Awesome 提供图标\"></a>在文档中增加图标, <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供图标</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;支持Markdown</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h3><ul>\n<li>复制<a href=\"http://7u2ss1.com1.z0.glb.clouddn.com/love.js\" target=\"_blank\" rel=\"noopener\">网页</a>代码</li>\n<li>新建 <code>love.js</code> 文件并且将代码复制进去，然后保存。</li>\n<li>将 <code>love.js</code>文件放到路径 <code>/themes/next/source/js/src</code> 里面</li>\n<li>然后打开 <code>\\themes\\next\\layout\\_layout.swig</code> 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加热度\"><a href=\"#添加热度\" class=\"headerlink\" title=\"添加热度\"></a>添加热度</h3><p><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107redu.jpg/water.jpg\" alt=\"\"></p>\n<p>next主题集成leanCloud,根据<a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next官方文档</a>设置阅读次数统计（LeanCloud) ，然后打开  <code>/themes/next/layout/_macro/post.swig</code> ,在画红线的区域添加 <code>℃</code>：<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107redu2.jpg/water.jpg\" alt=\"\"></p>\n<p>然后打开 <code>/themes/next/languages/zh-Hans.yml</code> ,将 <code>visitors</code> 汉化为热度就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">  created: 创建于</span><br><span class=\"line\">  modified: 更新于</span><br><span class=\"line\">  sticky: 置顶</span><br><span class=\"line\">  posted: 发表于</span><br><span class=\"line\">  <span class=\"keyword\">in</span>: 分类于</span><br><span class=\"line\">  read_more: 阅读全文</span><br><span class=\"line\">  untitled: 未命名</span><br><span class=\"line\">  toc_empty: 此文章未包含目录</span><br><span class=\"line\">  visitors: 热度</span><br><span class=\"line\">  wordcount: 字数统计</span><br><span class=\"line\">  min2read: 阅读时长</span><br><span class=\"line\">  totalcount: 博客全站字数</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-README-md-文件\"><a href=\"#添加-README-md-文件\" class=\"headerlink\" title=\"添加 README.md 文件\"></a>添加 README.md 文件</h3><p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 <code>hexo</code> 部署到仓库后，项目下是没有 README.md 文件的。</p>\n<p>在 <code>Hexo</code> 目录下的 <code>source</code> 根目录下添加一个 <code>README.m</code>d 文件，修改站点配置文件 <code>_config.yml</code> ，将 <code>skip_render</code> 参数的值设置为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: README.md</span><br></pre></td></tr></table></figure></p>\n<p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 <code>README.md</code> 这个文件了。</p>\n<h3 id=\"文章加密访问\"><a href=\"#文章加密访问\" class=\"headerlink\" title=\"文章加密访问\"></a>文章加密访问</h3><p>打开 <code>themes/next/layout/_partials/head.swig</code>文件,在 <code></code> 之前插入代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prompt(<span class=\"string\">'请输入文章密码'</span>) !== <span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class=\"line\">                alert(<span class=\"string\">'密码错误'</span>);</span><br><span class=\"line\">                history.back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在文章上应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2017观看影视</span><br><span class=\"line\">date: 2017-09-25 16:10:03</span><br><span class=\"line\">type:</span><br><span class=\"line\">top:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">categories: [影音, 影视]</span><br><span class=\"line\">tags: [影音, 电影, 电视剧, 动画]</span><br><span class=\"line\">password: 123456</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加jiathis分享\"><a href=\"#添加jiathis分享\" class=\"headerlink\" title=\"添加jiathis分享\"></a>添加jiathis分享</h3><p>在主题配置文件中,做如下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Share</span><br><span class=\"line\"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class=\"line\"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span><br><span class=\"line\"># Warning: JiaThis does not support https.</span><br><span class=\"line\">jiathis: true</span><br><span class=\"line\">  ##uid: Get this uid from http://www.jiathis.com/</span><br><span class=\"line\">#add_this_id:</span><br></pre></td></tr></table></figure></p>\n<p>如果你想自定义话，打开 <code>themes/next/layout/_partials/share/jiathis.swig</code> 根据<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"noopener\">官网</a>代码修改。</p>\n<h3 id=\"修改打赏字体不闪动\"><a href=\"#修改打赏字体不闪动\" class=\"headerlink\" title=\"修改打赏字体不闪动\"></a>修改打赏字体不闪动</h3><p>修改文件 <code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数 <code>wechat:hover</code> 和 <code>alipay:hover</code> ，如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 注释文字闪动函数</span><br><span class=\"line\"> <span class=\"selector-id\">#wechat</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"selector-id\">#alipay</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">   <span class=\"attribute\">animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义鼠标样式\"><a href=\"#自定义鼠标样式\" class=\"headerlink\" title=\"自定义鼠标样式\"></a>自定义鼠标样式</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,在里面写下如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标样式</span><br><span class=\"line\">  * &#123;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"</span>),auto<span class=\"meta\">!important</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"</span>),auto<span class=\"meta\">!important</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了。</p>\n<h3 id=\"网站标题栏背景颜色\"><a href=\"#网站标题栏背景颜色\" class=\"headerlink\" title=\"网站标题栏背景颜色\"></a>网站标题栏背景颜色</h3><p>当使用Pisces主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在 <code>source/css/_schemes/Pisces/_brand.styl</code> 中修改：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  background: $blue-dodger; //修改为自己喜欢的颜色</span><br><span class=\"line\"></span><br><span class=\"line\">  +<span class=\"selector-tag\">tablet</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">16px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  +<span class=\"selector-tag\">mobile</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">16px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，我们一般不主张这样修改源码的，在 <code>next/source/css/_custom</code> 目录下面专门提供了 <code>custom.styl</code> 供我们自定义样式的，因此也可以在 <code>custom.styl</code> 里面添加：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Custom styles.</span><br><span class=\"line\"><span class=\"selector-class\">.site-meta</span> &#123;</span><br><span class=\"line\">  background: $blue; //修改为自己喜欢的颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改内容区域的宽度\"><a href=\"#修改内容区域的宽度\" class=\"headerlink\" title=\"修改内容区域的宽度\"></a>修改内容区域的宽度</h3><p>我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。<br>NexT 对于内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。<br>在Mist和Muse风格可以用下面的方法：</p>\n<p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>\n<p>当你使用Pisces风格时可以用下面的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header&#123; width: 90%; &#125;</span><br><span class=\"line\">.container .main-inner &#123; width: 90%; &#125;</span><br><span class=\"line\">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改Logo字体\"><a href=\"#修改Logo字体\" class=\"headerlink\" title=\"修改Logo字体\"></a>修改Logo字体</h3><p>在 <code>themes/next/source/css/_custom/custom.styl</code>  中添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Zitiming;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/fonts/Zitiming.ttf'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.site-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'Zitiming'</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>\n<h3 id=\"添加背景图\"><a href=\"#添加背景图\" class=\"headerlink\" title=\"添加背景图\"></a>添加背景图</h3><p>在 themes/next/source/css/_custom/custom.styl 中添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(/images/bg.jpg);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>:cover;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"各版块透明度修改\"><a href=\"#各版块透明度修改\" class=\"headerlink\" title=\"各版块透明度修改\"></a>各版块透明度修改</h3><h4 id=\"内容板块透明\"><a href=\"#内容板块透明\" class=\"headerlink\" title=\"内容板块透明\"></a>内容板块透明</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.content-wrap</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"菜单栏背景\"><a href=\"#菜单栏背景\" class=\"headerlink\" title=\"菜单栏背景\"></a>菜单栏背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.header-inner</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"站点概况背景\"><a href=\"#站点概况背景\" class=\"headerlink\" title=\"站点概况背景\"></a>站点概况背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl</code> 文件 <code>.sidebar-inner</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<p>然后修改博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.sidebar</code> 标签下 <code>background: $body-bg-color</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"按钮背景\"><a href=\"#按钮背景\" class=\"headerlink\" title=\"按钮背景\"></a>按钮背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_common\\components\\post\\post-button.styl</code> 同上修改对应位置为 <code>background: transparent;</code></p>\n<h3 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h3><p>在网易云音乐（网页版）中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171109wangyiyun.jpg/water.jpg\" alt=\"\"><br>然后根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置。</p>\n<p>我放在了侧边栏，在 <code>themes/next/layout/_custom/sidebar.swig</code> 文件中增加生成的HTML代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"music163player\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">280</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以根据自己实际情况修改宽高等样式。</p>\n<p>参考自：</p>\n<p><a href=\"http://www.jianshu.com/p/3ff20be857\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ff20be857</a><br><a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_33699981/article/details/72716951</a><br><a href=\"http://blog.csdn.net/heqiangflytosky/article/details/54863185\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/heqiangflytosky/article/details/54863185</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"置主题风格\"><a href=\"#置主题风格\" class=\"headerlink\" title=\"置主题风格\"></a>置主题风格</h3><p>打开 <code>themes/next/_config.yml</code> 文件，搜索  <code>scheme</code> 关键字，将你需用启用的 <code>scheme</code> 前面注释 # 去除即可。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Scheme</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"selector-tag\">Schemes</span></span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Muse</span> # 默认 <span class=\"selector-tag\">Scheme</span>，这是 <span class=\"selector-tag\">NexT</span> 最初的版本，黑白主调，大量留白</span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Mist</span> # <span class=\"selector-tag\">Muse</span> 的紧凑版本，整洁有序的单栏外观</span><br><span class=\"line\"><span class=\"selector-tag\">scheme</span>: <span class=\"selector-tag\">Pisces</span> # 双栏 <span class=\"selector-tag\">Scheme</span>，小家碧玉似的清新</span><br><span class=\"line\"><span class=\"selector-id\">#scheme</span>: <span class=\"selector-tag\">Gemini</span> # 类似 <span class=\"selector-tag\">Pisces</span></span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"设置菜单项的显示文本和图标\"><a href=\"#设置菜单项的显示文本和图标\" class=\"headerlink\" title=\"设置菜单项的显示文本和图标\"></a>设置菜单项的显示文本和图标</h3><p>NexT 使用的是 <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>  提供的图标， <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。</p>\n<h4 id=\"设置菜单项的显示中文文本：\"><a href=\"#设置菜单项的显示中文文本：\" class=\"headerlink\" title=\"设置菜单项的显示中文文本：\"></a>设置菜单项的显示中文文本：</h4><p>打开 <code>themes/next/languages/zh-Hans.yml</code> 文件,搜索 <code>menu</code> 关键字，修改对应中文或者新增。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">menu</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">home</span>: 首页</span><br><span class=\"line\">  <span class=\"selector-tag\">archives</span>: 归档</span><br><span class=\"line\">  <span class=\"selector-tag\">categories</span>: 分类</span><br><span class=\"line\">  <span class=\"selector-tag\">tags</span>: 标签</span><br><span class=\"line\">  <span class=\"selector-tag\">about</span>: 关于</span><br><span class=\"line\">  <span class=\"selector-tag\">search</span>: 搜索</span><br><span class=\"line\">  <span class=\"selector-tag\">schedule</span>: 日程表</span><br><span class=\"line\">  <span class=\"selector-tag\">sitemap</span>: 站点地图</span><br><span class=\"line\">  <span class=\"selector-tag\">commonweal</span>: 公益404</span><br><span class=\"line\">  # 新增<span class=\"selector-tag\">menu</span></span><br><span class=\"line\">  <span class=\"selector-tag\">catalogue</span>: 目录</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设定菜单项的文件目录和对应图标（新版两项合并）\"><a href=\"#设定菜单项的文件目录和对应图标（新版两项合并）\" class=\"headerlink\" title=\"设定菜单项的文件目录和对应图标（新版两项合并）\"></a>设定菜单项的文件目录和对应图标（新版两项合并）</h4><p>打开 <code>themes/next/_config.yml</code> 文件，搜索    <code>menu_icons</code> 关键字，修改对应图标名称或者新增对应 <code>menu</code> 的图标。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Menu</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class=\"line\"># Usage: `Key: /link/ || icon`</span><br><span class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span>. <span class=\"selector-tag\">If</span> <span class=\"selector-tag\">translate</span> <span class=\"selector-tag\">for</span> <span class=\"selector-tag\">this</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">find</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">languages</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">this</span> <span class=\"selector-tag\">translate</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">be</span> <span class=\"selector-tag\">loaded</span>; <span class=\"selector-tag\">if</span> <span class=\"selector-tag\">not</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">will</span> <span class=\"selector-tag\">be</span> <span class=\"selector-tag\">used</span>. <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">case-senstive</span>.</span><br><span class=\"line\"># Value before `||` delimeter is the target link.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class=\"line\"><span class=\"selector-tag\">menu</span>:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  archives: /archives/ || history</span><br><span class=\"line\">  categories: /categories/ || list</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  tools: /categories/工具资源/ || briefcase</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable/Disable menu icons.</span><br><span class=\"line\"># <span class=\"selector-tag\">Icon</span> <span class=\"selector-tag\">Mapping</span>:</span><br><span class=\"line\">#   <span class=\"selector-tag\">Map</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">specific</span> <span class=\"selector-tag\">FontAwesome</span> <span class=\"selector-tag\">icon</span> <span class=\"selector-tag\">name</span>.</span><br><span class=\"line\">#   <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">menu</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">of</span> <span class=\"selector-tag\">FontAwesome</span> <span class=\"selector-tag\">icon</span>. <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">case-senstive</span>.</span><br><span class=\"line\">#   <span class=\"selector-tag\">When</span> <span class=\"selector-tag\">an</span> <span class=\"selector-tag\">question</span> <span class=\"selector-tag\">mask</span> <span class=\"selector-tag\">icon</span> <span class=\"selector-tag\">presenting</span> <span class=\"selector-tag\">up</span> <span class=\"selector-tag\">means</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">item</span> <span class=\"selector-tag\">has</span> <span class=\"selector-tag\">no</span> <span class=\"selector-tag\">mapping</span> <span class=\"selector-tag\">icon</span>.</span><br><span class=\"line\"><span class=\"selector-tag\">menu_icons</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">enable</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<p> 除了 <code>home</code>， <code>archives</code> , <code>/</code>后面都需要手动创建这个页面</p>\n<h4 id=\"创建菜单项对应文件目录-以分类为例\"><a href=\"#创建菜单项对应文件目录-以分类为例\" class=\"headerlink\" title=\"创建菜单项对应文件目录,以分类为例\"></a>创建菜单项对应文件目录,以分类为例</h4><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 categories ：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>编辑刚新建的页面,设置分类<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">---</span></span><br><span class=\"line\"><span class=\"selector-tag\">title</span>: 分类</span><br><span class=\"line\"><span class=\"selector-tag\">date</span>: 2014<span class=\"selector-tag\">-12-22</span> 12<span class=\"selector-pseudo\">:39</span><span class=\"selector-pseudo\">:04</span></span><br><span class=\"line\"><span class=\"selector-tag\">categories</span>: <span class=\"selector-tag\">Testing</span> #分类名</span><br><span class=\"line\"><span class=\"selector-tag\">type</span>: \"<span class=\"selector-tag\">categories</span>\"</span><br><span class=\"line\"><span class=\"selector-tag\">---</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><h4 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h4><p>打开 <code>themes/next/_config.yml</code> 文件，搜索  <code>Sidebar Avatar</code> 关键字，去掉 <code>avatar</code> 前面的<code>#</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.jpg</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class=\"line\">avatar: http:<span class=\"comment\">//example.com/avatar.png</span></span><br></pre></td></tr></table></figure></p>\n<p>或者使用本地图片,把图片放入 <code>themes/next/source/images</code> 下,修改 <code>avatar</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: /images/avatar.gif</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设置头像边框为圆形框\"><a href=\"#设置头像边框为圆形框\" class=\"headerlink\" title=\"设置头像边框为圆形框\"></a>设置头像边框为圆形框</h4><p>打开位于 <code>themes/next/source/css/_common/components/sidebar/sidebar-author.syl</code> 文件,修改如下:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $site-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: $site-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $site-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class=\"line\"> // 修改头像边框</span><br><span class=\"line\">  <span class=\"selector-tag\">border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-border-radius</span>: 50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特效：鼠标放置头像上旋转\"><a href=\"#特效：鼠标放置头像上旋转\" class=\"headerlink\" title=\"特效：鼠标放置头像上旋转\"></a>特效：鼠标放置头像上旋转</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $site-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: $site-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $site-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class=\"line\"> // 修改头像边框</span><br><span class=\"line\">  <span class=\"selector-tag\">border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-border-radius</span>: 50%;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-border-radius</span>: 50%;</span><br><span class=\"line\">  // 设置旋转</span><br><span class=\"line\">  <span class=\"selector-tag\">transition</span>: 1<span class=\"selector-class\">.4s</span> <span class=\"selector-tag\">all</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 可旋转的圆形头像,`hover`动作</span><br><span class=\"line\"><span class=\"selector-class\">.site-author-image</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">    <span class=\"attribute\">-transform</span>: <span class=\"built_in\">rotate</span>(360deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览页面的时候显示当前浏览进度\"><a href=\"#浏览页面的时候显示当前浏览进度\" class=\"headerlink\" title=\"浏览页面的时候显示当前浏览进度\"></a>浏览页面的时候显示当前浏览进度</h3><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span></span><br><span class=\"line\"><span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Back</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">sidebar</span></span><br><span class=\"line\"> <span class=\"selector-tag\">b2t</span>: <span class=\"selector-tag\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"> # <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span></span><br><span class=\"line\"> <span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"侧边栏设置\"><a href=\"#侧边栏设置\" class=\"headerlink\" title=\"侧边栏设置\"></a>侧边栏设置</h3><h4 id=\"设置侧边栏社交链接\"><a href=\"#设置侧边栏社交链接\" class=\"headerlink\" title=\"设置侧边栏社交链接\"></a>设置侧边栏社交链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social</code> ,然后添加社交站点名称与地址即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Sidebar</span> <span class=\"selector-tag\">Settings</span></span><br><span class=\"line\"># <span class=\"selector-tag\">---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span>.</span><br><span class=\"line\"># Usage: `Key: permalink || icon`</span><br><span class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</span><br><span class=\"line\"># Value before `||` delimeter is the target permalink.</span><br><span class=\"line\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class=\"line\"><span class=\"selector-tag\">social</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">E-Mail</span>: <span class=\"selector-tag\">mailto</span><span class=\"selector-pseudo\">:yourname</span>@<span class=\"keyword\">gmail</span>.<span class=\"keyword\">com</span> || envelope</span><br><span class=\"line\">  Google: https://plus.google.com/yourname || google</span><br><span class=\"line\">  Twitter: https://twitter.com/yourname || twitter</span><br><span class=\"line\">  FB Page: https://www.facebook.com/yourname || facebook</span><br><span class=\"line\">  # 等等</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置侧边栏社交图标\"><a href=\"#设置侧边栏社交图标\" class=\"headerlink\" title=\"设置侧边栏社交图标\"></a>设置侧边栏社交图标</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href=\"http://fontawesome.dashgame.com\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>图标地。</p>\n<h4 id=\"RSS\"><a href=\"#RSS\" class=\"headerlink\" title=\"RSS\"></a>RSS</h4><p>在你 <code>Hexo</code> 站点目录下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>Hexo</code> 站点下的 <code>_config.yml</code> ,添加如下配置：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># feed</span><br><span class=\"line\"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: <span class=\"number\">20</span></span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>Blog rolls</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_title: 友情链接 #标题</span><br><span class=\"line\">links_layout: block #布局，一行一个连接</span><br><span class=\"line\">#links_layout: inline</span><br><span class=\"line\">links: #连接</span><br><span class=\"line\">  baidu: http:<span class=\"comment\">//example.com/</span></span><br><span class=\"line\">  google: http:<span class=\"comment\">//example.com/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"主页文章添加边框阴影效果\"><a href=\"#主页文章添加边框阴影效果\" class=\"headerlink\" title=\"主页文章添加边框阴影效果\"></a>主页文章添加边框阴影效果</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,向里面加代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主页文章添加阴影效果</span></span><br><span class=\"line\">.post &#123;</span><br><span class=\"line\">   margin-top: <span class=\"number\">0</span>px;</span><br><span class=\"line\">   margin-bottom: <span class=\"number\">60</span>px;</span><br><span class=\"line\">   padding: <span class=\"number\">25</span>px;</span><br><span class=\"line\">   -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">   -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改文章间分割线\"><a href=\"#修改文章间分割线\" class=\"headerlink\" title=\"修改文章间分割线\"></a>修改文章间分割线</h3><p>打开 <code>themes/next/source/css/_common/components/post/post-eof.styl</code> ,修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.posts-expand &#123;</span><br><span class=\"line\">  .post-eof &#123;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">  <span class=\"comment\">//  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  </span></span><br><span class=\"line\">    width: <span class=\"number\">0</span>%; <span class=\"comment\">//分割线长度</span></span><br><span class=\"line\">    height: <span class=\"number\">0</span>px; <span class=\"comment\">// 分割线高度</span></span><br><span class=\"line\">    background: $grey-light;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码块自定义样式\"><a href=\"#代码块自定义样式\" class=\"headerlink\" title=\"代码块自定义样式\"></a>代码块自定义样式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom styles.</span></span><br><span class=\"line\">code &#123;</span><br><span class=\"line\">    color: #ff7600;</span><br><span class=\"line\">    background: #fbf7f8;</span><br><span class=\"line\">    margin: <span class=\"number\">2</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 边框的自定义样式</span></span><br><span class=\"line\">.highlight, pre &#123;</span><br><span class=\"line\">    margin: <span class=\"number\">5</span>px <span class=\"number\">0</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">5</span>px;</span><br><span class=\"line\">    border-radius: <span class=\"number\">3</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.highlight, code, pre &#123;</span><br><span class=\"line\">    border: 1px solid #d6d6d6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启版权声明\"><a href=\"#开启版权声明\" class=\"headerlink\" title=\"开启版权声明\"></a>开启版权声明</h3><p>主题配置文件下,搜索关键字 <code>post_copyright</code> , <code>enable</code> 改为 <code>true</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Declare license on posts</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  license: CC BY-NC-SA <span class=\"number\">4.0</span></span><br><span class=\"line\">  license_url: https:<span class=\"comment\">//creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义文章底部版权声明\"><a href=\"#自定义文章底部版权声明\" class=\"headerlink\" title=\"自定义文章底部版权声明\"></a>自定义文章底部版权声明</h3><p>效果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：Dragonstyle</span><br><span class=\"line\">链接：http:<span class=\"comment\">//www.dragonstyle.win/2017/09/06/Android-Studio个人设置/</span></span><br><span class=\"line\">來源：简书</span><br><span class=\"line\">版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA <span class=\"number\">4.0</span> 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure></p>\n<p>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ,内容如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.copyright %&#125;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"my_post_copyright\"</span>&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">  &lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>本文标题:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; page.title &#125;&#125;&lt;<span class=\"regexp\">/a&gt;&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文章作者:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; theme.author &#125;&#125;&lt;<span class=\"regexp\">/a&gt;&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>发布时间:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>&#123;&#123; page.date.format(<span class=\"string\">\"YYYY年MM月DD日 - HH:mm:ss\"</span>) &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/</span>span&gt;&#123;&#123; page.updated.format(<span class=\"string\">\"YYYY年MM月DD日 - HH:mm:ss\"</span>) &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(page.path) &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">    &lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"copy-path\"</span>  title=<span class=\"string\">\"点击复制文章链接\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-clipboard\"</span> <span class=\"attr\">data-clipboard-text</span>=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span>  <span class=\"attr\">aria-label</span>=<span class=\"string\">\"复制成功！\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/</span>span&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-creative-commons\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> &lt;a rel=<span class=\"string\">\"license\"</span> href=<span class=\"string\">\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> target=<span class=\"string\">\"_blank\"</span> title=<span class=\"string\">\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"</span>&gt;署名-非商业性使用-禁止演绎 <span class=\"number\">4.0</span> 国际&lt;<span class=\"regexp\">/a&gt; 转载请保留原文链接及作者。&lt;/</span>p&gt;  </span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class=\"line\"><span class=\"regexp\">    clipboard.on('success', $(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      $(\".fa-clipboard\").click(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        swal(&#123;   </span></span><br><span class=\"line\"><span class=\"regexp\">          title: \"\",   </span></span><br><span class=\"line\"><span class=\"regexp\">          text: '复制成功',   </span></span><br><span class=\"line\"><span class=\"regexp\">          html: false,</span></span><br><span class=\"line\"><span class=\"regexp\">          timer: 500,   </span></span><br><span class=\"line\"><span class=\"regexp\">          showConfirmButton: false</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;));  </span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在目录 <code>themes/next/source/css/_common/components/post/</code> 下添加 <code>my-post-copyright.styl</code>,内容如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.my_post_copyright &#123;</span><br><span class=\"line\">  width: <span class=\"number\">85</span>%;</span><br><span class=\"line\">  max-width: <span class=\"number\">45</span>em;</span><br><span class=\"line\">  margin: <span class=\"number\">2.8</span>em auto <span class=\"number\">0</span>;</span><br><span class=\"line\">  padding: <span class=\"number\">0.5</span>em <span class=\"number\">1.0</span>em;</span><br><span class=\"line\">  border: 1px solid #d3d3d3;</span><br><span class=\"line\">  font-size: <span class=\"number\">0.93</span>rem;</span><br><span class=\"line\">  line-height: <span class=\"number\">1.6</span>em;</span><br><span class=\"line\">  word-<span class=\"keyword\">break</span>: <span class=\"keyword\">break</span>-all;</span><br><span class=\"line\">  background: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright p&#123;<span class=\"attr\">margin</span>:<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">.my_post_copyright span &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: <span class=\"number\">5.2</span>em;</span><br><span class=\"line\">  color: #333333; // title color</span><br><span class=\"line\">  font-weight: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .raw &#123;</span><br><span class=\"line\">  margin-left: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  width: <span class=\"number\">5</span>em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright a &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  border-bottom:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright a:hover &#123;</span><br><span class=\"line\">  color: #0593d3; // link color</span><br><span class=\"line\">  text-decoration: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class=\"line\">  color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .post-url:hover &#123;</span><br><span class=\"line\">  font-weight: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .copy-path &#123;</span><br><span class=\"line\">  margin-left: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  width: <span class=\"number\">1</span>em;</span><br><span class=\"line\">  +mobile()&#123;<span class=\"attr\">display</span>:none;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.my_post_copyright .copy-path:hover &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  cursor: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>themes/next/layout/_macro/post.swig</code> ,在代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;% include <span class=\"string\">'wechat-subscriber.swig'</span> %&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>之前添加增加如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">      &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">        &#123;% include <span class=\"string\">'my-copyright.swig'</span> %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>修改 <code>themes/next/source/css/_common/components/post/post.styl</code> 文件，在最后一行增加代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"my-post-copyright\"</span></span><br></pre></td></tr></table></figure></p>\n<p>设置新建文章自动开启</p>\n<p><code>copyright</code>,即新建文章自动显示自定义的版权声明,设置 <code>your site/scaffolds/post.md</code>文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">type: <span class=\"string\">\"categories\"</span></span><br><span class=\"line\">categories:</span><br><span class=\"line\">copyright: true #新增,开启</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在右上角或者左上角实现fork-me-on-github\"><a href=\"#在右上角或者左上角实现fork-me-on-github\" class=\"headerlink\" title=\"在右上角或者左上角实现fork me on github\"></a>在右上角或者左上角实现fork me on github</h3><p>选择样式<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\">GitHub Ribbons</a>,修改图片跳转链接,并复制文本框中的代码,将如下地方代码换为自己Github主页：<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107Github.jpg/water.jpg\" alt=\"\"><br>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</p>\n<h3 id=\"修改文章底部的那个带-号的标签\"><a href=\"#修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"修改文章底部的那个带#号的标签\"></a>修改文章底部的那个带#号的标签</h3><p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,搜索 <code>rel=&quot;tag&quot;&gt;#</code> ,将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post-tags\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> post.tags %&#125;</span><br><span class=\"line\">       &lt;a href=<span class=\"string\">\"&#123;&#123; url_for(tag.path) &#125;&#125;\"</span> rel=<span class=\"string\">\"tag\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> &#123;&#123; tag.name &#125;&#125;&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;% endfor %&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加顶部加载条\"><a href=\"#添加顶部加载条\" class=\"headerlink\" title=\"添加顶部加载条\"></a>添加顶部加载条</h3><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code> ,设置为 <code>true</code> ,可以更换加载样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Progress</span> <span class=\"selector-tag\">bar</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">during</span> <span class=\"selector-tag\">page</span> <span class=\"selector-tag\">loading</span>.</span><br><span class=\"line\"><span class=\"selector-tag\">pace</span>: <span class=\"selector-tag\">true</span></span><br><span class=\"line\"># <span class=\"selector-tag\">Themes</span> <span class=\"selector-tag\">list</span>:</span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-big-counter</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-bounce</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-barber-shop</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-atom</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-circle</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-radar</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-center-simple</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-corner-indicator</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-fill-left</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-flash</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-loading-bar</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-mac-osx</span></span><br><span class=\"line\"><span class=\"selector-id\">#pace-theme-minimal</span></span><br><span class=\"line\"># <span class=\"selector-tag\">For</span> <span class=\"selector-tag\">example</span></span><br><span class=\"line\"># <span class=\"selector-tag\">pace_theme</span>: <span class=\"selector-tag\">pace-theme-center-simple</span></span><br><span class=\"line\"><span class=\"selector-tag\">pace_theme</span>: <span class=\"selector-tag\">pace-theme-flash</span> #替换更换样式</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>在你站点的根目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>Hexo</code> 站点的 <code>_config.yml</code>,添加配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>local_search</code> ,设置为 <code>true</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  # if auto, trigger search by changing input</span><br><span class=\"line\">  # if manual, trigger search by pressing enter key or search button</span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  # show top n results per article, show all results by setting to -1</span><br><span class=\"line\">  top_n_per_article: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改网页底部\"><a href=\"#修改网页底部\" class=\"headerlink\" title=\"修改网页底部\"></a>修改网页底部</h3><ol>\n<li><p>在图标库中找到你自己喜欢的图标, 修改桃心,打开 <code>themes/next_config.yml</code> ,搜索关键字 <code>authoricon</code>,替换图标名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># icon between year and author @Footer</span><br><span class=\"line\">authoricon: id-card</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐藏网页底部 <code>Hexo 强力驱动</code></p>\n</li>\n</ol>\n<p>打开主题配置文件,搜索关键字 <code>copyright</code> ，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Footer `powered-by` and `theme-info` copyright</span><br><span class=\"line\">copyright: false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h3><p><del>打开 <code>Hexo</code> 站点下 <code>node_modules/hexo-generator-index/lib/generator.js</code> 文件。代码全部替换为：</del>(next 5.1以后主题已自带此功能)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</span><br><span class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</span><br><span class=\"line\">    perPage: config.index_generator.per_page,</span><br><span class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</span><br><span class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      __index: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>打开文章添加top字段,设置数值，数值越大文章越靠前：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: layout</span><br><span class=\"line\">title: 标签<span class=\"number\">1</span></span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-08</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">41</span>:<span class=\"number\">18</span></span><br><span class=\"line\">tags: 标签<span class=\"number\">1</span></span><br><span class=\"line\">top: <span class=\"number\">100</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"统计功能，统计功能-显示文章字数统计-阅读时长-总字数\"><a href=\"#统计功能，统计功能-显示文章字数统计-阅读时长-总字数\" class=\"headerlink\" title=\"统计功能，统计功能,显示文章字数统计,阅读时长,总字数\"></a>统计功能，统计功能,显示文章字数统计,阅读时长,总字数</h3><p>在站点的根目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>post_wordcount</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  #字数统计</span><br><span class=\"line\">  wordcount: <span class=\"literal\">true</span></span><br><span class=\"line\">  #预览时间</span><br><span class=\"line\">  min2read: <span class=\"literal\">true</span></span><br><span class=\"line\">  #总字数,显示在页面底部</span><br><span class=\"line\">  totalcount: <span class=\"literal\">true</span></span><br><span class=\"line\">  separated_meta: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改文章内文本连接样式\"><a href=\"#修改文章内文本连接样式\" class=\"headerlink\" title=\"修改文章内文本连接样式\"></a>修改文章内文本连接样式</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code>,添加代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文章内链接文本样式</span></span><br><span class=\"line\">.post-body p a&#123;</span><br><span class=\"line\">  color: #0593d3;</span><br><span class=\"line\">  border-bottom: none;</span><br><span class=\"line\">  border-bottom: 1px solid #0593d3;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    color: #fc6423;</span><br><span class=\"line\">    border-bottom: none;</span><br><span class=\"line\">    border-bottom: 1px solid #fc6423;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"每篇文章末尾统一添加“本文结束”标记\"><a href=\"#每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"每篇文章末尾统一添加“本文结束”标记\"></a>每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 <code>/themes/next/layout/_macro</code> 中新建  <code>passage-end-tag.swig</code> 文件,并添加以下内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=<span class=\"string\">\"text-align:center;color: #ccc;font-size:14px;\"</span>&gt;------ 本文结束------<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> not is_index %&#125;</span><br><span class=\"line\">    &#123;% include <span class=\"string\">'passage-end-tag.swig'</span> %&#125;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后打开主题配置文件 <code>_config.yml</code>,在末尾添加：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">enabled: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文章顶部显示更新时间\"><a href=\"#文章顶部显示更新时间\" class=\"headerlink\" title=\"文章顶部显示更新时间\"></a>文章顶部显示更新时间</h3><p>打开主题配置文件 <code>_config.yml</code> ,搜索关键字 <code>updated_at</code> 设置为 <code>true</code> ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post meta display settings</span><br><span class=\"line\">post_meta:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  created_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  updated_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  categories: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><del>编辑文章,增加关键字<code>updated</code></del>（next可以根据文章改变时间自动更改）<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: layout</span><br><span class=\"line\">title: 关于</span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-08</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">41</span>:<span class=\"number\">18</span></span><br><span class=\"line\">updated: 2017-09-05 20:18:54 #手动添加更新时间</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改访问URL路径\"><a href=\"#修改访问URL路径\" class=\"headerlink\" title=\"修改访问URL路径\"></a>修改访问URL路径</h3><p>默认情况下访问URL路径为：<code>domain/2017/08/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。<br>编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code> 字段：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: :category/:title/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"给代码块添加复制功能\"><a href=\"#给代码块添加复制功能\" class=\"headerlink\" title=\"给代码块添加复制功能\"></a>给代码块添加复制功能</h3><ul>\n<li>下载插件<a href=\"https://github.com/zenorocha/clipboard.js\" target=\"_blank\" rel=\"noopener\">clipboard.js</a> 。</li>\n<li>打开 <code>themes/next/source/lib/</code> ,新建文件夹 <code>clipboard</code>。</li>\n<li>把下载 <code>clipboard.js</code>下的 <code>src</code> 文件夹下的文件拖动到 <code>clipboard</code>文件夹下。</li>\n<li><p>打开 <code>themes/next/source/js/src/</code> ,新建文件 <code>custom.js</code> ,代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此函数用于创建复制按钮</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCopyBtns</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $codeArea = $(<span class=\"string\">\"figure table\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($codeArea.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//复制成功后将要干的事情</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeToSuccess</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">             $imgOK = $(<span class=\"string\">\"#copyBtn\"</span>).find(<span class=\"string\">\"#imgSuccess\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($imgOK.css(<span class=\"string\">\"display\"</span>) == <span class=\"string\">\"none\"</span>) &#123;</span><br><span class=\"line\">                    $imgOK.css(&#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">0</span>,</span><br><span class=\"line\">                        display: <span class=\"string\">\"block\"</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    $imgOK.animate(&#123;</span><br><span class=\"line\">                        opacity: <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                        $imgOK.animate(&#123;</span><br><span class=\"line\">                            opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                        $imgOK.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\">                    &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮</span></span><br><span class=\"line\">        <span class=\"comment\">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class=\"line\">        $(<span class=\"string\">\".post-body\"</span>).before(<span class=\"string\">'&lt;div id=\"copyBtn\" style=\"opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em\"&gt;&lt;span id=\"imgCopy\" &gt;&lt;i class=\"fa fa-paste fa-fw\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id=\"imgSuccess\" style=\"display: none;\"&gt;&lt;i class=\"fa fa-check-circle fa-fw\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建 复制 插件，绑定单机时间到 指定元素，支持JQuery</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> clipboard = <span class=\"keyword\">new</span> Clipboard(<span class=\"string\">'#copyBtn'</span>, &#123;</span><br><span class=\"line\">            target: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//返回需要复制的元素内容</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"[copyFlag]\"</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            isSupported: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//支持复制内容</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"[copyFlag]\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//复制成功事件绑定</span></span><br><span class=\"line\">        clipboard.on(<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//清除内容被选择状态</span></span><br><span class=\"line\">                e.clearSelection();</span><br><span class=\"line\">                changeToSuccess(e);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//复制失败绑定事件</span></span><br><span class=\"line\">        clipboard.on(<span class=\"string\">'error'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Action:'</span>, e.action);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Trigger:'</span>, e.trigger);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#copyBtn\"</span>).hover(</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).stop();</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).css(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                $(<span class=\"keyword\">this</span>).animate(&#123;</span><br><span class=\"line\">                    opacity: <span class=\"number\">0</span></span><br><span class=\"line\">                &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//感应鼠标是否在代码区</span></span><br><span class=\"line\">$(<span class=\"string\">\"figure\"</span>).hover(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//-------鼠标活动在代码块内</span></span><br><span class=\"line\">        <span class=\"comment\">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class=\"line\">        $(<span class=\"string\">\"[copyFlag]\"</span>).removeAttr(<span class=\"string\">\"copyFlag\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).find(<span class=\"string\">\".code\"</span>).attr(<span class=\"string\">\"copyFlag\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取复制按钮</span></span><br><span class=\"line\">        $copyBtn = $(<span class=\"string\">\"#copyBtn\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($copyBtn.lenght != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到按钮的前提下进行一下操作</span></span><br><span class=\"line\">            <span class=\"comment\">//停止按钮动画效果</span></span><br><span class=\"line\">            <span class=\"comment\">//设置为 显示状态</span></span><br><span class=\"line\">            <span class=\"comment\">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class=\"line\">            <span class=\"comment\">//设置代码块 左侧位置</span></span><br><span class=\"line\">            $copyBtn.stop();</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0.8</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"block\"</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"top\"</span>, <span class=\"built_in\">parseInt</span>($copyBtn.css(<span class=\"string\">\"top\"</span>)) + $(<span class=\"keyword\">this</span>).offset().top - $copyBtn.offset().top + <span class=\"number\">3</span>);</span><br><span class=\"line\">            $copyBtn.css(<span class=\"string\">\"left\"</span>, -$copyBtn.width() - <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//-------鼠标离开代码块</span></span><br><span class=\"line\">        <span class=\"comment\">//设置复制按钮可见度 2秒内到 0</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#copyBtn\"</span>).animate(&#123;</span><br><span class=\"line\">            opacity: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//页面载入完成后，创建复制按钮</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  createCopyBtns();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开 <code>themes/next/layout/_custom/</code> ,新建文件 <code>custom.swig</code> ，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/lib/clipboard/clipboard.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/src/custom.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件 <code>themes/next/layout/_layout.swig</code> ,在标签 <code>&lt;/body&gt;</code>上面插入代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include <span class=\"string\">'_custom/custom.swig'</span> %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新建404界面\"><a href=\"#新建404界面\" class=\"headerlink\" title=\"新建404界面\"></a>新建404界面</h3><p>在站点根目录下,输入 <code>hexo new page 404</code> ,默认在 <code>Hexo</code> 站点下<code>/source/404/index.md</code><br>打开新建的404界面，在顶部插入一行，写上 <code>permalink: /404</code> ，这表示指定该页固定链接为 <code>http://&quot;主页&quot;/404.html</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: #404 Not Found：该页无法显示</span><br><span class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-06</span> <span class=\"number\">15</span>:<span class=\"number\">37</span>:<span class=\"number\">18</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">permalink: <span class=\"regexp\">/404</span></span><br><span class=\"line\"><span class=\"regexp\">---</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/style/404style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/plain\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/data.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://qzone.qq.com/gy/404/page.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"静态资源压缩\"><a href=\"#静态资源压缩\" class=\"headerlink\" title=\"静态资源压缩\"></a>静态资源压缩</h3><p>在站点目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br></pre></td></tr></table></figure></p>\n<p>安装gulp插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Hexo</code> 站点下添加 <code>gulpfile.js</code>文件，文件内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 压缩css文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">  .pipe(minifycss())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩html文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">  .pipe(htmlclean())</span><br><span class=\"line\">  .pipe(htmlmin(&#123;</span><br><span class=\"line\">    removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./public/**/.js'</span>,<span class=\"string\">'!./public/js/**/*min.js'</span>])</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/demo 目录内图片</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./public/demo/**/*.*'</span>)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">           optimizationLevel: <span class=\"number\">5</span>, <span class=\"comment\">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class=\"line\">           progressive: <span class=\"literal\">true</span>, <span class=\"comment\">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class=\"line\">           interlaced: <span class=\"literal\">false</span>, <span class=\"comment\">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class=\"line\">           multipass: <span class=\"literal\">false</span>, <span class=\"comment\">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public/uploads'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 默认任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">  <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span>,<span class=\"string\">'minify-images'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"本地站点推送到GitHub上\"><a href=\"#本地站点推送到GitHub上\" class=\"headerlink\" title=\"本地站点推送到GitHub上\"></a>本地站点推送到GitHub上</h3><p>在站点更目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>Hexo</code> 站点的 <code>_config.yml</code> 中配置 <code>deploy</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">repository</span> <span class=\"attr\">url</span>&gt;</span> #your github.io.git</span></span><br><span class=\"line\"><span class=\"xml\">  branch: master</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d --g</span><br></pre></td></tr></table></figure>\n<p>hexo g  # 生成本地 public 静态文件,<br>hexo d  # 部署到 Github 上,<br>也可以缩写成：hexo g –d 。</p>\n<h3 id=\"添加文章书写样式\"><a href=\"#添加文章书写样式\" class=\"headerlink\" title=\"添加文章书写样式\"></a>添加文章书写样式</h3><h4 id=\"文字增加背景色块\"><a href=\"#文字增加背景色块\" class=\"headerlink\" title=\"文字增加背景色块\"></a>文字增加背景色块</h4><p>打开 <code>themes/next/source/css/_custom</code> 下的 <code>custom.styl</code> 文件,添加属性样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 颜色块-黄</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-yellow</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#f0ad4e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-绿</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-green</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#5cb85c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-蓝</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-blue</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#2780e3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 颜色块-紫</span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-id\">#inline-purple</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>:inline;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:.<span class=\"number\">2em</span> .<span class=\"number\">6em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">80%</span>;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: <span class=\"number\">#9954bb</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在你需要编辑的文章地方。放置如下代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=\"inline-blue\"&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-purple\"&gt; 主题配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-yellow\"&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=\"inline-green\"&gt; 主题配置文件 &lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载样式\"><a href=\"#下载样式\" class=\"headerlink\" title=\"下载样式\"></a>下载样式</h4><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> 文件,添加属性样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-id\">#download</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">background</span>: transparent;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span> ease;</span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&amp;:hover &#123;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在你需要编辑的文章地方。放置如下代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=\"download\" href=\"https://git-scm.com/download/win\"&gt;&lt;i class=\"fa fa-download\"&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt; &lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在文档中增加图标-Font-Awesome-提供图标\"><a href=\"#在文档中增加图标-Font-Awesome-提供图标\" class=\"headerlink\" title=\"在文档中增加图标, Font Awesome 提供图标\"></a>在文档中增加图标, <a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 提供图标</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;支持Markdown</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h3><ul>\n<li>复制<a href=\"http://7u2ss1.com1.z0.glb.clouddn.com/love.js\" target=\"_blank\" rel=\"noopener\">网页</a>代码</li>\n<li>新建 <code>love.js</code> 文件并且将代码复制进去，然后保存。</li>\n<li>将 <code>love.js</code>文件放到路径 <code>/themes/next/source/js/src</code> 里面</li>\n<li>然后打开 <code>\\themes\\next\\layout\\_layout.swig</code> 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加热度\"><a href=\"#添加热度\" class=\"headerlink\" title=\"添加热度\"></a>添加热度</h3><p><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107redu.jpg/water.jpg\" alt=\"\"></p>\n<p>next主题集成leanCloud,根据<a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next官方文档</a>设置阅读次数统计（LeanCloud) ，然后打开  <code>/themes/next/layout/_macro/post.swig</code> ,在画红线的区域添加 <code>℃</code>：<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171107redu2.jpg/water.jpg\" alt=\"\"></p>\n<p>然后打开 <code>/themes/next/languages/zh-Hans.yml</code> ,将 <code>visitors</code> 汉化为热度就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">  created: 创建于</span><br><span class=\"line\">  modified: 更新于</span><br><span class=\"line\">  sticky: 置顶</span><br><span class=\"line\">  posted: 发表于</span><br><span class=\"line\">  <span class=\"keyword\">in</span>: 分类于</span><br><span class=\"line\">  read_more: 阅读全文</span><br><span class=\"line\">  untitled: 未命名</span><br><span class=\"line\">  toc_empty: 此文章未包含目录</span><br><span class=\"line\">  visitors: 热度</span><br><span class=\"line\">  wordcount: 字数统计</span><br><span class=\"line\">  min2read: 阅读时长</span><br><span class=\"line\">  totalcount: 博客全站字数</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-README-md-文件\"><a href=\"#添加-README-md-文件\" class=\"headerlink\" title=\"添加 README.md 文件\"></a>添加 README.md 文件</h3><p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 <code>hexo</code> 部署到仓库后，项目下是没有 README.md 文件的。</p>\n<p>在 <code>Hexo</code> 目录下的 <code>source</code> 根目录下添加一个 <code>README.m</code>d 文件，修改站点配置文件 <code>_config.yml</code> ，将 <code>skip_render</code> 参数的值设置为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: README.md</span><br></pre></td></tr></table></figure></p>\n<p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 <code>README.md</code> 这个文件了。</p>\n<h3 id=\"文章加密访问\"><a href=\"#文章加密访问\" class=\"headerlink\" title=\"文章加密访问\"></a>文章加密访问</h3><p>打开 <code>themes/next/layout/_partials/head.swig</code>文件,在 <code></code> 之前插入代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prompt(<span class=\"string\">'请输入文章密码'</span>) !== <span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class=\"line\">                alert(<span class=\"string\">'密码错误'</span>);</span><br><span class=\"line\">                history.back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在文章上应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2017观看影视</span><br><span class=\"line\">date: 2017-09-25 16:10:03</span><br><span class=\"line\">type:</span><br><span class=\"line\">top:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">categories: [影音, 影视]</span><br><span class=\"line\">tags: [影音, 电影, 电视剧, 动画]</span><br><span class=\"line\">password: 123456</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加jiathis分享\"><a href=\"#添加jiathis分享\" class=\"headerlink\" title=\"添加jiathis分享\"></a>添加jiathis分享</h3><p>在主题配置文件中,做如下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Share</span><br><span class=\"line\"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class=\"line\"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span><br><span class=\"line\"># Warning: JiaThis does not support https.</span><br><span class=\"line\">jiathis: true</span><br><span class=\"line\">  ##uid: Get this uid from http://www.jiathis.com/</span><br><span class=\"line\">#add_this_id:</span><br></pre></td></tr></table></figure></p>\n<p>如果你想自定义话，打开 <code>themes/next/layout/_partials/share/jiathis.swig</code> 根据<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"noopener\">官网</a>代码修改。</p>\n<h3 id=\"修改打赏字体不闪动\"><a href=\"#修改打赏字体不闪动\" class=\"headerlink\" title=\"修改打赏字体不闪动\"></a>修改打赏字体不闪动</h3><p>修改文件 <code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数 <code>wechat:hover</code> 和 <code>alipay:hover</code> ，如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 注释文字闪动函数</span><br><span class=\"line\"> <span class=\"selector-id\">#wechat</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"selector-id\">#alipay</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">   <span class=\"attribute\">animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-animation</span>: roll <span class=\"number\">0.1s</span> infinite linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义鼠标样式\"><a href=\"#自定义鼠标样式\" class=\"headerlink\" title=\"自定义鼠标样式\"></a>自定义鼠标样式</h3><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,在里面写下如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标样式</span><br><span class=\"line\">  * &#123;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"</span>),auto<span class=\"meta\">!important</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"</span>),auto<span class=\"meta\">!important</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了。</p>\n<h3 id=\"网站标题栏背景颜色\"><a href=\"#网站标题栏背景颜色\" class=\"headerlink\" title=\"网站标题栏背景颜色\"></a>网站标题栏背景颜色</h3><p>当使用Pisces主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在 <code>source/css/_schemes/Pisces/_brand.styl</code> 中修改：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  background: $blue-dodger; //修改为自己喜欢的颜色</span><br><span class=\"line\"></span><br><span class=\"line\">  +<span class=\"selector-tag\">tablet</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">16px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  +<span class=\"selector-tag\">mobile</span>() &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">16px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，我们一般不主张这样修改源码的，在 <code>next/source/css/_custom</code> 目录下面专门提供了 <code>custom.styl</code> 供我们自定义样式的，因此也可以在 <code>custom.styl</code> 里面添加：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Custom styles.</span><br><span class=\"line\"><span class=\"selector-class\">.site-meta</span> &#123;</span><br><span class=\"line\">  background: $blue; //修改为自己喜欢的颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改内容区域的宽度\"><a href=\"#修改内容区域的宽度\" class=\"headerlink\" title=\"修改内容区域的宽度\"></a>修改内容区域的宽度</h3><p>我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。<br>NexT 对于内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。<br>在Mist和Muse风格可以用下面的方法：</p>\n<p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>\n<p>当你使用Pisces风格时可以用下面的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header&#123; width: 90%; &#125;</span><br><span class=\"line\">.container .main-inner &#123; width: 90%; &#125;</span><br><span class=\"line\">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改Logo字体\"><a href=\"#修改Logo字体\" class=\"headerlink\" title=\"修改Logo字体\"></a>修改Logo字体</h3><p>在 <code>themes/next/source/css/_custom/custom.styl</code>  中添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Zitiming;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/fonts/Zitiming.ttf'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.site-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'Zitiming'</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>\n<h3 id=\"添加背景图\"><a href=\"#添加背景图\" class=\"headerlink\" title=\"添加背景图\"></a>添加背景图</h3><p>在 themes/next/source/css/_custom/custom.styl 中添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(/images/bg.jpg);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>:cover;</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"各版块透明度修改\"><a href=\"#各版块透明度修改\" class=\"headerlink\" title=\"各版块透明度修改\"></a>各版块透明度修改</h3><h4 id=\"内容板块透明\"><a href=\"#内容板块透明\" class=\"headerlink\" title=\"内容板块透明\"></a>内容板块透明</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.content-wrap</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"菜单栏背景\"><a href=\"#菜单栏背景\" class=\"headerlink\" title=\"菜单栏背景\"></a>菜单栏背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.header-inner</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"站点概况背景\"><a href=\"#站点概况背景\" class=\"headerlink\" title=\"站点概况背景\"></a>站点概况背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl</code> 文件 <code>.sidebar-inner</code> 标签下 <code>background: white</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<p>然后修改博客根目录 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code> 文件 <code>.sidebar</code> 标签下 <code>background: $body-bg-color</code>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(255,255,255,0.7); //0.7是透明度</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"按钮背景\"><a href=\"#按钮背景\" class=\"headerlink\" title=\"按钮背景\"></a>按钮背景</h4><p>博客根目录 <code>themes\\next\\source\\css\\_common\\components\\post\\post-button.styl</code> 同上修改对应位置为 <code>background: transparent;</code></p>\n<h3 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h3><p>在网易云音乐（网页版）中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://ov11eqxw3.bkt.clouddn.com/20171109wangyiyun.jpg/water.jpg\" alt=\"\"><br>然后根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置。</p>\n<p>我放在了侧边栏，在 <code>themes/next/layout/_custom/sidebar.swig</code> 文件中增加生成的HTML代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"music163player\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">280</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以根据自己实际情况修改宽高等样式。</p>\n<p>参考自：</p>\n<p><a href=\"http://www.jianshu.com/p/3ff20be857\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/3ff20be857</a><br><a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_33699981/article/details/72716951</a><br><a href=\"http://blog.csdn.net/heqiangflytosky/article/details/54863185\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/heqiangflytosky/article/details/54863185</a></p>"},{"title":"H5的Notification特性 - Web的桌面通知功能","date":"2018-02-19T02:16:37.000Z","author":"T.stt","_content":"\n> Notification 对象用来为用户设置和显示桌面通知，Web Notifications API 可以将通知发送至页面之外的系统层级上，因此，即便应用处于空闲状态或是在后台，web 应用仍然可以通过这个 API 向用户发送信息。比如网页版微信，每当用户收到一条新的消息，就会有一条通知显示给用户\n\n## 应用场景\n\n`Notifications`的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置`setTimeout`，用时基本不会超过`1s`），并且用户不需要离开应用，这都带来了极大的方便。可以预见，`Notifications`将会在很多网页或应用中被大量使用。当然`Notifications`也具有它的局限性：无法存档、即看即毁\n那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：\n\n- 社交类网站\n- 资讯类网站\n- 网页版邮件服务\n- 即时通知类网站\n- ...\n\n举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：\n![desktop-notification1](/images/posts/desktop-notification1.png)\n\n## 用法\nvar notification = new Notification(title, [options])\n\n## 参数\n\n\ttitle\t        string\t显示的通知标题\n\t[options]\t    object\t显示通知的配置项，可选\n\t[options.dir]\tstring\t文字方向， 取值为 auto、ltr、rtl 之一\n\t[options.lang]\tstring\t通知的语言，这个字符串必须在 BCP 47 language tag 文档中是有效的。\n\t[options.body]\tstring\t通知的内容\n\t[options.tag]\tstring\t通知的 id，通过此 id 可以对通知进行刷新、替换或移除\n\t[options.icon]\tstring\t通知的图标图片URL，将被用于显示通知的图标。\n\n## 请求权限 \n要显示通知，需要得到用户的授权，Notification 提供了 requestPermission 方法向用户申请显示通知的权限，此方法只能被用户行为调用（比如在onclick 事件中）\n``` bash\n\tNotification.requestPermission(function(permission) {\n\t    if (permission === \"granted\") {\n\t        console.log(11)\n\t        popNotice()\n\t    }\n\t});\n```\n## 权限状态 \n只读属性 Notification.permission 可以用来获取用户授权状态\n``` bash\ndenied ：拒绝通知显示(用户已经明确的拒绝了显示通知的权限。)\ngranted ：允许通知显示（表示之前已经询问过用户，并且用户已经授予了显示通知的权限。）\ndefault ：用户尚未被询问是否授权，在浏览器中表现与 denied 相同（用户还未被询问是否授权，所以通知不会被显示。）\n```\n\n## 请求权限 - Notification.requestPermission(CALLBACK)\n\n应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。`Notification.requestPermission(CALLBACK)`是请求获取权限的方法（有点类似`javascript`的`confirm`弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，`granted`代表允许，`denied`代表拒绝。并且`Notification.requestPermission()`支持`then`方式的链式调用，也就意味着可以异步调用它。\n\n``` javascript\nNotification.requestPermission(function (permission) {\n    console.log('用户是否允许通知： ',permission === 'granted' ? '允许' : '拒绝');\n});\n//两种方式是等价的\nNotification.requestPermission().then(function (permission) {\n    console.log('用户是否允许通知： ',permission === 'granted' ? '允许' : '拒绝');\n});\n```\n\n## 创建通知 - new Notification(TITLE, OPTIONS)\n\n`new Notification(TITLE, OPTIONS)`方法创建可以创建一个通知实例，允许参入参数两个参数`TITLE`和`OPTIONS`。注意默认情况下（实际可以通过`OPTIONS`中的`timestamp`参数控制）一旦通知实例被创建出来，它会立即被显示出来。\n\n### TITLE参数\n\n`TITLE`表示通知的标题。必须参数，允许数字、字符串和空\n\n### OPTIONS参数\n\n`OPTIONS`是非必须参数，必须为一个对象，它包含：\nps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从[Notification-MDN-EN](https://developer.mozilla.org/en-US/docs/Web/API/notification)结合谷歌翻译得来，很有可能翻译不准确，如有，请提出。\n\n``` json\n{\n    //通知显示正文。非必须，默认为空\n    body: '你的好友XX上线了！',\n    //通知显示正文的图片地址。非必须，默认为空\n    image: 'imgae url',\n    //通知左侧图标。非必须，默认为空\n    icon: 'imgae url',\n    //通知的分类标记（ID）。非必须，默认为空\n    tag: 'test',\n    //通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空\n    data: '可以是任意数据类型',\n    //通知显示延迟的时间。非必须，默认通知实例创建完成就显示\n    timestamp: '',\n    //通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl\n    dir: 'auto',\n    //当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空\n    badge: 'xxx',\n    //通知的语言。非必须默认为空\n    lang: '',\n    //通知显示时，设备的振动模式。非必须，默认为空\n    vibrate: [200, 100, 200],\n    //新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true\n    renotify: true,\n    //通知是否静音。非必须，默认为false，表示无声\n    silent: false,\n    //通知声源文件地址。非必须，默认为空\n    sound: 'mp3',\n    //是否不在屏幕上显示通知信息。非必须，默认为false表示要显示\n    noscreen: false,\n    //指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性\n    sticky: false,\n    //指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false\n    requireInteraction: false\n}\n```\n\n### 事件及事件钩子\n\t\n当通知被创建成功后：\n- 通知实例具有一个静态方法可以用来关闭通知\n- 通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪`onshow/ondisplay`（在通知显示的时触发）、`onclick`）（当用户点击通知时触发）、`onclose（当用户关闭通知时触发）`和`onerror`（当通知出现错误时触发）。因为`Notification`同样继承自`EventTarget`，因此可以对它调用`addEventListener()`方法。\n\n``` javascript\n1.\nconst n = new Notification('XX网站消息通知', {\n    body: '你的朋友有新状态啦，快去围观吧！',\n    tag: '2ue',\n    icon: 'https://2ue.github.io/images/common/avatar.png',\n    data: {\n        url: 'https://2ue.github.io'\n    },\n    timestamp: 3000\n});\n\nn.onshow = function () {\n    console.log('通知显示了！');\n}\nn.onclick = function (e) {\n    //可以直接通过实例的方式获取data内自定义的数据\n    //也可以通过访问回调参数e来获取data的数据\n    window.open(n.data.url, '_blank');\n    n.close();\n}\nn.onclose = function () {\n    console.log('你墙壁了我！！！');\n}\nn.onerror = function (err) {\n    console.log('出错了，小伙子在检查一下吧');\n    throw err;\n}\n2.\n<button class=\"button\">Hello</button>\n<script type=\"text/javascript\">\nvar button = document.querySelector('.button')\n \nbutton.addEventListener('click', function() {\n    if (!(\"Notification\" in window)) {\n        alert(\"不支持 notification\");\n    } else if (Notification.permission === \"granted\") { // 允许通知\n        notice()\n    }else if (Notification.permission !== 'denied') { // 用户没有选择是否显示通知，向用户请求许可\n        Notification.requestPermission(function(permission) {\n            if (permission === \"granted\") {\n                notice()\n            }\n        });\n    }\n}, false)\n \n \nfunction notice() {\n    var notification = new Notification(\"你好，JavaScript\",{\n        body:'微信订阅号',\n        icon:\"https://mp.weixin.qq.com/misc/getheadimg?token=990524500&fakeid=3006291623&r=674680\"\n    });\n \n    notification.onclick = function(){\n        notification.close()\n    }\n}\n</script>\n```\n\n## demo\n\n写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开~ [Notification.js](https://codepen.io/2ue/pen/rYYzwB)\n\n``` javascript\nconst NotificationInstance = Notification || window.Notification;\nif (!!NotificationInstance) {\n    const permissionNow = NotificationInstance.permission;\n    if (permissionNow === 'granted') {//允许通知\n        CreatNotification();\n    } else if (permissionNow === 'denied') {\n        console.log('用户拒绝了你!!!');\n    } else {\n        setPermission();\n    }\n    function setPermission() {\n        //请求获取通知权限\n        NotificationInstance.requestPermission(function (PERMISSION) {\n            if (PERMISSION === 'granted') {\n                CreatNotification();\n            } else {\n                console.log('用户无情残忍的拒绝了你!!!');\n            }\n        });\n    }\n    function CreatNotification() {\n        const n = new NotificationInstance('XX网站消息通知', {\n            body: '你的朋友有新状态啦，快去围观吧！',\n            tag: '2ue',\n            icon: 'https://2ue.github.io/images/common/avatar.png',\n            data: {\n                url: 'https://2ue.github.io'\n            }\n        });\n        n.onshow = function () {\n            console.log('通知显示了！');\n        }\n        n.onclick = function (e) {\n            //可以直接通过实例的方式获取data内自定义的数据\n            //也可以通过访问回调参数e来获取data的数据\n            window.open(n.data.url, '_blank');\n            n.close();\n        }\n        n.onclose = function () {\n            console.log('你墙壁了我！！！');\n        }\n        n.onerror = function (err) {\n            console.log('出错了，小伙子在检查一下吧');\n            throw err;\n        }\n        setTimeout(() => {\n            n.close();\n        }, 2000);\n    }\n}\n```\n\n## 兼容\n\tFirefox 22+\n\tCheome 22+\n\tSafari 6+\n\tOpera 25+\n\tEdge 14+\n\n`Notifications`是`H5`的新特性，毫无疑问，它的兼容肯定是一篇哀嚎.\n![Notifications PC端兼容性](/images/posts/notify-jianrong-pc.png)\n![Notifications 移动端兼容性](/images/posts/notify-jianrong-mobile.png)\n\n## 参考\n\n- [Notification-MDN-EN](https://developer.mozilla.org/en-US/docs/Web/API/notification)\n- [Notification-MDN-CN](https://developer.mozilla.org/zh-CN/docs/Web/API/notification)\n- [HTML5 Notification消息通知](http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&mid=2651493562&idx=1&sn=d7a5f9daa064e8e58f957a86ba1c49c0&chksm=80f19d72b7861464f40caf7d621944f32e20cf1b5e0ec549a5466ce71d16a8bff33763c87038&mpshare=1&scene=1&srcid=0212vuAfZBXHqJgQsRytkid3#rd)\n","source":"_posts/js-desktop-notification.md","raw":"---\ntitle: H5的Notification特性 - Web的桌面通知功能\ndate: 2018-02-19 10:16:37\nauthor: T.stt\ntags:\n- Notification\n- javascript\ncategories:\n- [js,特殊功能,web桌面通知]\n---\n\n> Notification 对象用来为用户设置和显示桌面通知，Web Notifications API 可以将通知发送至页面之外的系统层级上，因此，即便应用处于空闲状态或是在后台，web 应用仍然可以通过这个 API 向用户发送信息。比如网页版微信，每当用户收到一条新的消息，就会有一条通知显示给用户\n\n## 应用场景\n\n`Notifications`的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置`setTimeout`，用时基本不会超过`1s`），并且用户不需要离开应用，这都带来了极大的方便。可以预见，`Notifications`将会在很多网页或应用中被大量使用。当然`Notifications`也具有它的局限性：无法存档、即看即毁\n那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：\n\n- 社交类网站\n- 资讯类网站\n- 网页版邮件服务\n- 即时通知类网站\n- ...\n\n举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：\n![desktop-notification1](/images/posts/desktop-notification1.png)\n\n## 用法\nvar notification = new Notification(title, [options])\n\n## 参数\n\n\ttitle\t        string\t显示的通知标题\n\t[options]\t    object\t显示通知的配置项，可选\n\t[options.dir]\tstring\t文字方向， 取值为 auto、ltr、rtl 之一\n\t[options.lang]\tstring\t通知的语言，这个字符串必须在 BCP 47 language tag 文档中是有效的。\n\t[options.body]\tstring\t通知的内容\n\t[options.tag]\tstring\t通知的 id，通过此 id 可以对通知进行刷新、替换或移除\n\t[options.icon]\tstring\t通知的图标图片URL，将被用于显示通知的图标。\n\n## 请求权限 \n要显示通知，需要得到用户的授权，Notification 提供了 requestPermission 方法向用户申请显示通知的权限，此方法只能被用户行为调用（比如在onclick 事件中）\n``` bash\n\tNotification.requestPermission(function(permission) {\n\t    if (permission === \"granted\") {\n\t        console.log(11)\n\t        popNotice()\n\t    }\n\t});\n```\n## 权限状态 \n只读属性 Notification.permission 可以用来获取用户授权状态\n``` bash\ndenied ：拒绝通知显示(用户已经明确的拒绝了显示通知的权限。)\ngranted ：允许通知显示（表示之前已经询问过用户，并且用户已经授予了显示通知的权限。）\ndefault ：用户尚未被询问是否授权，在浏览器中表现与 denied 相同（用户还未被询问是否授权，所以通知不会被显示。）\n```\n\n## 请求权限 - Notification.requestPermission(CALLBACK)\n\n应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。`Notification.requestPermission(CALLBACK)`是请求获取权限的方法（有点类似`javascript`的`confirm`弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，`granted`代表允许，`denied`代表拒绝。并且`Notification.requestPermission()`支持`then`方式的链式调用，也就意味着可以异步调用它。\n\n``` javascript\nNotification.requestPermission(function (permission) {\n    console.log('用户是否允许通知： ',permission === 'granted' ? '允许' : '拒绝');\n});\n//两种方式是等价的\nNotification.requestPermission().then(function (permission) {\n    console.log('用户是否允许通知： ',permission === 'granted' ? '允许' : '拒绝');\n});\n```\n\n## 创建通知 - new Notification(TITLE, OPTIONS)\n\n`new Notification(TITLE, OPTIONS)`方法创建可以创建一个通知实例，允许参入参数两个参数`TITLE`和`OPTIONS`。注意默认情况下（实际可以通过`OPTIONS`中的`timestamp`参数控制）一旦通知实例被创建出来，它会立即被显示出来。\n\n### TITLE参数\n\n`TITLE`表示通知的标题。必须参数，允许数字、字符串和空\n\n### OPTIONS参数\n\n`OPTIONS`是非必须参数，必须为一个对象，它包含：\nps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从[Notification-MDN-EN](https://developer.mozilla.org/en-US/docs/Web/API/notification)结合谷歌翻译得来，很有可能翻译不准确，如有，请提出。\n\n``` json\n{\n    //通知显示正文。非必须，默认为空\n    body: '你的好友XX上线了！',\n    //通知显示正文的图片地址。非必须，默认为空\n    image: 'imgae url',\n    //通知左侧图标。非必须，默认为空\n    icon: 'imgae url',\n    //通知的分类标记（ID）。非必须，默认为空\n    tag: 'test',\n    //通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空\n    data: '可以是任意数据类型',\n    //通知显示延迟的时间。非必须，默认通知实例创建完成就显示\n    timestamp: '',\n    //通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl\n    dir: 'auto',\n    //当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空\n    badge: 'xxx',\n    //通知的语言。非必须默认为空\n    lang: '',\n    //通知显示时，设备的振动模式。非必须，默认为空\n    vibrate: [200, 100, 200],\n    //新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true\n    renotify: true,\n    //通知是否静音。非必须，默认为false，表示无声\n    silent: false,\n    //通知声源文件地址。非必须，默认为空\n    sound: 'mp3',\n    //是否不在屏幕上显示通知信息。非必须，默认为false表示要显示\n    noscreen: false,\n    //指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性\n    sticky: false,\n    //指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false\n    requireInteraction: false\n}\n```\n\n### 事件及事件钩子\n\t\n当通知被创建成功后：\n- 通知实例具有一个静态方法可以用来关闭通知\n- 通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪`onshow/ondisplay`（在通知显示的时触发）、`onclick`）（当用户点击通知时触发）、`onclose（当用户关闭通知时触发）`和`onerror`（当通知出现错误时触发）。因为`Notification`同样继承自`EventTarget`，因此可以对它调用`addEventListener()`方法。\n\n``` javascript\n1.\nconst n = new Notification('XX网站消息通知', {\n    body: '你的朋友有新状态啦，快去围观吧！',\n    tag: '2ue',\n    icon: 'https://2ue.github.io/images/common/avatar.png',\n    data: {\n        url: 'https://2ue.github.io'\n    },\n    timestamp: 3000\n});\n\nn.onshow = function () {\n    console.log('通知显示了！');\n}\nn.onclick = function (e) {\n    //可以直接通过实例的方式获取data内自定义的数据\n    //也可以通过访问回调参数e来获取data的数据\n    window.open(n.data.url, '_blank');\n    n.close();\n}\nn.onclose = function () {\n    console.log('你墙壁了我！！！');\n}\nn.onerror = function (err) {\n    console.log('出错了，小伙子在检查一下吧');\n    throw err;\n}\n2.\n<button class=\"button\">Hello</button>\n<script type=\"text/javascript\">\nvar button = document.querySelector('.button')\n \nbutton.addEventListener('click', function() {\n    if (!(\"Notification\" in window)) {\n        alert(\"不支持 notification\");\n    } else if (Notification.permission === \"granted\") { // 允许通知\n        notice()\n    }else if (Notification.permission !== 'denied') { // 用户没有选择是否显示通知，向用户请求许可\n        Notification.requestPermission(function(permission) {\n            if (permission === \"granted\") {\n                notice()\n            }\n        });\n    }\n}, false)\n \n \nfunction notice() {\n    var notification = new Notification(\"你好，JavaScript\",{\n        body:'微信订阅号',\n        icon:\"https://mp.weixin.qq.com/misc/getheadimg?token=990524500&fakeid=3006291623&r=674680\"\n    });\n \n    notification.onclick = function(){\n        notification.close()\n    }\n}\n</script>\n```\n\n## demo\n\n写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开~ [Notification.js](https://codepen.io/2ue/pen/rYYzwB)\n\n``` javascript\nconst NotificationInstance = Notification || window.Notification;\nif (!!NotificationInstance) {\n    const permissionNow = NotificationInstance.permission;\n    if (permissionNow === 'granted') {//允许通知\n        CreatNotification();\n    } else if (permissionNow === 'denied') {\n        console.log('用户拒绝了你!!!');\n    } else {\n        setPermission();\n    }\n    function setPermission() {\n        //请求获取通知权限\n        NotificationInstance.requestPermission(function (PERMISSION) {\n            if (PERMISSION === 'granted') {\n                CreatNotification();\n            } else {\n                console.log('用户无情残忍的拒绝了你!!!');\n            }\n        });\n    }\n    function CreatNotification() {\n        const n = new NotificationInstance('XX网站消息通知', {\n            body: '你的朋友有新状态啦，快去围观吧！',\n            tag: '2ue',\n            icon: 'https://2ue.github.io/images/common/avatar.png',\n            data: {\n                url: 'https://2ue.github.io'\n            }\n        });\n        n.onshow = function () {\n            console.log('通知显示了！');\n        }\n        n.onclick = function (e) {\n            //可以直接通过实例的方式获取data内自定义的数据\n            //也可以通过访问回调参数e来获取data的数据\n            window.open(n.data.url, '_blank');\n            n.close();\n        }\n        n.onclose = function () {\n            console.log('你墙壁了我！！！');\n        }\n        n.onerror = function (err) {\n            console.log('出错了，小伙子在检查一下吧');\n            throw err;\n        }\n        setTimeout(() => {\n            n.close();\n        }, 2000);\n    }\n}\n```\n\n## 兼容\n\tFirefox 22+\n\tCheome 22+\n\tSafari 6+\n\tOpera 25+\n\tEdge 14+\n\n`Notifications`是`H5`的新特性，毫无疑问，它的兼容肯定是一篇哀嚎.\n![Notifications PC端兼容性](/images/posts/notify-jianrong-pc.png)\n![Notifications 移动端兼容性](/images/posts/notify-jianrong-mobile.png)\n\n## 参考\n\n- [Notification-MDN-EN](https://developer.mozilla.org/en-US/docs/Web/API/notification)\n- [Notification-MDN-CN](https://developer.mozilla.org/zh-CN/docs/Web/API/notification)\n- [HTML5 Notification消息通知](http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&mid=2651493562&idx=1&sn=d7a5f9daa064e8e58f957a86ba1c49c0&chksm=80f19d72b7861464f40caf7d621944f32e20cf1b5e0ec549a5466ce71d16a8bff33763c87038&mpshare=1&scene=1&srcid=0212vuAfZBXHqJgQsRytkid3#rd)\n","slug":"js-desktop-notification","published":1,"updated":"2018-11-01T03:54:08.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnydngfb0001z8v7ldo3gtvr","content":"<blockquote>\n<p>Notification 对象用来为用户设置和显示桌面通知，Web Notifications API 可以将通知发送至页面之外的系统层级上，因此，即便应用处于空闲状态或是在后台，web 应用仍然可以通过这个 API 向用户发送信息。比如网页版微信，每当用户收到一条新的消息，就会有一条通知显示给用户</p>\n</blockquote>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p><code>Notifications</code>的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置<code>setTimeout</code>，用时基本不会超过<code>1s</code>），并且用户不需要离开应用，这都带来了极大的方便。可以预见，<code>Notifications</code>将会在很多网页或应用中被大量使用。当然<code>Notifications</code>也具有它的局限性：无法存档、即看即毁<br>那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：</p>\n<ul>\n<li>社交类网站</li>\n<li>资讯类网站</li>\n<li>网页版邮件服务</li>\n<li>即时通知类网站</li>\n<li>…</li>\n</ul>\n<p>举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：<br><img src=\"/images/posts/desktop-notification1.png\" alt=\"desktop-notification1\"></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>var notification = new Notification(title, [options])</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><pre><code>title            string    显示的通知标题\n[options]        object    显示通知的配置项，可选\n[options.dir]    string    文字方向， 取值为 auto、ltr、rtl 之一\n[options.lang]    string    通知的语言，这个字符串必须在 BCP 47 language tag 文档中是有效的。\n[options.body]    string    通知的内容\n[options.tag]    string    通知的 id，通过此 id 可以对通知进行刷新、替换或移除\n[options.icon]    string    通知的图标图片URL，将被用于显示通知的图标。\n</code></pre><h2 id=\"请求权限\"><a href=\"#请求权限\" class=\"headerlink\" title=\"请求权限\"></a>请求权限</h2><p>要显示通知，需要得到用户的授权，Notification 提供了 requestPermission 方法向用户申请显示通知的权限，此方法只能被用户行为调用（比如在onclick 事件中）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notification.requestPermission(<span class=\"keyword\">function</span>(permission) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permission === <span class=\"string\">\"granted\"</span>) &#123;</span><br><span class=\"line\">        console.log(11)</span><br><span class=\"line\">        popNotice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"权限状态\"><a href=\"#权限状态\" class=\"headerlink\" title=\"权限状态\"></a>权限状态</h2><p>只读属性 Notification.permission 可以用来获取用户授权状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">denied ：拒绝通知显示(用户已经明确的拒绝了显示通知的权限。)</span><br><span class=\"line\">granted ：允许通知显示（表示之前已经询问过用户，并且用户已经授予了显示通知的权限。）</span><br><span class=\"line\">default ：用户尚未被询问是否授权，在浏览器中表现与 denied 相同（用户还未被询问是否授权，所以通知不会被显示。）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"请求权限-Notification-requestPermission-CALLBACK\"><a href=\"#请求权限-Notification-requestPermission-CALLBACK\" class=\"headerlink\" title=\"请求权限 - Notification.requestPermission(CALLBACK)\"></a>请求权限 - Notification.requestPermission(CALLBACK)</h2><p>应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。<code>Notification.requestPermission(CALLBACK)</code>是请求获取权限的方法（有点类似<code>javascript</code>的<code>confirm</code>弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，<code>granted</code>代表允许，<code>denied</code>代表拒绝。并且<code>Notification.requestPermission()</code>支持<code>then</code>方式的链式调用，也就意味着可以异步调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notification.requestPermission(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">permission</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户是否允许通知： '</span>,permission === <span class=\"string\">'granted'</span> ? <span class=\"string\">'允许'</span> : <span class=\"string\">'拒绝'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//两种方式是等价的</span></span><br><span class=\"line\">Notification.requestPermission().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">permission</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户是否允许通知： '</span>,permission === <span class=\"string\">'granted'</span> ? <span class=\"string\">'允许'</span> : <span class=\"string\">'拒绝'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建通知-new-Notification-TITLE-OPTIONS\"><a href=\"#创建通知-new-Notification-TITLE-OPTIONS\" class=\"headerlink\" title=\"创建通知 - new Notification(TITLE, OPTIONS)\"></a>创建通知 - new Notification(TITLE, OPTIONS)</h2><p><code>new Notification(TITLE, OPTIONS)</code>方法创建可以创建一个通知实例，允许参入参数两个参数<code>TITLE</code>和<code>OPTIONS</code>。注意默认情况下（实际可以通过<code>OPTIONS</code>中的<code>timestamp</code>参数控制）一旦通知实例被创建出来，它会立即被显示出来。</p>\n<h3 id=\"TITLE参数\"><a href=\"#TITLE参数\" class=\"headerlink\" title=\"TITLE参数\"></a>TITLE参数</h3><p><code>TITLE</code>表示通知的标题。必须参数，允许数字、字符串和空</p>\n<h3 id=\"OPTIONS参数\"><a href=\"#OPTIONS参数\" class=\"headerlink\" title=\"OPTIONS参数\"></a>OPTIONS参数</h3><p><code>OPTIONS</code>是非必须参数，必须为一个对象，它包含：<br>ps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-EN</a>结合谷歌翻译得来，很有可能翻译不准确，如有，请提出。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //通知显示正文。非必须，默认为空</span><br><span class=\"line\">    body: '你的好友XX上线了！',</span><br><span class=\"line\">    //通知显示正文的图片地址。非必须，默认为空</span><br><span class=\"line\">    image: 'imgae url',</span><br><span class=\"line\">    //通知左侧图标。非必须，默认为空</span><br><span class=\"line\">    icon: 'imgae url',</span><br><span class=\"line\">    //通知的分类标记（ID）。非必须，默认为空</span><br><span class=\"line\">    tag: 'test',</span><br><span class=\"line\">    //通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空</span><br><span class=\"line\">    data: '可以是任意数据类型',</span><br><span class=\"line\">    //通知显示延迟的时间。非必须，默认通知实例创建完成就显示</span><br><span class=\"line\">    timestamp: '',</span><br><span class=\"line\">    //通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl</span><br><span class=\"line\">    dir: 'auto',</span><br><span class=\"line\">    //当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空</span><br><span class=\"line\">    badge: 'xxx',</span><br><span class=\"line\">    //通知的语言。非必须默认为空</span><br><span class=\"line\">    lang: '',</span><br><span class=\"line\">    //通知显示时，设备的振动模式。非必须，默认为空</span><br><span class=\"line\">    vibrate: [200, 100, 200],</span><br><span class=\"line\">    //新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true</span><br><span class=\"line\">    renotify: true,</span><br><span class=\"line\">    //通知是否静音。非必须，默认为false，表示无声</span><br><span class=\"line\">    silent: false,</span><br><span class=\"line\">    //通知声源文件地址。非必须，默认为空</span><br><span class=\"line\">    sound: 'mp3',</span><br><span class=\"line\">    //是否不在屏幕上显示通知信息。非必须，默认为false表示要显示</span><br><span class=\"line\">    noscreen: false,</span><br><span class=\"line\">    //指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性</span><br><span class=\"line\">    sticky: false,</span><br><span class=\"line\">    //指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false</span><br><span class=\"line\">    requireInteraction: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件及事件钩子\"><a href=\"#事件及事件钩子\" class=\"headerlink\" title=\"事件及事件钩子\"></a>事件及事件钩子</h3><p>当通知被创建成功后：</p>\n<ul>\n<li>通知实例具有一个静态方法可以用来关闭通知</li>\n<li>通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪<code>onshow/ondisplay</code>（在通知显示的时触发）、<code>onclick</code>）（当用户点击通知时触发）、<code>onclose（当用户关闭通知时触发）</code>和<code>onerror</code>（当通知出现错误时触发）。因为<code>Notification</code>同样继承自<code>EventTarget</code>，因此可以对它调用<code>addEventListener()</code>方法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> n = <span class=\"keyword\">new</span> Notification(<span class=\"string\">'XX网站消息通知'</span>, &#123;</span><br><span class=\"line\">    body: <span class=\"string\">'你的朋友有新状态啦，快去围观吧！'</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">'2ue'</span>,</span><br><span class=\"line\">    icon: <span class=\"string\">'https://2ue.github.io/images/common/avatar.png'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://2ue.github.io'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timestamp: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">n.onshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'通知显示了！'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class=\"line\">    <span class=\"comment\">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(n.data.url, <span class=\"string\">'_blank'</span>);</span><br><span class=\"line\">    n.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'你墙壁了我！！！'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出错了，小伙子在检查一下吧'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">2.</span></span><br><span class=\"line\">&lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"button\"</span>&gt;Hello&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script type=\"text/</span>javascript<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">var button = document.querySelector('.button')</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">button.addEventListener('click', function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if (!(\"</span>Notification<span class=\"string\">\" in window)) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        alert(\"</span>不支持 notification<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else if (Notification.permission === \"</span>granted<span class=\"string\">\") &#123; // 允许通知</span></span><br><span class=\"line\"><span class=\"string\">        notice()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else if (Notification.permission !== 'denied') &#123; // 用户没有选择是否显示通知，向用户请求许可</span></span><br><span class=\"line\"><span class=\"string\">        Notification.requestPermission(function(permission) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (permission === \"</span>granted<span class=\"string\">\") &#123;</span></span><br><span class=\"line\"><span class=\"string\">                notice()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;, false)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">function notice() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    var notification = new Notification(\"</span>你好，JavaScript<span class=\"string\">\",&#123;</span></span><br><span class=\"line\"><span class=\"string\">        body:'微信订阅号',</span></span><br><span class=\"line\"><span class=\"string\">        icon:\"</span>https:<span class=\"comment\">//mp.weixin.qq.com/misc/getheadimg?token=990524500&amp;fakeid=3006291623&amp;r=674680\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    notification.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        notification.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开~ <a href=\"https://codepen.io/2ue/pen/rYYzwB\" target=\"_blank\" rel=\"noopener\">Notification.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> NotificationInstance = Notification || <span class=\"built_in\">window</span>.Notification;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!!NotificationInstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> permissionNow = NotificationInstance.permission;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permissionNow === <span class=\"string\">'granted'</span>) &#123;<span class=\"comment\">//允许通知</span></span><br><span class=\"line\">        CreatNotification();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissionNow === <span class=\"string\">'denied'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户拒绝了你!!!'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setPermission();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPermission</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//请求获取通知权限</span></span><br><span class=\"line\">        NotificationInstance.requestPermission(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">PERMISSION</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (PERMISSION === <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">                CreatNotification();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户无情残忍的拒绝了你!!!'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatNotification</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"keyword\">new</span> NotificationInstance(<span class=\"string\">'XX网站消息通知'</span>, &#123;</span><br><span class=\"line\">            body: <span class=\"string\">'你的朋友有新状态啦，快去围观吧！'</span>,</span><br><span class=\"line\">            tag: <span class=\"string\">'2ue'</span>,</span><br><span class=\"line\">            icon: <span class=\"string\">'https://2ue.github.io/images/common/avatar.png'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                url: <span class=\"string\">'https://2ue.github.io'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        n.onshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'通知显示了！'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class=\"line\">            <span class=\"comment\">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>.open(n.data.url, <span class=\"string\">'_blank'</span>);</span><br><span class=\"line\">            n.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'你墙壁了我！！！'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'出错了，小伙子在检查一下吧'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            n.close();</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h2><pre><code>Firefox 22+\nCheome 22+\nSafari 6+\nOpera 25+\nEdge 14+\n</code></pre><p><code>Notifications</code>是<code>H5</code>的新特性，毫无疑问，它的兼容肯定是一篇哀嚎.<br><img src=\"/images/posts/notify-jianrong-pc.png\" alt=\"Notifications PC端兼容性\"><br><img src=\"/images/posts/notify-jianrong-mobile.png\" alt=\"Notifications 移动端兼容性\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-EN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-CN</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;mid=2651493562&amp;idx=1&amp;sn=d7a5f9daa064e8e58f957a86ba1c49c0&amp;chksm=80f19d72b7861464f40caf7d621944f32e20cf1b5e0ec549a5466ce71d16a8bff33763c87038&amp;mpshare=1&amp;scene=1&amp;srcid=0212vuAfZBXHqJgQsRytkid3#rd\" target=\"_blank\" rel=\"noopener\">HTML5 Notification消息通知</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Notification 对象用来为用户设置和显示桌面通知，Web Notifications API 可以将通知发送至页面之外的系统层级上，因此，即便应用处于空闲状态或是在后台，web 应用仍然可以通过这个 API 向用户发送信息。比如网页版微信，每当用户收到一条新的消息，就会有一条通知显示给用户</p>\n</blockquote>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p><code>Notifications</code>的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置<code>setTimeout</code>，用时基本不会超过<code>1s</code>），并且用户不需要离开应用，这都带来了极大的方便。可以预见，<code>Notifications</code>将会在很多网页或应用中被大量使用。当然<code>Notifications</code>也具有它的局限性：无法存档、即看即毁<br>那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：</p>\n<ul>\n<li>社交类网站</li>\n<li>资讯类网站</li>\n<li>网页版邮件服务</li>\n<li>即时通知类网站</li>\n<li>…</li>\n</ul>\n<p>举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：<br><img src=\"/images/posts/desktop-notification1.png\" alt=\"desktop-notification1\"></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>var notification = new Notification(title, [options])</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><pre><code>title            string    显示的通知标题\n[options]        object    显示通知的配置项，可选\n[options.dir]    string    文字方向， 取值为 auto、ltr、rtl 之一\n[options.lang]    string    通知的语言，这个字符串必须在 BCP 47 language tag 文档中是有效的。\n[options.body]    string    通知的内容\n[options.tag]    string    通知的 id，通过此 id 可以对通知进行刷新、替换或移除\n[options.icon]    string    通知的图标图片URL，将被用于显示通知的图标。\n</code></pre><h2 id=\"请求权限\"><a href=\"#请求权限\" class=\"headerlink\" title=\"请求权限\"></a>请求权限</h2><p>要显示通知，需要得到用户的授权，Notification 提供了 requestPermission 方法向用户申请显示通知的权限，此方法只能被用户行为调用（比如在onclick 事件中）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notification.requestPermission(<span class=\"keyword\">function</span>(permission) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permission === <span class=\"string\">\"granted\"</span>) &#123;</span><br><span class=\"line\">        console.log(11)</span><br><span class=\"line\">        popNotice()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"权限状态\"><a href=\"#权限状态\" class=\"headerlink\" title=\"权限状态\"></a>权限状态</h2><p>只读属性 Notification.permission 可以用来获取用户授权状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">denied ：拒绝通知显示(用户已经明确的拒绝了显示通知的权限。)</span><br><span class=\"line\">granted ：允许通知显示（表示之前已经询问过用户，并且用户已经授予了显示通知的权限。）</span><br><span class=\"line\">default ：用户尚未被询问是否授权，在浏览器中表现与 denied 相同（用户还未被询问是否授权，所以通知不会被显示。）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"请求权限-Notification-requestPermission-CALLBACK\"><a href=\"#请求权限-Notification-requestPermission-CALLBACK\" class=\"headerlink\" title=\"请求权限 - Notification.requestPermission(CALLBACK)\"></a>请求权限 - Notification.requestPermission(CALLBACK)</h2><p>应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。<code>Notification.requestPermission(CALLBACK)</code>是请求获取权限的方法（有点类似<code>javascript</code>的<code>confirm</code>弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，<code>granted</code>代表允许，<code>denied</code>代表拒绝。并且<code>Notification.requestPermission()</code>支持<code>then</code>方式的链式调用，也就意味着可以异步调用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notification.requestPermission(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">permission</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户是否允许通知： '</span>,permission === <span class=\"string\">'granted'</span> ? <span class=\"string\">'允许'</span> : <span class=\"string\">'拒绝'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//两种方式是等价的</span></span><br><span class=\"line\">Notification.requestPermission().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">permission</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户是否允许通知： '</span>,permission === <span class=\"string\">'granted'</span> ? <span class=\"string\">'允许'</span> : <span class=\"string\">'拒绝'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建通知-new-Notification-TITLE-OPTIONS\"><a href=\"#创建通知-new-Notification-TITLE-OPTIONS\" class=\"headerlink\" title=\"创建通知 - new Notification(TITLE, OPTIONS)\"></a>创建通知 - new Notification(TITLE, OPTIONS)</h2><p><code>new Notification(TITLE, OPTIONS)</code>方法创建可以创建一个通知实例，允许参入参数两个参数<code>TITLE</code>和<code>OPTIONS</code>。注意默认情况下（实际可以通过<code>OPTIONS</code>中的<code>timestamp</code>参数控制）一旦通知实例被创建出来，它会立即被显示出来。</p>\n<h3 id=\"TITLE参数\"><a href=\"#TITLE参数\" class=\"headerlink\" title=\"TITLE参数\"></a>TITLE参数</h3><p><code>TITLE</code>表示通知的标题。必须参数，允许数字、字符串和空</p>\n<h3 id=\"OPTIONS参数\"><a href=\"#OPTIONS参数\" class=\"headerlink\" title=\"OPTIONS参数\"></a>OPTIONS参数</h3><p><code>OPTIONS</code>是非必须参数，必须为一个对象，它包含：<br>ps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-EN</a>结合谷歌翻译得来，很有可能翻译不准确，如有，请提出。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //通知显示正文。非必须，默认为空</span><br><span class=\"line\">    body: '你的好友XX上线了！',</span><br><span class=\"line\">    //通知显示正文的图片地址。非必须，默认为空</span><br><span class=\"line\">    image: 'imgae url',</span><br><span class=\"line\">    //通知左侧图标。非必须，默认为空</span><br><span class=\"line\">    icon: 'imgae url',</span><br><span class=\"line\">    //通知的分类标记（ID）。非必须，默认为空</span><br><span class=\"line\">    tag: 'test',</span><br><span class=\"line\">    //通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空</span><br><span class=\"line\">    data: '可以是任意数据类型',</span><br><span class=\"line\">    //通知显示延迟的时间。非必须，默认通知实例创建完成就显示</span><br><span class=\"line\">    timestamp: '',</span><br><span class=\"line\">    //通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl</span><br><span class=\"line\">    dir: 'auto',</span><br><span class=\"line\">    //当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空</span><br><span class=\"line\">    badge: 'xxx',</span><br><span class=\"line\">    //通知的语言。非必须默认为空</span><br><span class=\"line\">    lang: '',</span><br><span class=\"line\">    //通知显示时，设备的振动模式。非必须，默认为空</span><br><span class=\"line\">    vibrate: [200, 100, 200],</span><br><span class=\"line\">    //新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true</span><br><span class=\"line\">    renotify: true,</span><br><span class=\"line\">    //通知是否静音。非必须，默认为false，表示无声</span><br><span class=\"line\">    silent: false,</span><br><span class=\"line\">    //通知声源文件地址。非必须，默认为空</span><br><span class=\"line\">    sound: 'mp3',</span><br><span class=\"line\">    //是否不在屏幕上显示通知信息。非必须，默认为false表示要显示</span><br><span class=\"line\">    noscreen: false,</span><br><span class=\"line\">    //指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性</span><br><span class=\"line\">    sticky: false,</span><br><span class=\"line\">    //指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false</span><br><span class=\"line\">    requireInteraction: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件及事件钩子\"><a href=\"#事件及事件钩子\" class=\"headerlink\" title=\"事件及事件钩子\"></a>事件及事件钩子</h3><p>当通知被创建成功后：</p>\n<ul>\n<li>通知实例具有一个静态方法可以用来关闭通知</li>\n<li>通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪<code>onshow/ondisplay</code>（在通知显示的时触发）、<code>onclick</code>）（当用户点击通知时触发）、<code>onclose（当用户关闭通知时触发）</code>和<code>onerror</code>（当通知出现错误时触发）。因为<code>Notification</code>同样继承自<code>EventTarget</code>，因此可以对它调用<code>addEventListener()</code>方法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> n = <span class=\"keyword\">new</span> Notification(<span class=\"string\">'XX网站消息通知'</span>, &#123;</span><br><span class=\"line\">    body: <span class=\"string\">'你的朋友有新状态啦，快去围观吧！'</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">'2ue'</span>,</span><br><span class=\"line\">    icon: <span class=\"string\">'https://2ue.github.io/images/common/avatar.png'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://2ue.github.io'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timestamp: <span class=\"number\">3000</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">n.onshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'通知显示了！'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class=\"line\">    <span class=\"comment\">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.open(n.data.url, <span class=\"string\">'_blank'</span>);</span><br><span class=\"line\">    n.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'你墙壁了我！！！'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出错了，小伙子在检查一下吧'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">2.</span></span><br><span class=\"line\">&lt;button <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"button\"</span>&gt;Hello&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script type=\"text/</span>javascript<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">var button = document.querySelector('.button')</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">button.addEventListener('click', function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if (!(\"</span>Notification<span class=\"string\">\" in window)) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        alert(\"</span>不支持 notification<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else if (Notification.permission === \"</span>granted<span class=\"string\">\") &#123; // 允许通知</span></span><br><span class=\"line\"><span class=\"string\">        notice()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else if (Notification.permission !== 'denied') &#123; // 用户没有选择是否显示通知，向用户请求许可</span></span><br><span class=\"line\"><span class=\"string\">        Notification.requestPermission(function(permission) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (permission === \"</span>granted<span class=\"string\">\") &#123;</span></span><br><span class=\"line\"><span class=\"string\">                notice()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;, false)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">function notice() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    var notification = new Notification(\"</span>你好，JavaScript<span class=\"string\">\",&#123;</span></span><br><span class=\"line\"><span class=\"string\">        body:'微信订阅号',</span></span><br><span class=\"line\"><span class=\"string\">        icon:\"</span>https:<span class=\"comment\">//mp.weixin.qq.com/misc/getheadimg?token=990524500&amp;fakeid=3006291623&amp;r=674680\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    notification.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        notification.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开~ <a href=\"https://codepen.io/2ue/pen/rYYzwB\" target=\"_blank\" rel=\"noopener\">Notification.js</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> NotificationInstance = Notification || <span class=\"built_in\">window</span>.Notification;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!!NotificationInstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> permissionNow = NotificationInstance.permission;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permissionNow === <span class=\"string\">'granted'</span>) &#123;<span class=\"comment\">//允许通知</span></span><br><span class=\"line\">        CreatNotification();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissionNow === <span class=\"string\">'denied'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户拒绝了你!!!'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setPermission();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPermission</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//请求获取通知权限</span></span><br><span class=\"line\">        NotificationInstance.requestPermission(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">PERMISSION</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (PERMISSION === <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">                CreatNotification();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户无情残忍的拒绝了你!!!'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatNotification</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n = <span class=\"keyword\">new</span> NotificationInstance(<span class=\"string\">'XX网站消息通知'</span>, &#123;</span><br><span class=\"line\">            body: <span class=\"string\">'你的朋友有新状态啦，快去围观吧！'</span>,</span><br><span class=\"line\">            tag: <span class=\"string\">'2ue'</span>,</span><br><span class=\"line\">            icon: <span class=\"string\">'https://2ue.github.io/images/common/avatar.png'</span>,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                url: <span class=\"string\">'https://2ue.github.io'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        n.onshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'通知显示了！'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class=\"line\">            <span class=\"comment\">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>.open(n.data.url, <span class=\"string\">'_blank'</span>);</span><br><span class=\"line\">            n.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'你墙壁了我！！！'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'出错了，小伙子在检查一下吧'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            n.close();</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h2><pre><code>Firefox 22+\nCheome 22+\nSafari 6+\nOpera 25+\nEdge 14+\n</code></pre><p><code>Notifications</code>是<code>H5</code>的新特性，毫无疑问，它的兼容肯定是一篇哀嚎.<br><img src=\"/images/posts/notify-jianrong-pc.png\" alt=\"Notifications PC端兼容性\"><br><img src=\"/images/posts/notify-jianrong-mobile.png\" alt=\"Notifications 移动端兼容性\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-EN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/notification\" target=\"_blank\" rel=\"noopener\">Notification-MDN-CN</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;mid=2651493562&amp;idx=1&amp;sn=d7a5f9daa064e8e58f957a86ba1c49c0&amp;chksm=80f19d72b7861464f40caf7d621944f32e20cf1b5e0ec549a5466ce71d16a8bff33763c87038&amp;mpshare=1&amp;scene=1&amp;srcid=0212vuAfZBXHqJgQsRytkid3#rd\" target=\"_blank\" rel=\"noopener\">HTML5 Notification消息通知</a></li>\n</ul>\n"},{"title":"H5的visibilitychange特性 - 页面可见性检测","date":"2018-01-24T03:27:48.000Z","author":"J.2ue","_content":"\n> visibilitychange是H5的一个特性，当检测到浏览器标签页被隐藏（切换到其他标签/最小化到桌面）或者显示时候会触发\n\n## 应用场景\n\n\n``` javascript\nfunction getHiddenProp(){\n    var prefixes = ['webkit','moz','ms','o'];\n    if ('hidden' in document) return 'hidden';\n    for (var i = 0; i < prefixes.length; i++){\n        if ((prefixes[i] + 'Hidden') in document)\n            return prefixes[i] + 'Hidden';\n    }\n    return null;\n}\nfunction getVisibilityState() {\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n    if ('visibilityState' in document) return 'visibilityState';\n    for (var i = 0; i < prefixes.length; i++) {\n        if ((prefixes[i] + 'VisibilityState') in document)\n            return prefixes[i] + 'VisibilityState';\n    }\n    return null;\n}\nvar visProp = getHiddenProp();\nif (visProp) {\n    var evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange';\n    document.addEventListener(evtname, function () {\n        document.title = document[getVisibilityState()]+\"状态\";\n    },false);\n}\n```\n\n## 兼容\n\n\n","source":"_posts/js-visibilitychange.md","raw":"---\ntitle: H5的visibilitychange特性 - 页面可见性检测\ndate: 2018-1-24 11:27:48\nauthor: J.2ue\ntags:\n- visibilitychange\n- javascript\ncategories:\n- [js,监测浏览器]\n---\n\n> visibilitychange是H5的一个特性，当检测到浏览器标签页被隐藏（切换到其他标签/最小化到桌面）或者显示时候会触发\n\n## 应用场景\n\n\n``` javascript\nfunction getHiddenProp(){\n    var prefixes = ['webkit','moz','ms','o'];\n    if ('hidden' in document) return 'hidden';\n    for (var i = 0; i < prefixes.length; i++){\n        if ((prefixes[i] + 'Hidden') in document)\n            return prefixes[i] + 'Hidden';\n    }\n    return null;\n}\nfunction getVisibilityState() {\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n    if ('visibilityState' in document) return 'visibilityState';\n    for (var i = 0; i < prefixes.length; i++) {\n        if ((prefixes[i] + 'VisibilityState') in document)\n            return prefixes[i] + 'VisibilityState';\n    }\n    return null;\n}\nvar visProp = getHiddenProp();\nif (visProp) {\n    var evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange';\n    document.addEventListener(evtname, function () {\n        document.title = document[getVisibilityState()]+\"状态\";\n    },false);\n}\n```\n\n## 兼容\n\n\n","slug":"js-visibilitychange","published":1,"updated":"2018-11-01T03:53:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnydngr0000hz8v7kj4ub61v","content":"<blockquote>\n<p>visibilitychange是H5的一个特性，当检测到浏览器标签页被隐藏（切换到其他标签/最小化到桌面）或者显示时候会触发</p>\n</blockquote>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHiddenProp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prefixes = [<span class=\"string\">'webkit'</span>,<span class=\"string\">'moz'</span>,<span class=\"string\">'ms'</span>,<span class=\"string\">'o'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'hidden'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"string\">'hidden'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixes.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((prefixes[i] + <span class=\"string\">'Hidden'</span>) <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixes[i] + <span class=\"string\">'Hidden'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVisibilityState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prefixes = [<span class=\"string\">'webkit'</span>, <span class=\"string\">'moz'</span>, <span class=\"string\">'ms'</span>, <span class=\"string\">'o'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'visibilityState'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"string\">'visibilityState'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixes.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((prefixes[i] + <span class=\"string\">'VisibilityState'</span>) <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixes[i] + <span class=\"string\">'VisibilityState'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> visProp = getHiddenProp();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (visProp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> evtname = visProp.replace(<span class=\"regexp\">/[H|h]idden/</span>, <span class=\"string\">''</span>) + <span class=\"string\">'visibilitychange'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(evtname, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.title = <span class=\"built_in\">document</span>[getVisibilityState()]+<span class=\"string\">\"状态\"</span>;</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>visibilitychange是H5的一个特性，当检测到浏览器标签页被隐藏（切换到其他标签/最小化到桌面）或者显示时候会触发</p>\n</blockquote>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHiddenProp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prefixes = [<span class=\"string\">'webkit'</span>,<span class=\"string\">'moz'</span>,<span class=\"string\">'ms'</span>,<span class=\"string\">'o'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'hidden'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"string\">'hidden'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixes.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((prefixes[i] + <span class=\"string\">'Hidden'</span>) <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixes[i] + <span class=\"string\">'Hidden'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVisibilityState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prefixes = [<span class=\"string\">'webkit'</span>, <span class=\"string\">'moz'</span>, <span class=\"string\">'ms'</span>, <span class=\"string\">'o'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'visibilityState'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) <span class=\"keyword\">return</span> <span class=\"string\">'visibilityState'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixes.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((prefixes[i] + <span class=\"string\">'VisibilityState'</span>) <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixes[i] + <span class=\"string\">'VisibilityState'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> visProp = getHiddenProp();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (visProp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> evtname = visProp.replace(<span class=\"regexp\">/[H|h]idden/</span>, <span class=\"string\">''</span>) + <span class=\"string\">'visibilitychange'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(evtname, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.title = <span class=\"built_in\">document</span>[getVisibilityState()]+<span class=\"string\">\"状态\"</span>;</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h2>"},{"title":"wxpromise-语法-for","date":"2018-10-15T06:54:49.000Z","author":"T.2stt","comments":1,"_content":"\n>此章节记载的是 wxpromise中使用语法的方法wx:for\n\n## wx:for\n默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item\n````bash\n<view wx:for=\"{{array}}\">\n  {{index}}: {{item.message}}\n</view>\n\n<!-- js -->\nPage({\n  data: {\n    array: [{\n      message: 'foo',\n    }, {\n      message: 'bar'\n    }]\n  }\n})\n```\n---\n\n### 键值更改名字\n| 属性名        | 作用    |\n| --------   | :-----:   |\n| wx:for-item   | 指定数组当前元素的变量名 |\n| wx:for-index   | 指定数组当前下标的变量名 |\n\n```bash\n<view wx:for=\"{{array}}\" wx:for-index=\"idx\" wx:for-item=\"itemName\">\n  {{idx}}: {{itemName.message}}\n</view>\n```\n---\n\n### wx:for 嵌套\n```bash\n<view wx:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" wx:for-item=\"i\">\n  <view wx:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" wx:for-item=\"j\">\n    <view wx:if=\"{{i <= j}}\">\n      {{i}} * {{j}} = {{i * j}}\n    </view>\n  </view>\n</view>\n```\n---\n\n### block wx:for(不占元素)\n类似 block wx:if，也可以将 wx:for 用在<block/>标签上，以渲染一个包含多节点的结构块。\n```bash\n<block wx:for=\"{{[1, 2, 3]}}\">\n  <view> {{index}}: </view>\n  <view> {{item}} </view>\n</block>\n```\n---\n\n### wx:key\n\n```bash\n如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征\n和状态,变化的列表需要使用 wx:key 来指定列表中项目的唯一的标识符。\n（如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。）\n```\nwx:key 的值以两种形式提供：\n\n| 属性名  | 代表    |\n| --------   | :-----:   |\n| 字符串  | 在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变 |\n| 保留关键字 *this  | for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字|\n\n### 注意\n#### 当 wx:for 的值为字符串时\n会将字符串解析成字符串数组\n```bash\n<view wx:for=\"array\">\n  {{item}}\n</view>\n```\n等同于\n```bash\n<view wx:for=\"{{['a','r','r','a','y']}}\">\n  {{item}}\n</view>\n```\n---\n\n#### 花括号和引号之间不能有空格\n花括号和引号之间如果有空格，将最终被解析成为字符串\n```bash\n<view wx:for=\"{{[1,2,3]}} \">\n  {{item}}\n</view>\n```\n等同于\n```bash\n<view wx:for=\"{{[1,2,3] + ' '}}\" >\n  {{item}}\n</view>\n```\n#### 项目开发时注意点\n```bash\n1.参数与vue不一样v-for=\"info in 数组\"，而是要加上{{}}即：wx:for=\"{{数组}}\"\n```","source":"_posts/wxpromise-grammar-for.md","raw":"---\ntitle: wxpromise-语法-for\ndate: 2018-10-15 14:54:49\nauthor: T.2stt\ncomments: true\ntags:\n- [wx小程序]\ncategories:\n- [wx小程序]\n---\n\n>此章节记载的是 wxpromise中使用语法的方法wx:for\n\n## wx:for\n默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item\n````bash\n<view wx:for=\"{{array}}\">\n  {{index}}: {{item.message}}\n</view>\n\n<!-- js -->\nPage({\n  data: {\n    array: [{\n      message: 'foo',\n    }, {\n      message: 'bar'\n    }]\n  }\n})\n```\n---\n\n### 键值更改名字\n| 属性名        | 作用    |\n| --------   | :-----:   |\n| wx:for-item   | 指定数组当前元素的变量名 |\n| wx:for-index   | 指定数组当前下标的变量名 |\n\n```bash\n<view wx:for=\"{{array}}\" wx:for-index=\"idx\" wx:for-item=\"itemName\">\n  {{idx}}: {{itemName.message}}\n</view>\n```\n---\n\n### wx:for 嵌套\n```bash\n<view wx:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" wx:for-item=\"i\">\n  <view wx:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" wx:for-item=\"j\">\n    <view wx:if=\"{{i <= j}}\">\n      {{i}} * {{j}} = {{i * j}}\n    </view>\n  </view>\n</view>\n```\n---\n\n### block wx:for(不占元素)\n类似 block wx:if，也可以将 wx:for 用在<block/>标签上，以渲染一个包含多节点的结构块。\n```bash\n<block wx:for=\"{{[1, 2, 3]}}\">\n  <view> {{index}}: </view>\n  <view> {{item}} </view>\n</block>\n```\n---\n\n### wx:key\n\n```bash\n如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征\n和状态,变化的列表需要使用 wx:key 来指定列表中项目的唯一的标识符。\n（如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。）\n```\nwx:key 的值以两种形式提供：\n\n| 属性名  | 代表    |\n| --------   | :-----:   |\n| 字符串  | 在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变 |\n| 保留关键字 *this  | for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字|\n\n### 注意\n#### 当 wx:for 的值为字符串时\n会将字符串解析成字符串数组\n```bash\n<view wx:for=\"array\">\n  {{item}}\n</view>\n```\n等同于\n```bash\n<view wx:for=\"{{['a','r','r','a','y']}}\">\n  {{item}}\n</view>\n```\n---\n\n#### 花括号和引号之间不能有空格\n花括号和引号之间如果有空格，将最终被解析成为字符串\n```bash\n<view wx:for=\"{{[1,2,3]}} \">\n  {{item}}\n</view>\n```\n等同于\n```bash\n<view wx:for=\"{{[1,2,3] + ' '}}\" >\n  {{item}}\n</view>\n```\n#### 项目开发时注意点\n```bash\n1.参数与vue不一样v-for=\"info in 数组\"，而是要加上{{}}即：wx:for=\"{{数组}}\"\n```","slug":"wxpromise-grammar-for","published":1,"updated":"2018-11-01T07:31:05.364Z","layout":"post","photos":[],"link":"","_id":"cjnydngrd000iz8v7v4jsj1rz","content":"<blockquote>\n<p>此章节记载的是 wxpromise中使用语法的方法wx:for</p>\n</blockquote>\n<h2 id=\"wx-for\"><a href=\"#wx-for\" class=\"headerlink\" title=\"wx:for\"></a>wx:for</h2><p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js --&gt;</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    array: [&#123;</span><br><span class=\"line\">      message: &apos;foo&apos;,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      message: &apos;bar&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"键值更改名字\"><a href=\"#键值更改名字\" class=\"headerlink\" title=\"键值更改名字\"></a>键值更改名字</h3><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wx:for-item</td>\n<td style=\"text-align:center\">指定数组当前元素的变量名</td>\n</tr>\n<tr>\n<td>wx:for-index</td>\n<td style=\"text-align:center\">指定数组当前下标的变量名</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;array&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-index=<span class=\"string\">\"idx\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"itemName\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;idx&#125;&#125;: &#123;&#123;itemName.message&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"wx-for-嵌套\"><a href=\"#wx-for-嵌套\" class=\"headerlink\" title=\"wx:for 嵌套\"></a>wx:for 嵌套</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"i\"</span>&gt;</span><br><span class=\"line\">  &lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"j\"</span>&gt;</span><br><span class=\"line\">    &lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;i &lt;= j&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">      &#123;&#123;i&#125;&#125; * &#123;&#123;j&#125;&#125; = &#123;&#123;i * j&#125;&#125;</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"block-wx-for-不占元素\"><a href=\"#block-wx-for-不占元素\" class=\"headerlink\" title=\"block wx:for(不占元素)\"></a>block wx:for(不占元素)</h3><p>类似 block wx:if，也可以将 wx:for 用在<block>标签上，以渲染一个包含多节点的结构块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3]&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; &#123;&#123;index&#125;&#125;: &lt;/view&gt;</span><br><span class=\"line\">  &lt;view&gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure></block></p>\n<hr>\n<h3 id=\"wx-key\"><a href=\"#wx-key\" class=\"headerlink\" title=\"wx:key\"></a>wx:key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征</span><br><span class=\"line\">和状态,变化的列表需要使用 wx:key 来指定列表中项目的唯一的标识符。</span><br><span class=\"line\">（如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。）</span><br></pre></td></tr></table></figure>\n<p>wx:key 的值以两种形式提供：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">代表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符串</td>\n<td style=\"text-align:center\">在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变</td>\n</tr>\n<tr>\n<td>保留关键字 *this</td>\n<td style=\"text-align:center\">for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><h4 id=\"当-wx-for-的值为字符串时\"><a href=\"#当-wx-for-的值为字符串时\" class=\"headerlink\" title=\"当 wx:for 的值为字符串时\"></a>当 wx:for 的值为字符串时</h4><p>会将字符串解析成字符串数组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"array\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;['a','r','r','a','y']&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"花括号和引号之间不能有空格\"><a href=\"#花括号和引号之间不能有空格\" class=\"headerlink\" title=\"花括号和引号之间不能有空格\"></a>花括号和引号之间不能有空格</h4><p>花括号和引号之间如果有空格，将最终被解析成为字符串<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1,2,3]&#125;&#125; \"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1,2,3] + ' '&#125;&#125;\"</span> &gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"项目开发时注意点\"><a href=\"#项目开发时注意点\" class=\"headerlink\" title=\"项目开发时注意点\"></a>项目开发时注意点</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.参数与vue不一样v-for=<span class=\"string\">\"info in 数组\"</span>，而是要加上&#123;&#123;&#125;&#125;即：wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;数组&#125;&#125;\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此章节记载的是 wxpromise中使用语法的方法wx:for</p>\n</blockquote>\n<h2 id=\"wx-for\"><a href=\"#wx-for\" class=\"headerlink\" title=\"wx:for\"></a>wx:for</h2><p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- js --&gt;</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    array: [&#123;</span><br><span class=\"line\">      message: &apos;foo&apos;,</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      message: &apos;bar&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"键值更改名字\"><a href=\"#键值更改名字\" class=\"headerlink\" title=\"键值更改名字\"></a>键值更改名字</h3><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wx:for-item</td>\n<td style=\"text-align:center\">指定数组当前元素的变量名</td>\n</tr>\n<tr>\n<td>wx:for-index</td>\n<td style=\"text-align:center\">指定数组当前下标的变量名</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;array&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-index=<span class=\"string\">\"idx\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"itemName\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;idx&#125;&#125;: &#123;&#123;itemName.message&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"wx-for-嵌套\"><a href=\"#wx-for-嵌套\" class=\"headerlink\" title=\"wx:for 嵌套\"></a>wx:for 嵌套</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"i\"</span>&gt;</span><br><span class=\"line\">  &lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;\"</span> wx:<span class=\"keyword\">for</span>-item=<span class=\"string\">\"j\"</span>&gt;</span><br><span class=\"line\">    &lt;view wx:<span class=\"keyword\">if</span>=<span class=\"string\">\"&#123;&#123;i &lt;= j&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">      &#123;&#123;i&#125;&#125; * &#123;&#123;j&#125;&#125; = &#123;&#123;i * j&#125;&#125;</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"block-wx-for-不占元素\"><a href=\"#block-wx-for-不占元素\" class=\"headerlink\" title=\"block wx:for(不占元素)\"></a>block wx:for(不占元素)</h3><p>类似 block wx:if，也可以将 wx:for 用在<block>标签上，以渲染一个包含多节点的结构块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;block wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1, 2, 3]&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  &lt;view&gt; &#123;&#123;index&#125;&#125;: &lt;/view&gt;</span><br><span class=\"line\">  &lt;view&gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure></block></p>\n<hr>\n<h3 id=\"wx-key\"><a href=\"#wx-key\" class=\"headerlink\" title=\"wx:key\"></a>wx:key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征</span><br><span class=\"line\">和状态,变化的列表需要使用 wx:key 来指定列表中项目的唯一的标识符。</span><br><span class=\"line\">（如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。）</span><br></pre></td></tr></table></figure>\n<p>wx:key 的值以两种形式提供：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">代表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符串</td>\n<td style=\"text-align:center\">在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变</td>\n</tr>\n<tr>\n<td>保留关键字 *this</td>\n<td style=\"text-align:center\">for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><h4 id=\"当-wx-for-的值为字符串时\"><a href=\"#当-wx-for-的值为字符串时\" class=\"headerlink\" title=\"当 wx:for 的值为字符串时\"></a>当 wx:for 的值为字符串时</h4><p>会将字符串解析成字符串数组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"array\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;['a','r','r','a','y']&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"花括号和引号之间不能有空格\"><a href=\"#花括号和引号之间不能有空格\" class=\"headerlink\" title=\"花括号和引号之间不能有空格\"></a>花括号和引号之间不能有空格</h4><p>花括号和引号之间如果有空格，将最终被解析成为字符串<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1,2,3]&#125;&#125; \"</span>&gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;[1,2,3] + ' '&#125;&#125;\"</span> &gt;</span><br><span class=\"line\">  &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"项目开发时注意点\"><a href=\"#项目开发时注意点\" class=\"headerlink\" title=\"项目开发时注意点\"></a>项目开发时注意点</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.参数与vue不一样v-for=<span class=\"string\">\"info in 数组\"</span>，而是要加上&#123;&#123;&#125;&#125;即：wx:<span class=\"keyword\">for</span>=<span class=\"string\">\"&#123;&#123;数组&#125;&#125;\"</span></span><br></pre></td></tr></table></figure>"},{"title":"Javascript常用见问题之判断类型","date":"2017-03-31T09:05:06.000Z","author":"J.2ue","comments":1,"_content":"\n> 类型判断是我们在编程中常遇到的棘手问题，严格的变量类型约束会为代码减少很多致命的BUG。本文是对常用到的类型判断的一个整理，以求以最简洁的方式来判断变量的类型。<br/>本文所有的如果没特指，都是基于ES5的原生javascript\n\n## 变量的基本类型\n\n众所周知，`JavaScript`中变量可能包含两种不同的数据类型的值：**基本类型**和**引用类型**。基本类型是指简单的数据段，有`Number`、`String`、`Boolean`、`Udefined`、`Null`，而引用类型指那些可能包含多个值的对象，有`Object`、`Array`、`Date`、`RegExp`、`Function`。在`JavaScript`中，我们通过`var`来声明变量，由于`JavaScript`是若语言类型，我们无法在申明的时候规定他的类型，`JavaScript`变量的类型是随变量的值改变而改变的。所以我们要判断变量值的类型。下图列举一些常见的类型：\n\n|      类型      |       举例        |\n| :----------: | :-------------: |\n|   **Null**   |      null       |\n| **Udefined** | udefined、未赋值的变量 |\n| **Boolean**  |   true、false    |\n|  **Number**  |  -1、0 、 1、 NaN  |\n|  **String**  |     '1'、'a'     |\n|  **Array**   | []、new Array()  |\n|  **Object**  | {}、new Object() |\n| **Function** |  function(){}   |\n\n读到这里也许你会问，这有什么棘手的，就这几种类型背下来不就行了么？然而我想告诉你：**在大胆猜测的同时，也要用实践去证明你的猜测**。然后你当你用`typeof`去检测它们的类型时，你就崩溃了：明明是`Null`为什么结果却是`oject`，明明是`Array`为什么还是`obejct`？...所以除了使用`typeof`方法外我们必须药寻找其他的方法，那么这些方法有哪些呢？请继续往下读(`para`表示要判断的变量)：\n\n- isNaN(para)\n- !para\n- typeof para\n- Object.prototype.toString.call(para);\n\n## isNaN(para)\n\n用来判断是否为`number`类型的专有方法。但是需要注意的是，如果使用`typeof`判断那么结果会是`number`。\n\n## !para\n\n常用来判断一个变量是否存在，面对`Arry`、`Object`等**引用类型变量**时无论是否为空都会被转换成`true`\n\n## typeof para\n\n事实证明typeof并不是万能的，在对除Null以外的**基本类型**变量是相当有威力的，但是对**引用类型变量**和`null`时都会被识别成`object`\n\n## Object.prototype.toString.call(para)\n\n前面的`typeof`死在半路，无法打探到**引用类型变量**和`null`的真实情报，但是我们得出了另一个情报：**他们都是`obejct`**。那么我们就完全可以利用`Object`原型上的`toString()`方法来判断\n\n## 判断结果比较表\n\n|      类型      |      值       | isNaN(para) |   !para    | typeof para |  toString(para)   |\n| :----------: | :----------: | :---------: | :--------: | :---------: | :---------------: |\n|   **Null**   |     null     |    true     |    true    |   obejct    |   [obejct Null]   |\n| **Udefined** |   udefined   |    true     |    true    |  udefined   | [obejct Udefined] |\n| **Boolean**  |  true/false  |    true     | false/true |    true     | [obejct Boolean]  |\n|  **Number**  |      -1      |    false    |   false    |   number    |  [obejct Number]  |\n|  **Number**  |      0       |    false    |    true    |   number    |  [obejct Number]  |\n|  **Number**  |      1       |    false    |   false    |   number    |  [obejct Number]  |\n|  **Number**  |     NaN      |    true    |    true    |   number    | [obejct  Number]  |\n|  **String**  |     '1'      |    false    |   false    |   string    |  [obejct String]  |\n|  **String**  |     'a'      |    true     |   false    |   string    |  [obejct String]  |\n|  **String**  |      ''      |    true     |    true    |   string    |  [obejct String]  |\n|  **String**  |     ' '(中间包含空格)      |    true     |   false    |   string    |  [obejct String]  |\n|  **Array**   |    []/[4]    |    true     |   false    |   obejct    |  [obejct Array]   |\n|  **Object**  |   {}/{n:4}   |    true     |   false    |   obejct    |  [obejct Object]  |\n| **Function** | function(){} |    true     |   false    |   obejct    | [obejct Function] |\n\n## 总结方法\n\n根据上面的表格对比，我整理了一些常见的方法。并且再比较结果精准的情况下尽可能的简化比较过程.\n\n#### 判断数字(非严格)\n\n字符串'`1`'会被识别成`number`\n\n``` javascript\nfunction isNumber(para){\n    return !isNaN(para);\n};\n```\n\n#### 判断数字(严格)\n\n在必要的情况下使用：此方法会把字符串'`1`'识别成`string`类型\n\n``` javascript\nfunction isStrictNumber(para){\n    return !isNaN(para) && typeof para === 'number';\n};\n```\n\n#### 判断字符串（非严格）\n\n``` javascript\nfunction isString(para){\n    return typeof para === 'string';\n};\n```\n\n#### 判断字符串（严格）\n\n在必要的情况下使用：此种方法会把字符串'`1`'识别成`number`类型\n\n``` javascript\nfunction isStrictString(para){\n    return isNaN(para) && typeof para === 'string';\n};\n```\n\n#### 判断一般数据类型(即非引用类型)\n\n注意：使用typeof判断`null`结果为`object`\n\n``` javascript\nfunction isBasicType(para){\n    return typeof para !== 'obejct';\n};\n```\n\n#### 判断是否为null(不能识别'')\n\n此方法只能识别`null`，如果要包含''，请结合方法`isStringNull()`一起使用\n\n``` javascript\nfunction isNull(para){\n    return !para && typeof para === 'object';\n};\n```\n\n#### 判断是否为空字符串(不包含空格)\n\n此方法只能识别`''`，如果要包含`null`，请结合方法`isNull()`一起使用\n\n``` javascript\nfunction isStringtNull(para){\n    return !para && typeof para === 'string';\n};\n```\n\n#### 判断是否为`undefined`\n\n``` javascript\nfunction isUndefined(para){\n    return typeof para === 'undefined';\n};\n```\n\n#### 判断是否为`false`\n\n当为`null`,`undefined`,`''`,`0`,`-0`,`false`,`NaN`\n\n``` javascript\nfunction isFalse(para){\n    return !para;\n};\n```\n\n#### 判断对象（非严格1--所有的obejct对象）\n\n``` javascript\nfunction isAllObject(_v){\n    return typeof _v === 'obejct';\n};\n```\n\n#### 判断对象（非严格2--除去null的所有object对象）<--> 判断引用类型\n\n``` javascript\nfunction isObject(_v){\n    return !!v && typeof _v === 'obejct';\n};\n```\n\n#### 判断对象（严格--只识别{}JSON对象）\n\n``` javascript\nfunction isStrictObject(_v){\n    return Object.prototype.toString.call(_v) === '[object Object]';\n};\n```\n\n#### 判断数组\n\n``` javascript\nfunction isArray(para){\n    return Object.prototype.toString.call(para) === '[object Array]';\n};\n```\n\n#### 判断对象\n\n这里特指{}类`JSON`对象\n\n``` javascript\nfunction isObject(para){\n    return Object.prototype.toString.call(para) === '[object Object]';\n};\n```\n\n#### 判断可执行函数\n\n``` javascript\nfunction isFunction(para){\n    return typeof para === 'function';\n};\n```\n\n------------\n\n## 总结\n\n当我们需要判断其他类型时，完全可以参照上面的表来写出自己的方法哦。\n当然现在前端各种流行库不断推陈出新，我们完全可以直接使用别人封装好的库来实现这些功能，比如`underscore.js`、`lodash.js`等，但是编码的乐趣不就是在于自己解决最本质的问题么。所以即使有这么多的流行库大行其道，也不妨碍我们了解这些知识的初心，说不定哪天你自己也写出一个很火的库呢~\n当然随着ES6标准的不断被各大浏览器厂商支持，ES6的普及度越来越广，这些方法都会被内置到原生`javascript`内部吧(有些方法已经加进去了~)。\n","source":"_posts/js-data-type.md","raw":"---\ntitle: Javascript常用见问题之判断类型\ndate: 2017-3-31 17:05:06\nauthor: J.2ue\ncomments: true\ntags:\n- typeof\n- object\n- js\ncategories:\n- [js,data,数据类型判断]\n---\n\n> 类型判断是我们在编程中常遇到的棘手问题，严格的变量类型约束会为代码减少很多致命的BUG。本文是对常用到的类型判断的一个整理，以求以最简洁的方式来判断变量的类型。<br/>本文所有的如果没特指，都是基于ES5的原生javascript\n\n## 变量的基本类型\n\n众所周知，`JavaScript`中变量可能包含两种不同的数据类型的值：**基本类型**和**引用类型**。基本类型是指简单的数据段，有`Number`、`String`、`Boolean`、`Udefined`、`Null`，而引用类型指那些可能包含多个值的对象，有`Object`、`Array`、`Date`、`RegExp`、`Function`。在`JavaScript`中，我们通过`var`来声明变量，由于`JavaScript`是若语言类型，我们无法在申明的时候规定他的类型，`JavaScript`变量的类型是随变量的值改变而改变的。所以我们要判断变量值的类型。下图列举一些常见的类型：\n\n|      类型      |       举例        |\n| :----------: | :-------------: |\n|   **Null**   |      null       |\n| **Udefined** | udefined、未赋值的变量 |\n| **Boolean**  |   true、false    |\n|  **Number**  |  -1、0 、 1、 NaN  |\n|  **String**  |     '1'、'a'     |\n|  **Array**   | []、new Array()  |\n|  **Object**  | {}、new Object() |\n| **Function** |  function(){}   |\n\n读到这里也许你会问，这有什么棘手的，就这几种类型背下来不就行了么？然而我想告诉你：**在大胆猜测的同时，也要用实践去证明你的猜测**。然后你当你用`typeof`去检测它们的类型时，你就崩溃了：明明是`Null`为什么结果却是`oject`，明明是`Array`为什么还是`obejct`？...所以除了使用`typeof`方法外我们必须药寻找其他的方法，那么这些方法有哪些呢？请继续往下读(`para`表示要判断的变量)：\n\n- isNaN(para)\n- !para\n- typeof para\n- Object.prototype.toString.call(para);\n\n## isNaN(para)\n\n用来判断是否为`number`类型的专有方法。但是需要注意的是，如果使用`typeof`判断那么结果会是`number`。\n\n## !para\n\n常用来判断一个变量是否存在，面对`Arry`、`Object`等**引用类型变量**时无论是否为空都会被转换成`true`\n\n## typeof para\n\n事实证明typeof并不是万能的，在对除Null以外的**基本类型**变量是相当有威力的，但是对**引用类型变量**和`null`时都会被识别成`object`\n\n## Object.prototype.toString.call(para)\n\n前面的`typeof`死在半路，无法打探到**引用类型变量**和`null`的真实情报，但是我们得出了另一个情报：**他们都是`obejct`**。那么我们就完全可以利用`Object`原型上的`toString()`方法来判断\n\n## 判断结果比较表\n\n|      类型      |      值       | isNaN(para) |   !para    | typeof para |  toString(para)   |\n| :----------: | :----------: | :---------: | :--------: | :---------: | :---------------: |\n|   **Null**   |     null     |    true     |    true    |   obejct    |   [obejct Null]   |\n| **Udefined** |   udefined   |    true     |    true    |  udefined   | [obejct Udefined] |\n| **Boolean**  |  true/false  |    true     | false/true |    true     | [obejct Boolean]  |\n|  **Number**  |      -1      |    false    |   false    |   number    |  [obejct Number]  |\n|  **Number**  |      0       |    false    |    true    |   number    |  [obejct Number]  |\n|  **Number**  |      1       |    false    |   false    |   number    |  [obejct Number]  |\n|  **Number**  |     NaN      |    true    |    true    |   number    | [obejct  Number]  |\n|  **String**  |     '1'      |    false    |   false    |   string    |  [obejct String]  |\n|  **String**  |     'a'      |    true     |   false    |   string    |  [obejct String]  |\n|  **String**  |      ''      |    true     |    true    |   string    |  [obejct String]  |\n|  **String**  |     ' '(中间包含空格)      |    true     |   false    |   string    |  [obejct String]  |\n|  **Array**   |    []/[4]    |    true     |   false    |   obejct    |  [obejct Array]   |\n|  **Object**  |   {}/{n:4}   |    true     |   false    |   obejct    |  [obejct Object]  |\n| **Function** | function(){} |    true     |   false    |   obejct    | [obejct Function] |\n\n## 总结方法\n\n根据上面的表格对比，我整理了一些常见的方法。并且再比较结果精准的情况下尽可能的简化比较过程.\n\n#### 判断数字(非严格)\n\n字符串'`1`'会被识别成`number`\n\n``` javascript\nfunction isNumber(para){\n    return !isNaN(para);\n};\n```\n\n#### 判断数字(严格)\n\n在必要的情况下使用：此方法会把字符串'`1`'识别成`string`类型\n\n``` javascript\nfunction isStrictNumber(para){\n    return !isNaN(para) && typeof para === 'number';\n};\n```\n\n#### 判断字符串（非严格）\n\n``` javascript\nfunction isString(para){\n    return typeof para === 'string';\n};\n```\n\n#### 判断字符串（严格）\n\n在必要的情况下使用：此种方法会把字符串'`1`'识别成`number`类型\n\n``` javascript\nfunction isStrictString(para){\n    return isNaN(para) && typeof para === 'string';\n};\n```\n\n#### 判断一般数据类型(即非引用类型)\n\n注意：使用typeof判断`null`结果为`object`\n\n``` javascript\nfunction isBasicType(para){\n    return typeof para !== 'obejct';\n};\n```\n\n#### 判断是否为null(不能识别'')\n\n此方法只能识别`null`，如果要包含''，请结合方法`isStringNull()`一起使用\n\n``` javascript\nfunction isNull(para){\n    return !para && typeof para === 'object';\n};\n```\n\n#### 判断是否为空字符串(不包含空格)\n\n此方法只能识别`''`，如果要包含`null`，请结合方法`isNull()`一起使用\n\n``` javascript\nfunction isStringtNull(para){\n    return !para && typeof para === 'string';\n};\n```\n\n#### 判断是否为`undefined`\n\n``` javascript\nfunction isUndefined(para){\n    return typeof para === 'undefined';\n};\n```\n\n#### 判断是否为`false`\n\n当为`null`,`undefined`,`''`,`0`,`-0`,`false`,`NaN`\n\n``` javascript\nfunction isFalse(para){\n    return !para;\n};\n```\n\n#### 判断对象（非严格1--所有的obejct对象）\n\n``` javascript\nfunction isAllObject(_v){\n    return typeof _v === 'obejct';\n};\n```\n\n#### 判断对象（非严格2--除去null的所有object对象）<--> 判断引用类型\n\n``` javascript\nfunction isObject(_v){\n    return !!v && typeof _v === 'obejct';\n};\n```\n\n#### 判断对象（严格--只识别{}JSON对象）\n\n``` javascript\nfunction isStrictObject(_v){\n    return Object.prototype.toString.call(_v) === '[object Object]';\n};\n```\n\n#### 判断数组\n\n``` javascript\nfunction isArray(para){\n    return Object.prototype.toString.call(para) === '[object Array]';\n};\n```\n\n#### 判断对象\n\n这里特指{}类`JSON`对象\n\n``` javascript\nfunction isObject(para){\n    return Object.prototype.toString.call(para) === '[object Object]';\n};\n```\n\n#### 判断可执行函数\n\n``` javascript\nfunction isFunction(para){\n    return typeof para === 'function';\n};\n```\n\n------------\n\n## 总结\n\n当我们需要判断其他类型时，完全可以参照上面的表来写出自己的方法哦。\n当然现在前端各种流行库不断推陈出新，我们完全可以直接使用别人封装好的库来实现这些功能，比如`underscore.js`、`lodash.js`等，但是编码的乐趣不就是在于自己解决最本质的问题么。所以即使有这么多的流行库大行其道，也不妨碍我们了解这些知识的初心，说不定哪天你自己也写出一个很火的库呢~\n当然随着ES6标准的不断被各大浏览器厂商支持，ES6的普及度越来越广，这些方法都会被内置到原生`javascript`内部吧(有些方法已经加进去了~)。\n","slug":"js-data-type","published":1,"updated":"2018-11-01T03:56:12.171Z","layout":"post","photos":[],"link":"","_id":"cjnydngtl000qz8v7gy92qho2","content":"<blockquote>\n<p>类型判断是我们在编程中常遇到的棘手问题，严格的变量类型约束会为代码减少很多致命的BUG。本文是对常用到的类型判断的一个整理，以求以最简洁的方式来判断变量的类型。<br>本文所有的如果没特指，都是基于ES5的原生javascript</p>\n</blockquote>\n<h2 id=\"变量的基本类型\"><a href=\"#变量的基本类型\" class=\"headerlink\" title=\"变量的基本类型\"></a>变量的基本类型</h2><p>众所周知，<code>JavaScript</code>中变量可能包含两种不同的数据类型的值：<strong>基本类型</strong>和<strong>引用类型</strong>。基本类型是指简单的数据段，有<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Udefined</code>、<code>Null</code>，而引用类型指那些可能包含多个值的对象，有<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>。在<code>JavaScript</code>中，我们通过<code>var</code>来声明变量，由于<code>JavaScript</code>是若语言类型，我们无法在申明的时候规定他的类型，<code>JavaScript</code>变量的类型是随变量的值改变而改变的。所以我们要判断变量值的类型。下图列举一些常见的类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>Null</strong></td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Udefined</strong></td>\n<td style=\"text-align:center\">udefined、未赋值的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Boolean</strong></td>\n<td style=\"text-align:center\">true、false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">-1、0 、 1、 NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘1’、’a’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Array</strong></td>\n<td style=\"text-align:center\">[]、new Array()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Object</strong></td>\n<td style=\"text-align:center\">{}、new Object()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Function</strong></td>\n<td style=\"text-align:center\">function(){}</td>\n</tr>\n</tbody>\n</table>\n<p>读到这里也许你会问，这有什么棘手的，就这几种类型背下来不就行了么？然而我想告诉你：<strong>在大胆猜测的同时，也要用实践去证明你的猜测</strong>。然后你当你用<code>typeof</code>去检测它们的类型时，你就崩溃了：明明是<code>Null</code>为什么结果却是<code>oject</code>，明明是<code>Array</code>为什么还是<code>obejct</code>？…所以除了使用<code>typeof</code>方法外我们必须药寻找其他的方法，那么这些方法有哪些呢？请继续往下读(<code>para</code>表示要判断的变量)：</p>\n<ul>\n<li>isNaN(para)</li>\n<li>!para</li>\n<li>typeof para</li>\n<li>Object.prototype.toString.call(para);</li>\n</ul>\n<h2 id=\"isNaN-para\"><a href=\"#isNaN-para\" class=\"headerlink\" title=\"isNaN(para)\"></a>isNaN(para)</h2><p>用来判断是否为<code>number</code>类型的专有方法。但是需要注意的是，如果使用<code>typeof</code>判断那么结果会是<code>number</code>。</p>\n<h2 id=\"para\"><a href=\"#para\" class=\"headerlink\" title=\"!para\"></a>!para</h2><p>常用来判断一个变量是否存在，面对<code>Arry</code>、<code>Object</code>等<strong>引用类型变量</strong>时无论是否为空都会被转换成<code>true</code></p>\n<h2 id=\"typeof-para\"><a href=\"#typeof-para\" class=\"headerlink\" title=\"typeof para\"></a>typeof para</h2><p>事实证明typeof并不是万能的，在对除Null以外的<strong>基本类型</strong>变量是相当有威力的，但是对<strong>引用类型变量</strong>和<code>null</code>时都会被识别成<code>object</code></p>\n<h2 id=\"Object-prototype-toString-call-para\"><a href=\"#Object-prototype-toString-call-para\" class=\"headerlink\" title=\"Object.prototype.toString.call(para)\"></a>Object.prototype.toString.call(para)</h2><p>前面的<code>typeof</code>死在半路，无法打探到<strong>引用类型变量</strong>和<code>null</code>的真实情报，但是我们得出了另一个情报：<strong>他们都是<code>obejct</code></strong>。那么我们就完全可以利用<code>Object</code>原型上的<code>toString()</code>方法来判断</p>\n<h2 id=\"判断结果比较表\"><a href=\"#判断结果比较表\" class=\"headerlink\" title=\"判断结果比较表\"></a>判断结果比较表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">isNaN(para)</th>\n<th style=\"text-align:center\">!para</th>\n<th style=\"text-align:center\">typeof para</th>\n<th style=\"text-align:center\">toString(para)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>Null</strong></td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Null]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Udefined</strong></td>\n<td style=\"text-align:center\">udefined</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">udefined</td>\n<td style=\"text-align:center\">[obejct Udefined]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Boolean</strong></td>\n<td style=\"text-align:center\">true/false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false/true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">[obejct Boolean]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">NaN</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct  Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘1’</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘a’</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘’</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘ ‘(中间包含空格)</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Array</strong></td>\n<td style=\"text-align:center\">[]/[4]</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Array]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Object</strong></td>\n<td style=\"text-align:center\">{}/{n:4}</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Object]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Function</strong></td>\n<td style=\"text-align:center\">function(){}</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Function]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结方法\"><a href=\"#总结方法\" class=\"headerlink\" title=\"总结方法\"></a>总结方法</h2><p>根据上面的表格对比，我整理了一些常见的方法。并且再比较结果精准的情况下尽可能的简化比较过程.</p>\n<h4 id=\"判断数字-非严格\"><a href=\"#判断数字-非严格\" class=\"headerlink\" title=\"判断数字(非严格)\"></a>判断数字(非严格)</h4><p>字符串’<code>1</code>‘会被识别成<code>number</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(para);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数字-严格\"><a href=\"#判断数字-严格\" class=\"headerlink\" title=\"判断数字(严格)\"></a>判断数字(严格)</h4><p>在必要的情况下使用：此方法会把字符串’<code>1</code>‘识别成<code>string</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictNumber</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(para) &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'number'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断字符串（非严格）\"><a href=\"#判断字符串（非严格）\" class=\"headerlink\" title=\"判断字符串（非严格）\"></a>判断字符串（非严格）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断字符串（严格）\"><a href=\"#判断字符串（严格）\" class=\"headerlink\" title=\"判断字符串（严格）\"></a>判断字符串（严格）</h4><p>在必要的情况下使用：此种方法会把字符串’<code>1</code>‘识别成<code>number</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictString</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isNaN</span>(para) &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断一般数据类型-即非引用类型\"><a href=\"#判断一般数据类型-即非引用类型\" class=\"headerlink\" title=\"判断一般数据类型(即非引用类型)\"></a>判断一般数据类型(即非引用类型)</h4><p>注意：使用typeof判断<code>null</code>结果为<code>object</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBasicType</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para !== <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为null-不能识别’’\"><a href=\"#判断是否为null-不能识别’’\" class=\"headerlink\" title=\"判断是否为null(不能识别’’)\"></a>判断是否为null(不能识别’’)</h4><p>此方法只能识别<code>null</code>，如果要包含’’，请结合方法<code>isStringNull()</code>一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNull</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'object'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为空字符串-不包含空格\"><a href=\"#判断是否为空字符串-不包含空格\" class=\"headerlink\" title=\"判断是否为空字符串(不包含空格)\"></a>判断是否为空字符串(不包含空格)</h4><p>此方法只能识别<code>&#39;&#39;</code>，如果要包含<code>null</code>，请结合方法<code>isNull()</code>一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStringtNull</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为undefined\"><a href=\"#判断是否为undefined\" class=\"headerlink\" title=\"判断是否为undefined\"></a>判断是否为<code>undefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndefined</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'undefined'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为false\"><a href=\"#判断是否为false\" class=\"headerlink\" title=\"判断是否为false\"></a>判断是否为<code>false</code></h4><p>当为<code>null</code>,<code>undefined</code>,<code>&#39;&#39;</code>,<code>0</code>,<code>-0</code>,<code>false</code>,<code>NaN</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFalse</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（非严格1–所有的obejct对象）\"><a href=\"#判断对象（非严格1–所有的obejct对象）\" class=\"headerlink\" title=\"判断对象（非严格1–所有的obejct对象）\"></a>判断对象（非严格1–所有的obejct对象）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAllObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> _v === <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（非严格2–除去null的所有object对象）-判断引用类型\"><a href=\"#判断对象（非严格2–除去null的所有object对象）-判断引用类型\" class=\"headerlink\" title=\"判断对象（非严格2–除去null的所有object对象） 判断引用类型\"></a>判断对象（非严格2–除去null的所有object对象）<--> 判断引用类型</--></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!v &amp;&amp; <span class=\"keyword\">typeof</span> _v === <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（严格–只识别-JSON对象）\"><a href=\"#判断对象（严格–只识别-JSON对象）\" class=\"headerlink\" title=\"判断对象（严格–只识别{}JSON对象）\"></a>判断对象（严格–只识别{}JSON对象）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(_v) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组\"><a href=\"#判断数组\" class=\"headerlink\" title=\"判断数组\"></a>判断数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(para) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象\"><a href=\"#判断对象\" class=\"headerlink\" title=\"判断对象\"></a>判断对象</h4><p>这里特指{}类<code>JSON</code>对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(para) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断可执行函数\"><a href=\"#判断可执行函数\" class=\"headerlink\" title=\"判断可执行函数\"></a>判断可执行函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当我们需要判断其他类型时，完全可以参照上面的表来写出自己的方法哦。<br>当然现在前端各种流行库不断推陈出新，我们完全可以直接使用别人封装好的库来实现这些功能，比如<code>underscore.js</code>、<code>lodash.js</code>等，但是编码的乐趣不就是在于自己解决最本质的问题么。所以即使有这么多的流行库大行其道，也不妨碍我们了解这些知识的初心，说不定哪天你自己也写出一个很火的库呢~<br>当然随着ES6标准的不断被各大浏览器厂商支持，ES6的普及度越来越广，这些方法都会被内置到原生<code>javascript</code>内部吧(有些方法已经加进去了~)。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>类型判断是我们在编程中常遇到的棘手问题，严格的变量类型约束会为代码减少很多致命的BUG。本文是对常用到的类型判断的一个整理，以求以最简洁的方式来判断变量的类型。<br>本文所有的如果没特指，都是基于ES5的原生javascript</p>\n</blockquote>\n<h2 id=\"变量的基本类型\"><a href=\"#变量的基本类型\" class=\"headerlink\" title=\"变量的基本类型\"></a>变量的基本类型</h2><p>众所周知，<code>JavaScript</code>中变量可能包含两种不同的数据类型的值：<strong>基本类型</strong>和<strong>引用类型</strong>。基本类型是指简单的数据段，有<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Udefined</code>、<code>Null</code>，而引用类型指那些可能包含多个值的对象，有<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>。在<code>JavaScript</code>中，我们通过<code>var</code>来声明变量，由于<code>JavaScript</code>是若语言类型，我们无法在申明的时候规定他的类型，<code>JavaScript</code>变量的类型是随变量的值改变而改变的。所以我们要判断变量值的类型。下图列举一些常见的类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>Null</strong></td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Udefined</strong></td>\n<td style=\"text-align:center\">udefined、未赋值的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Boolean</strong></td>\n<td style=\"text-align:center\">true、false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">-1、0 、 1、 NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘1’、’a’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Array</strong></td>\n<td style=\"text-align:center\">[]、new Array()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Object</strong></td>\n<td style=\"text-align:center\">{}、new Object()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Function</strong></td>\n<td style=\"text-align:center\">function(){}</td>\n</tr>\n</tbody>\n</table>\n<p>读到这里也许你会问，这有什么棘手的，就这几种类型背下来不就行了么？然而我想告诉你：<strong>在大胆猜测的同时，也要用实践去证明你的猜测</strong>。然后你当你用<code>typeof</code>去检测它们的类型时，你就崩溃了：明明是<code>Null</code>为什么结果却是<code>oject</code>，明明是<code>Array</code>为什么还是<code>obejct</code>？…所以除了使用<code>typeof</code>方法外我们必须药寻找其他的方法，那么这些方法有哪些呢？请继续往下读(<code>para</code>表示要判断的变量)：</p>\n<ul>\n<li>isNaN(para)</li>\n<li>!para</li>\n<li>typeof para</li>\n<li>Object.prototype.toString.call(para);</li>\n</ul>\n<h2 id=\"isNaN-para\"><a href=\"#isNaN-para\" class=\"headerlink\" title=\"isNaN(para)\"></a>isNaN(para)</h2><p>用来判断是否为<code>number</code>类型的专有方法。但是需要注意的是，如果使用<code>typeof</code>判断那么结果会是<code>number</code>。</p>\n<h2 id=\"para\"><a href=\"#para\" class=\"headerlink\" title=\"!para\"></a>!para</h2><p>常用来判断一个变量是否存在，面对<code>Arry</code>、<code>Object</code>等<strong>引用类型变量</strong>时无论是否为空都会被转换成<code>true</code></p>\n<h2 id=\"typeof-para\"><a href=\"#typeof-para\" class=\"headerlink\" title=\"typeof para\"></a>typeof para</h2><p>事实证明typeof并不是万能的，在对除Null以外的<strong>基本类型</strong>变量是相当有威力的，但是对<strong>引用类型变量</strong>和<code>null</code>时都会被识别成<code>object</code></p>\n<h2 id=\"Object-prototype-toString-call-para\"><a href=\"#Object-prototype-toString-call-para\" class=\"headerlink\" title=\"Object.prototype.toString.call(para)\"></a>Object.prototype.toString.call(para)</h2><p>前面的<code>typeof</code>死在半路，无法打探到<strong>引用类型变量</strong>和<code>null</code>的真实情报，但是我们得出了另一个情报：<strong>他们都是<code>obejct</code></strong>。那么我们就完全可以利用<code>Object</code>原型上的<code>toString()</code>方法来判断</p>\n<h2 id=\"判断结果比较表\"><a href=\"#判断结果比较表\" class=\"headerlink\" title=\"判断结果比较表\"></a>判断结果比较表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">isNaN(para)</th>\n<th style=\"text-align:center\">!para</th>\n<th style=\"text-align:center\">typeof para</th>\n<th style=\"text-align:center\">toString(para)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>Null</strong></td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Null]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Udefined</strong></td>\n<td style=\"text-align:center\">udefined</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">udefined</td>\n<td style=\"text-align:center\">[obejct Udefined]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Boolean</strong></td>\n<td style=\"text-align:center\">true/false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false/true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">[obejct Boolean]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Number</strong></td>\n<td style=\"text-align:center\">NaN</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">[obejct  Number]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘1’</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘a’</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘’</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>String</strong></td>\n<td style=\"text-align:center\">‘ ‘(中间包含空格)</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">[obejct String]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Array</strong></td>\n<td style=\"text-align:center\">[]/[4]</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Array]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Object</strong></td>\n<td style=\"text-align:center\">{}/{n:4}</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Object]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Function</strong></td>\n<td style=\"text-align:center\">function(){}</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">obejct</td>\n<td style=\"text-align:center\">[obejct Function]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结方法\"><a href=\"#总结方法\" class=\"headerlink\" title=\"总结方法\"></a>总结方法</h2><p>根据上面的表格对比，我整理了一些常见的方法。并且再比较结果精准的情况下尽可能的简化比较过程.</p>\n<h4 id=\"判断数字-非严格\"><a href=\"#判断数字-非严格\" class=\"headerlink\" title=\"判断数字(非严格)\"></a>判断数字(非严格)</h4><p>字符串’<code>1</code>‘会被识别成<code>number</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(para);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数字-严格\"><a href=\"#判断数字-严格\" class=\"headerlink\" title=\"判断数字(严格)\"></a>判断数字(严格)</h4><p>在必要的情况下使用：此方法会把字符串’<code>1</code>‘识别成<code>string</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictNumber</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(para) &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'number'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断字符串（非严格）\"><a href=\"#判断字符串（非严格）\" class=\"headerlink\" title=\"判断字符串（非严格）\"></a>判断字符串（非严格）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断字符串（严格）\"><a href=\"#判断字符串（严格）\" class=\"headerlink\" title=\"判断字符串（严格）\"></a>判断字符串（严格）</h4><p>在必要的情况下使用：此种方法会把字符串’<code>1</code>‘识别成<code>number</code>类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictString</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isNaN</span>(para) &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断一般数据类型-即非引用类型\"><a href=\"#判断一般数据类型-即非引用类型\" class=\"headerlink\" title=\"判断一般数据类型(即非引用类型)\"></a>判断一般数据类型(即非引用类型)</h4><p>注意：使用typeof判断<code>null</code>结果为<code>object</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBasicType</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para !== <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为null-不能识别’’\"><a href=\"#判断是否为null-不能识别’’\" class=\"headerlink\" title=\"判断是否为null(不能识别’’)\"></a>判断是否为null(不能识别’’)</h4><p>此方法只能识别<code>null</code>，如果要包含’’，请结合方法<code>isStringNull()</code>一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNull</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'object'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为空字符串-不包含空格\"><a href=\"#判断是否为空字符串-不包含空格\" class=\"headerlink\" title=\"判断是否为空字符串(不包含空格)\"></a>判断是否为空字符串(不包含空格)</h4><p>此方法只能识别<code>&#39;&#39;</code>，如果要包含<code>null</code>，请结合方法<code>isNull()</code>一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStringtNull</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para &amp;&amp; <span class=\"keyword\">typeof</span> para === <span class=\"string\">'string'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为undefined\"><a href=\"#判断是否为undefined\" class=\"headerlink\" title=\"判断是否为undefined\"></a>判断是否为<code>undefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndefined</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'undefined'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断是否为false\"><a href=\"#判断是否为false\" class=\"headerlink\" title=\"判断是否为false\"></a>判断是否为<code>false</code></h4><p>当为<code>null</code>,<code>undefined</code>,<code>&#39;&#39;</code>,<code>0</code>,<code>-0</code>,<code>false</code>,<code>NaN</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFalse</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !para;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（非严格1–所有的obejct对象）\"><a href=\"#判断对象（非严格1–所有的obejct对象）\" class=\"headerlink\" title=\"判断对象（非严格1–所有的obejct对象）\"></a>判断对象（非严格1–所有的obejct对象）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAllObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> _v === <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（非严格2–除去null的所有object对象）-判断引用类型\"><a href=\"#判断对象（非严格2–除去null的所有object对象）-判断引用类型\" class=\"headerlink\" title=\"判断对象（非严格2–除去null的所有object对象） 判断引用类型\"></a>判断对象（非严格2–除去null的所有object对象）<--> 判断引用类型</--></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!v &amp;&amp; <span class=\"keyword\">typeof</span> _v === <span class=\"string\">'obejct'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象（严格–只识别-JSON对象）\"><a href=\"#判断对象（严格–只识别-JSON对象）\" class=\"headerlink\" title=\"判断对象（严格–只识别{}JSON对象）\"></a>判断对象（严格–只识别{}JSON对象）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isStrictObject</span>(<span class=\"params\">_v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(_v) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断数组\"><a href=\"#判断数组\" class=\"headerlink\" title=\"判断数组\"></a>判断数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(para) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断对象\"><a href=\"#判断对象\" class=\"headerlink\" title=\"判断对象\"></a>判断对象</h4><p>这里特指{}类<code>JSON</code>对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(para) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断可执行函数\"><a href=\"#判断可执行函数\" class=\"headerlink\" title=\"判断可执行函数\"></a>判断可执行函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">para</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> para === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当我们需要判断其他类型时，完全可以参照上面的表来写出自己的方法哦。<br>当然现在前端各种流行库不断推陈出新，我们完全可以直接使用别人封装好的库来实现这些功能，比如<code>underscore.js</code>、<code>lodash.js</code>等，但是编码的乐趣不就是在于自己解决最本质的问题么。所以即使有这么多的流行库大行其道，也不妨碍我们了解这些知识的初心，说不定哪天你自己也写出一个很火的库呢~<br>当然随着ES6标准的不断被各大浏览器厂商支持，ES6的普及度越来越广，这些方法都会被内置到原生<code>javascript</code>内部吧(有些方法已经加进去了~)。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjny0sweq00062kv7n5y8vmtm","category_id":"cjny0swes00082kv7vcexzcme","_id":"cjny0swf6000i2kv7p5089bd8"},{"post_id":"cjny0swer00072kv7jag4v3gk","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swf9000n2kv70r71148v"},{"post_id":"cjny0swf7000l2kv7rlwkz1e7","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swfe000s2kv7kmvqzylk"},{"post_id":"cjny0swet000a2kv7qhyy9nk8","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swfl000w2kv72k6xhw21"},{"post_id":"cjny0swev000b2kv7o2yvpz3r","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swfn000y2kv7pawwmp9v"},{"post_id":"cjny0swfj000v2kv75u00d435","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swfr00142kv72j38817t"},{"post_id":"cjny0swf8000m2kv71xzjjozp","category_id":"cjny0swfe000t2kv7csj3ldqk","_id":"cjny0swfs00172kv75p8erbks"},{"post_id":"cjny0swfo00102kv72cb09s23","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swfv001b2kv7zg0xv4er"},{"post_id":"cjny0swfq00132kv79fk4w31e","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swg0001e2kv7tm9k8ms8"},{"post_id":"cjny0swfc000r2kv7rtqxrhe2","category_id":"cjny0swfo000z2kv7fl452agn","_id":"cjny0swg3001i2kv7lry66xs4"},{"post_id":"cjny0swg4001k2kv75ofb0s25","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swgc001v2kv7z8e4szio"},{"post_id":"cjny0swg7001n2kv716ja8y40","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swge001x2kv7zqmnjham"},{"post_id":"cjny0swgb001u2kv7rn1ri12d","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swgk00242kv7uogxpetd"},{"post_id":"cjny0swgc001w2kv7yk87m43f","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swgo002b2kv7a20uq9i8"},{"post_id":"cjny0swgh001z2kv731amx2tr","category_id":"cjny0swex000d2kv7i9rnz9kn","_id":"cjny0swgp002d2kv7i0zj8km1"},{"post_id":"cjny0swi0003r2kv7yjd1oe94","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swie004b2kv74euy7040"},{"post_id":"cjny0swi2003v2kv7fcu7ix4d","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swig004f2kv7w0yb1x0g"},{"post_id":"cjny0swi3003y2kv7kd15t344","category_id":"cjny0swf6000j2kv791m30xcf","_id":"cjny0swij004k2kv7tovllx3b"},{"post_id":"cjny0swif004e2kv7sg2ijizi","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj200522kv7y82uvvny"},{"post_id":"cjny0swi500422kv7y65qmrka","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swj300582kv7gwp1vym2"},{"post_id":"cjny0swij004j2kv7jr2ulafc","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swjb005j2kv7f09710uc"},{"post_id":"cjny0swi600442kv767sobt5y","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swje005o2kv7tx77m4le"},{"post_id":"cjny0swim004n2kv7viayvhmd","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swjf005s2kv7m7e63ed5"},{"post_id":"cjny0swie004a2kv7wmoqoodj","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjny0swjg005v2kv7qecqpn10"},{"post_id":"cjnydngf10000z8v7hywd273x","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngfy000bz8v7r5cc1011"},{"post_id":"cjnydngf10000z8v7hywd273x","category_id":"cjnydngfx0009z8v7i9d42842","_id":"cjnydngfz000cz8v729xqo9ni"},{"post_id":"cjnydngfb0001z8v7ldo3gtvr","category_id":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngg3000ez8v7g510iunq"},{"post_id":"cjnydngfb0001z8v7ldo3gtvr","category_id":"cjnydngfx000az8v78rcuwbbq","_id":"cjnydngg5000fz8v7m7uouu4r"},{"post_id":"cjnydngfb0001z8v7ldo3gtvr","category_id":"cjnydngfz000dz8v7zyr1v4uv","_id":"cjnydngg6000gz8v7v8dddice"},{"post_id":"cjnydngrd000iz8v7v4jsj1rz","category_id":"cjny0swif004d2kv7ofirepwg","_id":"cjnydngte000oz8v7x8jzre6t"},{"post_id":"cjnydngr0000hz8v7kj4ub61v","category_id":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydngtr000rz8v701xn81h1"},{"post_id":"cjnydngr0000hz8v7kj4ub61v","category_id":"cjnydngsw000kz8v7cvq31hlu","_id":"cjnydngtt000tz8v7u69hx442"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngu7000wz8v78fu7q5v6"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","category_id":"cjnydngtc000nz8v74dw4n1er","_id":"cjnydngua000zz8v78bbeh8hf"},{"post_id":"cjny0swfs00162kv7xtcniogg","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnguk0012z8v7zp56ukgt"},{"post_id":"cjny0swfs00162kv7xtcniogg","category_id":"cjnydngtc000nz8v74dw4n1er","_id":"cjnydngun0014z8v78d3jvtjd"},{"post_id":"cjny0swgq002f2kv7ahnbe7h3","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngur0017z8v71jqkzx8u"},{"post_id":"cjny0swgq002f2kv7ahnbe7h3","category_id":"cjnydngfx0009z8v7i9d42842","_id":"cjnydngv1001bz8v7zjukjdwn"},{"post_id":"cjny0swh1002p2kv7xrm2gjtd","category_id":"cjnydngtv000vz8v7lv6uhb7q","_id":"cjnydngv6001cz8v7x6yxmflf"},{"post_id":"cjny0swg2001h2kv7jr25f3uh","category_id":"cjnydngtv000vz8v7lv6uhb7q","_id":"cjnydngve001ez8v71864bx0r"},{"post_id":"cjny0swh5002v2kv7d76pm5ki","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngw7001hz8v7ncj5ey57"},{"post_id":"cjny0swh5002v2kv7d76pm5ki","category_id":"cjnydngtc000nz8v74dw4n1er","_id":"cjnydngwn001kz8v7ldnci4g0"},{"post_id":"cjny0swgl00262kv7x02g8oil","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngwy001lz8v7mab98lgq"},{"post_id":"cjny0swgl00262kv7x02g8oil","category_id":"cjnydngud0011z8v7a6e7l8n7","_id":"cjnydngx3001oz8v78e0au1e6"},{"post_id":"cjny0swgs002j2kv7p3f7ah89","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngxc001pz8v7xvpiotp7"},{"post_id":"cjny0swgs002j2kv7p3f7ah89","category_id":"cjnydngfx0009z8v7i9d42842","_id":"cjnydngxg001sz8v7ivonlgam"},{"post_id":"cjny0swgz002m2kv7hxl1tznu","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngxp001wz8v7kahjfla7"},{"post_id":"cjny0swgz002m2kv7hxl1tznu","category_id":"cjnydngup0016z8v7eu4bgkxy","_id":"cjnydngyf001yz8v7r9b2o2ud"},{"post_id":"cjny0swgn002a2kv7ii66ky6w","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydngza0021z8v7hy402w7i"},{"post_id":"cjny0swgn002a2kv7ii66ky6w","category_id":"cjnydngud0011z8v7a6e7l8n7","_id":"cjnydnh0m0024z8v702hmx244"},{"post_id":"cjny0swgo002c2kv7v624lxyd","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh0p0026z8v70jtyl144"},{"post_id":"cjny0swgo002c2kv7v624lxyd","category_id":"cjnydngud0011z8v7a6e7l8n7","_id":"cjnydnh0q0027z8v75obeibz4"},{"post_id":"cjny0swh7002x2kv7bc9hr93h","category_id":"cjnydngxg001rz8v766ks4kg6","_id":"cjnydnh0v002bz8v7tsdfgq35"},{"post_id":"cjnydngtl000qz8v7gy92qho2","category_id":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydnh15002ez8v7nhkh322r"},{"post_id":"cjnydngtl000qz8v7gy92qho2","category_id":"cjnydngv0001az8v7sr0j1l3l","_id":"cjnydnh16002gz8v7jy1bc8h2"},{"post_id":"cjnydngtl000qz8v7gy92qho2","category_id":"cjnydngxj001uz8v746gmle5y","_id":"cjnydnh16002hz8v7mk3z14rd"},{"post_id":"cjny0swh900312kv7n22m6024","category_id":"cjnydngxg001rz8v766ks4kg6","_id":"cjnydnh17002jz8v71cy347pd"},{"post_id":"cjny0swhl003b2kv73jdvpr2k","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh19002kz8v7w20jmla7"},{"post_id":"cjny0swhl003b2kv73jdvpr2k","category_id":"cjnydnh0o0025z8v7tdiejlyi","_id":"cjnydnh1b002lz8v7op3vkfvs"},{"post_id":"cjny0swh3002r2kv75ylgwyab","category_id":"cjnydngfv0006z8v7qiey8xt0","_id":"cjnydnh1c002mz8v7nghv86rx"},{"post_id":"cjny0swh3002r2kv75ylgwyab","category_id":"cjnydngw8001iz8v7x9dfhn5s","_id":"cjnydnh1d002nz8v7rxlk3i2g"},{"post_id":"cjny0swh3002r2kv75ylgwyab","category_id":"cjnydnh0s0029z8v7vfuq5poa","_id":"cjnydnh1e002oz8v7vc3gh2r8"},{"post_id":"cjny0swhj00382kv7t8gclyyi","category_id":"cjnydngx3001nz8v74blhuigr","_id":"cjnydnh1i002pz8v7ulvvabw9"},{"post_id":"cjny0swhj00382kv7t8gclyyi","category_id":"cjnydnh0u002az8v7ydqldcjy","_id":"cjnydnh1j002qz8v73cosgudp"},{"post_id":"cjny0swhg00332kv7vuyatdwy","category_id":"cjnydngx3001nz8v74blhuigr","_id":"cjnydnh1k002rz8v7zh4kaej1"},{"post_id":"cjny0swhg00332kv7vuyatdwy","category_id":"cjnydnh0u002az8v7ydqldcjy","_id":"cjnydnh1k002sz8v76xt13hy3"},{"post_id":"cjny0swhp003g2kv7ku4z9yjv","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh1k002tz8v7pc9uvu0n"},{"post_id":"cjny0swhp003g2kv7ku4z9yjv","category_id":"cjnydnh0r0028z8v71qtkw0n5","_id":"cjnydnh1l002uz8v779ghw14m"},{"post_id":"cjny0swhp003g2kv7ku4z9yjv","category_id":"cjnydnh15002fz8v7ma0o9oef","_id":"cjnydnh1l002vz8v7rqxcahft"},{"post_id":"cjny0swht003k2kv7nypsbwxa","category_id":"cjnydngff0002z8v7kpv23o6s","_id":"cjnydnh1l002wz8v7z3rz25us"},{"post_id":"cjny0swht003k2kv7nypsbwxa","category_id":"cjnydnh0r0028z8v71qtkw0n5","_id":"cjnydnh1l002xz8v7fttsnd04"},{"post_id":"cjny0swht003k2kv7nypsbwxa","category_id":"cjnydnh15002fz8v7ma0o9oef","_id":"cjnydnh1m002yz8v7g5ea66q1"}],"PostTag":[{"post_id":"cjny0sweq00062kv7n5y8vmtm","tag_id":"cjny0swet00092kv748u32zs3","_id":"cjny0swf2000f2kv7vwlisiio"},{"post_id":"cjny0swer00072kv7jag4v3gk","tag_id":"cjny0swey000e2kv78jtq0ork","_id":"cjny0swfq00122kv70ah8fbpw"},{"post_id":"cjny0swer00072kv7jag4v3gk","tag_id":"cjny0swf7000k2kv727qmr2lx","_id":"cjny0swfr00152kv7l0ank3h3"},{"post_id":"cjny0swer00072kv7jag4v3gk","tag_id":"cjny0swfa000p2kv7yok8e9hf","_id":"cjny0swft00192kv7m1l4208b"},{"post_id":"cjny0swer00072kv7jag4v3gk","tag_id":"cjny0swff000u2kv7e055e6ps","_id":"cjny0swfv001c2kv781cv8u4f"},{"post_id":"cjny0swet000a2kv7qhyy9nk8","tag_id":"cjny0swfp00112kv7br5m7ees","_id":"cjny0swg2001g2kv708a26obm"},{"post_id":"cjny0swev000b2kv7o2yvpz3r","tag_id":"cjny0swfp00112kv7br5m7ees","_id":"cjny0swg8001p2kv76q3syyez"},{"post_id":"cjny0swev000b2kv7o2yvpz3r","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjny0swga001s2kv7yosmp1if"},{"post_id":"cjny0swf7000l2kv7rlwkz1e7","tag_id":"cjny0swg6001m2kv70v2gwamz","_id":"cjny0swgj00222kv790dn8zo2"},{"post_id":"cjny0swf7000l2kv7rlwkz1e7","tag_id":"cjny0swga001t2kv70bfjvm68","_id":"cjny0swgl00252kv7c03x7l8c"},{"post_id":"cjny0swf8000m2kv71xzjjozp","tag_id":"cjny0swg6001m2kv70v2gwamz","_id":"cjny0swgr002i2kv7699pt9re"},{"post_id":"cjny0swf8000m2kv71xzjjozp","tag_id":"cjny0swgm00282kv779s3fwdc","_id":"cjny0swgv002k2kv7xwska1pc"},{"post_id":"cjny0swfc000r2kv7rtqxrhe2","tag_id":"cjny0swgq002e2kv7av8a4ekz","_id":"cjny0swh5002u2kv7f4vgeuzp"},{"post_id":"cjny0swfc000r2kv7rtqxrhe2","tag_id":"cjny0swgy002l2kv76qbe2civ","_id":"cjny0swh6002w2kv7tuhbcx6y"},{"post_id":"cjny0swfj000v2kv75u00d435","tag_id":"cjny0swh2002q2kv7z6xfmxkg","_id":"cjny0swhi00372kv7s89jw480"},{"post_id":"cjny0swfj000v2kv75u00d435","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjny0swhl003a2kv7ztvgujyl"},{"post_id":"cjny0swfo00102kv72cb09s23","tag_id":"cjny0swhh00352kv7lev2h9n9","_id":"cjny0swhw003m2kv79pdn8km0"},{"post_id":"cjny0swfo00102kv72cb09s23","tag_id":"cjny0swhn003c2kv7yy8uvgbo","_id":"cjny0swhy003p2kv77uyj2lk1"},{"post_id":"cjny0swfq00132kv79fk4w31e","tag_id":"cjny0swhq003i2kv7hn0lbppr","_id":"cjny0swi1003u2kv77ac9ocun"},{"post_id":"cjny0swi0003r2kv7yjd1oe94","tag_id":"cjny0swfp00112kv7br5m7ees","_id":"cjny0swi3003x2kv7twipgq97"},{"post_id":"cjny0swfs00162kv7xtcniogg","tag_id":"cjny0swhz003q2kv74vd30pjm","_id":"cjny0swim004m2kv7400dobif"},{"post_id":"cjny0swfs00162kv7xtcniogg","tag_id":"cjny0swi400402kv7xqk60e9v","_id":"cjny0swio004p2kv7tx9olg9v"},{"post_id":"cjny0swfs00162kv7xtcniogg","tag_id":"cjny0swia00462kv775t0ue0u","_id":"cjny0swiy004t2kv7c92xb5yf"},{"post_id":"cjny0swfs00162kv7xtcniogg","tag_id":"cjny0swif004c2kv777o5p7p8","_id":"cjny0swiy004u2kv74rlnq1sb"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","tag_id":"cjny0swhz003q2kv74vd30pjm","_id":"cjny0swj100512kv78813qkas"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","tag_id":"cjny0swi400402kv7xqk60e9v","_id":"cjny0swj200532kv71g9xntox"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","tag_id":"cjny0swia00462kv775t0ue0u","_id":"cjny0swj300562kv7hyke73ij"},{"post_id":"cjny0swfu001a2kv7qukpbjqa","tag_id":"cjny0swif004c2kv777o5p7p8","_id":"cjny0swj400592kv7csce63cn"},{"post_id":"cjny0swg2001h2kv7jr25f3uh","tag_id":"cjny0swj4005a2kv7gytw036a","_id":"cjny0swjc005m2kv70ppb3hbo"},{"post_id":"cjny0swg2001h2kv7jr25f3uh","tag_id":"cjny0swja005g2kv7iggqw1qh","_id":"cjny0swje005p2kv7a0m3njqu"},{"post_id":"cjny0swg4001k2kv75ofb0s25","tag_id":"cjny0swjc005k2kv77ybm8x91","_id":"cjny0swjh005y2kv7r88mf9lh"},{"post_id":"cjny0swg4001k2kv75ofb0s25","tag_id":"cjny0swje005q2kv7ahkfzw2n","_id":"cjny0swjh005z2kv7wpcoi9ak"},{"post_id":"cjny0swg4001k2kv75ofb0s25","tag_id":"cjny0swjf005t2kv73oek79js","_id":"cjny0swjh00612kv73gg4sxes"},{"post_id":"cjny0swg7001n2kv716ja8y40","tag_id":"cjny0swjg005w2kv7rlhf24i6","_id":"cjny0swji00622kv7nzcr03m6"},{"post_id":"cjny0swgb001u2kv7rn1ri12d","tag_id":"cjny0swji00632kv7nrb9hxa7","_id":"cjny0swjj00672kv7apcg9a0w"},{"post_id":"cjny0swgb001u2kv7rn1ri12d","tag_id":"cjny0swji00652kv79il8f5rz","_id":"cjny0swjj00682kv7j22v1yxe"},{"post_id":"cjny0swgc001w2kv7yk87m43f","tag_id":"cjny0swjj00662kv7xyx23ngv","_id":"cjny0swjk006b2kv7jo9wjxbr"},{"post_id":"cjny0swgc001w2kv7yk87m43f","tag_id":"cjny0swjj00692kv7ngdg5lxy","_id":"cjny0swjk006c2kv7z3ubl1y9"},{"post_id":"cjny0swgh001z2kv731amx2tr","tag_id":"cjny0swjk006a2kv7k1hxslwp","_id":"cjny0swjl006e2kv785ysron4"},{"post_id":"cjny0swgl00262kv7x02g8oil","tag_id":"cjny0swif004c2kv777o5p7p8","_id":"cjny0swjr006k2kv7jb52f3yz"},{"post_id":"cjny0swgn002a2kv7ii66ky6w","tag_id":"cjny0swif004c2kv777o5p7p8","_id":"cjny0swjt006m2kv7t3tikw5v"},{"post_id":"cjny0swgo002c2kv7v624lxyd","tag_id":"cjny0swif004c2kv777o5p7p8","_id":"cjny0swjt006o2kv7i85i9111"},{"post_id":"cjny0swh1002p2kv7xrm2gjtd","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjny0swjw006w2kv7kvf3wglv"},{"post_id":"cjny0swh1002p2kv7xrm2gjtd","tag_id":"cjny0swjv006t2kv7hgoh5jeq","_id":"cjny0swjw006x2kv7lrsk7lm0"},{"post_id":"cjny0swh5002v2kv7d76pm5ki","tag_id":"cjny0swjw006y2kv71xn9ynj2","_id":"cjny0swjy00732kv7s0cpfaew"},{"post_id":"cjny0swh5002v2kv7d76pm5ki","tag_id":"cjny0swjx00702kv77cqp3mnw","_id":"cjny0swjy00742kv7x5roff7n"},{"post_id":"cjny0swh5002v2kv7d76pm5ki","tag_id":"cjny0swjx00712kv7fxxc93oq","_id":"cjny0swjz00762kv7xhzekyi7"},{"post_id":"cjny0swh7002x2kv7bc9hr93h","tag_id":"cjny0swjy00722kv7om0ingnx","_id":"cjny0swjz00772kv7c02837fg"},{"post_id":"cjny0swh900312kv7n22m6024","tag_id":"cjny0swjy00722kv7om0ingnx","_id":"cjny0swk000792kv76vbzh6tk"},{"post_id":"cjny0swhg00332kv7vuyatdwy","tag_id":"cjny0swjz00782kv702w5ys1b","_id":"cjny0swk0007b2kv73c4celsf"},{"post_id":"cjny0swhg00332kv7vuyatdwy","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjny0swk1007c2kv7at9wll7o"},{"post_id":"cjny0swhl003b2kv73jdvpr2k","tag_id":"cjny0swk1007d2kv7pg5391f6","_id":"cjny0swk2007h2kv7bv9ovtyv"},{"post_id":"cjny0swhl003b2kv73jdvpr2k","tag_id":"cjny0swk2007f2kv7f8iyuk7w","_id":"cjny0swk3007i2kv7urc0zf5d"},{"post_id":"cjny0swi2003v2kv7fcu7ix4d","tag_id":"cjny0swfp00112kv7br5m7ees","_id":"cjny0swkd007t2kv7nn3rbotc"},{"post_id":"cjny0swi2003v2kv7fcu7ix4d","tag_id":"cjny0swkc007q2kv7q6ranlla","_id":"cjny0swkd007u2kv7jb7p5zwc"},{"post_id":"cjny0swi3003y2kv7kd15t344","tag_id":"cjny0swfp00112kv7br5m7ees","_id":"cjny0swke007w2kv7ztb37029"},{"post_id":"cjny0swi500422kv7y65qmrka","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjny0swkf007z2kv744yctrnn"},{"post_id":"cjny0swi600442kv767sobt5y","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjny0swkg00812kv7nrgaumhu"},{"post_id":"cjny0swif004e2kv7sg2ijizi","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjny0swki00852kv7cwjro7yt"},{"post_id":"cjny0swij004j2kv7jr2ulafc","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjny0swkk00892kv7co773x9x"},{"post_id":"cjny0swim004n2kv7viayvhmd","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjny0swkl008a2kv71rj7xeag"},{"post_id":"cjnydngfb0001z8v7ldo3gtvr","tag_id":"cjny0swj0004z2kv7e2m0k80a","_id":"cjnydngfu0004z8v7t07af3og"},{"post_id":"cjnydngfb0001z8v7ldo3gtvr","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjnydngfv0005z8v7ynoewejn"},{"post_id":"cjnydngf10000z8v7hywd273x","tag_id":"cjnydngfs0003z8v7knyqw6no","_id":"cjnydngfw0007z8v7vfmfsrbx"},{"post_id":"cjnydngf10000z8v7hywd273x","tag_id":"cjny0swet00092kv748u32zs3","_id":"cjnydngfw0008z8v78xm0h2zq"},{"post_id":"cjnydngr0000hz8v7kj4ub61v","tag_id":"cjny0swk2007g2kv7eqldlh6a","_id":"cjnydngsd000jz8v7bjg70vbo"},{"post_id":"cjnydngr0000hz8v7kj4ub61v","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjnydngsx000lz8v70jfufhtd"},{"post_id":"cjnydngrd000iz8v7v4jsj1rz","tag_id":"cjny0swkd007v2kv7ak6b952s","_id":"cjnydngta000mz8v7irkqi055"},{"post_id":"cjnydngtl000qz8v7gy92qho2","tag_id":"cjny0swjl006d2kv7uh3egnu4","_id":"cjnydngtu000uz8v7ii9fklxl"},{"post_id":"cjnydngtl000qz8v7gy92qho2","tag_id":"cjny0swjl006f2kv7wam35d0p","_id":"cjnydngu8000xz8v7nmrwl3x9"},{"post_id":"cjnydngtl000qz8v7gy92qho2","tag_id":"cjny0swkc007q2kv7q6ranlla","_id":"cjnydngub0010z8v7wp5qvwfu"},{"post_id":"cjny0swgz002m2kv7hxl1tznu","tag_id":"cjnydngtr000sz8v7qwhju62f","_id":"cjnydngul0013z8v7tjlur331"},{"post_id":"cjny0swgq002f2kv7ahnbe7h3","tag_id":"cjnydngu9000yz8v7kvu08vz7","_id":"cjnydnguo0015z8v77mwi9zm5"},{"post_id":"cjny0swgs002j2kv7p3f7ah89","tag_id":"cjnydngu9000yz8v7kvu08vz7","_id":"cjnydnguy0019z8v77muzg0u8"},{"post_id":"cjny0swhj00382kv7t8gclyyi","tag_id":"cjny0swjz00782kv702w5ys1b","_id":"cjnydngvb001dz8v74ou9zmo6"},{"post_id":"cjny0swhj00382kv7t8gclyyi","tag_id":"cjny0swg1001f2kv7cnpbmbg0","_id":"cjnydngvm001gz8v72bm8o7jj"},{"post_id":"cjny0swh3002r2kv75ylgwyab","tag_id":"cjnydngur0018z8v7iboavh89","_id":"cjnydngwm001jz8v76gllc1sb"},{"post_id":"cjny0swhp003g2kv7ku4z9yjv","tag_id":"cjnydngx1001mz8v7uavfpubd","_id":"cjnydngxg001tz8v7ttnmwoi4"},{"post_id":"cjny0swi3003y2kv7kd15t344","tag_id":"cjnydngxf001qz8v7az71egrz","_id":"cjnydngxn001vz8v73yc6t543"},{"post_id":"cjny0swht003k2kv7nypsbwxa","tag_id":"cjnydngx1001mz8v7uavfpubd","_id":"cjnydngyx0020z8v7n2rcri85"},{"post_id":"cjny0swie004a2kv7wmoqoodj","tag_id":"cjnydngxu001xz8v71hefzyxz","_id":"cjnydngzb0022z8v7jmxi02z8"}],"Tag":[{"name":"hexo","_id":"cjny0swet00092kv748u32zs3"},{"name":"转义","_id":"cjny0swey000e2kv78jtq0ork"},{"name":"反转义","_id":"cjny0swf7000k2kv727qmr2lx"},{"name":"转码","_id":"cjny0swfa000p2kv7yok8e9hf"},{"name":"解码","_id":"cjny0swff000u2kv7e055e6ps"},{"name":"vue","_id":"cjny0swfp00112kv7br5m7ees"},{"name":"javascript","_id":"cjny0swg1001f2kv7cnpbmbg0"},{"name":"Javascript","_id":"cjny0swg6001m2kv70v2gwamz"},{"name":"DOM","_id":"cjny0swga001t2kv70bfjvm68"},{"name":"number","_id":"cjny0swgm00282kv779s3fwdc"},{"name":"windows","_id":"cjny0swgq002e2kv7av8a4ekz"},{"name":"software","_id":"cjny0swgy002l2kv76qbe2civ"},{"name":"vue-router","_id":"cjny0swh2002q2kv7z6xfmxkg"},{"name":"rem","_id":"cjny0swhh00352kv7lev2h9n9"},{"name":"mobile","_id":"cjny0swhn003c2kv7yy8uvgbo"},{"name":"animation","_id":"cjny0swhq003i2kv7hn0lbppr"},{"name":"Babun","_id":"cjny0swhz003q2kv74vd30pjm"},{"name":"cmd","_id":"cjny0swi400402kv7xqk60e9v"},{"name":"shell","_id":"cjny0swia00462kv775t0ue0u"},{"name":"git","_id":"cjny0swif004c2kv777o5p7p8"},{"name":"Notification","_id":"cjny0swj0004z2kv7e2m0k80a"},{"name":"自动化测试","_id":"cjny0swj4005a2kv7gytw036a"},{"name":"前端测试","_id":"cjny0swja005g2kv7iggqw1qh"},{"name":"遍历","_id":"cjny0swjc005k2kv77ybm8x91"},{"name":"for...in","_id":"cjny0swje005q2kv7ahkfzw2n"},{"name":"for...of","_id":"cjny0swjf005t2kv73oek79js"},{"name":"url","_id":"cjny0swjg005w2kv7rlhf24i6"},{"name":"vscode-shortcut-key","_id":"cjny0swjh00602kv79a0fnq4h"},{"name":"日历","_id":"cjny0swji00632kv7nrb9hxa7"},{"name":"kalendar","_id":"cjny0swji00652kv79il8f5rz"},{"name":"Array","_id":"cjny0swjj00662kv7xyx23ngv"},{"name":"数组","_id":"cjny0swjj00692kv7ngdg5lxy"},{"name":"sinpats","_id":"cjny0swjk006a2kv7k1hxslwp"},{"name":"typeof","_id":"cjny0swjl006d2kv7uh3egnu4"},{"name":"object","_id":"cjny0swjl006f2kv7wam35d0p"},{"name":"markdown-font","_id":"cjny0swju006r2kv78s9o18zi"},{"name":"test","_id":"cjny0swjv006t2kv7hgoh5jeq"},{"name":"nodejs","_id":"cjny0swjw006v2kv7erygl4rg"},{"name":"nvm","_id":"cjny0swjw006y2kv71xn9ynj2"},{"name":"node","_id":"cjny0swjx00702kv77cqp3mnw"},{"name":"npm","_id":"cjny0swjx00712kv7fxxc93oq"},{"name":"react","_id":"cjny0swjy00722kv7om0ingnx"},{"name":"regex","_id":"cjny0swjz00782kv702w5ys1b"},{"name":"正则","_id":"cjny0swk0007a2kv70lf6kj1q"},{"name":"gulp","_id":"cjny0swk1007d2kv7pg5391f6"},{"name":"webpack","_id":"cjny0swk2007f2kv7f8iyuk7w"},{"name":"visibilitychange","_id":"cjny0swk2007g2kv7eqldlh6a"},{"name":"vscode-plug-in","_id":"cjny0swk3007j2kv7jrgr6j0j"},{"name":"datepicker","_id":"cjny0swk8007o2kv7oka4603e"},{"name":"js","_id":"cjny0swkc007q2kv7q6ranlla"},{"name":"wx小程序","_id":"cjny0swkd007v2kv7ak6b952s"},{"name":"工具","_id":"cjnydngfs0003z8v7knyqw6no"},{"name":"markdown","_id":"cjnydngtr000sz8v7qwhju62f"},{"name":"git-hexo","_id":"cjnydngu9000yz8v7kvu08vz7"},{"name":"nodejs-express","_id":"cjnydngur0018z8v7iboavh89"},{"name":"工具-vscode","_id":"cjnydngx1001mz8v7uavfpubd"},{"name":"vue-css","_id":"cjnydngxf001qz8v7az71egrz"},{"name":"wx小程序，image元素","_id":"cjnydngxu001xz8v71hefzyxz"}]}}
